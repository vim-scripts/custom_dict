/*-+未翻译部分
+-*/markup _ Structured Markup Processing Tools
+-*/+-*/xml p
+-*/+-*/+-*/dom p Document Object Model API for Python.
+-*/+-*/+-*/+-*/getDOMImplementation f 
getDOMImplementation(name=None, features=())

Return a suitable DOM implementation. The *name* is either well-known, the
module name of a DOM implementation, or ``None``. If it is not ``None``, imports
the corresponding module and returns a :class:`DOMImplementation` object if the
import succeeds.  If no name is given, and if the environment variable
:envvar:`PYTHON_DOM` is set, this variable is used to find the implementation.

If name is not given, this examines the available implementations to find one
with the required feature set.  If no implementation can be found, raise an
:exc:`ImportError`.  The features list must be a sequence of ``(feature,
version)`` pairs which are passed to the :meth:`hasFeature` method on available
:class:`DOMImplementation` objects.


+-*/+-*/+-*/+-*/registerDOMImplementation f 
registerDOMImplementation(name, factory)

Register the *factory* function with the name *name*.  The factory function
should return an object which implements the :class:`DOMImplementation`
interface.  The factory function can return the same object every time, or a new
one for each call, as appropriate for the specific implementation (e.g. if that
implementation supports some customization).



+-*/+-*/+-*/+-*/XHTML_NAMESPACE d 
+-*/+-*/+-*/+-*/XMLNS_NAMESPACE d 
+-*/+-*/+-*/+-*/EMPTY_NAMESPACE d 
+-*/+-*/+-*/+-*/XML_NAMESPACE d 
+-*/+-*/+-*/+-*/DOMException e DOM异常
+-*/+-*/+-*/+-*/+-*/InvalidModificationErr e 修改无效错误(通常指CSS)
+-*/+-*/+-*/+-*/+-*/InvalidCharacterErr e 非法字符错误
+-*/+-*/+-*/+-*/+-*/HierarchyRequestErr e 插入节点位置不恰当错误 
+-*/+-*/+-*/+-*/+-*/DomstringSizeErr e 文本太大错误
+-*/+-*/+-*/+-*/+-*/IndexSizeErr e 数组下标溢出错误
+-*/+-*/+-*/+-*/+-*/InuseAttributeErr e 属性节点已使用错误
+-*/+-*/+-*/+-*/+-*/NotSupportedErr e 不支持操作错误
+-*/+-*/+-*/+-*/+-*/SyntaxErr e 语法错误(通常指CSS)
+-*/+-*/+-*/+-*/+-*/WrongDocumentErr e 不同文档节点混用错误
+-*/+-*/+-*/+-*/+-*/NamespaceErr e 命名空间错误
+-*/+-*/+-*/+-*/+-*/NotFoundErr e 未找到节点错误
+-*/+-*/+-*/+-*/+-*/NoDataAllowedErr e 非数据节点操作错误 
+-*/+-*/+-*/+-*/+-*/InvalidAccessErr e 对象节点操作错误
+-*/+-*/+-*/+-*/+-*/InvalidStateErr e 状态错误 
+-*/+-*/+-*/+-*/+-*/NoModificationAllowedErr e 修改只读节点错误 
+-*/+-*/+-*/+-*/Comment _ 
+-*/+-*/+-*/+-*/+-*/data d 
data

The content of the comment as a string.  The attribute contains all characters
between the leading ``<!-``\ ``-`` and trailing ``-``\ ``->``, but does not
include them.



+-*/+-*/+-*/+-*/Node _ 
+-*/+-*/+-*/+-*/+-*/lastChild d 最后一个子节点(只读),没有则为None
+-*/+-*/+-*/+-*/+-*/nodeType d 
nodeType

An integer representing the node type.  Symbolic constants for the types are on
the :class:`Node` object: :const:`ELEMENT_NODE`, :const:`ATTRIBUTE_NODE`,
:const:`TEXT_NODE`, :const:`CDATA_SECTION_NODE`, :const:`ENTITY_NODE`,
:const:`PROCESSING_INSTRUCTION_NODE`, :const:`COMMENT_NODE`,
:const:`DOCUMENT_NODE`, :const:`DOCUMENT_TYPE_NODE`, :const:`NOTATION_NODE`.
This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/nodeName d 
nodeName

This has a different meaning for each node type; see the DOM specification for
details.  You can always get the information you would get here from another
property such as the :attr:`tagName` property for elements or the :attr:`name`
property for attributes. For all node types, the value of this attribute will be
either a string or ``None``.  This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/parentNode d 
parentNode

The parent of the current node, or ``None`` for the document node. The value is
always a :class:`Node` object or ``None``.  For :class:`Element` nodes, this
will be the parent element, except for the root element, in which case it will
be the :class:`Document` object. For :class:`Attr` nodes, this is always
``None``. This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/nextSibling d 
nextSibling

The node that immediately follows this one with the same parent.  See also
:attr:`previousSibling`.  If this is the last child of the parent, this
attribute will be ``None``. This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/nodeValue d 
nodeValue

This has a different meaning for each node type; see the DOM specification for
details.  The situation is similar to that with :attr:`nodeName`.  The value is
a string or ``None``.



+-*/+-*/+-*/+-*/+-*/namespaceURI d 
namespaceURI

The namespace associated with the element name.  This will be a string or
``None``.  This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/prefix d 
prefix

The part of the :attr:`tagName` preceding the colon if there is one, else the
empty string.  The value is a string, or ``None``



+-*/+-*/+-*/+-*/+-*/firstChild d 第一个子节点(只读),没有则为None
+-*/+-*/+-*/+-*/+-*/localName d 
localName

The part of the :attr:`tagName` following the colon if there is one, else the
entire :attr:`tagName`.  The value is a string.



+-*/+-*/+-*/+-*/+-*/attributes d 
attributes

A :class:`NamedNodeMap` of attribute objects.  Only elements have actual values
for this; others provide ``None`` for this attribute. This is a read-only
attribute.



+-*/+-*/+-*/+-*/+-*/childNodes d 
childNodes

A list of nodes contained within this node. This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/previousSibling d 
previousSibling

The node that immediately precedes this one with the same parent.  For
instance the element with an end-tag that comes just before the *self*
element's start-tag.  Of course, XML documents are made up of more than just
elements so the previous sibling could be text, a comment, or something else.
If this node is the first child of the parent, this attribute will be
``None``. This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/normalize m 
normalize()

Join adjacent text nodes so that all stretches of text are stored as single
:class:`Text` instances.  This simplifies processing text from a DOM tree for
many applications.



+-*/+-*/+-*/+-*/+-*/appendChild m 
appendChild(newChild)

Add a new child node to this node at the end of the list of
children, returning *newChild*. If the node was already in
in the tree, it is removed first.



+-*/+-*/+-*/+-*/+-*/hasAttributes m 
hasAttributes()

Returns true if the node has any attributes.



+-*/+-*/+-*/+-*/+-*/insertBefore m 
insertBefore(newChild, refChild)

Insert a new child node before an existing child.  It must be the case that
*refChild* is a child of this node; if not, :exc:`ValueError` is raised.
*newChild* is returned. If *refChild* is ``None``, it inserts *newChild* at the
end of the children's list.



+-*/+-*/+-*/+-*/+-*/isSameNode m 
isSameNode(other)

Returns true if *other* refers to the same node as this node. This is especially
useful for DOM implementations which use any sort of proxy architecture (because
more than one object can refer to the same node).

.. note::

   This is based on a proposed DOM Level 3 API which is still in the "working
   draft" stage, but this particular interface appears uncontroversial.  Changes
   from the W3C will not necessarily affect this method in the Python DOM interface
   (though any new W3C API for this would also be supported).



+-*/+-*/+-*/+-*/+-*/cloneNode m 
cloneNode(deep)

Clone this node.  Setting *deep* means to clone all child nodes as well.  This
returns the clone.



+-*/+-*/+-*/+-*/+-*/removeChild m 
removeChild(oldChild)

Remove a child node.  *oldChild* must be a child of this node; if not,
:exc:`ValueError` is raised.  *oldChild* is returned on success.  If *oldChild*
will not be used further, its :meth:`unlink` method should be called.



+-*/+-*/+-*/+-*/+-*/hasChildNodes m 
hasChildNodes()

Returns true if the node has any child nodes.



+-*/+-*/+-*/+-*/+-*/replaceChild m 
replaceChild(newChild, oldChild)

Replace an existing node with a new node. It must be the case that  *oldChild*
is a child of this node; if not, :exc:`ValueError` is raised.



+-*/+-*/+-*/+-*/Document _ 
+-*/+-*/+-*/+-*/+-*/documentElement d 
documentElement

The one and only root element of the document.



+-*/+-*/+-*/+-*/+-*/createAttribute m 
createAttribute(name)

Create and return an attribute node.  This method does not associate the
attribute node with any particular element.  You must use
:meth:`setAttributeNode` on the appropriate :class:`Element` object to use the
newly created attribute instance.



+-*/+-*/+-*/+-*/+-*/createComment m 
createComment(data)

Create and return a comment node containing the data passed as a parameter.  As
with the other creation methods, this one does not insert the node into the
tree.



+-*/+-*/+-*/+-*/+-*/getElementsByTagName m 
getElementsByTagName(tagName)

Search for all descendants (direct children, children's children, etc.) with a
particular element type name.



+-*/+-*/+-*/+-*/+-*/createElementNS m 
createElementNS(namespaceURI, tagName)

Create and return a new element with a namespace.  The *tagName* may have a
prefix.  The element is not inserted into the document when it is created.  You
need to explicitly insert it with one of the other methods such as
:meth:`insertBefore` or :meth:`appendChild`.



+-*/+-*/+-*/+-*/+-*/getElementsByTagNameNS m 
getElementsByTagNameNS(namespaceURI, localName)

Search for all descendants (direct children, children's children, etc.) with a
particular namespace URI and localname.  The localname is the part of the
namespace after the prefix.



+-*/+-*/+-*/+-*/+-*/createAttributeNS m 
createAttributeNS(namespaceURI, qualifiedName)

Create and return an attribute node with a namespace.  The *tagName* may have a
prefix.  This method does not associate the attribute node with any particular
element.  You must use :meth:`setAttributeNode` on the appropriate
:class:`Element` object to use the newly created attribute instance.



+-*/+-*/+-*/+-*/+-*/createElement m 
createElement(tagName)

Create and return a new element node.  The element is not inserted into the
document when it is created.  You need to explicitly insert it with one of the
other methods such as :meth:`insertBefore` or :meth:`appendChild`.



+-*/+-*/+-*/+-*/+-*/createProcessingInstruction m 
createProcessingInstruction(target, data)

Create and return a processing instruction node containing the *target* and
*data* passed as parameters.  As with the other creation methods, this one does
not insert the node into the tree.



+-*/+-*/+-*/+-*/+-*/createTextNode m 
createTextNode(data)

Create and return a text node containing the data passed as a parameter.  As
with the other creation methods, this one does not insert the node into the
tree.



+-*/+-*/+-*/+-*/NodeList _ 
+-*/+-*/+-*/+-*/+-*/length d 
length

The number of nodes in the sequence.


+-*/+-*/+-*/+-*/+-*/item m 
item(i)

Return the *i*'th item from the sequence, if there is one, or ``None``.  The
index *i* is not allowed to be less then zero or greater than or equal to the
length of the sequence.



+-*/+-*/+-*/+-*/Attr _ 
+-*/+-*/+-*/+-*/+-*/localName d 
localName

The part of the name following the colon if there is one, else the
entire name.
This is a read-only attribute.



+-*/+-*/+-*/+-*/+-*/prefix d 
prefix

The part of the name preceding the colon if there is one, else the
empty string.



+-*/+-*/+-*/+-*/+-*/name d 
name

The attribute name.
In a namespace-using document it may include a colon.



+-*/+-*/+-*/+-*/+-*/value d 
value

The text value of the attribute.  This is a synonym for the
:attr:`nodeValue` attribute.



+-*/+-*/+-*/+-*/ProcessingInstruction _ 
+-*/+-*/+-*/+-*/+-*/data d 
data

The content of the processing instruction following the first whitespace
character.



+-*/+-*/+-*/+-*/+-*/target d 
target

The content of the processing instruction up to the first whitespace character.
This is a read-only attribute.



+-*/+-*/+-*/+-*/Text _ 
+-*/+-*/+-*/+-*/+-*/data d 
data

The content of the text node as a string.


+-*/+-*/+-*/+-*/Element _ 
+-*/+-*/+-*/+-*/+-*/tagName d 
tagName

The element type name.  In a namespace-using document it may have colons in it.
The value is a string.



+-*/+-*/+-*/+-*/+-*/removeAttributeNS m 
removeAttributeNS(namespaceURI, localName)

Remove an attribute by name.  Note that it uses a localName, not a qname.  No
exception is raised if there is no matching attribute.



+-*/+-*/+-*/+-*/+-*/removeAttribute m 
removeAttribute(name)

Remove an attribute by name.  If there is no matching attribute, a
:exc:`NotFoundErr` is raised.



+-*/+-*/+-*/+-*/+-*/getAttributeNode m 
getAttributeNode(attrname)

Return the :class:`Attr` node for the attribute named by *attrname*.



+-*/+-*/+-*/+-*/+-*/getElementsByTagName m 
getElementsByTagName(tagName)

Same as equivalent method in the :class:`Document` class.



+-*/+-*/+-*/+-*/+-*/setAttributeNodeNS m 
setAttributeNodeNS(newAttr)

Add a new attribute node to the element, replacing an existing attribute if
necessary if the :attr:`namespaceURI` and :attr:`localName` attributes match.
If a replacement occurs, the old attribute node will be returned.  If *newAttr*
is already in use, :exc:`InuseAttributeErr` will be raised.



+-*/+-*/+-*/+-*/+-*/setAttribute m 
setAttribute(name, value)

Set an attribute value from a string.



+-*/+-*/+-*/+-*/+-*/getElementsByTagNameNS m 
getElementsByTagNameNS(namespaceURI, localName)

Same as equivalent method in the :class:`Document` class.



+-*/+-*/+-*/+-*/+-*/hasAttributeNS m 
hasAttributeNS(namespaceURI, localName)

Returns true if the element has an attribute named by *namespaceURI* and
*localName*.



+-*/+-*/+-*/+-*/+-*/getAttribute m 
getAttribute(name)

Return the value of the attribute named by *name* as a string. If no such
attribute exists, an empty string is returned, as if the attribute had no value.



+-*/+-*/+-*/+-*/+-*/getAttributeNodeNS m 
getAttributeNodeNS(namespaceURI, localName)

Return an attribute value as a node, given a *namespaceURI* and *localName*.



+-*/+-*/+-*/+-*/+-*/hasAttribute m 
hasAttribute(name)

Returns true if the element has an attribute named by *name*.



+-*/+-*/+-*/+-*/+-*/setAttributeNS m 
setAttributeNS(namespaceURI, qname, value)

Set an attribute value from a string, given a *namespaceURI* and a *qname*.
Note that a qname is the whole attribute name.  This is different than above.



+-*/+-*/+-*/+-*/+-*/setAttributeNode m 
setAttributeNode(newAttr)

Add a new attribute node to the element, replacing an existing attribute if
necessary if the :attr:`name` attribute matches.  If a replacement occurs, the
old attribute node will be returned.  If *newAttr* is already in use,
:exc:`InuseAttributeErr` will be raised.



+-*/+-*/+-*/+-*/+-*/getAttributeNS m 
getAttributeNS(namespaceURI, localName)

Return the value of the attribute named by *namespaceURI* and *localName* as a
string. If no such attribute exists, an empty string is returned, as if the
attribute had no value.



+-*/+-*/+-*/+-*/+-*/removeAttributeNode m 
removeAttributeNode(oldAttr)

Remove and return *oldAttr* from the attribute list, if present. If *oldAttr* is
not present, :exc:`NotFoundErr` is raised.



+-*/+-*/+-*/+-*/NamedNodeMap c 节点列表对象
+-*/+-*/+-*/+-*/+-*/length d 
+-*/+-*/+-*/+-*/+-*/item m 
item(index)

Return an attribute with a particular index.  The order you get the attributes
in is arbitrary but will be consistent for the life of a DOM.  Each item is an
attribute node.  Get its value with the :attr:`value` attribute.


+-*/+-*/+-*/+-*/DocumentType _ 
+-*/+-*/+-*/+-*/+-*/publicId d 
publicId

The public identifier for the external subset of the document type definition.
This will be a string or ``None``.



+-*/+-*/+-*/+-*/+-*/name d 
name

The name of the root element as given in the ``DOCTYPE`` declaration, if
present.



+-*/+-*/+-*/+-*/+-*/notations d 
notations

This is a :class:`NamedNodeMap` giving the definitions of notations. For
notation names defined more than once, only the first definition is provided
(others are ignored as required by the XML recommendation).  This may be
``None`` if the information is not provided by the parser, or if no notations
are defined.



+-*/+-*/+-*/+-*/+-*/entities d 
entities

This is a :class:`NamedNodeMap` giving the definitions of external entities.
For entity names defined more than once, only the first definition is provided
(others are ignored as required by the XML recommendation).  This may be
``None`` if the information is not provided by the parser, or if no entities are
defined.



+-*/+-*/+-*/+-*/+-*/internalSubset d 
internalSubset

A string giving the complete internal subset from the document. This does not
include the brackets which enclose the subset.  If the document has no internal
subset, this should be ``None``.



+-*/+-*/+-*/+-*/+-*/systemId d 
systemId

The system identifier for the external subset of the document type definition.
This will be a URI as a string, or ``None``.



+-*/+-*/+-*/+-*/DOMImplementation _ 
+-*/+-*/+-*/+-*/+-*/hasFeature m 
hasFeature(feature, version)

Return true if the feature identified by the pair of strings *feature* and
*version* is implemented.



+-*/+-*/+-*/+-*/+-*/createDocument m 
createDocument(namespaceUri, qualifiedName, doctype)

Return a new :class:`Document` object (the root of the DOM), with a child
:class:`Element` object having the given *namespaceUri* and *qualifiedName*. The
*doctype* must be a :class:`DocumentType` object created by
:meth:`createDocumentType`, or ``None``. In the Python DOM API, the first two
arguments can also be ``None`` in order to indicate that no :class:`Element`
child is to be created.



+-*/+-*/+-*/+-*/+-*/createDocumentType m 
createDocumentType(qualifiedName, publicId, systemId)

Return a new :class:`DocumentType` object that encapsulates the given
*qualifiedName*, *publicId*, and *systemId* strings, representing the
information contained in an XML document type declaration.



+-*/+-*/+-*/+-*/minidom p Lightweight Document Object Model (DOM) implementation.
+-*/+-*/+-*/+-*/+-*/parse f 
parse(filename_or_file, parser=None, bufsize=None)

Return a :class:`Document` from the given input. *filename_or_file* may be
either a file name, or a file-like object. *parser*, if given, must be a SAX2
parser object. This function will change the document handler of the parser and
activate namespace support; other parser configuration (like setting an entity
resolver) must have been done in advance.


+-*/+-*/+-*/+-*/+-*/parseString f 
parseString(string, parser=None)

Return a :class:`Document` that represents the *string*. This method creates a
:class:`StringIO` object for the string and passes that on to :func:`parse`.


+-*/+-*/+-*/+-*/+-*/Node _ 
+-*/+-*/+-*/+-*/+-*/+-*/unlink m 
unlink()

Break internal references within the DOM so that it will be garbage collected on
versions of Python without cyclic GC.  Even when cyclic GC is available, using
this can make large amounts of memory available sooner, so calling this on DOM
objects as soon as they are no longer needed is good practice.  This only needs
to be called on the :class:`Document` object, but may be called on child nodes
to discard children of that node.

You can avoid calling this method explicitly by using the :keyword:`with`
statement. The following code will automatically unlink *dom* when the
:keyword:`with` block is exited::

   with xml.dom.minidom.parse(datasource) as dom:
       ... # Work with dom.



+-*/+-*/+-*/+-*/+-*/+-*/writexml m 
writexml(writer, indent="", addindent="", newl="")

Write XML to the writer object.  The writer should have a :meth:`write` method
which matches that of the file object interface.  The *indent* parameter is the
indentation of the current node.  The *addindent* parameter is the incremental
indentation to use for subnodes of the current one.  The *newl* parameter
specifies the string to use to terminate newlines.

For the :class:`Document` node, an additional keyword argument *encoding* can
be used to specify the encoding field of the XML header.



+-*/+-*/+-*/+-*/+-*/+-*/toprettyxml m 
toprettyxml(indent="", newl="", encoding="")

Return a pretty-printed version of the document. *indent* specifies the
indentation string and defaults to a tabulator; *newl* specifies the string
emitted at the end of each line and defaults to ``\n``.

The *encoding* argument behaves like the corresponding argument of
:meth:`toxml`.



+-*/+-*/+-*/+-*/+-*/+-*/toxml m 
toxml(encoding=None)

Return a string or byte string containing the XML represented by
the DOM node.

With an explicit *encoding* [1]_ argument, the result is a byte
string in the specified encoding.  It is recommended that you
always specify an encoding; you may use any encoding you like, but
an argument of "utf-8" is the most common choice, avoiding
:exc:`UnicodeError` exceptions in case of unrepresentable text
data.

With no *encoding* argument, the result is a Unicode string, and the
XML declaration in the resulting string does not specify an
encoding. Encoding this string in an encoding other than UTF-8 is
likely incorrect, since UTF-8 is the default encoding of XML.


+-*/+-*/+-*/etree p
+-*/+-*/+-*/+-*/ElementTree p Implementation of the ElementTree API.
+-*/+-*/+-*/+-*/+-*/Comment f 
Comment(text=None)

Comment element factory.  This factory function creates a special element
that will be serialized as an XML comment by the standard serializer.  The
comment string can be either a bytestring or a Unicode string.  *text* is a
string containing the comment string.  Returns an element instance
representing a comment.



+-*/+-*/+-*/+-*/+-*/register_namespace f 
register_namespace(prefix, uri)

Registers a namespace prefix.  The registry is global, and any existing
mapping for either the given prefix or the namespace URI will be removed.
*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and
attributes in this namespace will be serialized with the given prefix, if at
all possible.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/ProcessingInstruction f 
ProcessingInstruction(target, text=None)

PI element factory.  This factory function creates a special element that
will be serialized as an XML processing instruction.  *target* is a string
containing the PI target.  *text* is a string containing the PI contents, if
given.  Returns an element instance, representing a processing instruction.



+-*/+-*/+-*/+-*/+-*/dump f 
dump(elem)

Writes an element tree or element structure to sys.stdout.  This function
should be used for debugging only.

The exact output format is implementation dependent.  In this version, it's
written as an ordinary XML file.

*elem* is an element tree or an individual element.



+-*/+-*/+-*/+-*/+-*/XMLID f 
XMLID(text, parser=None)

Parses an XML section from a string constant, and also returns a dictionary
which maps from element id:s to elements.  *text* is a string containing XML
data.  *parser* is an optional parser instance.  If not given, the standard
:class:`XMLParser` parser is used.  Returns a tuple containing an
:class:`Element` instance and a dictionary.



+-*/+-*/+-*/+-*/+-*/tostringlist f 
tostringlist(element, encoding="us-ascii", method="xml")

Generates a string representation of an XML element, including all
subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is
the output encoding (default is US-ASCII).  Use ``encoding="unicode"`` to
generate a Unicode string.  *method* is either ``"xml"``,
``"html"`` or ``"text"`` (default is ``"xml"``).  Returns a list of
(optionally) encoded strings containing the XML data.  It does not guarantee
any specific sequence, except that ``"".join(tostringlist(element)) ==
tostring(element)``.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/fromstring f 
fromstring(text)

Parses an XML section from a string constant.  Same as :func:`XML`.  *text*
is a string containing XML data.  Returns an :class:`Element` instance.



+-*/+-*/+-*/+-*/+-*/parse f 
parse(source, parser=None)

Parses an XML section into an element tree.  *source* is a filename or file
object containing XML data.  *parser* is an optional parser instance.  If
not given, the standard :class:`XMLParser` parser is used.  Returns an
:class:`ElementTree` instance.



+-*/+-*/+-*/+-*/+-*/iterparse f 
iterparse(source, events=None, parser=None)

Parses an XML section into an element tree incrementally, and reports what's
going on to the user.  *source* is a filename or :term:`file object` containing
XML data.  *events* is a list of events to report back.  If omitted, only "end"
events are reported.  *parser* is an optional parser instance.  If not
given, the standard :class:`XMLParser` parser is used.  Returns an
:term:`iterator` providing ``(event, elem)`` pairs.

.. note::

   :func:`iterparse` only guarantees that it has seen the ">"
   character of a starting tag when it emits a "start" event, so the
   attributes are defined, but the contents of the text and tail attributes
   are undefined at that point.  The same applies to the element children;
   they may or may not be present.

   If you need a fully populated element, look for "end" events instead.



+-*/+-*/+-*/+-*/+-*/SubElement f 
SubElement(parent, tag, attrib={}, **extra)

Subelement factory.  This function creates an element instance, and appends
it to an existing element.

The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is
the subelement name.  *attrib* is an optional dictionary, containing element
attributes.  *extra* contains additional attributes, given as keyword
arguments.  Returns an element instance.



+-*/+-*/+-*/+-*/+-*/XML f 
XML(text, parser=None)

Parses an XML section from a string constant.  This function can be used to
embed "XML literals" in Python code.  *text* is a string containing XML
data.  *parser* is an optional parser instance.  If not given, the standard
:class:`XMLParser` parser is used.  Returns an :class:`Element` instance.



+-*/+-*/+-*/+-*/+-*/fromstringlist f 
fromstringlist(sequence, parser=None)

Parses an XML document from a sequence of string fragments.  *sequence* is a
list or other sequence containing XML data fragments.  *parser* is an
optional parser instance.  If not given, the standard :class:`XMLParser`
parser is used.  Returns an :class:`Element` instance.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/iselement f 
iselement(element)

Checks if an object appears to be a valid element object.  *element* is an
element instance.  Returns a true value if this is an element object.



+-*/+-*/+-*/+-*/+-*/tostring f 
tostring(element, encoding="us-ascii", method="xml")

Generates a string representation of an XML element, including all
subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is
the output encoding (default is US-ASCII).  Use ``encoding="unicode"`` to
generate a Unicode string.  *method* is either ``"xml"``,
``"html"`` or ``"text"`` (default is ``"xml"``).  Returns an (optionally)
encoded string containing the XML data.



+-*/+-*/+-*/+-*/+-*/ElementTree c 
ElementTree(element=None, file=None)

ElementTree wrapper class.  This class represents an entire element
hierarchy, and adds some extra support for serialization to and from
standard XML.

*element* is the root element.  The tree is initialized with the contents
of the XML *file* if given.



+-*/+-*/+-*/+-*/+-*/+-*/write m 
write(file, encoding="us-ascii", xml_declaration=None, method="xml")

Writes the element tree to a file, as XML.  *file* is a file name, or a
:term:`file object` opened for writing.  *encoding* [1]_ is the output encoding
(default is US-ASCII).  Use ``encoding="unicode"`` to write a Unicode string.
*xml_declaration* controls if an XML declaration
should be added to the file.  Use False for never, True for always, None
for only if not US-ASCII or UTF-8 or Unicode (default is None).  *method* is
either ``"xml"``, ``"html"`` or ``"text"`` (default is ``"xml"``).
Returns an (optionally) encoded string.



+-*/+-*/+-*/+-*/+-*/+-*/getroot m 
getroot()

Returns the root element for this tree.



+-*/+-*/+-*/+-*/+-*/+-*/getiterator m 
getiterator(tag=None)

.. deprecated:: 3.2
   Use method :meth:`ElementTree.iter` instead.



+-*/+-*/+-*/+-*/+-*/+-*/iterfind m 
iterfind(match)

Finds all matching subelements, by tag name or path.  Same as
getroot().iterfind(match). Returns an iterable yielding all matching
elements in document order.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/+-*/findtext m 
findtext(match, default=None)

Finds the element text for the first toplevel element with given tag.
Same as getroot().findtext(match).  *match* may be a tag name or path.
*default* is the value to return if the element was not found.  Returns
the text content of the first matching element, or the default value no
element was found.  Note that if the element is found, but has no text
content, this method returns an empty string.



+-*/+-*/+-*/+-*/+-*/+-*/iter m 
iter(tag=None)

Creates and returns a tree iterator for the root element.  The iterator
loops over all elements in this tree, in section order.  *tag* is the tag
to look for (default is to return all elements)



+-*/+-*/+-*/+-*/+-*/+-*/find m 
find(match)

Finds the first toplevel element matching *match*.  *match* may be a tag
name or path.  Same as getroot().find(match).  Returns the first matching
element, or ``None`` if no element was found.



+-*/+-*/+-*/+-*/+-*/+-*/parse m 
parse(source, parser=None)

Loads an external XML section into this element tree.  *source* is a file
name or :term:`file object`.  *parser* is an optional parser instance.
If not given, the standard XMLParser parser is used.  Returns the section
root element.



+-*/+-*/+-*/+-*/+-*/+-*/_setroot m 
_setroot(element)

Replaces the root element for this tree.  This discards the current
contents of the tree, and replaces it with the given element.  Use with
care.  *element* is an element instance.



+-*/+-*/+-*/+-*/+-*/+-*/findall m 
findall(match)

Finds all matching subelements, by tag name or path.  Same as
getroot().findall(match).  *match* may be a tag name or path.  Returns a
list containing all matching elements, in document order.



+-*/+-*/+-*/+-*/+-*/XMLParser c 
XMLParser(html=0, target=None, encoding=None)

:class:`Element` structure builder for XML source data, based on the expat
parser.  *html* are predefined HTML entities.  This flag is not supported by
the current implementation.  *target* is the target object.  If omitted, the
builder uses an instance of the standard TreeBuilder class.  *encoding* [1]_
is optional.  If given, the value overrides the encoding specified in the
XML file.



+-*/+-*/+-*/+-*/+-*/+-*/feed m 
feed(data)

Feeds data to the parser.  *data* is encoded data.



+-*/+-*/+-*/+-*/+-*/+-*/close m 
close()

Finishes feeding data to the parser.  Returns an element structure.



+-*/+-*/+-*/+-*/+-*/+-*/doctype m 
doctype(name, pubid, system)

.. deprecated:: 3.2
   Define the :meth:`TreeBuilder.doctype` method on a custom TreeBuilder
   target.



+-*/+-*/+-*/+-*/+-*/QName c 
QName(text_or_uri, tag=None)

QName wrapper.  This can be used to wrap a QName attribute value, in order
to get proper namespace handling on output.  *text_or_uri* is a string
containing the QName value, in the form {uri}local, or, if the tag argument
is given, the URI part of a QName.  If *tag* is given, the first argument is
interpreted as an URI, and this argument is interpreted as a local name.
:class:`QName` instances are opaque.



+-*/+-*/+-*/+-*/+-*/TreeBuilder c 
TreeBuilder(element_factory=None)

Generic element structure builder.  This builder converts a sequence of
start, data, and end method calls to a well-formed element structure.  You
can use this class to build an element structure using a custom XML parser,
or a parser for some other XML-like format.  The *element_factory* is called
to create new :class:`Element` instances when given.



+-*/+-*/+-*/+-*/+-*/+-*/close m 
close()

Flushes the builder buffers, and returns the toplevel document
element.  Returns an :class:`Element` instance.



+-*/+-*/+-*/+-*/+-*/+-*/end m 
end(tag)

Closes the current element.  *tag* is the element name.  Returns the
closed element.



+-*/+-*/+-*/+-*/+-*/+-*/doctype m 
doctype(name, pubid, system)

Handles a doctype declaration.  *name* is the doctype name.  *pubid* is
the public identifier.  *system* is the system identifier.  This method
does not exist on the default :class:`TreeBuilder` class.

.. versionadded:: 3.2




+-*/+-*/+-*/+-*/+-*/+-*/data m 
data(data)

Adds text to the current element.  *data* is a string.  This should be
either a bytestring, or a Unicode string.



+-*/+-*/+-*/+-*/+-*/+-*/start m 
start(tag, attrs)

Opens a new element.  *tag* is the element name.  *attrs* is a dictionary
containing element attributes.  Returns the opened element.



+-*/+-*/+-*/+-*/+-*/Element c 
Element(tag, attrib={}, **extra)

Element class.  This class defines the Element interface, and provides a
reference implementation of this interface.

The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is
an optional dictionary, containing element attributes.  *extra* contains
additional attributes, given as keyword arguments.



+-*/+-*/+-*/+-*/+-*/+-*/text d 
text

The *text* attribute can be used to hold additional data associated with
the element.  As the name implies this attribute is usually a string but
may be any application-specific object.  If the element is created from
an XML file the attribute will contain any text found between the element
tags.



+-*/+-*/+-*/+-*/+-*/+-*/tail d 
tail

The *tail* attribute can be used to hold additional data associated with
the element.  This attribute is usually a string but may be any
application-specific object.  If the element is created from an XML file
the attribute will contain any text found after the element's end tag and
before the next tag.



+-*/+-*/+-*/+-*/+-*/+-*/tag d 
tag

A string identifying what kind of data this element represents (the
element type, in other words).



+-*/+-*/+-*/+-*/+-*/+-*/attrib d 
attrib

A dictionary containing the element's attributes.  Note that while the
*attrib* value is always a real mutable Python dictionary, an ElementTree
implementation may choose to use another internal representation, and
create the dictionary only if someone asks for it.  To take advantage of
such implementations, use the dictionary methods below whenever possible.


+-*/+-*/+-*/+-*/+-*/+-*/insert m 
insert(index, element)

Inserts a subelement at the given position in this element.



+-*/+-*/+-*/+-*/+-*/+-*/set m 
set(key, value)

Set the attribute *key* on the element to *value*.


+-*/+-*/+-*/+-*/+-*/+-*/extend m 
extend(subelements)

Appends *subelements* from a sequence object with zero or more elements.
Raises :exc:`AssertionError` if a subelement is not a valid object.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/+-*/get m 
get(key, default=None)

Gets the element attribute named *key*.

Returns the attribute value, or *default* if the attribute was not found.



+-*/+-*/+-*/+-*/+-*/+-*/keys m 
keys()

Returns the elements attribute names as a list.  The names are returned
in an arbitrary order.



+-*/+-*/+-*/+-*/+-*/+-*/items m 
items()

Returns the element attributes as a sequence of (name, value) pairs.  The
attributes are returned in an arbitrary order.



+-*/+-*/+-*/+-*/+-*/+-*/clear m 
clear()

Resets an element.  This function removes all subelements, clears all
attributes, and sets the text and tail attributes to None.



+-*/+-*/+-*/+-*/+-*/+-*/iterfind m 
iterfind(match)

Finds all matching subelements, by tag name or path.  Returns an iterable
yielding all matching elements in document order.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/+-*/findtext m 
findtext(match, default=None)

Finds text for the first subelement matching *match*.  *match* may be
a tag name or path.  Returns the text content of the first matching
element, or *default* if no element was found.  Note that if the matching
element has no text content an empty string is returned.



+-*/+-*/+-*/+-*/+-*/+-*/makeelement m 
makeelement(tag, attrib)

Creates a new element object of the same type as this element.  Do not
call this method, use the :func:`SubElement` factory function instead.



+-*/+-*/+-*/+-*/+-*/+-*/iter m 
iter(tag=None)

Creates a tree :term:`iterator` with the current element as the root.
The iterator iterates over this element and all elements below it, in
document (depth first) order.  If *tag* is not ``None`` or ``'*'``, only
elements whose tag equals *tag* are returned from the iterator.  If the
tree structure is modified during iteration, the result is undefined.



+-*/+-*/+-*/+-*/+-*/+-*/find m 
find(match)

Finds the first subelement matching *match*.  *match* may be a tag name
or path.  Returns an element instance or ``None``.



+-*/+-*/+-*/+-*/+-*/+-*/itertext m 
itertext()

Creates a text iterator.  The iterator loops over this element and all
subelements, in document order, and returns all inner text.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/+-*/getchildren m 
getchildren()

.. deprecated:: 3.2
   Use ``list(elem)`` or iteration.



+-*/+-*/+-*/+-*/+-*/+-*/remove m 
remove(subelement)

Removes *subelement* from the element.  Unlike the find\* methods this
method compares elements based on the instance identity, not on tag value
or contents.


+-*/+-*/+-*/+-*/+-*/+-*/getiterator m 
getiterator(tag=None)

.. deprecated:: 3.2
   Use method :meth:`Element.iter` instead.



+-*/+-*/+-*/+-*/+-*/+-*/findall m 
findall(match)

Finds all matching subelements, by tag name or path.  Returns a list
containing all matching elements in document order.



+-*/+-*/+-*/+-*/+-*/+-*/append m 
append(subelement)

Adds the element *subelement* to the end of this elements internal list
of subelements.



+-*/+-*/+-*/parsers p
+-*/+-*/+-*/+-*/expat p An interface to the Expat non-validating XML parser.
+-*/+-*/+-*/+-*/+-*/ParserCreate f 
ParserCreate(encoding=None, namespace_separator=None)

Creates and returns a new :class:`xmlparser` object.   *encoding*, if specified,
must be a string naming the encoding  used by the XML data.  Expat doesn't
support as many encodings as Python does, and its repertoire of encodings can't
be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.  If
*encoding* [1]_ is given it will override the implicit or explicit encoding of the
document.

Expat can optionally do XML namespace processing for you, enabled by providing a
value for *namespace_separator*.  The value must be a one-character string; a
:exc:`ValueError` will be raised if the string has an illegal length (``None``
is considered the same as omission).  When namespace processing is enabled,
element type names and attribute names that belong to a namespace will be
expanded.  The element name passed to the element handlers
:attr:`StartElementHandler` and :attr:`EndElementHandler` will be the
concatenation of the namespace URI, the namespace separator character, and the
local part of the name.  If the namespace separator is a zero byte (``chr(0)``)
then the namespace URI and the local part will be concatenated without any
separator.

For example, if *namespace_separator* is set to a space character (``' '``) and
the following document is parsed::

   <?xml version="1.0"?>
   <root xmlns    = "http://default-namespace.org/"
         xmlns:py = "http://www.python.org/ns/">
     <py:elem1 />
     <elem2 xmlns="" />
   </root>

:attr:`StartElementHandler` will receive the following strings for each
element::

   http://default-namespace.org/ root
   http://www.python.org/ns/ elem1
   elem2



+-*/+-*/+-*/+-*/+-*/ErrorString f 
ErrorString(errno)

Returns an explanatory string for a given error number *errno*.



+-*/+-*/+-*/+-*/+-*/XMLParserType d 
XMLParserType

The type of the return values from the :func:`ParserCreate` function.


+-*/+-*/+-*/+-*/+-*/error e 
error

Alias for :exc:`ExpatError`.



+-*/+-*/+-*/+-*/+-*/ExpatError e 
ExpatError

The exception raised when Expat reports an error.  See section
:ref:`expaterror-objects` for more information on interpreting Expat errors.



+-*/+-*/+-*/+-*/+-*/xmlparser _ 
+-*/+-*/+-*/+-*/+-*/+-*/CurrentColumnNumber d 
CurrentColumnNumber

Current column number in the parser input.



+-*/+-*/+-*/+-*/+-*/+-*/CurrentLineNumber d 
CurrentLineNumber

Current line number in the parser input.


+-*/+-*/+-*/+-*/+-*/+-*/CurrentByteIndex d 
CurrentByteIndex

Current byte index in the parser input.



+-*/+-*/+-*/+-*/+-*/+-*/buffer_used d 
buffer_used

If :attr:`buffer_text` is enabled, the number of bytes stored in the buffer.
These bytes represent UTF-8 encoded text.  This attribute has no meaningful
interpretation when :attr:`buffer_text` is false.



+-*/+-*/+-*/+-*/+-*/+-*/ordered_attributes d 
ordered_attributes

Setting this attribute to a non-zero integer causes the attributes to be
reported as a list rather than a dictionary.  The attributes are presented in
the order found in the document text.  For each attribute, two list entries are
presented: the attribute name and the attribute value.  (Older versions of this
module also used this format.)  By default, this attribute is false; it may be
changed at any time.



+-*/+-*/+-*/+-*/+-*/+-*/ErrorCode d 
ErrorCode

Numeric code specifying the problem.  This value can be passed to the
:func:`ErrorString` function, or compared to one of the constants defined in the
``errors`` object.



+-*/+-*/+-*/+-*/+-*/+-*/specified_attributes d 
specified_attributes

If set to a non-zero integer, the parser will report only those attributes which
were specified in the document instance and not those which were derived from
attribute declarations.  Applications which set this need to be especially
careful to use what additional information is available from the declarations as
needed to comply with the standards for the behavior of XML processors.  By
default, this attribute is false; it may be changed at any time.



+-*/+-*/+-*/+-*/+-*/+-*/buffer_text d 
buffer_text

Setting this to true causes the :class:`xmlparser` object to buffer textual
content returned by Expat to avoid multiple calls to the
:meth:`CharacterDataHandler` callback whenever possible.  This can improve
performance substantially since Expat normally breaks character data into chunks
at every line ending.  This attribute is false by default, and may be changed at
any time.



+-*/+-*/+-*/+-*/+-*/+-*/ErrorByteIndex d 
ErrorByteIndex

Byte index at which an error occurred.



+-*/+-*/+-*/+-*/+-*/+-*/buffer_size d 
buffer_size

The size of the buffer used when :attr:`buffer_text` is true.
A new buffer size can be set by assigning a new integer value
to this attribute.
When the size is changed, the buffer will be flushed.



+-*/+-*/+-*/+-*/+-*/+-*/ErrorColumnNumber d 
ErrorColumnNumber

Column number at which an error occurred.



+-*/+-*/+-*/+-*/+-*/+-*/ErrorLineNumber d 
ErrorLineNumber

Line number at which an error occurred.


+-*/+-*/+-*/+-*/+-*/+-*/UnparsedEntityDeclHandler m 
UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)

Called for unparsed (NDATA) entity declarations.  This is only present for
version 1.2 of the Expat library; for more recent versions, use
:attr:`EntityDeclHandler` instead.  (The underlying function in the Expat
library has been declared obsolete.)



+-*/+-*/+-*/+-*/+-*/+-*/StartCdataSectionHandler m 
StartCdataSectionHandler()

Called at the start of a CDATA section.  This and :attr:`EndCdataSectionHandler`
are needed to be able to identify the syntactical start and end for CDATA
sections.



+-*/+-*/+-*/+-*/+-*/+-*/EndElementHandler m 
EndElementHandler(name)

Called for the end of every element.



+-*/+-*/+-*/+-*/+-*/+-*/GetInputContext m 
GetInputContext()

Returns the input data that generated the current event as a string. The data is
in the encoding of the entity which contains the text. When called while an
event handler is not active, the return value is ``None``.



+-*/+-*/+-*/+-*/+-*/+-*/ExternalEntityParserCreate m 
ExternalEntityParserCreate(context[, encoding])

Create a "child" parser which can be used to parse an external parsed entity
referred to by content parsed by the parent parser.  The *context* parameter
should be the string passed to the :meth:`ExternalEntityRefHandler` handler
function, described below. The child parser is created with the
:attr:`ordered_attributes` and :attr:`specified_attributes` set to the values of
this parser.


+-*/+-*/+-*/+-*/+-*/+-*/UseForeignDTD m 
UseForeignDTD([flag])

Calling this with a true value for *flag* (the default) will cause Expat to call
the :attr:`ExternalEntityRefHandler` with :const:`None` for all arguments to
allow an alternate DTD to be loaded.  If the document does not contain a
document type declaration, the :attr:`ExternalEntityRefHandler` will still be
called, but the :attr:`StartDoctypeDeclHandler` and
:attr:`EndDoctypeDeclHandler` will not be called.

Passing a false value for *flag* will cancel a previous call that passed a true
value, but otherwise has no effect.

This method can only be called before the :meth:`Parse` or :meth:`ParseFile`
methods are called; calling it after either of those have been called causes
:exc:`ExpatError` to be raised with the :attr:`code` attribute set to
``errors.codes[errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING]``.


+-*/+-*/+-*/+-*/+-*/+-*/EndCdataSectionHandler m 
EndCdataSectionHandler()

Called at the end of a CDATA section.



+-*/+-*/+-*/+-*/+-*/+-*/ExternalEntityRefHandler m 
ExternalEntityRefHandler(context, base, systemId, publicId)

Called for references to external entities.  *base* is the current base, as set
by a previous call to :meth:`SetBase`.  The public and system identifiers,
*systemId* and *publicId*, are strings if given; if the public identifier is not
given, *publicId* will be ``None``.  The *context* value is opaque and should
only be used as described below.

For external entities to be parsed, this handler must be implemented. It is
responsible for creating the sub-parser using
``ExternalEntityParserCreate(context)``, initializing it with the appropriate
callbacks, and parsing the entity.  This handler should return an integer; if it
returns ``0``, the parser will raise an
:const:`XML_ERROR_EXTERNAL_ENTITY_HANDLING` error, otherwise parsing will
continue.

If this handler is not provided, external entities are reported by the
:attr:`DefaultHandler` callback, if provided.



+-*/+-*/+-*/+-*/+-*/+-*/EndNamespaceDeclHandler m 
EndNamespaceDeclHandler(prefix)

Called when the closing tag is reached for an element  that contained a
namespace declaration.  This is called once for each namespace declaration on
the element in the reverse of the order for which the
:attr:`StartNamespaceDeclHandler` was called to indicate the start of each
namespace declaration's scope.  Calls to this handler are made after the
corresponding :attr:`EndElementHandler` for the end of the element.



+-*/+-*/+-*/+-*/+-*/+-*/NotationDeclHandler m 
NotationDeclHandler(notationName, base, systemId, publicId)

Called for notation declarations.  *notationName*, *base*, and *systemId*, and
*publicId* are strings if given.  If the public identifier is omitted,
*publicId* will be ``None``.



+-*/+-*/+-*/+-*/+-*/+-*/StartDoctypeDeclHandler m 
StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)

Called when Expat begins parsing the document type declaration (``<!DOCTYPE
...``).  The *doctypeName* is provided exactly as presented.  The *systemId* and
*publicId* parameters give the system and public identifiers if specified, or
``None`` if omitted.  *has_internal_subset* will be true if the document
contains and internal document declaration subset. This requires Expat version
1.2 or newer.



+-*/+-*/+-*/+-*/+-*/+-*/GetBase m 
GetBase()

Returns a string containing the base set by a previous call to :meth:`SetBase`,
or ``None`` if  :meth:`SetBase` hasn't been called.



+-*/+-*/+-*/+-*/+-*/+-*/DefaultHandler m 
DefaultHandler(data)

Called for any characters in the XML document for which no applicable handler
has been specified.  This means characters that are part of a construct which
could be reported, but for which no handler has been supplied.



+-*/+-*/+-*/+-*/+-*/+-*/ProcessingInstructionHandler m 
ProcessingInstructionHandler(target, data)

Called for every processing instruction.



+-*/+-*/+-*/+-*/+-*/+-*/XmlDeclHandler m 
XmlDeclHandler(version, encoding, standalone)

Called when the XML declaration is parsed.  The XML declaration is the
(optional) declaration of the applicable version of the XML recommendation, the
encoding of the document text, and an optional "standalone" declaration.
*version* and *encoding* will be strings, and *standalone* will be ``1`` if the
document is declared standalone, ``0`` if it is declared not to be standalone,
or ``-1`` if the standalone clause was omitted. This is only available with
Expat version 1.95.0 or newer.



+-*/+-*/+-*/+-*/+-*/+-*/CommentHandler m 
CommentHandler(data)

Called for comments.  *data* is the text of the comment, excluding the leading
'``<!-``\ ``-``' and trailing '``-``\ ``->``'.



+-*/+-*/+-*/+-*/+-*/+-*/EntityDeclHandler m 
EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)

Called for all entity declarations.  For parameter and internal entities,
*value* will be a string giving the declared contents of the entity; this will
be ``None`` for external entities.  The *notationName* parameter will be
``None`` for parsed entities, and the name of the notation for unparsed
entities. *is_parameter_entity* will be true if the entity is a parameter entity
or false for general entities (most applications only need to be concerned with
general entities). This is only available starting with version 1.95.0 of the
Expat library.



+-*/+-*/+-*/+-*/+-*/+-*/SetBase m 
SetBase(base)

Sets the base to be used for resolving relative URIs in system identifiers in
declarations.  Resolving relative identifiers is left to the application: this
value will be passed through as the *base* argument to the
:func:`ExternalEntityRefHandler`, :func:`NotationDeclHandler`, and
:func:`UnparsedEntityDeclHandler` functions.



+-*/+-*/+-*/+-*/+-*/+-*/NotStandaloneHandler m 
NotStandaloneHandler()

Called if the XML document hasn't been declared as being a standalone document.
This happens when there is an external subset or a reference to a parameter
entity, but the XML declaration does not set standalone to ``yes`` in an XML
declaration.  If this handler returns ``0``, then the parser will raise an
:const:`XML_ERROR_NOT_STANDALONE` error.  If this handler is not set, no
exception is raised by the parser for this condition.



+-*/+-*/+-*/+-*/+-*/+-*/SetParamEntityParsing m 
SetParamEntityParsing(flag)

Control parsing of parameter entities (including the external DTD subset).
Possible *flag* values are :const:`XML_PARAM_ENTITY_PARSING_NEVER`,
:const:`XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE` and
:const:`XML_PARAM_ENTITY_PARSING_ALWAYS`.  Return true if setting the flag
was successful.


+-*/+-*/+-*/+-*/+-*/+-*/EndDoctypeDeclHandler m 
EndDoctypeDeclHandler()

Called when Expat is done parsing the document type declaration. This requires
Expat version 1.2 or newer.



+-*/+-*/+-*/+-*/+-*/+-*/StartNamespaceDeclHandler m 
StartNamespaceDeclHandler(prefix, uri)

Called when an element contains a namespace declaration.  Namespace declarations
are processed before the :attr:`StartElementHandler` is called for the element
on which declarations are placed.



+-*/+-*/+-*/+-*/+-*/+-*/Parse m 
Parse(data[, isfinal])

Parses the contents of the string *data*, calling the appropriate handler
functions to process the parsed data.  *isfinal* must be true on the final call
to this method.  *data* can be the empty string at any time.



+-*/+-*/+-*/+-*/+-*/+-*/ParseFile m 
ParseFile(file)

Parse XML data reading from the object *file*.  *file* only needs to provide
the ``read(nbytes)`` method, returning the empty string when there's no more
data.



+-*/+-*/+-*/+-*/+-*/+-*/DefaultHandlerExpand m 
DefaultHandlerExpand(data)

This is the same as the :func:`DefaultHandler`,  but doesn't inhibit expansion
of internal entities. The entity reference will not be passed to the default
handler.



+-*/+-*/+-*/+-*/+-*/+-*/AttlistDeclHandler m 
AttlistDeclHandler(elname, attname, type, default, required)

Called for each declared attribute for an element type.  If an attribute list
declaration declares three attributes, this handler is called three times, once
for each attribute.  *elname* is the name of the element to which the
declaration applies and *attname* is the name of the attribute declared.  The
attribute type is a string passed as *type*; the possible values are
``'CDATA'``, ``'ID'``, ``'IDREF'``, ... *default* gives the default value for
the attribute used when the attribute is not specified by the document instance,
or ``None`` if there is no default value (``#IMPLIED`` values).  If the
attribute is required to be given in the document instance, *required* will be
true. This requires Expat version 1.95.0 or newer.



+-*/+-*/+-*/+-*/+-*/+-*/ElementDeclHandler m 
ElementDeclHandler(name, model)

Called once for each element type declaration.  *name* is the name of the
element type, and *model* is a representation of the content model.



+-*/+-*/+-*/+-*/+-*/+-*/StartElementHandler m 
StartElementHandler(name, attributes)

Called for the start of every element.  *name* is a string containing the
element name, and *attributes* is a dictionary mapping attribute names to their
values.



+-*/+-*/+-*/+-*/+-*/+-*/CharacterDataHandler m 
CharacterDataHandler(data)

Called for character data.  This will be called for normal character data, CDATA
marked content, and ignorable whitespace.  Applications which must distinguish
these cases can use the :attr:`StartCdataSectionHandler`,
:attr:`EndCdataSectionHandler`, and :attr:`ElementDeclHandler` callbacks to
collect the required information.



+-*/+-*/+-*/+-*/+-*/ExpatError _ 
+-*/+-*/+-*/+-*/+-*/+-*/code d 
code

Expat's internal error number for the specific error.  The
:data:`errors.messages` dictionary maps these error numbers to Expat's error
messages.  For example::

   from xml.parsers.expat import ParserCreate, ExpatError, errors

   p = ParserCreate()
   try:
       p.Parse(some_xml_document)
   except ExpatError as err:
       print("Error:", errors.messages[err.code])

The :mod:`errors` module also provides error message constants and a
dictionary :data:`~errors.codes` mapping these messages back to the error
codes, see below.



+-*/+-*/+-*/+-*/+-*/+-*/lineno d 
lineno

Line number on which the error was detected.  The first line is numbered ``1``.



+-*/+-*/+-*/+-*/+-*/+-*/offset d 
offset

Character offset into the line where the error occurred.  The first column is
numbered ``0``.



+-*/+-*/+-*/+-*/+-*/errors p 
+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_SUSPENDED d 
XML_ERROR_SUSPENDED

The requested operation was made on a suspended parser, but isn't allowed.  This
includes attempts to provide additional input or to stop the parser.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_BINARY_ENTITY_REF d 
XML_ERROR_BINARY_ENTITY_REF

An entity reference referred to an entity which was declared with a notation, so
cannot be parsed.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_ASYNC_ENTITY d 
XML_ERROR_ASYNC_ENTITY



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNEXPECTED_STATE d 
XML_ERROR_UNEXPECTED_STATE



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_NO_MEMORY d 
XML_ERROR_NO_MEMORY

Expat was not able to allocate memory internally.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF d 
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF

An entity reference in an attribute value referred to an external entity instead
of an internal entity.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_DUPLICATE_ATTRIBUTE d 
XML_ERROR_DUPLICATE_ATTRIBUTE

An attribute was used more than once in a start tag.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_JUNK_AFTER_DOC_ELEMENT d 
XML_ERROR_JUNK_AFTER_DOC_ELEMENT

Something other than whitespace occurred after the document element.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_INVALID_TOKEN d 
XML_ERROR_INVALID_TOKEN

Raised when an input byte could not properly be assigned to a character; for
example, a NUL byte (value ``0``) in a UTF-8 input stream.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_NOT_SUSPENDED d 
XML_ERROR_NOT_SUSPENDED

An attempt to resume the parser was made when the parser had not been suspended.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_PARAM_ENTITY_REF d 
XML_ERROR_PARAM_ENTITY_REF

A parameter entity reference was found where it was not allowed.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_MISPLACED_XML_PI d 
XML_ERROR_MISPLACED_XML_PI

An XML declaration was found somewhere other than the start of the input data.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_NOT_STANDALONE d 
XML_ERROR_NOT_STANDALONE

The parser determined that the document was not "standalone" though it declared
itself to be in the XML declaration, and the :attr:`NotStandaloneHandler` was
set and returned ``0``.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_SYNTAX d 
XML_ERROR_SYNTAX

Some unspecified syntax error was encountered.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_ENTITY_DECLARED_IN_PE d 
XML_ERROR_ENTITY_DECLARED_IN_PE



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_XML_DECL d 
XML_ERROR_XML_DECL

The document contained no document element at all.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNDECLARING_PREFIX d 
XML_ERROR_UNDECLARING_PREFIX

The document attempted to remove the namespace declaration associated with a
prefix.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNKNOWN_ENCODING d 
XML_ERROR_UNKNOWN_ENCODING

The document encoding is not supported by Expat.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_TAG_MISMATCH d 
XML_ERROR_TAG_MISMATCH

An end tag did not match the innermost open start tag.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNDEFINED_ENTITY d 
XML_ERROR_UNDEFINED_ENTITY

A reference was made to a entity which was not defined.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_BAD_CHAR_REF d 
XML_ERROR_BAD_CHAR_REF

A character reference referred to a character which is illegal in XML (for
example, character ``0``, or '``&#0;``').



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_EXTERNAL_ENTITY_HANDLING d 
XML_ERROR_EXTERNAL_ENTITY_HANDLING



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNCLOSED_TOKEN d 
XML_ERROR_UNCLOSED_TOKEN

Some token (such as a start tag) was not closed before the end of the stream or
the next token was encountered.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_ABORTED d 
XML_ERROR_ABORTED

This should not be reported to Python applications.



+-*/+-*/+-*/+-*/+-*/+-*/codes d 
codes

A dictionary mapping numeric error codes to their string descriptions.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_INCORRECT_ENCODING d 
XML_ERROR_INCORRECT_ENCODING



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_FINISHED d 
XML_ERROR_FINISHED

The requested operation was made on a parser which was finished parsing input,
but isn't allowed.  This includes attempts to provide additional input or to
stop the parser.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_RECURSIVE_ENTITY_REF d 
XML_ERROR_RECURSIVE_ENTITY_REF

An entity reference contained another reference to the same entity; possibly via
a different name, and possibly indirectly.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_FEATURE_REQUIRES_XML_DTD d 
XML_ERROR_FEATURE_REQUIRES_XML_DTD

An operation was requested that requires DTD support to be compiled in, but
Expat was configured without DTD support.  This should never be reported by a
standard build of the :mod:`xml.parsers.expat` module.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNCLOSED_CDATA_SECTION d 
XML_ERROR_UNCLOSED_CDATA_SECTION

A CDATA marked section was not closed.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_NO_ELEMENTS d 
XML_ERROR_NO_ELEMENTS

The document contains no elements (XML requires all documents to contain exactly
one top-level element)..



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_PUBLICID d 
XML_ERROR_PUBLICID

Characters were found in the public id that are not allowed.



+-*/+-*/+-*/+-*/+-*/+-*/messages d 
messages

A dictionary mapping string descriptions to their error codes.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_PARTIAL_CHAR d 
XML_ERROR_PARTIAL_CHAR

An incomplete character was found in the input.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING d 
XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING

A behavioral change was requested after parsing started that can only be changed
before parsing has started.  This is (currently) only raised by
:meth:`UseForeignDTD`.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_SUSPEND_PE d 
XML_ERROR_SUSPEND_PE



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_INCOMPLETE_PE d 
XML_ERROR_INCOMPLETE_PE

A parameter entity contained incomplete markup.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_TEXT_DECL d 
XML_ERROR_TEXT_DECL

There was an error parsing a text declaration in an external entity.



+-*/+-*/+-*/+-*/+-*/+-*/XML_ERROR_UNBOUND_PREFIX d 
XML_ERROR_UNBOUND_PREFIX

An undeclared prefix was found when namespace processing was enabled.



+-*/+-*/+-*/+-*/+-*/model p 
+-*/+-*/+-*/+-*/+-*/+-*/XML_CQUANT_REP d 
XML_CQUANT_REP

The model must occur zero or more times, as for ``A*``.



+-*/+-*/+-*/+-*/+-*/+-*/XML_CTYPE_NAME d 
XML_CTYPE_NAME



+-*/+-*/+-*/+-*/+-*/+-*/XML_CQUANT_PLUS d 
XML_CQUANT_PLUS

The model must occur one or more times (like ``A+``).



+-*/+-*/+-*/+-*/+-*/+-*/XML_CQUANT_NONE d 
XML_CQUANT_NONE

No modifier is given, so it can appear exactly once, as for ``A``.



+-*/+-*/+-*/+-*/+-*/+-*/XML_CTYPE_MIXED d 
XML_CTYPE_MIXED



+-*/+-*/+-*/+-*/+-*/+-*/XML_CTYPE_ANY d 
XML_CTYPE_ANY

The element named by the model name was declared to have a content model of
``ANY``.



+-*/+-*/+-*/+-*/+-*/+-*/XML_CTYPE_EMPTY d 
XML_CTYPE_EMPTY

Elements which are declared to be ``EMPTY`` have this model type.



+-*/+-*/+-*/+-*/+-*/+-*/XML_CQUANT_OPT d 
XML_CQUANT_OPT

The model is optional: it can appear once or not at all, as for ``A?``.



+-*/+-*/+-*/+-*/+-*/+-*/XML_CTYPE_SEQ d 
XML_CTYPE_SEQ

Models which represent a series of models which follow one after the other are
indicated with this model type.  This is used for models such as ``(A, B, C)``.


+-*/+-*/+-*/+-*/+-*/+-*/XML_CTYPE_CHOICE d 
XML_CTYPE_CHOICE

The named element allows a choice from a number of options; this is used for
content models such as ``(A | B | C)``.



+-*/+-*/+-*/sax p Package containing SAX2 base classes and convenience functions.
+-*/+-*/+-*/+-*/parse f 
parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())

Create a SAX parser and use it to parse a document.  The document, passed in as
*filename_or_stream*, can be a filename or a file object.  The *handler*
parameter needs to be a SAX :class:`ContentHandler` instance.  If
*error_handler* is given, it must be a SAX :class:`ErrorHandler` instance; if
omitted,  :exc:`SAXParseException` will be raised on all errors.  There is no
return value; all work must be done by the *handler* passed in.



+-*/+-*/+-*/+-*/make_parser f 
make_parser(parser_list=[])

Create and return a SAX :class:`XMLReader` object.  The first parser found will
be used.  If *parser_list* is provided, it must be a sequence of strings which
name modules that have a function named :func:`create_parser`.  Modules listed
in *parser_list* will be used before modules in the default list of parsers.



+-*/+-*/+-*/+-*/parseString f 
parseString(string, handler, error_handler=handler.ErrorHandler())

Similar to :func:`parse`, but parses from a buffer *string* received as a
parameter.


+-*/+-*/+-*/+-*/SAXException e 
SAXException

Encapsulate an XML error or warning.  This class can contain basic error or
warning information from either the XML parser or the application: it can be
subclassed to provide additional functionality or to add localization.  Note
that although the handlers defined in the :class:`ErrorHandler` interface
receive instances of this exception, it is not required to actually raise the
exception --- it is also useful as a container for information.

When instantiated, *msg* should be a human-readable description of the error.
The optional *exception* parameter, if given, should be ``None`` or an exception
that was caught by the parsing code and is being passed along as information.

This is the base class for the other SAX exception classes.



+-*/+-*/+-*/+-*/SAXParseException e 
SAXParseException

Subclass of :exc:`SAXException` raised on parse errors. Instances of this class
are passed to the methods of the SAX :class:`ErrorHandler` interface to provide
information about the parse error.  This class supports the SAX :class:`Locator`
interface as well as the :class:`SAXException` interface.



+-*/+-*/+-*/+-*/SAXNotSupportedException e 
SAXNotSupportedException

Subclass of :exc:`SAXException` raised when a SAX :class:`XMLReader` is asked to
enable a feature that is not supported, or to set a property to a value that the
implementation does not support.  SAX applications and extensions may use this
class for similar purposes.



+-*/+-*/+-*/+-*/SAXNotRecognizedException e 
SAXNotRecognizedException

Subclass of :exc:`SAXException` raised when a SAX :class:`XMLReader` is
confronted with an unrecognized feature or property.  SAX applications and
extensions may use this class for similar purposes.



+-*/+-*/+-*/+-*/SAXException _ 
+-*/+-*/+-*/+-*/+-*/getException m 
getException()

Return an encapsulated exception object, or ``None``.



+-*/+-*/+-*/+-*/+-*/getMessage m 
getMessage()

Return a human-readable message describing the error condition.



+-*/+-*/+-*/+-*/handler p Base classes for SAX event handlers.
+-*/+-*/+-*/+-*/+-*/property_dom_node d 
property_dom_node

| value: ``"http://xml.org/sax/properties/dom-node"``
| data type: org.w3c.dom.Node (not supported in Python 2)
| description: When parsing, the current DOM node being visited if this is
  a DOM iterator; when not parsing, the root DOM node for iteration.
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/feature_string_interning d 
feature_string_interning

| value: ``"http://xml.org/sax/features/string-interning"``
| true: All element names, prefixes, attribute names, Namespace URIs, and
  local names are interned using the built-in intern function.
| false: Names are not necessarily interned, although they may be (default).
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/property_declaration_handler d 
property_declaration_handler

| value: ``"http://xml.org/sax/properties/declaration-handler"``
| data type: xml.sax.sax2lib.DeclHandler (not supported in Python 2)
| description: An optional extension handler for DTD-related events other
  than notations and unparsed entities.
| access: read/write



+-*/+-*/+-*/+-*/+-*/all_properties d 
all_properties

List of all known property names.



+-*/+-*/+-*/+-*/+-*/property_xml_string d 
property_xml_string

| value: ``"http://xml.org/sax/properties/xml-string"``
| data type: String
| description: The literal string of characters that was the source for the
  current event.
| access: read-only



+-*/+-*/+-*/+-*/+-*/feature_external_pes d 
feature_external_pes

| value: ``"http://xml.org/sax/features/external-parameter-entities"``
| true: Include all external parameter entities, including the external DTD
  subset.
| false: Do not include any external parameter entities, even the external
  DTD subset.
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/property_lexical_handler d 
property_lexical_handler

| value: ``"http://xml.org/sax/properties/lexical-handler"``
| data type: xml.sax.sax2lib.LexicalHandler (not supported in Python 2)
| description: An optional extension handler for lexical events like
  comments.
| access: read/write



+-*/+-*/+-*/+-*/+-*/feature_external_ges d 
feature_external_ges

| value: ``"http://xml.org/sax/features/external-general-entities"``
| true: Include all external general (text) entities.
| false: Do not include external general entities.
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/feature_namespace_prefixes d 
feature_namespace_prefixes

| value: ``"http://xml.org/sax/features/namespace-prefixes"``
| true: Report the original prefixed names and attributes used for Namespace
  declarations.
| false: Do not report attributes used for Namespace declarations, and
  optionally do not report original prefixed names (default).
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/all_features d 
all_features

List of all features.



+-*/+-*/+-*/+-*/+-*/feature_validation d 
feature_validation

| value: ``"http://xml.org/sax/features/validation"``
| true: Report all validation errors (implies external-general-entities and
  external-parameter-entities).
| false: Do not report validation errors.
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/feature_namespaces d 
feature_namespaces

| value: ``"http://xml.org/sax/features/namespaces"``
| true: Perform Namespace processing.
| false: Optionally do not perform Namespace processing (implies
  namespace-prefixes; default).
| access: (parsing) read-only; (not parsing) read/write



+-*/+-*/+-*/+-*/+-*/EntityResolver c 
EntityResolver

Basic interface for resolving entities. If you create an object implementing
this interface, then register the object with your Parser, the parser will call
the method in your object to resolve all external entities.



+-*/+-*/+-*/+-*/+-*/+-*/resolveEntity m 
resolveEntity(publicId, systemId)

Resolve the system identifier of an entity and return either the system
identifier to read from as a string, or an InputSource to read from. The default
implementation returns *systemId*.



+-*/+-*/+-*/+-*/+-*/DTDHandler c 
DTDHandler

Handle DTD events.

This interface specifies only those DTD events required for basic parsing
(unparsed entities and attributes).



+-*/+-*/+-*/+-*/+-*/+-*/notationDecl m 
notationDecl(name, publicId, systemId)

Handle a notation declaration event.



+-*/+-*/+-*/+-*/+-*/+-*/unparsedEntityDecl m 
unparsedEntityDecl(name, publicId, systemId, ndata)

Handle an unparsed entity declaration event.



+-*/+-*/+-*/+-*/+-*/ErrorHandler c 
ErrorHandler

Interface used by the parser to present error and warning messages to the
application.  The methods of this object control whether errors are immediately
converted to exceptions or are handled in some other way.


+-*/+-*/+-*/+-*/+-*/+-*/warning m 
warning(exception)

Called when the parser presents minor warning information to the application.
Parsing is expected to continue when this method returns, and document
information will continue to be passed to the application. Raising an exception
in this method will cause parsing to end.



+-*/+-*/+-*/+-*/+-*/+-*/fatalError m 
fatalError(exception)

Called when the parser encounters an error it cannot recover from; parsing is
expected to terminate when this method returns.



+-*/+-*/+-*/+-*/+-*/+-*/error m 
error(exception)

Called when the parser encounters a recoverable error.  If this method does not
raise an exception, parsing may continue, but further document information
should not be expected by the application.  Allowing the parser to continue may
allow additional errors to be discovered in the input document.



+-*/+-*/+-*/+-*/+-*/ContentHandler c 
ContentHandler

This is the main callback interface in SAX, and the one most important to
applications. The order of events in this interface mirrors the order of the
information in the document.



+-*/+-*/+-*/+-*/+-*/+-*/startPrefixMapping m 
startPrefixMapping(prefix, uri)

Begin the scope of a prefix-URI Namespace mapping.

The information from this event is not necessary for normal Namespace
processing: the SAX XML reader will automatically replace prefixes for element
and attribute names when the ``feature_namespaces`` feature is enabled (the
default).

There are cases, however, when applications need to use prefixes in character
data or in attribute values, where they cannot safely be expanded automatically;
the :meth:`startPrefixMapping` and :meth:`endPrefixMapping` events supply the
information to the application to expand prefixes in those contexts itself, if
necessary.

.. XXX This is not really the default, is it? MvL

Note that :meth:`startPrefixMapping` and :meth:`endPrefixMapping` events are not
guaranteed to be properly nested relative to each-other: all
:meth:`startPrefixMapping` events will occur before the corresponding
:meth:`startElement` event, and all :meth:`endPrefixMapping` events will occur
after the corresponding :meth:`endElement` event, but their order is not
guaranteed.



+-*/+-*/+-*/+-*/+-*/+-*/skippedEntity m 
skippedEntity(name)

Receive notification of a skipped entity.

The Parser will invoke this method once for each entity skipped. Non-validating
processors may skip entities if they have not seen the declarations (because,
for example, the entity was declared in an external DTD subset). All processors
may skip external entities, depending on the values of the
``feature_external_ges`` and the ``feature_external_pes`` properties.



+-*/+-*/+-*/+-*/+-*/+-*/endPrefixMapping m 
endPrefixMapping(prefix)

End the scope of a prefix-URI mapping.

See :meth:`startPrefixMapping` for details. This event will always occur after
the corresponding :meth:`endElement` event, but the order of
:meth:`endPrefixMapping` events is not otherwise guaranteed.



+-*/+-*/+-*/+-*/+-*/+-*/endElementNS m 
endElementNS(name, qname)

Signals the end of an element in namespace mode.

The *name* parameter contains the name of the element type, just as with the
:meth:`startElementNS` method, likewise the *qname* parameter.



+-*/+-*/+-*/+-*/+-*/+-*/processingInstruction m 
processingInstruction(target, data)

Receive notification of a processing instruction.

The Parser will invoke this method once for each processing instruction found:
note that processing instructions may occur before or after the main document
element.

A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a
text declaration (XML 1.0, section 4.3.1) using this method.



+-*/+-*/+-*/+-*/+-*/+-*/endElement m 
endElement(name)

Signals the end of an element in non-namespace mode.

The *name* parameter contains the name of the element type, just as with the
:meth:`startElement` event.



+-*/+-*/+-*/+-*/+-*/+-*/startElement m 
startElement(name, attrs)

Signals the start of an element in non-namespace mode.

The *name* parameter contains the raw XML 1.0 name of the element type as a
string and the *attrs* parameter holds an object of the :class:`Attributes`
interface (see :ref:`attributes-objects`) containing the attributes of
the element.  The object passed as *attrs* may be re-used by the parser; holding
on to a reference to it is not a reliable way to keep a copy of the attributes.
To keep a copy of the attributes, use the :meth:`copy` method of the *attrs*
object.



+-*/+-*/+-*/+-*/+-*/+-*/setDocumentLocator m 
setDocumentLocator(locator)

Called by the parser to give the application a locator for locating the origin
of document events.

SAX parsers are strongly encouraged (though not absolutely required) to supply a
locator: if it does so, it must supply the locator to the application by
invoking this method before invoking any of the other methods in the
DocumentHandler interface.

The locator allows the application to determine the end position of any
document-related event, even if the parser is not reporting an error. Typically,
the application will use this information for reporting its own errors (such as
character content that does not match an application's business rules). The
information returned by the locator is probably not sufficient for use with a
search engine.

Note that the locator will return correct information only during the invocation
of the events in this interface. The application should not attempt to use it at
any other time.



+-*/+-*/+-*/+-*/+-*/+-*/startDocument m 
startDocument()

Receive notification of the beginning of a document.

The SAX parser will invoke this method only once, before any other methods in
this interface or in DTDHandler (except for :meth:`setDocumentLocator`).



+-*/+-*/+-*/+-*/+-*/+-*/startElementNS m 
startElementNS(name, qname, attrs)

Signals the start of an element in namespace mode.

The *name* parameter contains the name of the element type as a ``(uri,
localname)`` tuple, the *qname* parameter contains the raw XML 1.0 name used in
the source document, and the *attrs* parameter holds an instance of the
:class:`AttributesNS` interface (see :ref:`attributes-ns-objects`)
containing the attributes of the element.  If no namespace is associated with
the element, the *uri* component of *name* will be ``None``.  The object passed
as *attrs* may be re-used by the parser; holding on to a reference to it is not
a reliable way to keep a copy of the attributes.  To keep a copy of the
attributes, use the :meth:`copy` method of the *attrs* object.

Parsers may set the *qname* parameter to ``None``, unless the
``feature_namespace_prefixes`` feature is activated.



+-*/+-*/+-*/+-*/+-*/+-*/characters m 
characters(content)

Receive notification of character data.

The Parser will call this method to report each chunk of character data. SAX
parsers may return all contiguous character data in a single chunk, or they may
split it into several chunks; however, all of the characters in any single event
must come from the same external entity so that the Locator provides useful
information.

*content* may be a string or bytes instance; the ``expat`` reader module
always produces strings.

.. note::

   The earlier SAX 1 interface provided by the Python XML Special Interest Group
   used a more Java-like interface for this method.  Since most parsers used from
   Python did not take advantage of the older interface, the simpler signature was
   chosen to replace it.  To convert old code to the new interface, use *content*
   instead of slicing content with the old *offset* and *length* parameters.



+-*/+-*/+-*/+-*/+-*/+-*/endDocument m 
endDocument()

Receive notification of the end of a document.

The SAX parser will invoke this method only once, and it will be the last method
invoked during the parse. The parser shall not invoke this method until it has
either abandoned parsing (because of an unrecoverable error) or reached the end
of input.



+-*/+-*/+-*/+-*/+-*/+-*/ignorableWhitespace m 
ignorableWhitespace(whitespace)

Receive notification of ignorable whitespace in element content.

Validating Parsers must use this method to report each chunk of ignorable
whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating
parsers may also use this method if they are capable of parsing and using
content models.

SAX parsers may return all contiguous whitespace in a single chunk, or they may
split it into several chunks; however, all of the characters in any single event
must come from the same external entity, so that the Locator provides useful
information.



+-*/+-*/+-*/+-*/saxutils p Convenience functions and classes for use with SAX.
+-*/+-*/+-*/+-*/+-*/quoteattr f 
quoteattr(data, entities={})

Similar to :func:`escape`, but also prepares *data* to be used as an
attribute value.  The return value is a quoted version of *data* with any
additional required replacements. :func:`quoteattr` will select a quote
character based on the content of *data*, attempting to avoid encoding any
quote characters in the string.  If both single- and double-quote characters
are already in *data*, the double-quote characters will be encoded and *data*
will be wrapped in double-quotes.  The resulting string can be used directly
as an attribute value::

   >>> print("<element attr=%s>" % quoteattr("ab ' cd \" ef"))
   <element attr="ab ' cd &quot; ef">

This function is useful when generating attribute values for HTML or any SGML
using the reference concrete syntax.



+-*/+-*/+-*/+-*/+-*/prepare_input_source f 
prepare_input_source(source, base='')

This function takes an input source and an optional base URL and returns a fully
resolved :class:`InputSource` object ready for reading.  The input source can be
given as a string, a file-like object, or an :class:`InputSource` object;
parsers will use this function to implement the polymorphic *source* argument to
their :meth:`parse` method.



+-*/+-*/+-*/+-*/+-*/unescape f 还原已转义的字符串为原始字符串
unescape(data, entities={})
  entities:   可添加的自定义转义字符,默认的只包括<>&的转义
  如{ '&quot;'    :  '"'  ,
      '&nbsp;'    :  ' '  ,
      '&apos;'    :  "'"  }
+-*/+-*/+-*/+-*/+-*/escape f 转义字符串内的特殊字符
escape(data, entities={})
  entities:   可添加的自定义转义字符,默认的只包括<>&
  如{ '"'    :   '&quot;' ,
      ' '    :   '&nbsp;' ,
      "'"    :   '&apos;' }
+-*/+-*/+-*/+-*/+-*/XMLGenerator c 
XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)

This class implements the :class:`ContentHandler` interface by writing SAX
events back into an XML document. In other words, using an :class:`XMLGenerator`
as the content handler will reproduce the original document being parsed. *out*
should be a file-like object which will default to *sys.stdout*. *encoding* is
the encoding of the output stream which defaults to ``'iso-8859-1'``.
*short_empty_elements* controls the formatting of elements that contain no
content:  if *False* (the default) they are emitted as a pair of start/end
tags, if set to *True* they are emitted as a single self-closed tag.

.. versionadded:: 3.2
   short_empty_elements



+-*/+-*/+-*/+-*/+-*/XMLFilterBase c 
XMLFilterBase(base)

This class is designed to sit between an :class:`XMLReader` and the client
application's event handlers.  By default, it does nothing but pass requests up
to the reader and events on to the handlers unmodified, but subclasses can
override specific methods to modify the event stream or the configuration
requests as they pass through.



+-*/+-*/+-*/+-*/xmlreader p Interface which SAX-compliant XML parsers must implement.
+-*/+-*/+-*/+-*/+-*/AttributesNSImpl c 
AttributesNSImpl(attrs, qnames)

Namespace-aware variant of :class:`AttributesImpl`, which will be passed to
:meth:`startElementNS`. It is derived from :class:`AttributesImpl`, but
understands attribute names as two-tuples of *namespaceURI* and
*localname*. In addition, it provides a number of methods expecting qualified
names as they appear in the original document.  This class implements the
:class:`AttributesNS` interface (see section :ref:`attributes-ns-objects`).



+-*/+-*/+-*/+-*/+-*/XMLReader c 
XMLReader()

Base class which can be inherited by SAX parsers.



+-*/+-*/+-*/+-*/+-*/+-*/setFeature m 
setFeature(featurename, value)

Set the *featurename* to *value*. If the feature is not recognized,
:exc:`SAXNotRecognizedException` is raised. If the feature or its setting is not
supported by the parser, *SAXNotSupportedException* is raised.



+-*/+-*/+-*/+-*/+-*/+-*/setContentHandler m 
setContentHandler(handler)

Set the current :class:`ContentHandler`.  If no :class:`ContentHandler` is set,
content events will be discarded.



+-*/+-*/+-*/+-*/+-*/+-*/getProperty m 
getProperty(propertyname)

Return the current setting for property *propertyname*. If the property is not
recognized, a :exc:`SAXNotRecognizedException` is raised. The well-known
propertynames are listed in the module :mod:`xml.sax.handler`.



+-*/+-*/+-*/+-*/+-*/+-*/setEntityResolver m 
setEntityResolver(handler)

Set the current :class:`EntityResolver`.  If no :class:`EntityResolver` is set,
attempts to resolve an external entity will result in opening the system
identifier for the entity, and fail if it is not available.



+-*/+-*/+-*/+-*/+-*/+-*/setLocale m 
setLocale(locale)

Allow an application to set the locale for errors and warnings.

SAX parsers are not required to provide localization for errors and warnings; if
they cannot support the requested locale, however, they must raise a SAX
exception.  Applications may request a locale change in the middle of a parse.



+-*/+-*/+-*/+-*/+-*/+-*/getErrorHandler m 
getErrorHandler()

Return the current :class:`ErrorHandler`.



+-*/+-*/+-*/+-*/+-*/+-*/setErrorHandler m 
setErrorHandler(handler)

Set the current error handler.  If no :class:`ErrorHandler` is set, errors will
be raised as exceptions, and warnings will be printed.



+-*/+-*/+-*/+-*/+-*/+-*/parse m 
parse(source)

Process an input source, producing SAX events. The *source* object can be a
system identifier (a string identifying the input source -- typically a file
name or an URL), a file-like object, or an :class:`InputSource` object. When
:meth:`parse` returns, the input is completely processed, and the parser object
can be discarded or reset. As a limitation, the current implementation only
accepts byte streams; processing of character streams is for further study.



+-*/+-*/+-*/+-*/+-*/+-*/getEntityResolver m 
getEntityResolver()

Return the current :class:`EntityResolver`.



+-*/+-*/+-*/+-*/+-*/+-*/getContentHandler m 
getContentHandler()

Return the current :class:`ContentHandler`.



+-*/+-*/+-*/+-*/+-*/+-*/setDTDHandler m 
setDTDHandler(handler)

Set the current :class:`DTDHandler`.  If no :class:`DTDHandler` is set, DTD
events will be discarded.



+-*/+-*/+-*/+-*/+-*/+-*/getFeature m 
getFeature(featurename)

Return the current setting for feature *featurename*.  If the feature is not
recognized, :exc:`SAXNotRecognizedException` is raised. The well-known
featurenames are listed in the module :mod:`xml.sax.handler`.



+-*/+-*/+-*/+-*/+-*/+-*/setProperty m 
setProperty(propertyname, value)

Set the *propertyname* to *value*. If the property is not recognized,
:exc:`SAXNotRecognizedException` is raised. If the property or its setting is
not supported by the parser, *SAXNotSupportedException* is raised.



+-*/+-*/+-*/+-*/+-*/+-*/getDTDHandler m 
getDTDHandler()

Return the current :class:`DTDHandler`.



+-*/+-*/+-*/+-*/+-*/InputSource c 
InputSource(system_id=None)

Encapsulation of the information needed by the :class:`XMLReader` to read
entities.

This class may include information about the public identifier, system
identifier, byte stream (possibly with character encoding information) and/or
the character stream of an entity.

Applications will create objects of this class for use in the
:meth:`XMLReader.parse` method and for returning from
EntityResolver.resolveEntity.

An :class:`InputSource` belongs to the application, the :class:`XMLReader` is
not allowed to modify :class:`InputSource` objects passed to it from the
application, although it may make copies and modify those.



+-*/+-*/+-*/+-*/+-*/+-*/setSystemId m 
setSystemId(id)

Sets the system identifier of this :class:`InputSource`.



+-*/+-*/+-*/+-*/+-*/+-*/getCharacterStream m 
getCharacterStream()

Get the character stream for this input source.



+-*/+-*/+-*/+-*/+-*/+-*/setEncoding m 
setEncoding(encoding)

Sets the character encoding of this :class:`InputSource`.

The encoding must be a string acceptable for an XML encoding declaration (see
section 4.3.3 of the XML recommendation).

The encoding attribute of the :class:`InputSource` is ignored if the
:class:`InputSource` also contains a character stream.



+-*/+-*/+-*/+-*/+-*/+-*/setPublicId m 
setPublicId(id)

Sets the public identifier of this :class:`InputSource`.



+-*/+-*/+-*/+-*/+-*/+-*/getEncoding m 
getEncoding()

Get the character encoding of this InputSource.



+-*/+-*/+-*/+-*/+-*/+-*/getSystemId m 
getSystemId()

Returns the system identifier of this :class:`InputSource`.



+-*/+-*/+-*/+-*/+-*/+-*/getPublicId m 
getPublicId()

Returns the public identifier of this :class:`InputSource`.



+-*/+-*/+-*/+-*/+-*/+-*/setCharacterStream m 
setCharacterStream(charfile)

Set the character stream for this input source. (The stream must be a Python 1.6
Unicode-wrapped file-like that performs conversion to strings.)

If there is a character stream specified, the SAX parser will ignore any byte
stream and will not attempt to open a URI connection to the system identifier.



+-*/+-*/+-*/+-*/+-*/+-*/setByteStream m 
setByteStream(bytefile)

Set the byte stream (a Python file-like object which does not perform
byte-to-character conversion) for this input source.

The SAX parser will ignore this if there is also a character stream specified,
but it will use a byte stream in preference to opening a URI connection itself.

If the application knows the character encoding of the byte stream, it should
set it with the setEncoding method.



+-*/+-*/+-*/+-*/+-*/+-*/getByteStream m 
getByteStream()

Get the byte stream for this input source.

The getEncoding method will return the character encoding for this byte stream,
or None if unknown.



+-*/+-*/+-*/+-*/+-*/Locator c 
Locator()

Interface for associating a SAX event with a document location. A locator object
will return valid results only during calls to DocumentHandler methods; at any
other time, the results are unpredictable. If information is not available,
methods may return ``None``.



+-*/+-*/+-*/+-*/+-*/+-*/getSystemId m 
getSystemId()

Return the system identifier for the current event.



+-*/+-*/+-*/+-*/+-*/+-*/getLineNumber m 
getLineNumber()

Return the line number where the current event ends.



+-*/+-*/+-*/+-*/+-*/+-*/getColumnNumber m 
getColumnNumber()

Return the column number where the current event ends.



+-*/+-*/+-*/+-*/+-*/+-*/getPublicId m 
getPublicId()

Return the public identifier for the current event.



+-*/+-*/+-*/+-*/+-*/IncrementalParser c 
IncrementalParser()

In some cases, it is desirable not to parse an input source at once, but to feed
chunks of the document as they get available. Note that the reader will normally
not read the entire file, but read it in chunks as well; still :meth:`parse`
won't return until the entire document is processed. So these interfaces should
be used if the blocking behaviour of :meth:`parse` is not desirable.

When the parser is instantiated it is ready to begin accepting data from the
feed method immediately. After parsing has been finished with a call to close
the reset method must be called to make the parser ready to accept new data,
either from feed or using the parse method.

Note that these methods must *not* be called during parsing, that is, after
parse has been called and before it returns.

By default, the class also implements the parse method of the XMLReader
interface using the feed, close and reset methods of the IncrementalParser
interface as a convenience to SAX 2.0 driver writers.



+-*/+-*/+-*/+-*/+-*/+-*/reset m 
reset()

This method is called after close has been called to reset the parser so that it
is ready to parse new documents. The results of calling parse or feed after
close without calling reset are undefined.



+-*/+-*/+-*/+-*/+-*/+-*/close m 
close()

Assume the end of the document. That will check well-formedness conditions that
can be checked only at the end, invoke handlers, and may clean up resources
allocated during parsing.



+-*/+-*/+-*/+-*/+-*/+-*/feed m 
feed(data)

Process a chunk of *data*.



+-*/+-*/+-*/+-*/+-*/AttributesImpl c 
AttributesImpl(attrs)

This is an implementation of the :class:`Attributes` interface (see section
:ref:`attributes-objects`).  This is a dictionary-like object which
represents the element attributes in a :meth:`startElement` call. In addition
to the most useful dictionary operations, it supports a number of other
methods as described by the interface. Objects of this class should be
instantiated by readers; *attrs* must be a dictionary-like object containing
a mapping from attribute names to attribute values.



+-*/+-*/+-*/+-*/+-*/Attributes _ 
+-*/+-*/+-*/+-*/+-*/+-*/getLength m 
getLength()

Return the number of attributes.



+-*/+-*/+-*/+-*/+-*/+-*/getType m 
getType(name)

Returns the type of the attribute *name*, which is normally ``'CDATA'``.



+-*/+-*/+-*/+-*/+-*/+-*/getNames m 
getNames()

Return the names of the attributes.



+-*/+-*/+-*/+-*/+-*/+-*/getValue m 
getValue(name)

Return the value of attribute *name*.


+-*/+-*/+-*/+-*/+-*/AttributesNS _ 
+-*/+-*/+-*/+-*/+-*/+-*/getNameByQName m 
getNameByQName(name)

Return the ``(namespace, localname)`` pair for a qualified *name*.



+-*/+-*/+-*/+-*/+-*/+-*/getQNameByName m 
getQNameByName(name)

Return the qualified name for a ``(namespace, localname)`` pair.



+-*/+-*/+-*/+-*/+-*/+-*/getValueByQName m 
getValueByQName(name)

Return the value for a qualified name.



+-*/+-*/+-*/+-*/+-*/+-*/getQNames m 
getQNames()

Return the qualified names of all attributes.



+-*/mm _ Multimedia Services
+-*/+-*/aifc p Read and write audio files in AIFF or AIFC format.
+-*/+-*/+-*/open f 
open(file, mode=None)

Open an AIFF or AIFF-C file and return an object instance with methods that are
described below.  The argument *file* is either a string naming a file or a
:term:`file object`.  *mode* must be ``'r'`` or ``'rb'`` when the file must be
opened for reading, or ``'w'``  or ``'wb'`` when the file must be opened for writing.
If omitted, ``file.mode`` is used if it exists, otherwise ``'rb'`` is used.  When
used for writing, the file object should be seekable, unless you know ahead of
time how many samples you are going to write in total and use
:meth:`writeframesraw` and :meth:`setnframes`.


+-*/+-*/+-*/aifc _ 
+-*/+-*/+-*/+-*/getcompname m 
getcompname()

Return a bytes array convertible to a human-readable description
of the type of compression used in the audio file.  For AIFF files,
the returned value is ``b'not compressed'``.



+-*/+-*/+-*/+-*/getparams m 
getparams()

Return a tuple consisting of all of the above values in the above order.



+-*/+-*/+-*/+-*/setpos m 
setpos(pos)

Seek to the specified frame number.




+-*/+-*/+-*/+-*/aiff m 
aiff()

Create an AIFF file.  The default is that an AIFF-C file is created, unless the
name of the file ends in ``'.aiff'`` in which case the default is an AIFF file.



+-*/+-*/+-*/+-*/aifc m 
aifc()

Create an AIFF-C file.  The default is that an AIFF-C file is created, unless
the name of the file ends in ``'.aiff'`` in which case the default is an AIFF
file.



+-*/+-*/+-*/+-*/close m 
close()

Close the AIFF file.  The header of the file is updated to reflect the actual
size of the audio data. After calling this method, the object can no longer be
used.



+-*/+-*/+-*/+-*/setnframes m 
setnframes(nframes)

Specify the number of frames that are to be written to the audio file. If this
parameter is not set, or not set correctly, the file needs to support seeking.



+-*/+-*/+-*/+-*/getsampwidth m 
getsampwidth()

Return the size in bytes of individual samples.



+-*/+-*/+-*/+-*/setmark m 
setmark(id, pos, name)

Add a mark with the given id (larger than 0), and the given name at the given
position.  This method can be called at any time before :meth:`close`.



+-*/+-*/+-*/+-*/getcomptype m 
getcomptype()

Return a bytes array of length 4 describing the type of compression
used in the audio file.  For AIFF files, the returned value is
``b'NONE'``.



+-*/+-*/+-*/+-*/rewind m 
rewind()

Rewind the read pointer.  The next :meth:`readframes` will start from the
beginning.



+-*/+-*/+-*/+-*/readframes m 
readframes(nframes)

Read and return the next *nframes* frames from the audio file.  The returned
data is a string containing for each frame the uncompressed samples of all
channels.



+-*/+-*/+-*/+-*/setparams m 
setparams(nchannels, sampwidth, framerate, comptype, compname)

Set all the above parameters at once.  The argument is a tuple consisting of the
various parameters.  This means that it is possible to use the result of a
:meth:`getparams` call as argument to :meth:`setparams`.



+-*/+-*/+-*/+-*/tell m 
tell()

Return the current write position in the output file.  Useful in combination
with :meth:`setmark`.



+-*/+-*/+-*/+-*/setsampwidth m 
setsampwidth(width)

Specify the size in bytes of audio samples.



+-*/+-*/+-*/+-*/setnchannels m 
setnchannels(nchannels)

Specify the number of channels in the audio file.



+-*/+-*/+-*/+-*/getnframes m 
getnframes()

Return the number of audio frames in the file.



+-*/+-*/+-*/+-*/getframerate m 
getframerate()

Return the sampling rate (number of audio frames per second).



+-*/+-*/+-*/+-*/writeframesraw m 
writeframesraw(data)

Like :meth:`writeframes`, except that the header of the audio file is not
updated.



+-*/+-*/+-*/+-*/setframerate m 
setframerate(rate)

Specify the sampling frequency in frames per second.



+-*/+-*/+-*/+-*/writeframes m 
writeframes(data)

Write data to the output file.  This method can only be called after the audio
file parameters have been set.



+-*/+-*/+-*/+-*/getmarkers m 
getmarkers()

Return a list of markers in the audio file.  A marker consists of a tuple of
three elements.  The first is the mark ID (an integer), the second is the mark
position in frames from the beginning of the data (an integer), the third is the
name of the mark (a string).



+-*/+-*/+-*/+-*/getmark m 
getmark(id)

Return the tuple as described in :meth:`getmarkers` for the mark with the given
*id*.



+-*/+-*/+-*/+-*/getnchannels m 
getnchannels()

Return the number of audio channels (1 for mono, 2 for stereo).



+-*/+-*/+-*/+-*/setcomptype m 
setcomptype(type, name)

.. index::
   single: u-LAW
   single: A-LAW
   single: G.722

Specify the compression type.  If not specified, the audio data will
not be compressed.  In AIFF files, compression is not possible.
The name parameter should be a human-readable description of the
compression type as a bytes array, the type parameter should be a
bytes array of length 4.  Currently the following compression types
are supported: ``b'NONE'``, ``b'ULAW'``, ``b'ALAW'``, ``b'G722'``.



+-*/+-*/audioop p Manipulate raw audio data.
+-*/+-*/+-*/rms f 
rms(fragment, width)

Return the root-mean-square of the fragment, i.e. ``sqrt(sum(S_i^2)/n)``.

This is a measure of the power in an audio signal.



+-*/+-*/+-*/bias f 
bias(fragment, width, bias)

Return a fragment that is the original fragment with a bias added to each
sample.



+-*/+-*/+-*/alaw2lin f 
alaw2lin(fragment, width)

Convert sound fragments in a-LAW encoding to linearly encoded sound fragments.
a-LAW encoding always uses 8 bits samples, so *width* refers only to the sample
width of the output fragment here.



+-*/+-*/+-*/findfactor f 
findfactor(fragment, reference)

Return a factor *F* such that ``rms(add(fragment, mul(reference, -F)))`` is
minimal, i.e., return the factor with which you should multiply *reference* to
make it match as well as possible to *fragment*.  The fragments should both
contain 2-byte samples.

The time taken by this routine is proportional to ``len(fragment)``.



+-*/+-*/+-*/minmax f 
minmax(fragment, width)

Return a tuple consisting of the minimum and maximum values of all samples in
the sound fragment.



+-*/+-*/+-*/avg f 
avg(fragment, width)

Return the average over all samples in the fragment.



+-*/+-*/+-*/lin2adpcm f 
lin2adpcm(fragment, width, state)

Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is an adaptive
coding scheme, whereby each 4 bit number is the difference between one sample
and the next, divided by a (varying) step.  The Intel/DVI ADPCM algorithm has
been selected for use by the IMA, so it may well become a standard.

*state* is a tuple containing the state of the coder.  The coder returns a tuple
``(adpcmfrag, newstate)``, and the *newstate* should be passed to the next call
of :func:`lin2adpcm`.  In the initial call, ``None`` can be passed as the state.
*adpcmfrag* is the ADPCM coded fragment packed 2 4-bit values per byte.



+-*/+-*/+-*/tostereo f 
tostereo(fragment, width, lfactor, rfactor)

Generate a stereo fragment from a mono fragment.  Each pair of samples in the
stereo fragment are computed from the mono sample, whereby left channel samples
are multiplied by *lfactor* and right channel samples by *rfactor*.



+-*/+-*/+-*/findmax f 
findmax(fragment, length)

Search *fragment* for a slice of length *length* samples (not bytes!) with
maximum energy, i.e., return *i* for which ``rms(fragment[i*2:(i+length)*2])``
is maximal.  The fragments should both contain 2-byte samples.

The routine takes time proportional to ``len(fragment)``.



+-*/+-*/+-*/cross f 
cross(fragment, width)

Return the number of zero crossings in the fragment passed as an argument.



+-*/+-*/+-*/add f 
add(fragment1, fragment2, width)

Return a fragment which is the addition of the two samples passed as parameters.
*width* is the sample width in bytes, either ``1``, ``2`` or ``4``.  Both
fragments should have the same length.



+-*/+-*/+-*/ulaw2lin f 
ulaw2lin(fragment, width)

Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.
u-LAW encoding always uses 8 bits samples, so *width* refers only to the sample
width of the output fragment here.


+-*/+-*/+-*/mul f 
mul(fragment, width, factor)

Return a fragment that has all samples in the original fragment multiplied by
the floating-point value *factor*.  Overflow is silently ignored.



+-*/+-*/+-*/lin2ulaw f 
lin2ulaw(fragment, width)

Convert samples in the audio fragment to u-LAW encoding and return this as a
Python string.  u-LAW is an audio encoding format whereby you get a dynamic
range of about 14 bits using only 8 bit samples.  It is used by the Sun audio
hardware, among others.



+-*/+-*/+-*/max f 
max(fragment, width)

Return the maximum of the *absolute value* of all samples in a fragment.



+-*/+-*/+-*/lin2alaw f 
lin2alaw(fragment, width)

Convert samples in the audio fragment to a-LAW encoding and return this as a
Python string.  a-LAW is an audio encoding format whereby you get a dynamic
range of about 13 bits using only 8 bit samples.  It is used by the Sun audio
hardware, among others.



+-*/+-*/+-*/tomono f 
tomono(fragment, width, lfactor, rfactor)

Convert a stereo fragment to a mono fragment.  The left channel is multiplied by
*lfactor* and the right channel by *rfactor* before adding the two channels to
give a mono signal.



+-*/+-*/+-*/lin2lin f 
lin2lin(fragment, width, newwidth)

Convert samples between 1-, 2- and 4-byte formats.

.. note::

   In some audio formats, such as .WAV files, 16 and 32 bit samples are
   signed, but 8 bit samples are unsigned.  So when converting to 8 bit wide
   samples for these formats, you need to also add 128 to the result::

      new_frames = audioop.lin2lin(frames, old_width, 1)
      new_frames = audioop.bias(new_frames, 1, 128)

   The same, in reverse, has to be applied when converting from 8 to 16 or 32
   bit width samples.



+-*/+-*/+-*/adpcm2lin f 
adpcm2lin(adpcmfragment, width, state)

Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See the
description of :func:`lin2adpcm` for details on ADPCM coding. Return a tuple
``(sample, newstate)`` where the sample has the width specified in *width*.



+-*/+-*/+-*/findfit f 
findfit(fragment, reference)

Try to match *reference* as well as possible to a portion of *fragment* (which
should be the longer fragment).  This is (conceptually) done by taking slices
out of *fragment*, using :func:`findfactor` to compute the best match, and
minimizing the result.  The fragments should both contain 2-byte samples.
Return a tuple ``(offset, factor)`` where *offset* is the (integer) offset into
*fragment* where the optimal match started and *factor* is the (floating-point)
factor as per :func:`findfactor`.



+-*/+-*/+-*/getsample f 
getsample(fragment, width, index)

Return the value of sample *index* from the fragment.



+-*/+-*/+-*/avgpp f 
avgpp(fragment, width)

Return the average peak-peak value over all samples in the fragment. No
filtering is done, so the usefulness of this routine is questionable.



+-*/+-*/+-*/reverse f 
reverse(fragment, width)

Reverse the samples in a fragment and returns the modified fragment.



+-*/+-*/+-*/ratecv f 
ratecv(fragment, width, nchannels, inrate, outrate, state[, weightA[, weightB]])

Convert the frame rate of the input fragment.

*state* is a tuple containing the state of the converter.  The converter returns
a tuple ``(newfragment, newstate)``, and *newstate* should be passed to the next
call of :func:`ratecv`.  The initial call should pass ``None`` as the state.

The *weightA* and *weightB* arguments are parameters for a simple digital filter
and default to ``1`` and ``0`` respectively.



+-*/+-*/+-*/maxpp f 
maxpp(fragment, width)

Return the maximum peak-peak value in the sound fragment.



+-*/+-*/+-*/error e 
error

This exception is raised on all errors, such as unknown number of bytes per
sample, etc.



+-*/+-*/chunk p Module to read IFF chunks.
+-*/+-*/+-*/Chunk c 
Chunk(file, align=True, bigendian=True, inclheader=False)

Class which represents a chunk.  The *file* argument is expected to be a
file-like object.  An instance of this class is specifically allowed.  The
only method that is needed is :meth:`read`.  If the methods :meth:`seek` and
:meth:`tell` are present and don't raise an exception, they are also used.
If these methods are present and raise an exception, they are expected to not
have altered the object.  If the optional argument *align* is true, chunks
are assumed to be aligned on 2-byte boundaries.  If *align* is false, no
alignment is assumed.  The default value is true.  If the optional argument
*bigendian* is false, the chunk size is assumed to be in little-endian order.
This is needed for WAVE audio files. The default value is true.  If the
optional argument *inclheader* is true, the size given in the chunk header
includes the size of the header.  The default value is false.

A :class:`Chunk` object supports the following methods:



+-*/+-*/+-*/+-*/isatty m 
isatty()

Returns ``False``.



+-*/+-*/+-*/+-*/read m 
read(size=-1)

Read at most *size* bytes from the chunk (less if the read hits the end of
the chunk before obtaining *size* bytes).  If the *size* argument is
negative or omitted, read all data until the end of the chunk.  The bytes
are returned as a string object.  An empty string is returned when the end
of the chunk is encountered immediately.



+-*/+-*/+-*/+-*/skip m 
skip()

Skip to the end of the chunk.  All further calls to :meth:`read` for the
chunk will return ``''``.  If you are not interested in the contents of
the chunk, this method should be called so that the file points to the
start of the next chunk.




+-*/+-*/+-*/+-*/getname m 
getname()

Returns the name (ID) of the chunk.  This is the first 4 bytes of the
chunk.



+-*/+-*/+-*/+-*/getsize m 
getsize()

Returns the size of the chunk.



+-*/+-*/+-*/+-*/close m 
close()

Close and skip to the end of the chunk.  This does not close the
underlying file.


+-*/+-*/+-*/+-*/seek m 
seek(pos, whence=0)

Set the chunk's current position.  The *whence* argument is optional and
defaults to ``0`` (absolute file positioning); other values are ``1``
(seek relative to the current position) and ``2`` (seek relative to the
file's end).  There is no return value. If the underlying file does not
allow seek, only forward seeks are allowed.



+-*/+-*/+-*/+-*/tell m 
tell()

Return the current position into the chunk.



+-*/+-*/ossaudiodev p Access to OSS-compatible audio devices.
+-*/+-*/+-*/openmixer f 
openmixer([device])

Open a mixer device and return an OSS mixer device object.   *device* is the
mixer device filename to use.  If it is not specified, this module first looks
in the environment variable :envvar:`MIXERDEV` for a device to use.  If not
found, it falls back to :file:`/dev/mixer`.



+-*/+-*/+-*/open f 
open([device, ]mode)

Open an audio device and return an OSS audio device object.  This object
supports many file-like methods, such as :meth:`read`, :meth:`write`, and
:meth:`fileno` (although there are subtle differences between conventional Unix
read/write semantics and those of OSS audio devices).  It also supports a number
of audio-specific methods; see below for the complete list of methods.

*device* is the audio device filename to use.  If it is not specified, this
module first looks in the environment variable :envvar:`AUDIODEV` for a device
to use.  If not found, it falls back to :file:`/dev/dsp`.

*mode* is one of ``'r'`` for read-only (record) access, ``'w'`` for
write-only (playback) access and ``'rw'`` for both. Since many sound cards
only allow one process to have the recorder or player open at a time, it is a
good idea to open the device only for the activity needed.  Further, some
sound cards are half-duplex: they can be opened for reading or writing, but
not both at once.

Note the unusual calling syntax: the *first* argument is optional, and the
second is required.  This is a historical artifact for compatibility with the
older :mod:`linuxaudiodev` module which :mod:`ossaudiodev` supersedes.

.. XXX it might also be motivated
   by my unfounded-but-still-possibly-true belief that the default
   audio device varies unpredictably across operating systems.  -GW



+-*/+-*/+-*/OSSAudioError e 
OSSAudioError

This exception is raised on certain errors.  The argument is a string describing
what went wrong.

(If :mod:`ossaudiodev` receives an error from a system call such as
:c:func:`open`, :c:func:`write`, or :c:func:`ioctl`, it raises :exc:`IOError`.
Errors detected directly by :mod:`ossaudiodev` result in :exc:`OSSAudioError`.)

(For backwards compatibility, the exception class is also available as
``ossaudiodev.error``.)



+-*/+-*/+-*/oss_mixer_device _ 
+-*/+-*/+-*/+-*/fileno m 
fileno()

Returns the file handle number of the open mixer device file.


+-*/+-*/+-*/+-*/set m 
set(control, (left, right))

Sets the volume for a given mixer control to ``(left,right)``. ``left`` and
``right`` must be ints and between 0 (silent) and 100 (full volume).  On
success, the new volume is returned as a 2-tuple. Note that this may not be
exactly the same as the volume specified, because of the limited resolution of
some soundcard's mixers.

Raises :exc:`OSSAudioError` if an invalid mixer control was specified, or if the
specified volumes were out-of-range.



+-*/+-*/+-*/+-*/get m 
get(control)

Returns the volume of a given mixer control.  The returned volume is a 2-tuple
``(left_volume,right_volume)``.  Volumes are specified as numbers from 0
(silent) to 100 (full volume).  If the control is monophonic, a 2-tuple is still
returned, but both volumes are the same.

Raises :exc:`OSSAudioError` if an invalid control was is specified, or
:exc:`IOError` if an unsupported control is specified.



+-*/+-*/+-*/+-*/reccontrols m 
reccontrols()

Returns a bitmask specifying the mixer controls that may be used to record.  See
the code example for :meth:`controls` for an example of reading from a bitmask.



+-*/+-*/+-*/+-*/controls m 
controls()

This method returns a bitmask specifying the available mixer controls ("Control"
being a specific mixable "channel", such as :const:`SOUND_MIXER_PCM` or
:const:`SOUND_MIXER_SYNTH`).  This bitmask indicates a subset of all available
mixer controls---the :const:`SOUND_MIXER_\*` constants defined at module level.
To determine if, for example, the current mixer object supports a PCM mixer, use
the following Python code::

   mixer=ossaudiodev.openmixer()
   if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):
       # PCM is supported
       ... code ...

For most purposes, the :const:`SOUND_MIXER_VOLUME` (master volume) and
:const:`SOUND_MIXER_PCM` controls should suffice---but code that uses the mixer
should be flexible when it comes to choosing mixer controls.  On the Gravis
Ultrasound, for example, :const:`SOUND_MIXER_VOLUME` does not exist.



+-*/+-*/+-*/+-*/get_recsrc m 
get_recsrc()

This method returns a bitmask indicating which control(s) are currently being
used as a recording source.



+-*/+-*/+-*/+-*/set_recsrc m 
set_recsrc(bitmask)

Call this function to specify a recording source.  Returns a bitmask indicating
the new recording source (or sources) if successful; raises :exc:`IOError` if an
invalid source was specified.  To set the current recording source to the
microphone input::

   mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)



+-*/+-*/+-*/+-*/close m 
close()

This method closes the open mixer device file.  Any further attempts to use the
mixer after this file is closed will raise an :exc:`IOError`.



+-*/+-*/+-*/+-*/stereocontrols m 
stereocontrols()

Returns a bitmask indicating stereo mixer controls.  If a bit is set, the
corresponding control is stereo; if it is unset, the control is either
monophonic or not supported by the mixer (use in combination with
:meth:`controls` to determine which).

See the code example for the :meth:`controls` function for an example of getting
data from a bitmask.



+-*/+-*/+-*/oss_audio_device _ 
+-*/+-*/+-*/+-*/mode d 
mode

The I/O mode for the file, either ``"r"``, ``"rw"``, or ``"w"``.



+-*/+-*/+-*/+-*/closed d 
closed

Boolean indicating whether the device has been closed.



+-*/+-*/+-*/+-*/name d 
name

String containing the name of the device file.



+-*/+-*/+-*/+-*/reset m 
reset()

Immediately stop playing or recording and return the device to a state where it
can accept commands.  The OSS documentation recommends closing and re-opening
the device after calling :meth:`reset`.



+-*/+-*/+-*/+-*/setparameters m 
setparameters(format, nchannels, samplerate [, strict=False])

Set the key audio sampling parameters---sample format, number of channels, and
sampling rate---in one method call.  *format*,  *nchannels*, and *samplerate*
should be as specified in the :meth:`setfmt`, :meth:`channels`, and
:meth:`speed`  methods.  If *strict* is true, :meth:`setparameters` checks to
see if each parameter was actually set to the requested value, and raises
:exc:`OSSAudioError` if not.  Returns a tuple (*format*, *nchannels*,
*samplerate*) indicating the parameter values that were actually set by the
device driver (i.e., the same as the return values of :meth:`setfmt`,
:meth:`channels`, and :meth:`speed`).

For example,  ::

   (fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)

is equivalent to  ::

   fmt = dsp.setfmt(fmt)
   channels = dsp.channels(channels)
   rate = dsp.rate(channels)



+-*/+-*/+-*/+-*/obufcount m 
obufcount()

Returns the number of samples that are in the hardware buffer yet to be played.



+-*/+-*/+-*/+-*/writeall m 
writeall(data)

Write the entire Python string *data* to the audio device: waits until the audio
device is able to accept data, writes as much data as it will accept, and
repeats until *data* has been completely written. If the device is in blocking
mode (the default), this has the same effect as :meth:`write`; :meth:`writeall`
is only useful in non-blocking mode.  Has no return value, since the amount of
data written is always equal to the amount of data supplied.


+-*/+-*/+-*/+-*/fileno m 
fileno()

Return the file descriptor associated with the device.



+-*/+-*/+-*/+-*/read m 
read(size)

Read *size* bytes from the audio input and return them as a Python string.
Unlike most Unix device drivers, OSS audio devices in blocking mode (the
default) will block :func:`read` until the entire requested amount of data is
available.



+-*/+-*/+-*/+-*/nonblock m 
nonblock()

Put the device into non-blocking mode.  Once in non-blocking mode, there is no
way to return it to blocking mode.



+-*/+-*/+-*/+-*/sync m 
sync()

Wait until the sound device has played every byte in its buffer.  (This happens
implicitly when the device is closed.)  The OSS documentation recommends closing
and re-opening the device rather than using :meth:`sync`.



+-*/+-*/+-*/+-*/setfmt m 
setfmt(format)

Try to set the current audio format to *format*---see :meth:`getfmts` for a
list.  Returns the audio format that the device was set to, which may not be the
requested format.  May also be used to return the current audio format---do this
by passing an "audio format" of :const:`AFMT_QUERY`.



+-*/+-*/+-*/+-*/write m 
write(data)

Write the Python string *data* to the audio device and return the number of
bytes written.  If the audio device is in blocking mode (the default), the
entire string is always written (again, this is different from usual Unix device
semantics).  If the device is in non-blocking mode, some data may not be written
---see :meth:`writeall`.



+-*/+-*/+-*/+-*/getfmts m 
getfmts()

Return a bitmask of the audio output formats supported by the soundcard.  Some
of the formats supported by OSS are:

+-------------------------+---------------------------------------------+
| Format                  | Description                                 |
+=========================+=============================================+
| :const:`AFMT_MU_LAW`    | a logarithmic encoding (used by Sun ``.au`` |
|                         | files and :file:`/dev/audio`)               |
+-------------------------+---------------------------------------------+
| :const:`AFMT_A_LAW`     | a logarithmic encoding                      |
+-------------------------+---------------------------------------------+
| :const:`AFMT_IMA_ADPCM` | a 4:1 compressed format defined by the      |
|                         | Interactive Multimedia Association          |
+-------------------------+---------------------------------------------+
| :const:`AFMT_U8`        | Unsigned, 8-bit audio                       |
+-------------------------+---------------------------------------------+
| :const:`AFMT_S16_LE`    | Signed, 16-bit audio, little-endian byte    |
|                         | order (as used by Intel processors)         |
+-------------------------+---------------------------------------------+
| :const:`AFMT_S16_BE`    | Signed, 16-bit audio, big-endian byte order |
|                         | (as used by 68k, PowerPC, Sparc)            |
+-------------------------+---------------------------------------------+
| :const:`AFMT_S8`        | Signed, 8 bit audio                         |
+-------------------------+---------------------------------------------+
| :const:`AFMT_U16_LE`    | Unsigned, 16-bit little-endian audio        |
+-------------------------+---------------------------------------------+
| :const:`AFMT_U16_BE`    | Unsigned, 16-bit big-endian audio           |
+-------------------------+---------------------------------------------+

Consult the OSS documentation for a full list of audio formats, and note that
most devices support only a subset of these formats.  Some older devices only
support :const:`AFMT_U8`; the most common format used today is
:const:`AFMT_S16_LE`.



+-*/+-*/+-*/+-*/obuffree m 
obuffree()

Returns the number of samples that could be queued into the hardware buffer to
be played without blocking.


+-*/+-*/+-*/+-*/close m 
close()

Explicitly close the audio device.  When you are done writing to or reading from
an audio device, you should explicitly close it.  A closed device cannot be used
again.



+-*/+-*/+-*/+-*/post m 
post()

Tell the driver that there is likely to be a pause in the output, making it
possible for the device to handle the pause more intelligently.  You might use
this after playing a spot sound effect, before waiting for user input, or before
doing disk I/O.


+-*/+-*/+-*/+-*/bufsize m 
bufsize()

Returns the size of the hardware buffer, in samples.



+-*/+-*/+-*/+-*/speed m 
speed(samplerate)

Try to set the audio sampling rate to *samplerate* samples per second.  Returns
the rate actually set.  Most sound devices don't support arbitrary sampling
rates.  Common rates are:

+-------+-------------------------------------------+
| Rate  | Description                               |
+=======+===========================================+
| 8000  | default rate for :file:`/dev/audio`       |
+-------+-------------------------------------------+
| 11025 | speech recording                          |
+-------+-------------------------------------------+
| 22050 |                                           |
+-------+-------------------------------------------+
| 44100 | CD quality audio (at 16 bits/sample and 2 |
|       | channels)                                 |
+-------+-------------------------------------------+
| 96000 | DVD quality audio (at 24 bits/sample)     |
+-------+-------------------------------------------+



+-*/+-*/+-*/+-*/channels m 
channels(nchannels)

Set the number of output channels to *nchannels*.  A value of 1 indicates
monophonic sound, 2 stereophonic.  Some devices may have more than 2 channels,
and some high-end devices may not support mono. Returns the number of channels
the device was set to.



+-*/+-*/sunau p Provide an interface to the Sun AU sound format.
+-*/+-*/+-*/openfp f 
openfp(file, mode)

A synonym for :func:`.open`, maintained for backwards compatibility.



+-*/+-*/+-*/open f 
open(file, mode)

If *file* is a string, open the file by that name, otherwise treat it as a
seekable file-like object. *mode* can be any of

``'r'``
   Read only mode.

``'w'``
   Write only mode.

Note that it does not allow read/write files.

A *mode* of ``'r'`` returns a :class:`AU_read` object, while a *mode* of ``'w'``
or ``'wb'`` returns a :class:`AU_write` object.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_ADPCM_G722 d 
AUDIO_FILE_ENCODING_ADPCM_G722

Additional known values of the encoding field from the AU header, but which are
not supported by this module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_LINEAR_8 d 
AUDIO_FILE_ENCODING_LINEAR_8

Values of the encoding field from the AU header which are supported by this
module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_ADPCM_G723_5 d 
AUDIO_FILE_ENCODING_ADPCM_G723_5

Additional known values of the encoding field from the AU header, but which are
not supported by this module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_ADPCM_G723_3 d 
AUDIO_FILE_ENCODING_ADPCM_G723_3

Additional known values of the encoding field from the AU header, but which are
not supported by this module.



+-*/+-*/+-*/AUDIO_FILE_MAGIC d 
AUDIO_FILE_MAGIC

An integer every valid Sun AU file begins with, stored in big-endian form.  This
is the string ``.snd`` interpreted as an integer.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_ALAW_8 d 
AUDIO_FILE_ENCODING_ALAW_8

Values of the encoding field from the AU header which are supported by this
module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_LINEAR_16 d 
AUDIO_FILE_ENCODING_LINEAR_16

Values of the encoding field from the AU header which are supported by this
module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_LINEAR_32 d 
AUDIO_FILE_ENCODING_LINEAR_32

Values of the encoding field from the AU header which are supported by this
module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_DOUBLE d 
AUDIO_FILE_ENCODING_DOUBLE

Additional known values of the encoding field from the AU header, but which are
not supported by this module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_FLOAT d 
AUDIO_FILE_ENCODING_FLOAT

Additional known values of the encoding field from the AU header, but which are
not supported by this module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_MULAW_8 d 
AUDIO_FILE_ENCODING_MULAW_8

Values of the encoding field from the AU header which are supported by this
module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_LINEAR_24 d 
AUDIO_FILE_ENCODING_LINEAR_24

Values of the encoding field from the AU header which are supported by this
module.



+-*/+-*/+-*/AUDIO_FILE_ENCODING_ADPCM_G721 d 
AUDIO_FILE_ENCODING_ADPCM_G721

Additional known values of the encoding field from the AU header, but which are
not supported by this module.



+-*/+-*/+-*/Error e 
Error

An error raised when something is impossible because of Sun AU specs or
implementation deficiency.



+-*/+-*/+-*/AU_read _ 
+-*/+-*/+-*/+-*/getcompname m 
getcompname()

Human-readable version of :meth:`getcomptype`.  The supported types have the
respective names ``'CCITT G.711 u-law'``, ``'CCITT G.711 A-law'`` and ``'not
compressed'``.



+-*/+-*/+-*/+-*/getframerate m 
getframerate()

Returns sampling frequency.



+-*/+-*/+-*/+-*/getparams m 
getparams()

Returns a tuple ``(nchannels, sampwidth, framerate, nframes, comptype,
compname)``, equivalent to output of the :meth:`get\*` methods.



+-*/+-*/+-*/+-*/setpos m 
setpos(pos)

Set the file pointer to the specified position.  Only values returned from
:meth:`tell` should be used for *pos*.



+-*/+-*/+-*/+-*/getnframes m 
getnframes()

Returns number of audio frames.



+-*/+-*/+-*/+-*/getmarkers m 
getmarkers()

Returns ``None``.



+-*/+-*/+-*/+-*/getmark m 
getmark(id)

Raise an error.



+-*/+-*/+-*/+-*/getcomptype m 
getcomptype()

Returns compression type. Supported compression types are ``'ULAW'``, ``'ALAW'``
and ``'NONE'``.



+-*/+-*/+-*/+-*/rewind m 
rewind()

Rewind the file pointer to the beginning of the audio stream.


+-*/+-*/+-*/+-*/readframes m 
readframes(n)

Reads and returns at most *n* frames of audio, as a string of bytes.  The data
will be returned in linear format.  If the original data is in u-LAW format, it
will be converted.



+-*/+-*/+-*/+-*/close m 
close()

Close the stream, and make the instance unusable. (This is  called automatically
on deletion.)



+-*/+-*/+-*/+-*/tell m 
tell()

Return current file pointer position.  Note that the returned value has nothing
to do with the actual position in the file.


+-*/+-*/+-*/+-*/getnchannels m 
getnchannels()

Returns number of audio channels (1 for mone, 2 for stereo).



+-*/+-*/+-*/+-*/getsampwidth m 
getsampwidth()

Returns sample width in bytes.



+-*/+-*/+-*/AU_write _ 
+-*/+-*/+-*/+-*/setsampwidth m 
setsampwidth(n)

Set the sample width (in bytes.)



+-*/+-*/+-*/+-*/setnframes m 
setnframes(n)

Set the number of frames. This can be later changed, when and if more  frames
are written.



+-*/+-*/+-*/+-*/writeframesraw m 
writeframesraw(data)

Write audio frames, without correcting *nframes*.



+-*/+-*/+-*/+-*/setframerate m 
setframerate(n)

Set the frame rate.



+-*/+-*/+-*/+-*/writeframes m 
writeframes(data)

Write audio frames and make sure *nframes* is correct.



+-*/+-*/+-*/+-*/setnchannels m 
setnchannels(n)

Set the number of channels.



+-*/+-*/+-*/+-*/close m 
close()

Make sure *nframes* is correct, and close the file.

This method is called upon deletion.


+-*/+-*/+-*/+-*/setparams m 
setparams(tuple)

The *tuple* should be ``(nchannels, sampwidth, framerate, nframes, comptype,
compname)``, with values valid for the :meth:`set\*` methods.  Set all
parameters.



+-*/+-*/+-*/+-*/tell m 
tell()

Return current position in the file, with the same disclaimer for the
:meth:`AU_read.tell` and :meth:`AU_read.setpos` methods.



+-*/+-*/+-*/+-*/setcomptype m 
setcomptype(type, name)

Set the compression type and description. Only ``'NONE'`` and ``'ULAW'`` are
supported on output.



+-*/+-*/wave p Provide an interface to the WAV sound format.
+-*/+-*/+-*/openfp f 
openfp(file, mode)

A synonym for :func:`.open`, maintained for backwards compatibility.



+-*/+-*/+-*/open f 
open(file, mode=None)

If *file* is a string, open the file by that name, otherwise treat it as a
seekable file-like object.  *mode* can be any of

``'r'``, ``'rb'``
   Read only mode.

``'w'``, ``'wb'``
   Write only mode.

Note that it does not allow read/write WAV files.

A *mode* of ``'r'`` or ``'rb'`` returns a :class:`Wave_read` object, while a
*mode* of ``'w'`` or ``'wb'`` returns a :class:`Wave_write` object.  If
*mode* is omitted and a file-like object is passed as *file*, ``file.mode``
is used as the default value for *mode* (the ``'b'`` flag is still added if
necessary).

If you pass in a file-like object, the wave object will not close it when its
:meth:`close` method is called; it is the caller's responsibility to close
the file object.



+-*/+-*/+-*/Error e 
Error

An error raised when something is impossible because it violates the WAV
specification or hits an implementation deficiency.



+-*/+-*/+-*/Wave_write _ 
+-*/+-*/+-*/+-*/setsampwidth m 
setsampwidth(n)

Set the sample width to *n* bytes.



+-*/+-*/+-*/+-*/setnchannels m 
setnchannels(n)

Set the number of channels.



+-*/+-*/+-*/+-*/writeframesraw m 
writeframesraw(data)

Write audio frames, without correcting *nframes*.



+-*/+-*/+-*/+-*/setframerate m 
setframerate(n)

Set the frame rate to *n*.

.. versionchanged:: 3.2
   A non-integral input to this method is rounded to the nearest
   integer.



+-*/+-*/+-*/+-*/writeframes m 
writeframes(data)

Write audio frames and make sure *nframes* is correct.



+-*/+-*/+-*/+-*/setnframes m 
setnframes(n)

Set the number of frames to *n*. This will be changed later if more frames are
written.



+-*/+-*/+-*/+-*/close m 
close()

Make sure *nframes* is correct, and close the file if it was opened by
:mod:`wave`.  This method is called upon object collection.



+-*/+-*/+-*/+-*/setparams m 
setparams(tuple)

The *tuple* should be ``(nchannels, sampwidth, framerate, nframes, comptype,
compname)``, with values valid for the :meth:`set\*` methods.  Sets all
parameters.



+-*/+-*/+-*/+-*/tell m 
tell()

Return current position in the file, with the same disclaimer for the
:meth:`Wave_read.tell` and :meth:`Wave_read.setpos` methods.



+-*/+-*/+-*/+-*/setcomptype m 
setcomptype(type, name)

Set the compression type and description. At the moment, only compression type
``NONE`` is supported, meaning no compression.



+-*/+-*/+-*/Wave_read _ 
+-*/+-*/+-*/+-*/getcompname m 
getcompname()

Human-readable version of :meth:`getcomptype`. Usually ``'not compressed'``
parallels ``'NONE'``.



+-*/+-*/+-*/+-*/getsampwidth m 
getsampwidth()

Returns sample width in bytes.



+-*/+-*/+-*/+-*/getparams m 
getparams()

Returns a tuple ``(nchannels, sampwidth, framerate, nframes, comptype,
compname)``, equivalent to output of the :meth:`get\*` methods.



+-*/+-*/+-*/+-*/setpos m 
setpos(pos)

Set the file pointer to the specified position.



+-*/+-*/+-*/+-*/getnframes m 
getnframes()

Returns number of audio frames.



+-*/+-*/+-*/+-*/getmarkers m 
getmarkers()

Returns ``None``.



+-*/+-*/+-*/+-*/getmark m 
getmark(id)

Raise an error.


+-*/+-*/+-*/+-*/getcomptype m 
getcomptype()

Returns compression type (``'NONE'`` is the only supported type).



+-*/+-*/+-*/+-*/rewind m 
rewind()

Rewind the file pointer to the beginning of the audio stream.


+-*/+-*/+-*/+-*/readframes m 
readframes(n)

Reads and returns at most *n* frames of audio, as a string of bytes.



+-*/+-*/+-*/+-*/close m 
close()

Close the stream if it was opened by :mod:`wave`, and make the instance
unusable.  This is called automatically on object collection.



+-*/+-*/+-*/+-*/tell m 
tell()

Return current file pointer position.



+-*/+-*/+-*/+-*/getnchannels m 
getnchannels()

Returns number of audio channels (``1`` for mono, ``2`` for stereo).



+-*/+-*/+-*/+-*/getframerate m 
getframerate()

Returns sampling frequency.



+-*/frameworks _ Program Frameworks
+-*/+-*/cmd p Build line-oriented command interpreters.
+-*/+-*/+-*/Cmd c 
Cmd(completekey='tab', stdin=None, stdout=None)

A :class:`Cmd` instance or subclass instance is a line-oriented interpreter
framework.  There is no good reason to instantiate :class:`Cmd` itself; rather,
it's useful as a superclass of an interpreter class you define yourself in order
to inherit :class:`Cmd`'s methods and encapsulate action methods.

The optional argument *completekey* is the :mod:`readline` name of a completion
key; it defaults to :kbd:`Tab`. If *completekey* is not :const:`None` and
:mod:`readline` is available, command completion is done automatically.

The optional arguments *stdin* and *stdout* specify the  input and output file
objects that the Cmd instance or subclass  instance will use for input and
output. If not specified, they will default to :data:`sys.stdin` and
:data:`sys.stdout`.

If you want a given *stdin* to be used, make sure to set the instance's
:attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be
ignored.



+-*/+-*/+-*/+-*/undoc_header d 
undoc_header

The header to issue if the help output has a section for undocumented  commands
(that is, there are :meth:`do_\*` methods without corresponding :meth:`help_\*`
methods).



+-*/+-*/+-*/+-*/prompt d 
prompt

The prompt issued to solicit input.



+-*/+-*/+-*/+-*/ruler d 
ruler

The character used to draw separator lines under the help-message headers.  If
empty, no ruler line is drawn.  It defaults to ``'='``.



+-*/+-*/+-*/+-*/misc_header d 
misc_header

The header to issue if the help output has a section for miscellaneous  help
topics (that is, there are :meth:`help_\*` methods without corresponding
:meth:`do_\*` methods).



+-*/+-*/+-*/+-*/lastcmd d 
lastcmd

The last nonempty command prefix seen.



+-*/+-*/+-*/+-*/intro d 
intro

A string to issue as an intro or banner.  May be overridden by giving the
:meth:`cmdloop` method an argument.



+-*/+-*/+-*/+-*/use_rawinput d 
use_rawinput

A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to
display a prompt and read the next command; if false, :meth:`sys.stdout.write`
and :meth:`sys.stdin.readline` are used. (This means that by importing
:mod:`readline`, on systems that support it, the interpreter will automatically
support :program:`Emacs`\ -like line editing  and command-history keystrokes.)


+-*/+-*/+-*/+-*/doc_header d 
doc_header

The header to issue if the help output has a section for documented commands.



+-*/+-*/+-*/+-*/identchars d 
identchars

The string of characters accepted for the command prefix.



+-*/+-*/+-*/+-*/postloop m 
postloop()

Hook method executed once when :meth:`cmdloop` is about to return. This method
is a stub in :class:`Cmd`; it exists to be overridden by subclasses.


+-*/+-*/+-*/+-*/default m 
default(line)

Method called on an input line when the command prefix is not recognized. If
this method is not overridden, it prints an error message and returns.



+-*/+-*/+-*/+-*/onecmd m 
onecmd(str)

Interpret the argument as though it had been typed in response to the prompt.
This may be overridden, but should not normally need to be; see the
:meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The
return value is a flag indicating whether interpretation of commands by the
interpreter should stop.  If there is a :meth:`do_\*` method for the command
*str*, the return value of that method is returned, otherwise the return value
from the :meth:`default` method is returned.



+-*/+-*/+-*/+-*/emptyline m 
emptyline()

Method called when an empty line is entered in response to the prompt. If this
method is not overridden, it repeats the last nonempty command entered.



+-*/+-*/+-*/+-*/postcmd m 
postcmd(stop, line)

Hook method executed just after a command dispatch is finished.  This method is
a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* is the
command line which was executed, and *stop* is a flag which indicates whether
execution will be terminated after the call to :meth:`postcmd`; this will be the
return value of the :meth:`onecmd` method.  The return value of this method will
be used as the new value for the internal flag which corresponds to *stop*;
returning false will cause interpretation to continue.



+-*/+-*/+-*/+-*/cmdloop m 
cmdloop(intro=None)

Repeatedly issue a prompt, accept input, parse an initial prefix off the
received input, and dispatch to action methods, passing them the remainder of
the line as argument.

The optional argument is a banner or intro string to be issued before the first
prompt (this overrides the :attr:`intro` class attribute).

If the :mod:`readline` module is loaded, input will automatically inherit
:program:`bash`\ -like history-list editing (e.g. :kbd:`Control-P` scrolls back
to the last command, :kbd:`Control-N` forward to the next one, :kbd:`Control-F`
moves the cursor to the right non-destructively, :kbd:`Control-B` moves the
cursor to the left non-destructively, etc.).

An end-of-file on input is passed back as the string ``'EOF'``.

An interpreter instance will recognize a command name ``foo`` if and only if it
has a method :meth:`do_foo`.  As a special case, a line beginning with the
character ``'?'`` is dispatched to the method :meth:`do_help`.  As another
special case, a line beginning with the character ``'!'`` is dispatched to the
method :meth:`do_shell` (if such a method is defined).

This method will return when the :meth:`postcmd` method returns a true value.
The *stop* argument to :meth:`postcmd` is the return value from the command's
corresponding :meth:`do_\*` method.

If completion is enabled, completing commands will be done automatically, and
completing of commands args is done by calling :meth:`complete_foo` with
arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string prefix
we are attempting to match: all returned matches must begin with it. *line* is
the current input line with leading whitespace removed, *begidx* and *endidx*
are the beginning and ending indexes of the prefix text, which could be used to
provide different completion depending upon which position the argument is in.

All subclasses of :class:`Cmd` inherit a predefined :meth:`do_help`.  This
method, called with an argument ``'bar'``, invokes the corresponding method
:meth:`help_bar`, and if that is not present, prints the docstring of
:meth:`do_bar`, if available.  With no argument, :meth:`do_help` lists all
available help topics (that is, all commands with corresponding
:meth:`help_\*` methods or commands that have docstrings), and also lists any
undocumented commands.



+-*/+-*/+-*/+-*/preloop m 
preloop()

Hook method executed once when :meth:`cmdloop` is called.  This method is a stub
in :class:`Cmd`; it exists to be overridden by subclasses.



+-*/+-*/+-*/+-*/precmd m 
precmd(line)

Hook method executed just before the command line *line* is interpreted, but
after the input prompt is generated and issued.  This method is a stub in
:class:`Cmd`; it exists to be overridden by subclasses.  The return value is
used as the command which will be executed by the :meth:`onecmd` method; the
:meth:`precmd` implementation may re-write the command or simply return *line*
unchanged.



+-*/+-*/+-*/+-*/completedefault m 
completedefault(text, line, begidx, endidx)

Method called to complete an input line when no command-specific
:meth:`complete_\*` method is available.  By default, it returns an empty list.



+-*/+-*/shlex p Simple lexical analysis for Unix shell-like languages.
+-*/+-*/+-*/split f 
split(s, comments=False, posix=True)

Split the string *s* using shell-like syntax. If *comments* is :const:`False`
(the default), the parsing of comments in the given string will be disabled
(setting the :attr:`commenters` attribute of the :class:`shlex` instance to
the empty string).  This function operates in POSIX mode by default, but uses
non-POSIX mode if the *posix* argument is false.

.. note::

   Since the :func:`split` function instantiates a :class:`shlex` instance,
   passing ``None`` for *s* will read the string to split from standard
   input.


+-*/+-*/+-*/shlex c 
shlex(instream=None, infile=None, posix=False)

A :class:`shlex` instance or subclass instance is a lexical analyzer object.
The initialization argument, if present, specifies where to read characters
from. It must be a file-/stream-like object with :meth:`read` and
:meth:`readline` methods, or a string.  If no argument is given, input will
be taken from ``sys.stdin``.  The second optional argument is a filename
string, which sets the initial value of the :attr:`infile` attribute.  If the
*instream* argument is omitted or equal to ``sys.stdin``, this second
argument defaults to "stdin".  The *posix* argument defines the operational
mode: when *posix* is not true (default), the :class:`shlex` instance will
operate in compatibility mode.  When operating in POSIX mode, :class:`shlex`
will try to be as close as possible to the POSIX shell parsing rules.



+-*/+-*/+-*/+-*/whitespace d 
whitespace

Characters that will be considered whitespace and skipped.  Whitespace bounds
tokens.  By default, includes space, tab, linefeed and carriage-return.



+-*/+-*/+-*/+-*/wordchars d 
wordchars

The string of characters that will accumulate into multi-character tokens.  By
default, includes all ASCII alphanumerics and underscore.



+-*/+-*/+-*/+-*/source d 
source

This attribute is ``None`` by default.  If you assign a string to it, that
string will be recognized as a lexical-level inclusion request similar to the
``source`` keyword in various shells.  That is, the immediately following token
will opened as a filename and input taken from that stream until EOF, at which
point the :meth:`close` method of that stream will be called and the input
source will again become the original input stream. Source requests may be
stacked any number of levels deep.



+-*/+-*/+-*/+-*/escapedquotes d 
escapedquotes

Characters in :attr:`quotes` that will interpret escape characters defined in
:attr:`escape`.  This is only used in POSIX mode, and includes just ``'"'`` by
default.



+-*/+-*/+-*/+-*/whitespace_split d 
whitespace_split

If ``True``, tokens will only be split in whitespaces. This is useful, for
example, for parsing command lines with :class:`shlex`, getting tokens in a
similar way to shell arguments.



+-*/+-*/+-*/+-*/infile d 
infile

The name of the current input file, as initially set at class instantiation time
or stacked by later source requests.  It may be useful to examine this when
constructing error messages.



+-*/+-*/+-*/+-*/quotes d 
quotes

Characters that will be considered string quotes.  The token accumulates until
the same quote is encountered again (thus, different quote types protect each
other as in the shell.)  By default, includes ASCII single and double quotes.



+-*/+-*/+-*/+-*/token d 
token

The token buffer.  It may be useful to examine this when catching exceptions.



+-*/+-*/+-*/+-*/lineno d 
lineno

Source line number (count of newlines seen so far plus one).



+-*/+-*/+-*/+-*/escape d 
escape

Characters that will be considered as escape. This will be only used in POSIX
mode, and includes just ``'\'`` by default.



+-*/+-*/+-*/+-*/debug d 
debug

If this attribute is numeric and ``1`` or more, a :class:`shlex` instance will
print verbose progress output on its behavior.  If you need to use this, you can
read the module source code to learn the details.



+-*/+-*/+-*/+-*/commenters d 
commenters

The string of characters that are recognized as comment beginners. All
characters from the comment beginner to end of line are ignored. Includes just
``'#'`` by default.



+-*/+-*/+-*/+-*/instream d 
instream

The input stream from which this :class:`shlex` instance is reading characters.



+-*/+-*/+-*/+-*/eof d 
eof

Token used to determine end of file. This will be set to the empty string
(``''``), in non-POSIX mode, and to ``None`` in POSIX mode.



+-*/+-*/+-*/+-*/sourcehook m 
sourcehook(filename)

When :class:`shlex` detects a source request (see :attr:`source` below) this
method is given the following token as argument, and expected to return a tuple
consisting of a filename and an open file-like object.

Normally, this method first strips any quotes off the argument.  If the result
is an absolute pathname, or there was no previous source request in effect, or
the previous source was a stream (such as ``sys.stdin``), the result is left
alone.  Otherwise, if the result is a relative pathname, the directory part of
the name of the file immediately before it on the source inclusion stack is
prepended (this behavior is like the way the C preprocessor handles ``#include
"file.h"``).

The result of the manipulations is treated as a filename, and returned as the
first component of the tuple, with :func:`open` called on it to yield the second
component. (Note: this is the reverse of the order of arguments in instance
initialization!)

This hook is exposed so that you can use it to implement directory search paths,
addition of file extensions, and other namespace hacks. There is no
corresponding 'close' hook, but a shlex instance will call the :meth:`close`
method of the sourced input stream when it returns EOF.

For more explicit control of source stacking, use the :meth:`push_source` and
:meth:`pop_source` methods.



+-*/+-*/+-*/+-*/read_token m 
read_token()

Read a raw token.  Ignore the pushback stack, and do not interpret source
requests.  (This is not ordinarily a useful entry point, and is documented here
only for the sake of completeness.)



+-*/+-*/+-*/+-*/error_leader m 
error_leader(infile=None, lineno=None)

This method generates an error message leader in the format of a Unix C compiler
error label; the format is ``'"%s", line %d: '``, where the ``%s`` is replaced
with the name of the current source file and the ``%d`` with the current input
line number (the optional arguments can be used to override these).

This convenience is provided to encourage :mod:`shlex` users to generate error
messages in the standard, parseable format understood by Emacs and other Unix
tools.


+-*/+-*/+-*/+-*/get_token m 
get_token()

Return a token.  If tokens have been stacked using :meth:`push_token`, pop a
token off the stack.  Otherwise, read one from the input stream.  If reading
encounters an immediate end-of-file, :attr:`self.eof` is returned (the empty
string (``''``) in non-POSIX mode, and ``None`` in POSIX mode).



+-*/+-*/+-*/+-*/pop_source m 
pop_source()

Pop the last-pushed input source from the input stack. This is the same method
used internally when the lexer reaches EOF on a stacked input stream.



+-*/+-*/+-*/+-*/push_token m 
push_token(str)

Push the argument onto the token stack.



+-*/+-*/+-*/+-*/push_source m 
push_source(newstream, newfile=None)

Push an input source stream onto the input stack.  If the filename argument is
specified it will later be available for use in error messages.  This is the
same method used internally by the :meth:`sourcehook` method.



+-*/+-*/turtle p An educational framework for simple graphics applications
+-*/+-*/+-*/mainloop f 
mainloop()

Starts event loop - calling Tkinter's mainloop function.
Must be the last statement in a turtle graphics program.
Must *not* be used if a script is run from within IDLE in -n mode
(No subprocess) - for interactive use of turtle graphics. ::

   >>> screen.mainloop()



+-*/+-*/+-*/exitonclick f 
exitonclick()

Bind bye() method to mouse clicks on the Screen.


If the value "using_IDLE" in the configuration dictionary is ``False``
(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` switch
(no subprocess) is used, this value should be set to ``True`` in
:file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the
client script.



+-*/+-*/+-*/window_width f 
window_width()

Return the width of the turtle window. ::

    >>> screen.window_width()
    640



+-*/+-*/+-*/shape f 
shape(name=None)

:param name: a string which is a valid shapename

Set turtle shape to shape with given *name* or, if name is not given, return
name of current shape.  Shape with *name* must exist in the TurtleScreen's
shape dictionary.  Initially there are the following polygon shapes: "arrow",
"turtle", "circle", "square", "triangle", "classic".  To learn about how to
deal with shapes see Screen method :func:`register_shape`.

.. doctest::

   >>> turtle.shape()
   'classic'
   >>> turtle.shape("turtle")
   >>> turtle.shape()
   'turtle'



+-*/+-*/+-*/onkey f 
onkey(fun, key)

:param fun: a function with no arguments or ``None``
:param key: a string: key (e.g. "a") or key-symbol (e.g. "space")

Bind *fun* to key-release event of key.  If *fun* is ``None``, event bindings
are removed. Remark: in order to be able to register key-events, TurtleScreen
must have the focus. (See method :func:`listen`.)

.. doctest::

   >>> def f():
   ...     fd(50)
   ...     lt(60)
   ...
   >>> screen.onkey(f, "Up")
   >>> screen.listen()



+-*/+-*/+-*/speed f 
speed(speed=None)

:param speed: an integer in the range 0..10 or a speedstring (see below)

Set the turtle's speed to an integer value in the range 0..10.  If no
argument is given, return current speed.

If input is a number greater than 10 or smaller than 0.5, speed is set
to 0.  Speedstrings are mapped to speedvalues as follows:

* "fastest":  0
* "fast":  10
* "normal":  6
* "slow":  3
* "slowest":  1

Speeds from 1 to 10 enforce increasingly faster animation of line drawing
and turtle turning.

Attention: *speed* = 0 means that *no* animation takes
place. forward/back makes turtle jump and likewise left/right make the
turtle turn instantly.

.. doctest::

   >>> turtle.speed()
   3
   >>> turtle.speed('normal')
   >>> turtle.speed()
   6
   >>> turtle.speed(9)
   >>> turtle.speed()
   9



+-*/+-*/+-*/delay f 
delay(delay=None)

:param delay: positive integer

Set or return the drawing *delay* in milliseconds.  (This is approximately
the time interval between two consecutive canvas updates.)  The longer the
drawing delay, the slower the animation.

Optional argument:

.. doctest::

   >>> screen.delay()
   10
   >>> screen.delay(5)
   >>> screen.delay()
   5



+-*/+-*/+-*/title f 
title(titlestring)

:param titlestring: a string that is shown in the titlebar of the turtle
                    graphics window

Set title of turtle window to *titlestring*.

.. doctest::

   >>> screen.title("Welcome to the turtle zoo!")



+-*/+-*/+-*/hideturtle f 
hideturtle()

Make the turtle invisible.  It's a good idea to do this while you're in the
middle of doing some complex drawing, because hiding the turtle speeds up the
drawing observably.

.. doctest::

   >>> turtle.hideturtle()



+-*/+-*/+-*/lt f 
lt(angle)

:param angle: a number (integer or float)

Turn turtle left by *angle* units.  (Units are by default degrees, but
can be set via the :func:`degrees` and :func:`radians` functions.)  Angle
orientation depends on the turtle mode, see :func:`mode`.

.. doctest::
   :hide:

   >>> turtle.setheading(22)

.. doctest::

   >>> turtle.heading()
   22.0
   >>> turtle.left(45)
   >>> turtle.heading()
   67.0



+-*/+-*/+-*/tiltangle f 
tiltangle(angle=None)

:param angle: a number (optional)

Set or return the current tilt-angle. If angle is given, rotate the
turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle. Do *not* change the turtle's
heading (direction of movement).
If angle is not given: return the current tilt-angle, i. e. the angle
between the orientation of the turtleshape and the heading of the
turtle (its direction of movement).

.. doctest::

   >>> turtle.reset()
   >>> turtle.shape("circle")
   >>> turtle.shapesize(5,2)
   >>> turtle.tilt(45)
   >>> turtle.tiltangle()
   45.0



+-*/+-*/+-*/degrees f 
degrees(fullcircle=360.0)

:param fullcircle: a number

Set angle measurement units, i.e. set number of "degrees" for a full circle.
Default value is 360 degrees.

.. doctest::

   >>> turtle.home()
   >>> turtle.left(90)
   >>> turtle.heading()
   90.0

   Change angle measurement unit to grad (also known as gon,
   grade, or gradian and equals 1/100-th of the right angle.)
   >>> turtle.degrees(400.0)
   >>> turtle.heading()
   100.0
   >>> turtle.degrees(360)
   >>> turtle.heading()
   90.0



+-*/+-*/+-*/write_docstringdict f 
write_docstringdict(filename="turtle_docstringdict")

:param filename: a string, used as filename

Create and write docstring-dictionary to a Python script with the given
filename.  This function has to be called explicitly (it is not used by the
turtle graphics classes).  The docstring dictionary will be written to the
Python script :file:`{filename}.py`.  It is intended to serve as a template
for translation of the docstrings into different languages.


+-*/+-*/+-*/circle f 
circle(radius, extent=None, steps=None)

:param radius: a number
:param extent: a number (or ``None``)
:param steps: an integer (or ``None``)

Draw a circle with given *radius*.  The center is *radius* units left of
the turtle; *extent* -- an angle -- determines which part of the circle
is drawn.  If *extent* is not given, draw the entire circle.  If *extent*
is not a full circle, one endpoint of the arc is the current pen
position.  Draw the arc in counterclockwise direction if *radius* is
positive, otherwise in clockwise direction.  Finally the direction of the
turtle is changed by the amount of *extent*.

As the circle is approximated by an inscribed regular polygon, *steps*
determines the number of steps to use.  If not given, it will be
calculated automatically.  May be used to draw regular polygons.

.. doctest::

   >>> turtle.home()
   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.heading()
   0.0
   >>> turtle.circle(50)
   >>> turtle.position()
   (-0.00,0.00)
   >>> turtle.heading()
   0.0
   >>> turtle.circle(120, 180)  # draw a semicircle
   >>> turtle.position()
   (0.00,240.00)
   >>> turtle.heading()
   180.0



+-*/+-*/+-*/bye f 
bye()

Shut the turtlegraphics window.



+-*/+-*/+-*/resizemode f 
resizemode(rmode=None)

:param rmode: one of the strings "auto", "user", "noresize"

Set resizemode to one of the values: "auto", "user", "noresize".  If *rmode*
is not given, return current resizemode.  Different resizemodes have the
following effects:

- "auto": adapts the appearance of the turtle corresponding to the value of pensize.
- "user": adapts the appearance of the turtle according to the values of
  stretchfactor and outlinewidth (outline), which are set by
  :func:`shapesize`.
- "noresize": no adaption of the turtle's appearance takes place.

resizemode("user") is called by :func:`shapesize` when used with arguments.

.. doctest::

   >>> turtle.resizemode()
   'noresize'
   >>> turtle.resizemode("auto")
   >>> turtle.resizemode()
   'auto'



+-*/+-*/+-*/setundobuffer f 
setundobuffer(size)

:param size: an integer or ``None``

Set or disable undobuffer.  If *size* is an integer an empty undobuffer of
given size is installed.  *size* gives the maximum number of turtle actions
that can be undone by the :func:`undo` method/function.  If *size* is
``None``, the undobuffer is disabled.

.. doctest::

   >>> turtle.setundobuffer(42)



+-*/+-*/+-*/onkeypress f 
onkeypress(fun, key=None)

:param fun: a function with no arguments or ``None``
:param key: a string: key (e.g. "a") or key-symbol (e.g. "space")

Bind *fun* to key-press event of key if key is given,
or to any key-press-event if no key is given.
Remark: in order to be able to register key-events, TurtleScreen
must have focus. (See method :func:`listen`.)

.. doctest::

   >>> def f():
   ...     fd(50)
   ...
   >>> screen.onkey(f, "Up")
   >>> screen.listen()



+-*/+-*/+-*/colormode f 
colormode(cmode=None)

:param cmode: one of the values 1.0 or 255

Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b*
values of color triples have to be in the range 0..\ *cmode*.

.. doctest::

   >>> screen.colormode(1)
   >>> turtle.pencolor(240, 160, 80)
   Traceback (most recent call last):
        ...
   TurtleGraphicsError: bad color sequence: (240, 160, 80)
   >>> screen.colormode()
   1.0
   >>> screen.colormode(255)
   >>> screen.colormode()
   255
   >>> turtle.pencolor(240,160,80)



+-*/+-*/+-*/fillcolor f 
fillcolor(*args)

Return or set the fillcolor.

Four input formats are allowed:

``fillcolor()``
   Return the current fillcolor as color specification string, possibly
   in tuple format (see example).  May be used as input to another
   color/pencolor/fillcolor call.

``fillcolor(colorstring)``
   Set fillcolor to *colorstring*, which is a Tk color specification string,
   such as ``"red"``, ``"yellow"``, or ``"#33cc8c"``.

``fillcolor((r, g, b))``
   Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and
   *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where
   colormode is either 1.0 or 255 (see :func:`colormode`).

``fillcolor(r, g, b)``
   Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of
   *r*, *g*, and *b* must be in the range 0..colormode.

 If turtleshape is a polygon, the interior of that polygon is drawn
 with the newly set fillcolor.

.. doctest::

    >>> turtle.fillcolor("violet")
    >>> turtle.fillcolor()
    'violet'
    >>> col = turtle.pencolor()
    >>> col
    (50.0, 193.0, 143.0)
    >>> turtle.fillcolor(col)
    >>> turtle.fillcolor()
    (50.0, 193.0, 143.0)
    >>> turtle.fillcolor('#ffffff')
    >>> turtle.fillcolor()
    (255.0, 255.0, 255.0)



+-*/+-*/+-*/undobufferentries f 
undobufferentries()

Return number of entries in the undobuffer.

.. doctest::

   >>> while undobufferentries():
   ...     undo()




+-*/+-*/+-*/xcor f 
xcor()

Return the turtle's x coordinate.

.. doctest::

   >>> turtle.home()
   >>> turtle.left(50)
   >>> turtle.forward(100)
   >>> turtle.pos()
   (64.28,76.60)
   >>> print(round(turtle.xcor(), 5))
   64.27876



+-*/+-*/+-*/onscreenclick f 
onscreenclick(fun, btn=1, add=None)

:param fun: a function with two arguments which will be called with the
            coordinates of the clicked point on the canvas
:param num: number of the mouse-button, defaults to 1 (left mouse button)
:param add: ``True`` or ``False`` -- if ``True``, a new binding will be
            added, otherwise it will replace a former binding

Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``,
existing bindings are removed.

Example for a TurtleScreen instance named ``screen`` and a Turtle instance
named turtle:

.. doctest::

   >>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will
   >>>                             # make the turtle move to the clicked point.
   >>> screen.onclick(None)        # remove event binding again

.. note::
   This TurtleScreen method is available as a global function only under the
   name ``onscreenclick``.  The global function ``onclick`` is another one
   derived from the Turtle method ``onclick``.



+-*/+-*/+-*/radians f 
radians()

Set the angle measurement units to radians.  Equivalent to
``degrees(2*math.pi)``.

.. doctest::

   >>> turtle.home()
   >>> turtle.left(90)
   >>> turtle.heading()
   90.0
   >>> turtle.radians()
   >>> turtle.heading()
   1.5707963267948966

.. doctest::
   :hide:

   >>> turtle.degrees(360)



+-*/+-*/+-*/filling f 
filling()

Return fillstate (``True`` if filling, ``False`` else).

.. doctest::

    >>> turtle.begin_fill()
    >>> if turtle.filling():
    ...    turtle.pensize(5)
    ... else:
    ...    turtle.pensize(3)




+-*/+-*/+-*/mode f 
mode(mode=None)

:param mode: one of the strings "standard", "logo" or "world"

Set turtle mode ("standard", "logo" or "world") and perform reset.  If mode
is not given, current mode is returned.

Mode "standard" is compatible with old :mod:`turtle`.  Mode "logo" is
compatible with most Logo turtle graphics.  Mode "world" uses user-defined
"world coordinates". **Attention**: in this mode angles appear distorted if
``x/y`` unit-ratio doesn't equal 1.

============ ========================= ===================
    Mode      Initial turtle heading     positive angles
============ ========================= ===================
 "standard"    to the right (east)       counterclockwise
   "logo"        upward    (north)         clockwise
============ ========================= ===================

.. doctest::

   >>> mode("logo")   # resets turtle heading to north
   >>> mode()
   'logo'



+-*/+-*/+-*/setposition f 
setposition(x, y=None)

:param x: a number or a pair/vector of numbers
:param y: a number or ``None``

If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D`
(e.g. as returned by :func:`pos`).

Move turtle to an absolute position.  If the pen is down, draw line.  Do
not change the turtle's orientation.

.. doctest::
   :hide:

   >>> turtle.goto(0, 0)

.. doctest::

    >>> tp = turtle.pos()
    >>> tp
    (0.00,0.00)
    >>> turtle.setpos(60,30)
    >>> turtle.pos()
    (60.00,30.00)
    >>> turtle.setpos((20,80))
    >>> turtle.pos()
    (20.00,80.00)
    >>> turtle.setpos(tp)
    >>> turtle.pos()
    (0.00,0.00)



+-*/+-*/+-*/setup f 
setup(width=_CFG["width"], height=_CFG["height"], startx=_CFG["leftright"], starty=_CFG["topbottom"])

Set the size and position of the main window.  Default values of arguments
are stored in the configuration dictionary and can be changed via a
:file:`turtle.cfg` file.

:param width: if an integer, a size in pixels, if a float, a fraction of the
              screen; default is 50% of screen
:param height: if an integer, the height in pixels, if a float, a fraction of
               the screen; default is 75% of screen
:param startx: if positive, starting position in pixels from the left
               edge of the screen, if negative from the right edge, if None,
               center window horizontally
:param startx: if positive, starting position in pixels from the top
               edge of the screen, if negative from the bottom edge, if None,
               center window vertically

.. doctest::

   >>> screen.setup (width=200, height=200, startx=0, starty=0)
   >>>              # sets window to 200x200 pixels, in upper left of screen
   >>> screen.setup(width=.75, height=0.5, startx=None, starty=None)
   >>>              # sets window to 75% of screen by 50% of screen and centers



+-*/+-*/+-*/right f 
right(angle)

:param angle: a number (integer or float)

Turn turtle right by *angle* units.  (Units are by default degrees, but
can be set via the :func:`degrees` and :func:`radians` functions.)  Angle
orientation depends on the turtle mode, see :func:`mode`.

.. doctest::
   :hide:

   >>> turtle.setheading(22)

.. doctest::

   >>> turtle.heading()
   22.0
   >>> turtle.right(45)
   >>> turtle.heading()
   337.0



+-*/+-*/+-*/setpos f 
setpos(x, y=None)

:param x: a number or a pair/vector of numbers
:param y: a number or ``None``

If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D`
(e.g. as returned by :func:`pos`).

Move turtle to an absolute position.  If the pen is down, draw line.  Do
not change the turtle's orientation.

.. doctest::
   :hide:

   >>> turtle.goto(0, 0)

.. doctest::

    >>> tp = turtle.pos()
    >>> tp
    (0.00,0.00)
    >>> turtle.setpos(60,30)
    >>> turtle.pos()
    (60.00,30.00)
    >>> turtle.setpos((20,80))
    >>> turtle.pos()
    (20.00,80.00)
    >>> turtle.setpos(tp)
    >>> turtle.pos()
    (0.00,0.00)



+-*/+-*/+-*/end_fill f 
end_fill()

Fill the shape drawn after the last call to :func:`begin_fill`.

.. doctest::

   >>> turtle.color("black", "red")
   >>> turtle.begin_fill()
   >>> turtle.circle(80)
   >>> turtle.end_fill()



+-*/+-*/+-*/back f 
back(distance)

:param distance: a number

Move the turtle backward by *distance*, opposite to the direction the
turtle is headed.  Do not change the turtle's heading.

.. doctest::
   :hide:

   >>> turtle.goto(0, 0)

.. doctest::

   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.backward(30)
   >>> turtle.position()
   (-30.00,0.00)



+-*/+-*/+-*/getcanvas f 
getcanvas()

Return the Canvas of this TurtleScreen.  Useful for insiders who know what to
do with a Tkinter Canvas.

.. doctest::

   >>> cv = screen.getcanvas()
   >>> cv
   <turtle.ScrolledCanvas object at ...>



+-*/+-*/+-*/pendown f 
pendown()

Pull the pen down -- drawing when moving.



+-*/+-*/+-*/towards f 
towards(x, y=None)

:param x: a number or a pair/vector of numbers or a turtle instance
:param y: a number if *x* is a number, else ``None``

Return the angle between the line from turtle position to position specified
by (x,y), the vector or the other turtle.  This depends on the turtle's start
orientation which depends on the mode - "standard"/"world" or "logo").

.. doctest::

   >>> turtle.goto(10, 10)
   >>> turtle.towards(0,0)
   225.0



+-*/+-*/+-*/home f 
home()

Move turtle to the origin -- coordinates (0,0) -- and set its heading to
its start-orientation (which depends on the mode, see :func:`mode`).

.. doctest::
   :hide:

   >>> turtle.setheading(90)
   >>> turtle.goto(0, -10)

.. doctest::

   >>> turtle.heading()
   90.0
   >>> turtle.position()
   (0.00,-10.00)
   >>> turtle.home()
   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.heading()
   0.0



+-*/+-*/+-*/getturtle f 
getturtle()

Return the Turtle object itself.  Only reasonable use: as a function to
return the "anonymous turtle":

.. doctest::

   >>> pet = getturtle()
   >>> pet.fd(50)
   >>> pet
   <turtle.Turtle object at 0x...>



+-*/+-*/+-*/clearstamp f 
clearstamp(stampid)

:param stampid: an integer, must be return value of previous
                :func:`stamp` call

Delete stamp with given *stampid*.

.. doctest::

   >>> turtle.position()
   (150.00,-0.00)
   >>> turtle.color("blue")
   >>> astamp = turtle.stamp()
   >>> turtle.fd(50)
   >>> turtle.position()
   (200.00,-0.00)
   >>> turtle.clearstamp(astamp)
   >>> turtle.position()
   (200.00,-0.00)



+-*/+-*/+-*/rt f 
rt(angle)

:param angle: a number (integer or float)

Turn turtle right by *angle* units.  (Units are by default degrees, but
can be set via the :func:`degrees` and :func:`radians` functions.)  Angle
orientation depends on the turtle mode, see :func:`mode`.

.. doctest::
   :hide:

   >>> turtle.setheading(22)

.. doctest::

   >>> turtle.heading()
   22.0
   >>> turtle.right(45)
   >>> turtle.heading()
   337.0



+-*/+-*/+-*/get_poly f 
get_poly()

Return the last recorded polygon.

.. doctest::

   >>> turtle.home()
   >>> turtle.begin_poly()
   >>> turtle.fd(100)
   >>> turtle.left(20)
   >>> turtle.fd(30)
   >>> turtle.left(60)
   >>> turtle.fd(50)
   >>> turtle.end_poly()
   >>> p = turtle.get_poly()
   >>> register_shape("myFavouriteShape", p)



+-*/+-*/+-*/heading f 
heading()

Return the turtle's current heading (value depends on the turtle mode, see
:func:`mode`).

.. doctest::

   >>> turtle.home()
   >>> turtle.left(67)
   >>> turtle.heading()
   67.0



+-*/+-*/+-*/pen f 
pen(pen=None, **pendict)

:param pen: a dictionary with some or all of the below listed keys
:param pendict: one or more keyword-arguments with the below listed keys as keywords

Return or set the pen's attributes in a "pen-dictionary" with the following
key/value pairs:

* "shown": True/False
* "pendown": True/False
* "pencolor": color-string or color-tuple
* "fillcolor": color-string or color-tuple
* "pensize": positive number
* "speed": number in range 0..10
* "resizemode": "auto" or "user" or "noresize"
* "stretchfactor": (positive number, positive number)
* "outline": positive number
* "tilt": number

This dictionary can be used as argument for a subsequent call to :func:`pen`
to restore the former pen-state.  Moreover one or more of these attributes
can be provided as keyword-arguments.  This can be used to set several pen
attributes in one statement.

.. doctest::
   :options: +NORMALIZE_WHITESPACE

   >>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)
   >>> sorted(turtle.pen().items())
   [('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),
    ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
    ('shearfactor', 0.0), ('shown', True), ('speed', 9),
    ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]
   >>> penstate=turtle.pen()
   >>> turtle.color("yellow", "")
   >>> turtle.penup()
   >>> sorted(turtle.pen().items())[:3]
   [('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]
   >>> turtle.pen(penstate, fillcolor="green")
   >>> sorted(turtle.pen().items())[:3]
   [('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]


+-*/+-*/+-*/shapetransform f 
shapetransform(t11=None, t12=None, t21=None, t22=None)

:param t11: a number (optional)
:param t12: a number (optional)
:param t21: a number (optional)
:param t12: a number (optional)

Set or return the current transformation matrix of the turtle shape.

If none of the matrix elements are given, return the transformation
matrix as a tuple of 4 elements.
Otherwise set the given elements and transform the turtleshape
according to the matrix consisting of first row t11, t12 and
second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be
zero, otherwise an error is raised.
Modify stretchfactor, shearfactor and tiltangle according to the
given matrix.

.. doctest::

   >>> turtle = Turtle()
   >>> turtle.shape("square")
   >>> turtle.shapesize(4,2)
   >>> turtle.shearfactor(-0.5)
   >>> turtle.shapetransform()
   (4.0, -1.0, -0.0, 2.0)



+-*/+-*/+-*/begin_poly f 
begin_poly()

Start recording the vertices of a polygon.  Current turtle position is first
vertex of polygon.



+-*/+-*/+-*/ondrag f 
ondrag(fun, btn=1, add=None)

:param fun: a function with two arguments which will be called with the
            coordinates of the clicked point on the canvas
:param num: number of the mouse-button, defaults to 1 (left mouse button)
:param add: ``True`` or ``False`` -- if ``True``, a new binding will be
            added, otherwise it will replace a former binding

Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``,
existing bindings are removed.

Remark: Every sequence of mouse-move-events on a turtle is preceded by a
mouse-click event on that turtle.

.. doctest::

   >>> turtle.ondrag(turtle.goto)

Subsequently, clicking and dragging the Turtle will move it across
the screen thereby producing handdrawings (if pen is down).



+-*/+-*/+-*/addshape f 
addshape(name, shape=None)

There are three different ways to call this function:

(1) *name* is the name of a gif-file and *shape* is ``None``: Install the
    corresponding image shape. ::

    >>> screen.register_shape("turtle.gif")

    .. note::
       Image shapes *do not* rotate when turning the turtle, so they do not
       display the heading of the turtle!

(2) *name* is an arbitrary string and *shape* is a tuple of pairs of
    coordinates: Install the corresponding polygon shape.

    .. doctest::

       >>> screen.register_shape("triangle", ((5,-3), (0,5), (-5,-3)))

(3) *name* is an arbitrary string and shape is a (compound) :class:`Shape`
    object: Install the corresponding compound shape.

Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered
shapes can be used by issuing the command ``shape(shapename)``.



+-*/+-*/+-*/pensize f 
pensize(width=None)

:param width: a positive number

Set the line thickness to *width* or return it.  If resizemode is set to
"auto" and turtleshape is a polygon, that polygon is drawn with the same line
thickness.  If no argument is given, the current pensize is returned.

.. doctest::

   >>> turtle.pensize()
   1
   >>> turtle.pensize(10)   # from here on lines of width 10 are drawn



+-*/+-*/+-*/clearstamps f 
clearstamps(n=None)

:param n: an integer (or ``None``)

Delete all or first/last *n* of turtle's stamps.  If *n* is None, delete
all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete
last *n* stamps.

.. doctest::

   >>> for i in range(8):
   ...     turtle.stamp(); turtle.fd(30)
   13
   14
   15
   16
   17
   18
   19
   20
   >>> turtle.clearstamps(2)
   >>> turtle.clearstamps(-2)
   >>> turtle.clearstamps()



+-*/+-*/+-*/goto f 
goto(x, y=None)

:param x: a number or a pair/vector of numbers
:param y: a number or ``None``

If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D`
(e.g. as returned by :func:`pos`).

Move turtle to an absolute position.  If the pen is down, draw line.  Do
not change the turtle's orientation.

.. doctest::
   :hide:

   >>> turtle.goto(0, 0)

.. doctest::

    >>> tp = turtle.pos()
    >>> tp
    (0.00,0.00)
    >>> turtle.setpos(60,30)
    >>> turtle.pos()
    (60.00,30.00)
    >>> turtle.setpos((20,80))
    >>> turtle.pos()
    (20.00,80.00)
    >>> turtle.setpos(tp)
    >>> turtle.pos()
    (0.00,0.00)



+-*/+-*/+-*/window_height f 
window_height()

Return the height of the turtle window. ::

    >>> screen.window_height()
    480



+-*/+-*/+-*/undo f 
undo()

Undo (repeatedly) the last turtle action(s).  Number of available
undo actions is determined by the size of the undobuffer.

.. doctest::

   >>> for i in range(4):
   ...     turtle.fd(50); turtle.lt(80)
   ...
   >>> for i in range(8):
   ...     turtle.undo()



+-*/+-*/+-*/bk f 
bk(distance)

:param distance: a number

Move the turtle backward by *distance*, opposite to the direction the
turtle is headed.  Do not change the turtle's heading.

.. doctest::
   :hide:

   >>> turtle.goto(0, 0)

.. doctest::

   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.backward(30)
   >>> turtle.position()
   (-30.00,0.00)



+-*/+-*/+-*/begin_fill f 
begin_fill()

To be called just before drawing a shape to be filled.



+-*/+-*/+-*/tracer f 
tracer(n=None, delay=None)

:param n: nonnegative integer
:param delay: nonnegative integer

Turn turtle animation on/off and set delay for update drawings.  If
*n* is given, only each n-th regular screen update is really
performed.  (Can be used to accelerate the drawing of complex
graphics.)  When called without arguments, returns the currently
stored value of n. Second argument sets delay value (see
:func:`delay`).

.. doctest::

   >>> screen.tracer(8, 25)
   >>> dist = 2
   >>> for i in range(200):
   ...     fd(dist)
   ...     rt(90)
   ...     dist += 2



+-*/+-*/+-*/bgpic f 
bgpic(picname=None)

:param picname: a string, name of a gif-file or ``"nopic"``, or ``None``

Set background image or return name of current backgroundimage.  If *picname*
is a filename, set the corresponding image as background.  If *picname* is
``"nopic"``, delete background image, if present.  If *picname* is ``None``,
return the filename of the current backgroundimage. ::

    >>> screen.bgpic()
    'nopic'
    >>> screen.bgpic("landscape.gif")
    >>> screen.bgpic()
    "landscape.gif"



+-*/+-*/+-*/textinput f 
textinput(title, prompt)

:param title: string
:param prompt: string

Pop up a dialog window for input of a string. Parameter title is
the title of the dialog window, propmt is a text mostly describing
what information to input.
Return the string input. If the dialog is canceled, return None. ::

   >>> screen.textinput("NIM", "Name of first player:")



+-*/+-*/+-*/sety f 
sety(y)

:param y: a number (integer or float)

Set the turtle's second coordinate to *y*, leave first coordinate unchanged.

.. doctest::
   :hide:

   >>> turtle.goto(0, 40)

.. doctest::

   >>> turtle.position()
   (0.00,40.00)
   >>> turtle.sety(-10)
   >>> turtle.position()
   (0.00,-10.00)



+-*/+-*/+-*/color f 
color(*args)

Return or set pencolor and fillcolor.

Several input formats are allowed.  They use 0 to 3 arguments as
follows:

``color()``
   Return the current pencolor and the current fillcolor as a pair of color
   specification strings or tuples as returned by :func:`pencolor` and
   :func:`fillcolor`.

``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``
   Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the
   given value.

``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``
   Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)``
   and analogously if the other input format is used.

 If turtleshape is a polygon, outline and interior of that polygon is drawn
 with the newly set colors.

.. doctest::

    >>> turtle.color("red", "green")
    >>> turtle.color()
    ('red', 'green')
    >>> color("#285078", "#a0c8f0")
    >>> color()
    ((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))



+-*/+-*/+-*/pos f 
pos()

Return the turtle's current location (x,y) (as a :class:`Vec2D` vector).

.. doctest::

   >>> turtle.pos()
   (440.00,-0.00)



+-*/+-*/+-*/down f 
down()

Pull the pen down -- drawing when moving.



+-*/+-*/+-*/isvisible f 
isvisible()

Return True if the Turtle is shown, False if it's hidden.

>>> turtle.hideturtle()
>>> turtle.isvisible()
False
>>> turtle.showturtle()
>>> turtle.isvisible()
True



+-*/+-*/+-*/pu f 
pu()

Pull the pen up -- no drawing when moving.



+-*/+-*/+-*/stamp f 
stamp()

Stamp a copy of the turtle shape onto the canvas at the current turtle
position.  Return a stamp_id for that stamp, which can be used to delete
it by calling ``clearstamp(stamp_id)``.

.. doctest::

   >>> turtle.color("blue")
   >>> turtle.stamp()
   11
   >>> turtle.fd(50)



+-*/+-*/+-*/getscreen f 
getscreen()

Return the :class:`TurtleScreen` object the turtle is drawing on.
TurtleScreen methods can then be called for that object.

.. doctest::

   >>> ts = turtle.getscreen()
   >>> ts
   <turtle._Screen object at 0x...>
   >>> ts.bgcolor("pink")



+-*/+-*/+-*/pd f 
pd()

Pull the pen down -- drawing when moving.



+-*/+-*/+-*/forward f 
forward(distance)

:param distance: a number (integer or float)

Move the turtle forward by the specified *distance*, in the direction the
turtle is headed.

.. doctest::

   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.forward(25)
   >>> turtle.position()
   (25.00,0.00)
   >>> turtle.forward(-75)
   >>> turtle.position()
   (-50.00,0.00)



+-*/+-*/+-*/listen f 
listen(xdummy=None, ydummy=None)

Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments
are provided in order to be able to pass :func:`listen` to the onclick method.



+-*/+-*/+-*/setworldcoordinates f 
setworldcoordinates(llx, lly, urx, ury)

:param llx: a number, x-coordinate of lower left corner of canvas
:param lly: a number, y-coordinate of lower left corner of canvas
:param urx: a number, x-coordinate of upper right corner of canvas
:param ury: a number, y-coordinate of upper right corner of canvas

Set up user-defined coordinate system and switch to mode "world" if
necessary.  This performs a ``screen.reset()``.  If mode "world" is already
active, all drawings are redrawn according to the new coordinates.

**ATTENTION**: in user-defined coordinate systems angles may appear
distorted.

.. doctest::

   >>> screen.reset()
   >>> screen.setworldcoordinates(-50,-7.5,50,7.5)
   >>> for _ in range(72):
   ...     left(10)
   ...
   >>> for _ in range(8):
   ...     left(45); fd(2)   # a regular octagon

.. doctest::
   :hide:

   >>> screen.reset()
   >>> for t in turtles():
   ...      t.reset()



+-*/+-*/+-*/register_shape f 
register_shape(name, shape=None)

There are three different ways to call this function:

(1) *name* is the name of a gif-file and *shape* is ``None``: Install the
    corresponding image shape. ::

    >>> screen.register_shape("turtle.gif")

    .. note::
       Image shapes *do not* rotate when turning the turtle, so they do not
       display the heading of the turtle!

(2) *name* is an arbitrary string and *shape* is a tuple of pairs of
    coordinates: Install the corresponding polygon shape.

    .. doctest::

       >>> screen.register_shape("triangle", ((5,-3), (0,5), (-5,-3)))

(3) *name* is an arbitrary string and shape is a (compound) :class:`Shape`
    object: Install the corresponding compound shape.

Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered
shapes can be used by issuing the command ``shape(shapename)``.



+-*/+-*/+-*/ht f 
ht()

Make the turtle invisible.  It's a good idea to do this while you're in the
middle of doing some complex drawing, because hiding the turtle speeds up the
drawing observably.

.. doctest::

   >>> turtle.hideturtle()



+-*/+-*/+-*/screensize f 
screensize(canvwidth=None, canvheight=None, bg=None)

:param canvwidth: positive integer, new width of canvas in pixels
:param canvheight: positive integer, new height of canvas in pixels
:param bg: colorstring or color-tuple, new background color

If no arguments are given, return current (canvaswidth, canvasheight).  Else
resize the canvas the turtles are drawing on.  Do not alter the drawing
window.  To observe hidden parts of the canvas, use the scrollbars. With this
method, one can make visible those parts of a drawing which were outside the
canvas before.

   >>> screen.screensize()
   (400, 300)
   >>> screen.screensize(2000,1500)
   >>> screen.screensize()
   (2000, 1500)

e.g. to search for an erroneously escaped turtle ;-)



+-*/+-*/+-*/end_poly f 
end_poly()

Stop recording the vertices of a polygon.  Current turtle position is last
vertex of polygon.  This will be connected with the first vertex.



+-*/+-*/+-*/isdown f 
isdown()

Return ``True`` if pen is down, ``False`` if it's up.

.. doctest::

   >>> turtle.penup()
   >>> turtle.isdown()
   False
   >>> turtle.pendown()
   >>> turtle.isdown()
   True



+-*/+-*/+-*/getpen f 
getpen()

Return the Turtle object itself.  Only reasonable use: as a function to
return the "anonymous turtle":

.. doctest::

   >>> pet = getturtle()
   >>> pet.fd(50)
   >>> pet
   <turtle.Turtle object at 0x...>



+-*/+-*/+-*/reset f 
reset()

Delete the turtle's drawings from the screen, re-center the turtle and set
variables to the default values.

.. doctest::

   >>> turtle.goto(0,-22)
   >>> turtle.left(100)
   >>> turtle.position()
   (0.00,-22.00)
   >>> turtle.heading()
   100.0
   >>> turtle.reset()
   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.heading()
   0.0




+-*/+-*/+-*/distance f 
distance(x, y=None)

:param x: a number or a pair/vector of numbers or a turtle instance
:param y: a number if *x* is a number, else ``None``

Return the distance from the turtle to (x,y), the given vector, or the given
other turtle, in turtle step units.

.. doctest::

   >>> turtle.home()
   >>> turtle.distance(30,40)
   50.0
   >>> turtle.distance((30,40))
   50.0
   >>> joe = Turtle()
   >>> joe.forward(77)
   >>> turtle.distance(joe)
   77.0



+-*/+-*/+-*/onkeyrelease f 
onkeyrelease(fun, key)

:param fun: a function with no arguments or ``None``
:param key: a string: key (e.g. "a") or key-symbol (e.g. "space")

Bind *fun* to key-release event of key.  If *fun* is ``None``, event bindings
are removed. Remark: in order to be able to register key-events, TurtleScreen
must have the focus. (See method :func:`listen`.)

.. doctest::

   >>> def f():
   ...     fd(50)
   ...     lt(60)
   ...
   >>> screen.onkey(f, "Up")
   >>> screen.listen()



+-*/+-*/+-*/turtles f 
turtles()

Return the list of turtles on the screen.

.. doctest::

   >>> for turtle in screen.turtles():
   ...     turtle.color("red")



+-*/+-*/+-*/resetscreen f 
resetscreen()

Reset all Turtles on the Screen to their initial state.

.. note::
   This TurtleScreen method is available as a global function only under the
   name ``resetscreen``.  The global function ``reset`` is another one
   derived from the Turtle method ``reset``.



+-*/+-*/+-*/up f 
up()

Pull the pen up -- no drawing when moving.



+-*/+-*/+-*/bgcolor f 
bgcolor(*args)

:param args: a color string or three numbers in the range 0..colormode or a
             3-tuple of such numbers


Set or return background color of the TurtleScreen.

.. doctest::

   >>> screen.bgcolor("orange")
   >>> screen.bgcolor()
   'orange'
   >>> screen.bgcolor("#800080")
   >>> screen.bgcolor()
   (128.0, 0.0, 128.0)



+-*/+-*/+-*/shapesize f 
shapesize(stretch_wid=None, stretch_len=None, outline=None)

:param stretch_wid: positive number
:param stretch_len: positive number
:param outline: positive number

Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set
resizemode to "user".  If and only if resizemode is set to "user", the turtle
will be displayed stretched according to its stretchfactors: *stretch_wid* is
stretchfactor perpendicular to its orientation, *stretch_len* is
stretchfactor in direction of its orientation, *outline* determines the width
of the shapes's outline.

.. doctest::

   >>> turtle.shapesize()
   (1.0, 1.0, 1)
   >>> turtle.resizemode("user")
   >>> turtle.shapesize(5, 5, 12)
   >>> turtle.shapesize()
   (5, 5, 12)
   >>> turtle.shapesize(outline=8)
   >>> turtle.shapesize()
   (5, 5, 8)



+-*/+-*/+-*/numinput f 
numinput(title, prompt, default=None, minval=None, maxval=None)

:param title: string
:param prompt: string
:param default: number (optional)
:param minval: number (optional)
:param maxval: number (optional)

Pop up a dialog window for input of a number. title is the title of the
dialog window, prompt is a text mostly describing what numerical information
to input. default: default value, minval: minimum value for imput,
maxval: maximum value for input
The number input must be in the range minval .. maxval if these are
given. If not, a hint is issued and the dialog remains open for
correction.
Return the number input. If the dialog is canceled,  return None. ::

   >>> screen.numinput("Poker", "Your stakes:", 1000, minval=10, maxval=10000)



+-*/+-*/+-*/penup f 
penup()

Pull the pen up -- no drawing when moving.



+-*/+-*/+-*/clearscreen f 
clearscreen()

Delete all drawings and all turtles from the TurtleScreen.  Reset the now
empty TurtleScreen to its initial state: white background, no background
image, no event bindings and tracing on.

.. note::
   This TurtleScreen method is available as a global function only under the
   name ``clearscreen``.  The global function ``clear`` is a different one
   derived from the Turtle method ``clear``.



+-*/+-*/+-*/ycor f 
ycor()

Return the turtle's y coordinate.

.. doctest::

   >>> turtle.home()
   >>> turtle.left(60)
   >>> turtle.forward(100)
   >>> print(turtle.pos())
   (50.00,86.60)
   >>> print(round(turtle.ycor(), 5))
   86.60254



+-*/+-*/+-*/shearfactor f 
shearfactor(shear=None)

:param shear: number (optional)

Set or return the current shearfactor. Shear the turtleshape according to
the given shearfactor shear, which is the tangent of the shear angle.
Do *not* change the turtle's heading (direction of movement).
If shear is not given: return the current shearfactor, i. e. the
tangent of the shear angle, by which lines parallel to the
heading of the turtle are sheared.

.. doctest::

    >>> turtle.shape("circle")
    >>> turtle.shapesize(5,2)
    >>> turtle.shearfactor(0.5)
    >>> turtle.shearfactor()
    0.5



+-*/+-*/+-*/get_shapepoly f 
get_shapepoly()

Return the current shape polygon as tuple of coordinate pairs. This
can be used to define a new shape or components of a compound shape.

.. doctest::

   >>> turtle.shape("square")
   >>> turtle.shapetransform(4, -1, 0, 2)
   >>> turtle.get_shapepoly()
   ((50, -20), (30, 20), (-50, 20), (-30, -20))



+-*/+-*/+-*/tilt f 
tilt(angle)

:param angle: a number

Rotate the turtleshape by *angle* from its current tilt-angle, but do *not*
change the turtle's heading (direction of movement).

.. doctest::

   >>> turtle.reset()
   >>> turtle.shape("circle")
   >>> turtle.shapesize(5,2)
   >>> turtle.tilt(30)
   >>> turtle.fd(50)
   >>> turtle.tilt(30)
   >>> turtle.fd(50)



+-*/+-*/+-*/write f 
write(arg, move=False, align="left", font=("Arial", 8, "normal"))

:param arg: object to be written to the TurtleScreen
:param move: True/False
:param align: one of the strings "left", "center" or right"
:param font: a triple (fontname, fontsize, fonttype)

Write text - the string representation of *arg* - at the current turtle
position according to *align* ("left", "center" or right") and with the given
font.  If *move* is True, the pen is moved to the bottom-right corner of the
text.  By default, *move* is False.

>>> turtle.write("Home = ", True, align="center")
>>> turtle.write((0,0), True)



+-*/+-*/+-*/onclick f 
onclick(fun, btn=1, add=None)

:param fun: a function with two arguments which will be called with the
            coordinates of the clicked point on the canvas
:param num: number of the mouse-button, defaults to 1 (left mouse button)
:param add: ``True`` or ``False`` -- if ``True``, a new binding will be
            added, otherwise it will replace a former binding

Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``,
existing bindings are removed.  Example for the anonymous turtle, i.e. the
procedural way:

.. doctest::

   >>> def turn(x, y):
   ...     left(180)
   ...
   >>> onclick(turn)  # Now clicking into the turtle will turn it.
   >>> onclick(None)  # event-binding will be removed



+-*/+-*/+-*/onrelease f 
onrelease(fun, btn=1, add=None)

:param fun: a function with two arguments which will be called with the
            coordinates of the clicked point on the canvas
:param num: number of the mouse-button, defaults to 1 (left mouse button)
:param add: ``True`` or ``False`` -- if ``True``, a new binding will be
            added, otherwise it will replace a former binding

Bind *fun* to mouse-button-release events on this turtle.  If *fun* is
``None``, existing bindings are removed.

.. doctest::

   >>> class MyTurtle(Turtle):
   ...     def glow(self,x,y):
   ...         self.fillcolor("red")
   ...     def unglow(self,x,y):
   ...         self.fillcolor("")
   ...
   >>> turtle = MyTurtle()
   >>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,
   >>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent.



+-*/+-*/+-*/turtlesize f 
turtlesize(stretch_wid=None, stretch_len=None, outline=None)

:param stretch_wid: positive number
:param stretch_len: positive number
:param outline: positive number

Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set
resizemode to "user".  If and only if resizemode is set to "user", the turtle
will be displayed stretched according to its stretchfactors: *stretch_wid* is
stretchfactor perpendicular to its orientation, *stretch_len* is
stretchfactor in direction of its orientation, *outline* determines the width
of the shapes's outline.

.. doctest::

   >>> turtle.shapesize()
   (1.0, 1.0, 1)
   >>> turtle.resizemode("user")
   >>> turtle.shapesize(5, 5, 12)
   >>> turtle.shapesize()
   (5, 5, 12)
   >>> turtle.shapesize(outline=8)
   >>> turtle.shapesize()
   (5, 5, 8)



+-*/+-*/+-*/ontimer f 
ontimer(fun, t=0)

:param fun: a function with no arguments
:param t: a number >= 0

Install a timer that calls *fun* after *t* milliseconds.

.. doctest::

   >>> running = True
   >>> def f():
   ...     if running:
   ...         fd(50)
   ...         lt(60)
   ...         screen.ontimer(f, 250)
   >>> f()   ### makes the turtle march around
   >>> running = False



+-*/+-*/+-*/settiltangle f 
settiltangle(angle)

:param angle: a number

Rotate the turtleshape to point in the direction specified by *angle*,
regardless of its current tilt-angle.  *Do not* change the turtle's heading
(direction of movement).

.. doctest::

   >>> turtle.reset()
   >>> turtle.shape("circle")
   >>> turtle.shapesize(5,2)
   >>> turtle.settiltangle(45)
   >>> turtle.fd(50)
   >>> turtle.settiltangle(-45)
   >>> turtle.fd(50)

.. deprecated:: 3.1



+-*/+-*/+-*/clone f 
clone()

Create and return a clone of the turtle with same position, heading and
turtle properties.

.. doctest::

   >>> mick = Turtle()
   >>> joe = mick.clone()



+-*/+-*/+-*/update f 
update()

Perform a TurtleScreen update. To be used when tracer is turned off.


+-*/+-*/+-*/showturtle f 
showturtle()

Make the turtle visible.

.. doctest::

   >>> turtle.showturtle()



+-*/+-*/+-*/fd f 
fd(distance)

:param distance: a number (integer or float)

Move the turtle forward by the specified *distance*, in the direction the
turtle is headed.

.. doctest::

   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.forward(25)
   >>> turtle.position()
   (25.00,0.00)
   >>> turtle.forward(-75)
   >>> turtle.position()
   (-50.00,0.00)



+-*/+-*/+-*/clear f 
clear()

Delete all drawings and all turtles from the TurtleScreen.  Reset the now
empty TurtleScreen to its initial state: white background, no background
image, no event bindings and tracing on.

.. note::
   This TurtleScreen method is available as a global function only under the
   name ``clearscreen``.  The global function ``clear`` is a different one
   derived from the Turtle method ``clear``.



+-*/+-*/+-*/getshapes f 
getshapes()

Return a list of names of all currently available turtle shapes.

.. doctest::

   >>> screen.getshapes()
   ['arrow', 'blank', 'circle', ..., 'turtle']



+-*/+-*/+-*/seth f 
seth(to_angle)

:param to_angle: a number (integer or float)

Set the orientation of the turtle to *to_angle*.  Here are some common
directions in degrees:

=================== ====================
 standard mode           logo mode
=================== ====================
   0 - east                0 - north
  90 - north              90 - east
 180 - west              180 - south
 270 - south             270 - west
=================== ====================

.. doctest::

   >>> turtle.setheading(90)
   >>> turtle.heading()
   90.0



+-*/+-*/+-*/pencolor f 
pencolor(*args)

Return or set the pencolor.

Four input formats are allowed:

``pencolor()``
   Return the current pencolor as color specification string or
   as a tuple (see example).  May be used as input to another
   color/pencolor/fillcolor call.

``pencolor(colorstring)``
   Set pencolor to *colorstring*, which is a Tk color specification string,
   such as ``"red"``, ``"yellow"``, or ``"#33cc8c"``.

``pencolor((r, g, b))``
   Set pencolor to the RGB color represented by the tuple of *r*, *g*, and
   *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where
   colormode is either 1.0 or 255 (see :func:`colormode`).

``pencolor(r, g, b)``
   Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of
   *r*, *g*, and *b* must be in the range 0..colormode.

 If turtleshape is a polygon, the outline of that polygon is drawn with the
 newly set pencolor.

.. doctest::

    >>> colormode()
    1.0
    >>> turtle.pencolor()
    'red'
    >>> turtle.pencolor("brown")
    >>> turtle.pencolor()
    'brown'
    >>> tup = (0.2, 0.8, 0.55)
    >>> turtle.pencolor(tup)
    >>> turtle.pencolor()
    (0.2, 0.8, 0.5490196078431373)
    >>> colormode(255)
    >>> turtle.pencolor()
    (51.0, 204.0, 140.0)
    >>> turtle.pencolor('#32c18f')
    >>> turtle.pencolor()
    (50.0, 193.0, 143.0)



+-*/+-*/+-*/st f 
st()

Make the turtle visible.

.. doctest::

   >>> turtle.showturtle()



+-*/+-*/+-*/setheading f 
setheading(to_angle)

:param to_angle: a number (integer or float)

Set the orientation of the turtle to *to_angle*.  Here are some common
directions in degrees:

=================== ====================
 standard mode           logo mode
=================== ====================
   0 - east                0 - north
  90 - north              90 - east
 180 - west              180 - south
 270 - south             270 - west
=================== ====================

.. doctest::

   >>> turtle.setheading(90)
   >>> turtle.heading()
   90.0



+-*/+-*/+-*/position f 
position()

Return the turtle's current location (x,y) (as a :class:`Vec2D` vector).

.. doctest::

   >>> turtle.pos()
   (440.00,-0.00)



+-*/+-*/+-*/backward f 
backward(distance)

:param distance: a number

Move the turtle backward by *distance*, opposite to the direction the
turtle is headed.  Do not change the turtle's heading.

.. doctest::
   :hide:

   >>> turtle.goto(0, 0)

.. doctest::

   >>> turtle.position()
   (0.00,0.00)
   >>> turtle.backward(30)
   >>> turtle.position()
   (-30.00,0.00)



+-*/+-*/+-*/setx f 
setx(x)

:param x: a number (integer or float)

Set the turtle's first coordinate to *x*, leave second coordinate
unchanged.

.. doctest::
   :hide:

   >>> turtle.goto(0, 240)

.. doctest::

   >>> turtle.position()
   (0.00,240.00)
   >>> turtle.setx(10)
   >>> turtle.position()
   (10.00,240.00)



+-*/+-*/+-*/width f 
width(width=None)

:param width: a positive number

Set the line thickness to *width* or return it.  If resizemode is set to
"auto" and turtleshape is a polygon, that polygon is drawn with the same line
thickness.  If no argument is given, the current pensize is returned.

.. doctest::

   >>> turtle.pensize()
   1
   >>> turtle.pensize(10)   # from here on lines of width 10 are drawn



+-*/+-*/+-*/dot f 
dot(size=None, *color)

:param size: an integer >= 1 (if given)
:param color: a colorstring or a numeric color tuple

Draw a circular dot with diameter *size*, using *color*.  If *size* is
not given, the maximum of pensize+4 and 2*pensize is used.


.. doctest::

   >>> turtle.home()
   >>> turtle.dot()
   >>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)
   >>> turtle.position()
   (100.00,-0.00)
   >>> turtle.heading()
   0.0



+-*/+-*/+-*/left f 
left(angle)

:param angle: a number (integer or float)

Turn turtle left by *angle* units.  (Units are by default degrees, but
can be set via the :func:`degrees` and :func:`radians` functions.)  Angle
orientation depends on the turtle mode, see :func:`mode`.

.. doctest::
   :hide:

   >>> turtle.setheading(22)

.. doctest::

   >>> turtle.heading()
   22.0
   >>> turtle.left(45)
   >>> turtle.heading()
   67.0



+-*/+-*/+-*/Turtle c 
Turtle()

Subclass of RawTurtle, has the same interface but draws on a default
:class:`Screen` object created automatically when needed for the first time.



+-*/+-*/+-*/ScrolledCanvas c 
ScrolledCanvas(master)

:param master: some Tkinter widget to contain the ScrolledCanvas, i.e.
   a Tkinter-canvas with scrollbars added

Used by class Screen, which thus automatically provides a ScrolledCanvas as
playground for the turtles.


+-*/+-*/+-*/Screen c 
Screen()

Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`.



+-*/+-*/+-*/RawPen c 
RawPen(canvas)

:param canvas: a :class:`tkinter.Canvas`, a :class:`ScrolledCanvas` or a
               :class:`TurtleScreen`

Create a turtle.  The turtle has all methods described above as "methods of
Turtle/RawTurtle".



+-*/+-*/+-*/Vec2D c 
Vec2D(x, y)

A two-dimensional vector class, used as a helper class for implementing
turtle graphics.  May be useful for turtle graphics programs too.  Derived
from tuple, so a vector is a tuple!

Provides (for *a*, *b* vectors, *k* number):

* ``a + b`` vector addition
* ``a - b`` vector subtraction
* ``a * b`` inner product
* ``k * a`` and ``a * k`` multiplication with scalar
* ``abs(a)`` absolute value of a
* ``a.rotate(angle)`` rotation



+-*/+-*/+-*/Shape c 
Shape(type_, data)

:param type\_: one of the strings "polygon", "image", "compound"

Data structure modeling shapes.  The pair ``(type_, data)`` must follow this
specification:


=========== ===========
*type_*     *data*
=========== ===========
"polygon"   a polygon-tuple, i.e. a tuple of pairs of coordinates
"image"     an image  (in this form only used internally!)
"compound"  ``None`` (a compound shape has to be constructed using the
            :meth:`addcomponent` method)
=========== ===========


+-*/+-*/+-*/+-*/addcomponent m 
addcomponent(poly, fill, outline=None)

:param poly: a polygon, i.e. a tuple of pairs of numbers
:param fill: a color the *poly* will be filled with
:param outline: a color for the poly's outline (if given)

Example:

.. doctest::

   >>> poly = ((0,0),(10,-5),(0,10),(-10,-5))
   >>> s = Shape("compound")
   >>> s.addcomponent(poly, "red", "blue")
   >>> # ... add more components and then use register_shape()

See :ref:`compoundshapes`.




+-*/+-*/+-*/RawTurtle c 
RawTurtle(canvas)

:param canvas: a :class:`tkinter.Canvas`, a :class:`ScrolledCanvas` or a
               :class:`TurtleScreen`

Create a turtle.  The turtle has all methods described above as "methods of
Turtle/RawTurtle".



+-*/+-*/+-*/TurtleScreen c 
TurtleScreen(cv)

:param cv: a :class:`tkinter.Canvas`

Provides screen oriented methods like :func:`setbg` etc. that are described
above.


+-*/tk _ Graphical User Interfaces with Tk
+-*/+-*/tkinter p Interface to Tcl/Tk for graphical user interfaces
+-*/+-*/+-*/Tcl f 
Tcl(screenName=None, baseName=None, className='Tk', useTk=0)

The :func:`Tcl` function is a factory function which creates an object much like
that created by the :class:`Tk` class, except that it does not initialize the Tk
subsystem.  This is most often useful when driving the Tcl interpreter in an
environment where one doesn't want to create extraneous toplevel windows, or
where one cannot (such as Unix/Linux systems without an X server).  An object
created by the :func:`Tcl` object can have a Toplevel window created (and the Tk
subsystem initialized) by calling its :meth:`loadtk` method.



+-*/+-*/+-*/Tk c 
Tk(screenName=None, baseName=None, className='Tk', useTk=1)

The :class:`Tk` class is instantiated without arguments. This creates a toplevel
widget of Tk which usually is the main window of an application. Each instance
has its own associated Tcl interpreter.

.. FIXME: The following keyword arguments are currently recognized:



+-*/+-*/+-*/scrolledtext p Text widget with a vertical scroll bar.
+-*/+-*/+-*/+-*/ScrolledText _ 
+-*/+-*/+-*/+-*/+-*/frame d 
frame

The frame which surrounds the text and scroll bar widgets.



+-*/+-*/+-*/+-*/+-*/vbar d 
vbar

The scroll bar widget.


+-*/+-*/+-*/tix p Tk Extension Widgets for Tkinter
+-*/+-*/+-*/+-*/Balloon c 
Balloon()

A `Balloon
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixBalloon.htm>`_ that
pops up over a widget to provide help.  When the user moves the cursor inside a
widget to which a Balloon widget has been bound, a small pop-up window with a
descriptive message will be shown on the screen.


+-*/+-*/+-*/+-*/PopupMenu c 
PopupMenu()

The `PopupMenu
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPopupMenu.htm>`_
widget can be used as a replacement of the ``tk_popup`` command. The advantage
of the :mod:`Tix` :class:`PopupMenu` widget is it requires less application code
to manipulate.


+-*/+-*/+-*/+-*/FileEntry c 
FileEntry()

The `FileEntry
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileEntry.htm>`_
widget can be used to input a filename. The user can type in the filename
manually. Alternatively, the user can press the button widget that sits next to
the entry, which will bring up a file selection dialog.


+-*/+-*/+-*/+-*/Tk c 
Tk(screenName=None, baseName=None, className='Tix')

Toplevel widget of Tix which represents mostly the main window of an
application. It has an associated Tcl interpreter.

Classes in the :mod:`tkinter.tix` module subclasses the classes in the
:mod:`tkinter`. The former imports the latter, so to use :mod:`tkinter.tix`
with Tkinter, all you need to do is to import one module. In general, you
can just import :mod:`tkinter.tix`, and replace the toplevel call to
:class:`tkinter.Tk` with :class:`tix.Tk`::

   from tkinter import tix
   from tkinter.constants import *
   root = tix.Tk()


+-*/+-*/+-*/+-*/ExFileSelectBox c 
ExFileSelectBox()

The `ExFileSelectBox
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixExFileSelectBox.htm>`_
widget is usually embedded in a tixExFileSelectDialog widget. It provides an
convenient method for the user to select files. The style of the
:class:`ExFileSelectBox` widget is very similar to the standard file dialog on
MS Windows 3.1.


+-*/+-*/+-*/+-*/DirSelectBox c 
DirSelectBox()

The :class:`DirSelectBox` is similar to the standard Motif(TM)
directory-selection box. It is generally used for the user to choose a
directory.  DirSelectBox stores the directories mostly recently selected into
a ComboBox widget so that they can be quickly selected again.



+-*/+-*/+-*/+-*/Form c 
Form()

The `Form
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixForm.htm>`_ geometry
manager based on attachment rules for all Tk widgets.



+-*/+-*/+-*/+-*/ComboBox c 
ComboBox()

The `ComboBox
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixComboBox.htm>`_
widget is similar to the combo box control in MS Windows. The user can select a
choice by either typing in the entry subwidget or selecting from the listbox
subwidget.


+-*/+-*/+-*/+-*/DirSelectDialog c 
DirSelectDialog()

The `DirSelectDialog
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirSelectDialog.htm>`_
widget presents the directories in the file system in a dialog window.  The user
can use this dialog window to navigate through the file system to select the
desired directory.


+-*/+-*/+-*/+-*/OptionMenu c 
OptionMenu()

The `OptionMenu
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixOptionMenu.htm>`_
creates a menu button of options.


+-*/+-*/+-*/+-*/InputOnly c 
InputOnly()

The `InputOnly
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixInputOnly.htm>`_
widgets are to accept inputs from the user, which can be done with the ``bind``
command (Unix only).



+-*/+-*/+-*/+-*/PanedWindow c 
PanedWindow()

The `PanedWindow
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPanedWindow.htm>`_
widget allows the user to interactively manipulate the sizes of several panes.
The panes can be arranged either vertically or horizontally.  The user changes
the sizes of the panes by dragging the resize handle between two panes.


+-*/+-*/+-*/+-*/LabelEntry c 
LabelEntry()

The `LabelEntry
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelEntry.htm>`_
widget packages an entry widget and a label into one mega widget. It can be used
be used to simplify the creation of "entry-form" type of interface.


+-*/+-*/+-*/+-*/CheckList c 
CheckList()

The `CheckList
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixCheckList.htm>`_
widget displays a list of items to be selected by the user. CheckList acts
similarly to the Tk checkbutton or radiobutton widgets, except it is capable of
handling many more items than checkbuttons or radiobuttons.


+-*/+-*/+-*/+-*/Tree c 
Tree()

The `Tree
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTree.htm>`_ widget
can be used to display hierarchical data in a tree form. The user can adjust the
view of the tree by opening or closing parts of the tree.


+-*/+-*/+-*/+-*/NoteBook c 
NoteBook()

The `NoteBook
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixNoteBook.htm>`_
widget can be used to display many windows in a limited space using a notebook
metaphor. The notebook is divided into a stack of pages. At one time only one of
these pages can be shown. The user can navigate through these pages by choosing
the visual "tabs" at the top of the NoteBook widget.


+-*/+-*/+-*/+-*/DirTree c 
DirTree()

The `DirTree
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirTree.htm>`_
widget displays a tree view of a directory, its previous directories and its
sub-directories. The user can choose one of the directories displayed in the
list or change to another directory.


+-*/+-*/+-*/+-*/Control c 
Control()

The `Control
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixControl.htm>`_
widget is also known as the :class:`SpinBox` widget. The user can adjust the
value by pressing the two arrow buttons or by entering the value directly into
the entry. The new value will be checked against the user-defined upper and
lower limits.


+-*/+-*/+-*/+-*/DirList c 
DirList()

The `DirList
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirList.htm>`_
widget displays a list view of a directory, its previous directories and its
sub-directories. The user can choose one of the directories displayed in the
list or change to another directory.


+-*/+-*/+-*/+-*/ButtonBox c 
ButtonBox()

The `ButtonBox
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixButtonBox.htm>`_
widget creates a box of buttons, such as is commonly used for ``Ok Cancel``.


+-*/+-*/+-*/+-*/Meter c 
Meter()

The `Meter
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixMeter.htm>`_ widget
can be used to show the progress of a background job which may take a long time
to execute.


+-*/+-*/+-*/+-*/LabelFrame c 
LabelFrame()

The `LabelFrame
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelFrame.htm>`_
widget packages a frame widget and a label into one mega widget.  To create
widgets inside a LabelFrame widget, one creates the new widgets relative to the
:attr:`frame` subwidget and manage them inside the :attr:`frame` subwidget.


+-*/+-*/+-*/+-*/StdButtonBox c 
StdButtonBox()

The `StdButtonBox
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixStdButtonBox.htm>`_
widget is a group of standard buttons for Motif-like dialog boxes.


+-*/+-*/+-*/+-*/FileSelectBox c 
FileSelectBox()

The `FileSelectBox
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileSelectBox.htm>`_
is similar to the standard Motif(TM) file-selection box. It is generally used
for the user to choose a file. FileSelectBox stores the files mostly recently
selected into a :class:`ComboBox` widget so that they can be quickly selected
again.


+-*/+-*/+-*/+-*/TList c 
TList()

The `TList
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTList.htm>`_ widget
can be used to display data in a tabular format. The list entries of a
:class:`TList` widget are similar to the entries in the Tk listbox widget.  The
main differences are (1) the :class:`TList` widget can display the list entries
in a two dimensional format and (2) you can use graphical images as well as
multiple colors and fonts for the list entries.


+-*/+-*/+-*/+-*/ListNoteBook c 
ListNoteBook()

The `ListNoteBook
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixListNoteBook.htm>`_
widget is very similar to the :class:`TixNoteBook` widget: it can be used to
display many windows in a limited space using a notebook metaphor. The notebook
is divided into a stack of pages (windows). At one time only one of these pages
can be shown. The user can navigate through these pages by choosing the name of
the desired page in the :attr:`hlist` subwidget.


+-*/+-*/+-*/+-*/tixCommand c 
tixCommand()

The `tix commands
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tix.htm>`_ provide
access to miscellaneous elements of :mod:`Tix`'s internal state and the
:mod:`Tix` application context.  Most of the information manipulated by these
methods pertains to the application as a whole, or to a screen or display,
rather than to a particular window.

To view the current settings, the common usage is::

   from tkinter import tix
   root = tix.Tk()
   print(root.tix_configure())



+-*/+-*/+-*/+-*/+-*/tix_cget m 
tix_cget(option)

Returns the current value of the configuration option given by *option*. Option
may be any of the configuration options.



+-*/+-*/+-*/+-*/+-*/tix_filedialog m 
tix_filedialog([dlgclass])

Returns the file selection dialog that may be shared among different calls from
this application.  This method will create a file selection dialog widget when
it is called the first time. This dialog will be returned by all subsequent
calls to :meth:`tix_filedialog`.  An optional dlgclass parameter can be passed
as a string to specified what type of file selection dialog widget is desired.
Possible options are ``tix``, ``FileSelectDialog`` or ``tixExFileSelectDialog``.



+-*/+-*/+-*/+-*/+-*/tix_addbitmapdir m 
tix_addbitmapdir(directory)

Tix maintains a list of directories under which the :meth:`tix_getimage` and
:meth:`tix_getbitmap` methods will search for image files.  The standard bitmap
directory is :file:`$TIX_LIBRARY/bitmaps`. The :meth:`tix_addbitmapdir` method
adds *directory* into this list. By using this method, the image files of an
applications can also be located using the :meth:`tix_getimage` or
:meth:`tix_getbitmap` method.



+-*/+-*/+-*/+-*/+-*/tix_configure m 
tix_configure([cnf,] **kw)

Query or modify the configuration options of the Tix application context. If no
option is specified, returns a dictionary all of the available options.  If
option is specified with no value, then the method returns a list describing the
one named option (this list will be identical to the corresponding sublist of
the value returned if no option is specified).  If one or more option-value
pairs are specified, then the method modifies the given option(s) to have the
given value(s); in this case the method returns an empty string. Option may be
any of the configuration options.



+-*/+-*/+-*/+-*/+-*/tix_resetoptions m 
tix_resetoptions(newScheme, newFontSet[, newScmPrio])

Resets the scheme and fontset of the Tix application to *newScheme* and
*newFontSet*, respectively.  This affects only those widgets created after this
call.  Therefore, it is best to call the resetoptions method before the creation
of any widgets in a Tix application.

The optional parameter *newScmPrio* can be given to reset the priority level of
the Tk options set by the Tix schemes.

Because of the way Tk handles the X option database, after Tix has been has
imported and inited, it is not possible to reset the color schemes and font sets
using the :meth:`tix_config` method. Instead, the :meth:`tix_resetoptions`
method must be used.


+-*/+-*/+-*/+-*/+-*/tix_getbitmap m 
tix_getbitmap(name)

Locates a bitmap file of the name ``name.xpm`` or ``name`` in one of the bitmap
directories (see the :meth:`tix_addbitmapdir` method).  By using
:meth:`tix_getbitmap`, you can avoid hard coding the pathnames of the bitmap
files in your application. When successful, it returns the complete pathname of
the bitmap file, prefixed with the character ``@``.  The returned value can be
used to configure the ``bitmap`` option of the Tk and Tix widgets.



+-*/+-*/+-*/+-*/+-*/tix_getimage m 
tix_getimage(self, name)

Locates an image file of the name :file:`name.xpm`, :file:`name.xbm` or
:file:`name.ppm` in one of the bitmap directories (see the
:meth:`tix_addbitmapdir` method above). If more than one file with the same name
(but different extensions) exist, then the image type is chosen according to the
depth of the X display: xbm images are chosen on monochrome displays and color
images are chosen on color displays. By using :meth:`tix_getimage`, you can
avoid hard coding the pathnames of the image files in your application. When
successful, this method returns the name of the newly created image, which can
be used to configure the ``image`` option of the Tk and Tix widgets.



+-*/+-*/+-*/+-*/+-*/tix_option_get m 
tix_option_get(name)

Gets the options maintained by the Tix scheme mechanism.



+-*/+-*/+-*/+-*/Select c 
Select()

The `Select
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixSelect.htm>`_ widget
is a container of button subwidgets. It can be used to provide radio-box or
check-box style of selection options for the user.


+-*/+-*/+-*/+-*/HList c 
HList()

The `HList
<http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixHList.htm>`_ widget
can be used to display any data that have a hierarchical structure, for example,
file system directory trees. The list entries are indented and connected by
branch lines according to their places in the hierarchy.


+-*/+-*/+-*/ttk p Tk themed widget set
+-*/+-*/+-*/+-*/Widget c 
Widget


+-*/+-*/+-*/+-*/+-*/state m 
state(statespec=None)

Modify or inquire widget state. If *statespec* is specified, sets the
widget state according to it and return a new *statespec* indicating
which flags were changed. If *statespec* is not specified, returns
the currently-enabled state flags.


+-*/+-*/+-*/+-*/+-*/identify m 
identify(x, y)

Returns the name of the element at position *x* *y*, or the empty string
if the point does not lie within any element.

*x* and *y* are pixel coordinates relative to the widget.



+-*/+-*/+-*/+-*/+-*/instate m 
instate(statespec, callback=None, *args, **kw)

Test the widget's state. If a callback is not specified, returns True
if the widget state matches *statespec* and False otherwise. If callback
is specified then it is called with args if widget state matches
*statespec*.



+-*/+-*/+-*/+-*/Combobox c 
Combobox


+-*/+-*/+-*/+-*/+-*/current m 
current(newindex=None)

If *newindex* is specified, sets the combobox value to the element
position *newindex*. Otherwise, returns the index of the current value or
-1 if the current value is not in the values list.



+-*/+-*/+-*/+-*/+-*/set m 
set(value)

Sets the value of the combobox to *value*.




+-*/+-*/+-*/+-*/+-*/get m 
get()

Returns the current value of the combobox.



+-*/+-*/+-*/+-*/Style c 
Style

This class is used to manipulate the style database.



+-*/+-*/+-*/+-*/+-*/map m 
map(style, query_opt=None, **kw)

Query or sets dynamic values of the specified option(s) in *style*.

Each key in *kw* is an option and each value should be a list or a
tuple (usually) containing statespecs grouped in tuples, lists, or
some other preference. A statespec is a compound of one
or more states and then a value.

An example may make it more understandable::

   import tkinter
   from tkinter import ttk

   root = tkinter.Tk()

   style = ttk.Style()
   style.map("C.TButton",
       foreground=[('pressed', 'red'), ('active', 'blue')],
       background=[('pressed', '!disabled', 'black'), ('active', 'white')]
       )

   colored_btn = ttk.Button(text="Test", style="C.TButton").pack()

   root.mainloop()


Note that the order of the (states, value) sequences for an option does
matter, if the order is changed to ``[('active', 'blue'), ('pressed',
'red')]`` in the foreground option, for example, the result would be a
blue foreground when the widget were in active or pressed states.



+-*/+-*/+-*/+-*/+-*/theme_create m 
theme_create(themename, parent=None, settings=None)

Create a new theme.

It is an error if *themename* already exists. If *parent* is specified,
the new theme will inherit styles, elements and layouts from the parent
theme. If *settings* are present they are expected to have the same
syntax used for :meth:`theme_settings`.



+-*/+-*/+-*/+-*/+-*/layout m 
layout(style, layoutspec=None)

Define the widget layout for given *style*. If *layoutspec* is omitted,
return the layout specification for given style.

*layoutspec*, if specified, is expected to be a list or some other
sequence type (excluding strings), where each item should be a tuple and
the first item is the layout name and the second item should have the
format described described in `Layouts`_.

To understand the format, see the following example (it is not
intended to do anything useful)::

   from tkinter import ttk
   import tkinter

   root = tkinter.Tk()

   style = ttk.Style()
   style.layout("TMenubutton", [
      ("Menubutton.background", None),
      ("Menubutton.button", {"children":
          [("Menubutton.focus", {"children":
              [("Menubutton.padding", {"children":
                  [("Menubutton.label", {"side": "left", "expand": 1})]
              })]
          })]
      }),
   ])

   mbtn = ttk.Menubutton(text='Text')
   mbtn.pack()
   root.mainloop()



+-*/+-*/+-*/+-*/+-*/configure m 
configure(style, query_opt=None, **kw)

Query or set the default value of the specified option(s) in *style*.

Each key in *kw* is an option and each value is a string identifying
the value for that option.

For example, to change every default button to be a flat button with
some padding and a different background color::

   from tkinter import ttk
   import tkinter

   root = tkinter.Tk()

   ttk.Style().configure("TButton", padding=6, relief="flat",
      background="#ccc")

   btn = ttk.Button(text="Sample")
   btn.pack()

   root.mainloop()



+-*/+-*/+-*/+-*/+-*/element_create m 
element_create(elementname, etype, *args, **kw)

Create a new element in the current theme, of the given *etype* which is
expected to be either "image", "from" or "vsapi". The latter is only
available in Tk 8.6a for Windows XP and Vista and is not described here.

If "image" is used, *args* should contain the default image name followed
by statespec/value pairs (this is the imagespec), and *kw* may have the
following options:

 * border=padding
    padding is a list of up to four integers, specifying the left, top,
    right, and bottom borders, respectively.

 * height=height
    Specifies a minimum height for the element. If less than zero, the
    base image's height is used as a default.

 * padding=padding
    Specifies the element's interior padding. Defaults to border's value
    if not specified.

 * sticky=spec
    Specifies how the image is placed within the final parcel. spec
    contains zero or more characters “n”, “s”, “w”, or “e”.

 * width=width
    Specifies a minimum width for the element. If less than zero, the
    base image's width is used as a default.

If "from" is used as the value of *etype*,
:meth:`element_create` will clone an existing
element. *args* is expected to contain a themename, from which
the element will be cloned, and optionally an element to clone from.
If this element to clone from is not specified, an empty element will
be used. *kw* is discarded.



+-*/+-*/+-*/+-*/+-*/element_names m 
element_names()

Returns the list of elements defined in the current theme.



+-*/+-*/+-*/+-*/+-*/theme_use m 
theme_use(themename=None)

If *themename* is not given, returns the theme in use.  Otherwise, sets
the current theme to *themename*, refreshes all widgets and emits a
<<ThemeChanged>> event.




+-*/+-*/+-*/+-*/+-*/theme_settings m 
theme_settings(themename, settings)

Temporarily sets the current theme to *themename*, apply specified
*settings* and then restore the previous theme.

Each key in *settings* is a style and each value may contain the keys
'configure', 'map', 'layout' and 'element create' and they are expected
to have the same format as specified by the methods
:meth:`Style.configure`, :meth:`Style.map`, :meth:`Style.layout` and
:meth:`Style.element_create` respectively.

As an example, let's change the Combobox for the default theme a bit::

   from tkinter import ttk
   import tkinter

   root = tkinter.Tk()

   style = ttk.Style()
   style.theme_settings("default", {
      "TCombobox": {
          "configure": {"padding": 5},
          "map": {
              "background": [("active", "green2"),
                             ("!disabled", "green4")],
              "fieldbackground": [("!disabled", "green3")],
              "foreground": [("focus", "OliveDrab1"),
                             ("!disabled", "OliveDrab2")]
          }
      }
   })

   combo = ttk.Combobox().pack()

   root.mainloop()



+-*/+-*/+-*/+-*/+-*/element_options m 
element_options(elementname)

Returns the list of *elementname*'s options.



+-*/+-*/+-*/+-*/+-*/lookup m 
lookup(style, option, state=None, default=None)

Returns the value specified for *option* in *style*.

If *state* is specified, it is expected to be a sequence of one or more
states. If the *default* argument is set, it is used as a fallback value
in case no specification for option is found.

To check what font a Button uses by default::

   from tkinter import ttk

   print(ttk.Style().lookup("TButton", "font"))



+-*/+-*/+-*/+-*/+-*/theme_names m 
theme_names()

Returns a list of all known themes.



+-*/+-*/+-*/+-*/Progressbar c 
Progressbar


+-*/+-*/+-*/+-*/+-*/start m 
start(interval=None)

Begin autoincrement mode: schedules a recurring timer event that calls
:meth:`Progressbar.step` every *interval* milliseconds. If omitted,
*interval* defaults to 50 milliseconds.



+-*/+-*/+-*/+-*/+-*/step m 
step(amount=None)

Increments the progress bar's value by *amount*.

*amount* defaults to 1.0 if omitted.



+-*/+-*/+-*/+-*/+-*/stop m 
stop()

Stop autoincrement mode: cancels any recurring timer event initiated by
:meth:`Progressbar.start` for this progress bar.




+-*/+-*/+-*/+-*/Notebook c 
Notebook


+-*/+-*/+-*/+-*/+-*/insert m 
insert(pos, child, **kw)

Inserts a pane at the specified position.

*pos* is either the string "end", an integer index, or the name of a
managed child. If *child* is already managed by the notebook, moves it to
the specified position.

See `Tab Options`_ for the list of available options.



+-*/+-*/+-*/+-*/+-*/hide m 
hide(tab_id)

Hides the tab specified by *tab_id*.

The tab will not be displayed, but the associated window remains
managed by the notebook and its configuration remembered. Hidden tabs
may be restored with the :meth:`add` command.



+-*/+-*/+-*/+-*/+-*/forget m 
forget(tab_id)

Removes the tab specified by *tab_id*, unmaps and unmanages the
associated window.



+-*/+-*/+-*/+-*/+-*/enable_traversal m 
enable_traversal()

Enable keyboard traversal for a toplevel window containing this notebook.

This will extend the bindings for the toplevel window containing the
notebook as follows:

* Control-Tab: selects the tab following the currently selected one.
* Shift-Control-Tab: selects the tab preceding the currently selected one.
* Alt-K: where K is the mnemonic (underlined) character of any tab, will
  select that tab.

Multiple notebooks in a single toplevel may be enabled for traversal,
including nested notebooks. However, notebook traversal only works
properly if all panes have the notebook they are in as master.




+-*/+-*/+-*/+-*/+-*/index m 
index(tab_id)

Returns the numeric index of the tab specified by *tab_id*, or the total
number of tabs if *tab_id* is the string "end".



+-*/+-*/+-*/+-*/+-*/tabs m 
tabs()

Returns a list of windows managed by the notebook.



+-*/+-*/+-*/+-*/+-*/add m 
add(child, **kw)

Adds a new tab to the notebook.

If window is currently managed by the notebook but hidden, it is
restored to its previous position.

See `Tab Options`_ for the list of available options.



+-*/+-*/+-*/+-*/+-*/identify m 
identify(x, y)

Returns the name of the tab element at position *x*, *y*, or the empty
string if none.



+-*/+-*/+-*/+-*/+-*/tab m 
tab(tab_id, option=None, **kw)

Query or modify the options of the specific *tab_id*.

If *kw* is not given, returns a dictionary of the tab option values. If
*option* is specified, returns the value of that *option*. Otherwise,
sets the options to the corresponding values.



+-*/+-*/+-*/+-*/+-*/select m 
select(tab_id=None)

Selects the specified *tab_id*.

The associated child window will be displayed, and the
previously-selected window (if different) is unmapped. If *tab_id* is
omitted, returns the widget name of the currently selected pane.



+-*/+-*/+-*/+-*/Treeview c 
Treeview


+-*/+-*/+-*/+-*/+-*/set_children m 
set_children(item, *newchildren)

Replaces *item*'s child with *newchildren*.

Children present in *item* that are not present in *newchildren* are
detached from the tree. No items in *newchildren* may be an ancestor of
*item*. Note that not specifying *newchildren* results in detaching
*item*'s children.



+-*/+-*/+-*/+-*/+-*/selection m 
selection(selop=None, items=None)

If *selop* is not specified, returns selected items. Otherwise, it will
act according to the following selection methods.



+-*/+-*/+-*/+-*/+-*/xview m 
xview(*args)

Query or modify horizontal position of the treeview.



+-*/+-*/+-*/+-*/+-*/exists m 
exists(item)

Returns True if the specified *item* is present in the tree.



+-*/+-*/+-*/+-*/+-*/move m 
move(item, parent, index)

Moves *item* to position *index* in *parent*'s list of children.

It is illegal to move an item under one of its descendants. If *index* is
less than or equal to zero, *item* is moved to the beginning; if greater
than or equal to the number of children, it is moved to the end. If *item*
was detached it is reattached.



+-*/+-*/+-*/+-*/+-*/tag_configure m 
tag_configure(tagname, option=None, **kw)

Query or modify the options for the specified *tagname*.

If *kw* is not given, returns a dict of the option settings for
*tagname*. If *option* is specified, returns the value for that *option*
for the specified *tagname*. Otherwise, sets the options to the
corresponding values for the given *tagname*.



+-*/+-*/+-*/+-*/+-*/focus m 
focus(item=None)

If *item* is specified, sets the focus item to *item*. Otherwise, returns
the current focus item, or '' if there is none.



+-*/+-*/+-*/+-*/+-*/identify_element m 
identify_element(x, y)

Returns the element at position *x*, *y*.

Availability: Tk 8.6.



+-*/+-*/+-*/+-*/+-*/see m 
see(item)

Ensure that *item* is visible.

Sets all of *item*'s ancestors open option to True, and scrolls the
widget if necessary so that *item* is within the visible portion of
the tree.



+-*/+-*/+-*/+-*/+-*/set m 
set(item, column=None, value=None)

With one argument, returns a dictionary of column/value pairs for the
specified *item*. With two arguments, returns the current value of the
specified *column*. With three arguments, sets the value of given
*column* in given *item* to the specified *value*.



+-*/+-*/+-*/+-*/+-*/identify m 
identify(component, x, y)

Returns a description of the specified *component* under the point given
by *x* and *y*, or the empty string if no such *component* is present at
that position.



+-*/+-*/+-*/+-*/+-*/identify_column m 
identify_column(x)

Returns the data column identifier of the cell at position *x*.

The tree column has ID #0.



+-*/+-*/+-*/+-*/+-*/selection_add m 
selection_add(items)

Add *items* to the selection.



+-*/+-*/+-*/+-*/+-*/index m 
index(item)

Returns the integer index of *item* within its parent's list of children.



+-*/+-*/+-*/+-*/+-*/selection_remove m 
selection_remove(items)

Remove *items* from the selection.



+-*/+-*/+-*/+-*/+-*/selection_set m 
selection_set(items)

*items* becomes the new selection.



+-*/+-*/+-*/+-*/+-*/tag_bind m 
tag_bind(tagname, sequence=None, callback=None)

Bind a callback for the given event *sequence* to the tag *tagname*.
When an event is delivered to an item, the callbacks for each of the
item's tags option are called.



+-*/+-*/+-*/+-*/+-*/selection_toggle m 
selection_toggle(items)

Toggle the selection state of each item in *items*.



+-*/+-*/+-*/+-*/+-*/get_children m 
get_children(item=None)

Returns the list of children belonging to *item*.

If *item* is not specified, returns root children.



+-*/+-*/+-*/+-*/+-*/yview m 
yview(*args)

Query or modify vertical position of the treeview.




+-*/+-*/+-*/+-*/+-*/identify_row m 
identify_row(y)

Returns the item ID of the item at position *y*.



+-*/+-*/+-*/+-*/+-*/prev m 
prev(item)

Returns the identifier of *item*'s previous sibling, or '' if *item* is
the first child of its parent.



+-*/+-*/+-*/+-*/+-*/reattach m 
reattach(item, parent, index)

An alias for :meth:`Treeview.move`.



+-*/+-*/+-*/+-*/+-*/parent m 
parent(item)

Returns the ID of the parent of *item*, or '' if *item* is at the top
level of the hierarchy.



+-*/+-*/+-*/+-*/+-*/next m 
next(item)

Returns the identifier of *item*'s next sibling, or '' if *item* is the
last child of its parent.



+-*/+-*/+-*/+-*/+-*/bbox m 
bbox(item, column=None)

Returns the bounding box (relative to the treeview widget's window) of
the specified *item* in the form (x, y, width, height).

If *column* is specified, returns the bounding box of that cell. If the
*item* is not visible (i.e., if it is a descendant of a closed item or is
scrolled offscreen), returns an empty string.



+-*/+-*/+-*/+-*/+-*/detach m 
detach(*items)

Unlinks all of the specified *items* from the tree.

The items and all of their descendants are still present, and may be
reinserted at another point in the tree, but will not be displayed.

The root item may not be detached.



+-*/+-*/+-*/+-*/+-*/identify_region m 
identify_region(x, y)

Returns one of:

+-----------+--------------------------------------+
| region    | meaning                              |
+===========+======================================+
| heading   | Tree heading area.                   |
+-----------+--------------------------------------+
| separator | Space between two columns headings.  |
+-----------+--------------------------------------+
| tree      | The tree area.                       |
+-----------+--------------------------------------+
| cell      | A data cell.                         |
+-----------+--------------------------------------+

Availability: Tk 8.6.



+-*/+-*/+-*/+-*/+-*/tag_has m 
tag_has(tagname, item=None)

If *item* is specified, returns 1 or 0 depending on whether the specified
*item* has the given *tagname*. Otherwise, returns a list of all items
that have the specified tag.

Availability: Tk 8.6



+-*/+-*/+-*/+-*/+-*/insert m 
insert(parent, index, iid=None, **kw)

Creates a new item and returns the item identifier of the newly created
item.

*parent* is the item ID of the parent item, or the empty string to create
a new top-level item. *index* is an integer, or the value "end",
specifying where in the list of parent's children to insert the new item.
If *index* is less than or equal to zero, the new node is inserted at
the beginning; if *index* is greater than or equal to the current number
of children, it is inserted at the end. If *iid* is specified, it is used
as the item identifier; *iid* must not already exist in the tree.
Otherwise, a new unique identifier is generated.

See `Item Options`_ for the list of available points.



+-*/+-*/+-*/+-*/+-*/column m 
column(column, option=None, **kw)

Query or modify the options for the specified *column*.

If *kw* is not given, returns a dict of the column option values. If
*option* is specified then the value for that *option* is returned.
Otherwise, sets the options to the corresponding values.

The valid options/values are:

* id
   Returns the column name. This is a read-only option.
* anchor: One of the standard Tk anchor values.
   Specifies how the text in this column should be aligned with respect
   to the cell.
* minwidth: width
   The minimum width of the column in pixels. The treeview widget will
   not make the column any smaller than specified by this option when
   the widget is resized or the user drags a column.
* stretch: True/False
   Specifies whether the column's width should be adjusted when
   the widget is resized.
* width: width
   The width of the column in pixels.

To configure the tree column, call this with column = "#0"


+-*/+-*/+-*/+-*/+-*/item m 
item(item, option=None, **kw)

Query or modify the options for the specified *item*.

If no options are given, a dict with options/values for the item is
returned.
If *option* is specified then the value for that option is returned.
Otherwise, sets the options to the corresponding values as given by *kw*.



+-*/+-*/+-*/+-*/+-*/heading m 
heading(column, option=None, **kw)

Query or modify the heading options for the specified *column*.

If *kw* is not given, returns a dict of the heading option values. If
*option* is specified then the value for that *option* is returned.
Otherwise, sets the options to the corresponding values.

The valid options/values are:

* text: text
   The text to display in the column heading.
* image: imageName
   Specifies an image to display to the right of the column heading.
* anchor: anchor
   Specifies how the heading text should be aligned. One of the standard
   Tk anchor values.
* command: callback
   A callback to be invoked when the heading label is pressed.

To configure the tree column heading, call this with column = "#0".



+-*/+-*/+-*/+-*/+-*/delete m 
delete(*items)

Delete all specified *items* and all their descendants.

The root item may not be deleted.



+-*/development _ Development Tools
+-*/+-*/doctest p Test pieces of code within docstrings.
+-*/+-*/+-*/DocFileSuite f 
DocFileSuite(*paths, module_relative=True, package=None, setUp=None, tearDown=None, globs=None, optionflags=0, parser=DocTestParser(), encoding=None)

Convert doctest tests from one or more text files to a
:class:`unittest.TestSuite`.

The returned :class:`unittest.TestSuite` is to be run by the unittest framework
and runs the interactive examples in each file.  If an example in any file
fails, then the synthesized unit test fails, and a :exc:`failureException`
exception is raised showing the name of the file containing the test and a
(sometimes approximate) line number.

Pass one or more paths (as strings) to text files to be examined.

Options may be provided as keyword arguments:

Optional argument *module_relative* specifies how the filenames in *paths*
should be interpreted:

* If *module_relative* is ``True`` (the default), then each filename in
  *paths* specifies an OS-independent module-relative path.  By default, this
  path is relative to the calling module's directory; but if the *package*
  argument is specified, then it is relative to that package.  To ensure
  OS-independence, each filename should use ``/`` characters to separate path
  segments, and may not be an absolute path (i.e., it may not begin with
  ``/``).

* If *module_relative* is ``False``, then each filename in *paths* specifies
  an OS-specific path.  The path may be absolute or relative; relative paths
  are resolved with respect to the current working directory.

Optional argument *package* is a Python package or the name of a Python
package whose directory should be used as the base directory for
module-relative filenames in *paths*.  If no package is specified, then the
calling module's directory is used as the base directory for module-relative
filenames.  It is an error to specify *package* if *module_relative* is
``False``.

Optional argument *setUp* specifies a set-up function for the test suite.
This is called before running the tests in each file.  The *setUp* function
will be passed a :class:`DocTest` object.  The setUp function can access the
test globals as the *globs* attribute of the test passed.

Optional argument *tearDown* specifies a tear-down function for the test
suite.  This is called after running the tests in each file.  The *tearDown*
function will be passed a :class:`DocTest` object.  The setUp function can
access the test globals as the *globs* attribute of the test passed.

Optional argument *globs* is a dictionary containing the initial global
variables for the tests.  A new copy of this dictionary is created for each
test.  By default, *globs* is a new empty dictionary.

Optional argument *optionflags* specifies the default doctest options for the
tests, created by or-ing together individual option flags.  See section
:ref:`doctest-options`. See function :func:`set_unittest_reportflags` below
for a better way to set reporting options.

Optional argument *parser* specifies a :class:`DocTestParser` (or subclass)
that should be used to extract tests from the files.  It defaults to a normal
parser (i.e., ``DocTestParser()``).

Optional argument *encoding* specifies an encoding that should be used to
convert the file to unicode.

The global ``__file__`` is added to the globals provided to doctests loaded
from a text file using :func:`DocFileSuite`.



+-*/+-*/+-*/run_docstring_examples f 
run_docstring_examples(f, globs, verbose=False, name="NoName", compileflags=None, optionflags=0)

Test examples associated with object *f*; for example, *f* may be a module,
function, or class object.

A shallow copy of dictionary argument *globs* is used for the execution context.

Optional argument *name* is used in failure messages, and defaults to
``"NoName"``.

If optional argument *verbose* is true, output is generated even if there are no
failures.  By default, output is generated only in case of an example failure.

Optional argument *compileflags* gives the set of flags that should be used by
the Python compiler when running the examples.  By default, or if ``None``,
flags are deduced corresponding to the set of future features found in *globs*.

Optional argument *optionflags* works as for function :func:`testfile` above.



+-*/+-*/+-*/DocTestSuite f 
DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, setUp=None, tearDown=None, checker=None)

Convert doctest tests for a module to a :class:`unittest.TestSuite`.

The returned :class:`unittest.TestSuite` is to be run by the unittest framework
and runs each doctest in the module.  If any of the doctests fail, then the
synthesized unit test fails, and a :exc:`failureException` exception is raised
showing the name of the file containing the test and a (sometimes approximate)
line number.

Optional argument *module* provides the module to be tested.  It can be a module
object or a (possibly dotted) module name.  If not specified, the module calling
this function is used.

Optional argument *globs* is a dictionary containing the initial global
variables for the tests.  A new copy of this dictionary is created for each
test.  By default, *globs* is a new empty dictionary.

Optional argument *extraglobs* specifies an extra set of global variables, which
is merged into *globs*.  By default, no extra globals are used.

Optional argument *test_finder* is the :class:`DocTestFinder` object (or a
drop-in replacement) that is used to extract doctests from the module.

Optional arguments *setUp*, *tearDown*, and *optionflags* are the same as for
function :func:`DocFileSuite` above.

This function uses the same search technique as :func:`testmod`.



+-*/+-*/+-*/set_unittest_reportflags f 
set_unittest_reportflags(flags)

Set the :mod:`doctest` reporting flags to use.

Argument *flags* or's together option flags.  See section
:ref:`doctest-options`.  Only "reporting flags" can be used.

This is a module-global setting, and affects all future doctests run by module
:mod:`unittest`:  the :meth:`runTest` method of :class:`DocTestCase` looks at
the option flags specified for the test case when the :class:`DocTestCase`
instance was constructed.  If no reporting flags were specified (which is the
typical and expected case), :mod:`doctest`'s :mod:`unittest` reporting flags are
or'ed into the option flags, and the option flags so augmented are passed to the
:class:`DocTestRunner` instance created to run the doctest.  If any reporting
flags were specified when the :class:`DocTestCase` instance was constructed,
:mod:`doctest`'s :mod:`unittest` reporting flags are ignored.

The value of the :mod:`unittest` reporting flags in effect before the function
was called is returned by the function.



+-*/+-*/+-*/testmod f 
testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)

All arguments are optional, and all except for *m* should be specified in
keyword form.

Test examples in docstrings in functions and classes reachable from module *m*
(or module :mod:`__main__` if *m* is not supplied or is ``None``), starting with
``m.__doc__``.

Also test examples reachable from dict ``m.__test__``, if it exists and is not
``None``.  ``m.__test__`` maps names (strings) to functions, classes and
strings; function and class docstrings are searched for examples; strings are
searched directly, as if they were docstrings.

Only docstrings attached to objects belonging to module *m* are searched.

Return ``(failure_count, test_count)``.

Optional argument *name* gives the name of the module; by default, or if
``None``, ``m.__name__`` is used.

Optional argument *exclude_empty* defaults to false.  If true, objects for which
no doctests are found are excluded from consideration. The default is a backward
compatibility hack, so that code still using :meth:`doctest.master.summarize` in
conjunction with :func:`testmod` continues to get output for objects with no
tests. The *exclude_empty* argument to the newer :class:`DocTestFinder`
constructor defaults to true.

Optional arguments *extraglobs*, *verbose*, *report*, *optionflags*,
*raise_on_error*, and *globs* are the same as for function :func:`testfile`
above, except that *globs* defaults to ``m.__dict__``.



+-*/+-*/+-*/register_optionflag f 
register_optionflag(name)

Create a new option flag with a given name, and return the new flag's integer
value.  :func:`register_optionflag` can be used when subclassing
:class:`OutputChecker` or :class:`DocTestRunner` to create new options that are
supported by your subclasses.  :func:`register_optionflag` should always be
called using the following idiom::

   MY_FLAG = register_optionflag('MY_FLAG')



+-*/+-*/+-*/testsource f 
testsource(module, name)

Convert the doctest for an object to a script.

Argument *module* is a module object, or dotted name of a module, containing the
object whose doctests are of interest.  Argument *name* is the name (within the
module) of the object with the doctests of interest.  The result is a string,
containing the object's docstring converted to a Python script, as described for
:func:`script_from_examples` above.  For example, if module :file:`a.py`
contains a top-level function :func:`f`, then ::

   import a, doctest
   print(doctest.testsource(a, "a.f"))

prints a script version of function :func:`f`'s docstring, with doctests
converted to code, and the rest placed in comments.



+-*/+-*/+-*/debug_src f 
debug_src(src, pm=False, globs=None)

Debug the doctests in a string.

This is like function :func:`debug` above, except that a string containing
doctest examples is specified directly, via the *src* argument.

Optional argument *pm* has the same meaning as in function :func:`debug` above.

Optional argument *globs* gives a dictionary to use as both local and global
execution context.  If not specified, or ``None``, an empty dictionary is used.
If specified, a shallow copy of the dictionary is used.



+-*/+-*/+-*/debug f 
debug(module, name, pm=False)

Debug the doctests for an object.

The *module* and *name* arguments are the same as for function
:func:`testsource` above.  The synthesized Python script for the named object's
docstring is written to a temporary file, and then that file is run under the
control of the Python debugger, :mod:`pdb`.

A shallow copy of ``module.__dict__`` is used for both local and global
execution context.

Optional argument *pm* controls whether post-mortem debugging is used.  If *pm*
has a true value, the script file is run directly, and the debugger gets
involved only if the script terminates via raising an unhandled exception.  If
it does, then post-mortem debugging is invoked, via :func:`pdb.post_mortem`,
passing the traceback object from the unhandled exception.  If *pm* is not
specified, or is false, the script is run under the debugger from the start, via
passing an appropriate :func:`exec` call to :func:`pdb.run`.



+-*/+-*/+-*/script_from_examples f 
script_from_examples(s)

Convert text with examples to a script.

Argument *s* is a string containing doctest examples.  The string is converted
to a Python script, where doctest examples in *s* are converted to regular code,
and everything else is converted to Python comments.  The generated script is
returned as a string. For example, ::

   import doctest
   print(doctest.script_from_examples(r"""
       Set x and y to 1 and 2.
       >>> x, y = 1, 2

       Print their sum:
       >>> print(x+y)
       3
   """))

displays::

   # Set x and y to 1 and 2.
   x, y = 1, 2
   #
   # Print their sum:
   print(x+y)
   # Expected:
   ## 3

This function is used internally by other functions (see below), but can also be
useful when you want to transform an interactive Python session into a Python
script.



+-*/+-*/+-*/testfile f 
testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None)

All arguments except *filename* are optional, and should be specified in keyword
form.

Test examples in the file named *filename*.  Return ``(failure_count,
test_count)``.

Optional argument *module_relative* specifies how the filename should be
interpreted:

* If *module_relative* is ``True`` (the default), then *filename* specifies an
  OS-independent module-relative path.  By default, this path is relative to the
  calling module's directory; but if the *package* argument is specified, then it
  is relative to that package.  To ensure OS-independence, *filename* should use
  ``/`` characters to separate path segments, and may not be an absolute path
  (i.e., it may not begin with ``/``).

* If *module_relative* is ``False``, then *filename* specifies an OS-specific
  path.  The path may be absolute or relative; relative paths are resolved with
  respect to the current working directory.

Optional argument *name* gives the name of the test; by default, or if ``None``,
``os.path.basename(filename)`` is used.

Optional argument *package* is a Python package or the name of a Python package
whose directory should be used as the base directory for a module-relative
filename.  If no package is specified, then the calling module's directory is
used as the base directory for module-relative filenames.  It is an error to
specify *package* if *module_relative* is ``False``.

Optional argument *globs* gives a dict to be used as the globals when executing
examples.  A new shallow copy of this dict is created for the doctest, so its
examples start with a clean slate. By default, or if ``None``, a new empty dict
is used.

Optional argument *extraglobs* gives a dict merged into the globals used to
execute examples.  This works like :meth:`dict.update`:  if *globs* and
*extraglobs* have a common key, the associated value in *extraglobs* appears in
the combined dict.  By default, or if ``None``, no extra globals are used.  This
is an advanced feature that allows parameterization of doctests.  For example, a
doctest can be written for a base class, using a generic name for the class,
then reused to test any number of subclasses by passing an *extraglobs* dict
mapping the generic name to the subclass to be tested.

Optional argument *verbose* prints lots of stuff if true, and prints only
failures if false; by default, or if ``None``, it's true if and only if ``'-v'``
is in ``sys.argv``.

Optional argument *report* prints a summary at the end when true, else prints
nothing at the end.  In verbose mode, the summary is detailed, else the summary
is very brief (in fact, empty if all tests passed).

Optional argument *optionflags* or's together option flags.  See section
:ref:`doctest-options`.

Optional argument *raise_on_error* defaults to false.  If true, an exception is
raised upon the first failure or unexpected exception in an example.  This
allows failures to be post-mortem debugged. Default behavior is to continue
running examples.

Optional argument *parser* specifies a :class:`DocTestParser` (or subclass) that
should be used to extract tests from the files.  It defaults to a normal parser
(i.e., ``DocTestParser()``).

Optional argument *encoding* specifies an encoding that should be used to
convert the file to unicode.



+-*/+-*/+-*/DONT_ACCEPT_BLANKLINE d 
DONT_ACCEPT_BLANKLINE

By default, if an expected output block contains a line containing only the
string ``<BLANKLINE>``, then that line will match a blank line in the actual
output.  Because a genuinely blank line delimits the expected output, this is
the only way to communicate that a blank line is expected.  When
:const:`DONT_ACCEPT_BLANKLINE` is specified, this substitution is not allowed.



+-*/+-*/+-*/IGNORE_EXCEPTION_DETAIL d 
IGNORE_EXCEPTION_DETAIL

When specified, an example that expects an exception passes if an exception of
the expected type is raised, even if the exception detail does not match.  For
example, an example expecting ``ValueError: 42`` will pass if the actual
exception raised is ``ValueError: 3*14``, but will fail, e.g., if
:exc:`TypeError` is raised.

It will also ignore the module name used in Python 3 doctest reports. Hence
both these variations will work regardless of whether the test is run under
Python 2.7 or Python 3.2 (or later versions):

   >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
   Traceback (most recent call last):
   CustomError: message

   >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
   Traceback (most recent call last):
   my_module.CustomError: message

Note that :const:`ELLIPSIS` can also be used to ignore the
details of the exception message, but such a test may still fail based
on whether or not the module details are printed as part of the
exception name. Using :const:`IGNORE_EXCEPTION_DETAIL` and the details
from Python 2.3 is also the only clear way to write a doctest that doesn't
care about the exception detail yet continues to pass under Python 2.3 or
earlier (those releases do not support doctest directives and ignore them
as irrelevant comments). For example, ::

   >>> (1, 2)[3] = 'moo' #doctest: +IGNORE_EXCEPTION_DETAIL
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
   TypeError: object doesn't support item assignment

passes under Python 2.3 and later Python versions, even though the detail
changed in Python 2.4 to say "does not" instead of "doesn't".

.. versionchanged:: 3.2
   :const:`IGNORE_EXCEPTION_DETAIL` now also ignores any information relating
   to the module containing the exception under test.



+-*/+-*/+-*/REPORTING_FLAGS d 
REPORTING_FLAGS

A bitmask or'ing together all the reporting flags above.


+-*/+-*/+-*/REPORT_ONLY_FIRST_FAILURE d 
REPORT_ONLY_FIRST_FAILURE

When specified, display the first failing example in each doctest, but suppress
output for all remaining examples.  This will prevent doctest from reporting
correct examples that break because of earlier failures; but it might also hide
incorrect examples that fail independently of the first failure.  When
:const:`REPORT_ONLY_FIRST_FAILURE` is specified, the remaining examples are
still run, and still count towards the total number of failures reported; only
the output is suppressed.



+-*/+-*/+-*/NORMALIZE_WHITESPACE d 
NORMALIZE_WHITESPACE

When specified, all sequences of whitespace (blanks and newlines) are treated as
equal.  Any sequence of whitespace within the expected output will match any
sequence of whitespace within the actual output. By default, whitespace must
match exactly. :const:`NORMALIZE_WHITESPACE` is especially useful when a line of
expected output is very long, and you want to wrap it across multiple lines in
your source.



+-*/+-*/+-*/REPORT_UDIFF d 
REPORT_UDIFF

When specified, failures that involve multi-line expected and actual outputs are
displayed using a unified diff.



+-*/+-*/+-*/DONT_ACCEPT_TRUE_FOR_1 d 
DONT_ACCEPT_TRUE_FOR_1

By default, if an expected output block contains just ``1``, an actual output
block containing just ``1`` or just ``True`` is considered to be a match, and
similarly for ``0`` versus ``False``.  When :const:`DONT_ACCEPT_TRUE_FOR_1` is
specified, neither substitution is allowed.  The default behavior caters to that
Python changed the return type of many functions from integer to boolean;
doctests expecting "little integer" output still work in these cases.  This
option will probably go away, but not for several years.



+-*/+-*/+-*/SKIP d 
SKIP

When specified, do not run the example at all.  This can be useful in contexts
where doctest examples serve as both documentation and test cases, and an
example should be included for documentation purposes, but should not be
checked.  E.g., the example's output might be random; or the example might
depend on resources which would be unavailable to the test driver.

The SKIP flag can also be used for temporarily "commenting out" examples.



+-*/+-*/+-*/COMPARISON_FLAGS d 
COMPARISON_FLAGS

A bitmask or'ing together all the comparison flags above.


+-*/+-*/+-*/ELLIPSIS d 
ELLIPSIS

When specified, an ellipsis marker (``...``) in the expected output can match
any substring in the actual output.  This includes substrings that span line
boundaries, and empty substrings, so it's best to keep usage of this simple.
Complicated uses can lead to the same kinds of "oops, it matched too much!"
surprises that ``.*`` is prone to in regular expressions.



+-*/+-*/+-*/REPORT_NDIFF d 
REPORT_NDIFF

When specified, differences are computed by ``difflib.Differ``, using the same
algorithm as the popular :file:`ndiff.py` utility. This is the only method that
marks differences within lines as well as across lines.  For example, if a line
of expected output contains digit ``1`` where actual output contains letter
``l``, a line is inserted with a caret marking the mismatching column positions.



+-*/+-*/+-*/REPORT_CDIFF d 
REPORT_CDIFF

When specified, failures that involve multi-line expected and actual outputs
will be displayed using a context diff.



+-*/+-*/+-*/DocTestFailure e 
DocTestFailure

An exception raised by :class:`DocTestRunner` to signal that a doctest example's
actual output did not match its expected output. The constructor arguments are
used to initialize the attributes of the same names.


+-*/+-*/+-*/UnexpectedException e 
UnexpectedException

An exception raised by :class:`DocTestRunner` to signal that a doctest
example raised an unexpected exception.  The constructor arguments are used
to initialize the attributes of the same names.


+-*/+-*/+-*/OutputChecker c 
OutputChecker()

A class used to check the whether the actual output from a doctest example
matches the expected output.  :class:`OutputChecker` defines two methods:
:meth:`check_output`, which compares a given pair of outputs, and returns true
if they match; and :meth:`output_difference`, which returns a string describing
the differences between two outputs.


:class:`OutputChecker` defines the following methods:


+-*/+-*/+-*/+-*/check_output m 
check_output(want, got, optionflags)

Return ``True`` iff the actual output from an example (*got*) matches the
expected output (*want*).  These strings are always considered to match if
they are identical; but depending on what option flags the test runner is
using, several non-exact match types are also possible.  See section
:ref:`doctest-options` for more information about option flags.



+-*/+-*/+-*/+-*/output_difference m 
output_difference(example, got, optionflags)

Return a string describing the differences between the expected output for a
given example (*example*) and the actual output (*got*).  *optionflags* is the
set of option flags used to compare *want* and *got*.




+-*/+-*/+-*/DocTestParser c 
DocTestParser()

A processing class used to extract interactive examples from a string, and use
them to create a :class:`DocTest` object.


:class:`DocTestParser` defines the following methods:



+-*/+-*/+-*/+-*/get_doctest m 
get_doctest(string, globs, name, filename, lineno)

Extract all doctest examples from the given string, and collect them into a
:class:`DocTest` object.

*globs*, *name*, *filename*, and *lineno* are attributes for the new
:class:`DocTest` object.  See the documentation for :class:`DocTest` for more
information.



+-*/+-*/+-*/+-*/parse m 
parse(string, name='<string>')

Divide the given string into examples and intervening text, and return them as
a list of alternating :class:`Example`\ s and strings. Line numbers for the
:class:`Example`\ s are 0-based.  The optional argument *name* is a name
identifying this string, and is only used for error messages.




+-*/+-*/+-*/+-*/get_examples m 
get_examples(string, name='<string>')

Extract all doctest examples from the given string, and return them as a list
of :class:`Example` objects.  Line numbers are 0-based.  The optional argument
*name* is a name identifying this string, and is only used for error messages.



+-*/+-*/+-*/DocTestRunner c 
DocTestRunner(checker=None, verbose=None, optionflags=0)

A processing class used to execute and verify the interactive examples in a
:class:`DocTest`.

The comparison between expected outputs and actual outputs is done by an
:class:`OutputChecker`.  This comparison may be customized with a number of
option flags; see section :ref:`doctest-options` for more information.  If the
option flags are insufficient, then the comparison may also be customized by
passing a subclass of :class:`OutputChecker` to the constructor.

The test runner's display output can be controlled in two ways. First, an output
function can be passed to :meth:`TestRunner.run`; this function will be called
with strings that should be displayed.  It defaults to ``sys.stdout.write``.  If
capturing the output is not sufficient, then the display output can be also
customized by subclassing DocTestRunner, and overriding the methods
:meth:`report_start`, :meth:`report_success`,
:meth:`report_unexpected_exception`, and :meth:`report_failure`.

The optional keyword argument *checker* specifies the :class:`OutputChecker`
object (or drop-in replacement) that should be used to compare the expected
outputs to the actual outputs of doctest examples.

The optional keyword argument *verbose* controls the :class:`DocTestRunner`'s
verbosity.  If *verbose* is ``True``, then information is printed about each
example, as it is run.  If *verbose* is ``False``, then only failures are
printed.  If *verbose* is unspecified, or ``None``, then verbose output is used
iff the command-line switch ``-v`` is used.

The optional keyword argument *optionflags* can be used to control how the test
runner compares expected output to actual output, and how it displays failures.
For more information, see section :ref:`doctest-options`.


:class:`DocTestParser` defines the following methods:



+-*/+-*/+-*/+-*/report_unexpected_exception m 
report_unexpected_exception(out, test, example, exc_info)

Report that the given example raised an unexpected exception. This method is
provided to allow subclasses of :class:`DocTestRunner` to customize their
output; it should not be called directly.

*example* is the example about to be processed. *exc_info* is a tuple
containing information about the unexpected exception (as returned by
:func:`sys.exc_info`). *test* is the test containing *example*.  *out* is the
output function that was passed to :meth:`DocTestRunner.run`.



+-*/+-*/+-*/+-*/run m 
run(test, compileflags=None, out=None, clear_globs=True)

Run the examples in *test* (a :class:`DocTest` object), and display the
results using the writer function *out*.

The examples are run in the namespace ``test.globs``.  If *clear_globs* is
true (the default), then this namespace will be cleared after the test runs,
to help with garbage collection. If you would like to examine the namespace
after the test completes, then use *clear_globs=False*.

*compileflags* gives the set of flags that should be used by the Python
compiler when running the examples.  If not specified, then it will default to
the set of future-import flags that apply to *globs*.

The output of each example is checked using the :class:`DocTestRunner`'s
output checker, and the results are formatted by the
:meth:`DocTestRunner.report_\*` methods.



+-*/+-*/+-*/+-*/report_start m 
report_start(out, test, example)

Report that the test runner is about to process the given example. This method
is provided to allow subclasses of :class:`DocTestRunner` to customize their
output; it should not be called directly.

*example* is the example about to be processed.  *test* is the test
*containing example*.  *out* is the output function that was passed to
:meth:`DocTestRunner.run`.



+-*/+-*/+-*/+-*/report_failure m 
report_failure(out, test, example, got)

Report that the given example failed.  This method is provided to allow
subclasses of :class:`DocTestRunner` to customize their output; it should not
be called directly.

*example* is the example about to be processed.  *got* is the actual output
from the example.  *test* is the test containing *example*.  *out* is the
output function that was passed to :meth:`DocTestRunner.run`.



+-*/+-*/+-*/+-*/report_success m 
report_success(out, test, example, got)

Report that the given example ran successfully.  This method is provided to
allow subclasses of :class:`DocTestRunner` to customize their output; it
should not be called directly.

*example* is the example about to be processed.  *got* is the actual output
from the example.  *test* is the test containing *example*.  *out* is the
output function that was passed to :meth:`DocTestRunner.run`.



+-*/+-*/+-*/+-*/summarize m 
summarize(verbose=None)

Print a summary of all the test cases that have been run by this DocTestRunner,
and return a :term:`named tuple` ``TestResults(failed, attempted)``.

The optional *verbose* argument controls how detailed the summary is.  If the
verbosity is not specified, then the :class:`DocTestRunner`'s verbosity is
used.



+-*/+-*/+-*/DocTestFinder c 
DocTestFinder(verbose=False, parser=DocTestParser(), recurse=True, exclude_empty=True)

A processing class used to extract the :class:`DocTest`\ s that are relevant to
a given object, from its docstring and the docstrings of its contained objects.
:class:`DocTest`\ s can currently be extracted from the following object types:
modules, functions, classes, methods, staticmethods, classmethods, and
properties.

The optional argument *verbose* can be used to display the objects searched by
the finder.  It defaults to ``False`` (no output).

The optional argument *parser* specifies the :class:`DocTestParser` object (or a
drop-in replacement) that is used to extract doctests from docstrings.

If the optional argument *recurse* is false, then :meth:`DocTestFinder.find`
will only examine the given object, and not any contained objects.

If the optional argument *exclude_empty* is false, then
:meth:`DocTestFinder.find` will include tests for objects with empty docstrings.


:class:`DocTestFinder` defines the following method:



+-*/+-*/+-*/+-*/find m 
find(obj[, name][, module][, globs][, extraglobs])

Return a list of the :class:`DocTest`\ s that are defined by *obj*'s
docstring, or by any of its contained objects' docstrings.

The optional argument *name* specifies the object's name; this name will be
used to construct names for the returned :class:`DocTest`\ s.  If *name* is
not specified, then ``obj.__name__`` is used.

The optional parameter *module* is the module that contains the given object.
If the module is not specified or is None, then the test finder will attempt
to automatically determine the correct module.  The object's module is used:

* As a default namespace, if *globs* is not specified.

* To prevent the DocTestFinder from extracting DocTests from objects that are
  imported from other modules.  (Contained objects with modules other than
  *module* are ignored.)

* To find the name of the file containing the object.

* To help find the line number of the object within its file.

If *module* is ``False``, no attempt to find the module will be made.  This is
obscure, of use mostly in testing doctest itself: if *module* is ``False``, or
is ``None`` but cannot be found automatically, then all objects are considered
to belong to the (non-existent) module, so all contained objects will
(recursively) be searched for doctests.

The globals for each :class:`DocTest` is formed by combining *globs* and
*extraglobs* (bindings in *extraglobs* override bindings in *globs*).  A new
shallow copy of the globals dictionary is created for each :class:`DocTest`.
If *globs* is not specified, then it defaults to the module's *__dict__*, if
specified, or ``{}`` otherwise.  If *extraglobs* is not specified, then it
defaults to ``{}``.




+-*/+-*/+-*/DebugRunner c 
DebugRunner(checker=None, verbose=None, optionflags=0)

A subclass of :class:`DocTestRunner` that raises an exception as soon as a
failure is encountered.  If an unexpected exception occurs, an
:exc:`UnexpectedException` exception is raised, containing the test, the
example, and the original exception.  If the output doesn't match, then a
:exc:`DocTestFailure` exception is raised, containing the test, the example, and
the actual output.

For information about the constructor parameters and methods, see the
documentation for :class:`DocTestRunner` in section :ref:`doctest-advanced-api`.


+-*/+-*/+-*/DocTest c 
DocTest(examples, globs, name, filename, lineno, docstring)

A collection of doctest examples that should be run in a single namespace.  The
constructor arguments are used to initialize the attributes of the same names.


:class:`DocTest` defines the following attributes.  They are initialized by
the constructor, and should not be modified directly.


.. attribute:: examples

   A list of :class:`Example` objects encoding the individual interactive Python
   examples that should be run by this test.


.. attribute:: globs

   The namespace (aka globals) that the examples should be run in. This is a
   dictionary mapping names to values.  Any changes to the namespace made by the
   examples (such as binding new variables) will be reflected in :attr:`globs`
   after the test is run.


.. attribute:: name

   A string name identifying the :class:`DocTest`.  Typically, this is the name
   of the object or file that the test was extracted from.


.. attribute:: filename

   The name of the file that this :class:`DocTest` was extracted from; or
   ``None`` if the filename is unknown, or if the :class:`DocTest` was not
   extracted from a file.


.. attribute:: lineno

   The line number within :attr:`filename` where this :class:`DocTest` begins, or
   ``None`` if the line number is unavailable.  This line number is zero-based
   with respect to the beginning of the file.


.. attribute:: docstring

   The string that the test was extracted from, or 'None' if the string is
   unavailable, or if the test was not extracted from a string.



+-*/+-*/+-*/Example c 
Example(source, want, exc_msg=None, lineno=0, indent=0, options=None)

A single interactive example, consisting of a Python statement and its expected
output.  The constructor arguments are used to initialize the attributes of
the same names.


:class:`Example` defines the following attributes.  They are initialized by
the constructor, and should not be modified directly.


.. attribute:: source

   A string containing the example's source code.  This source code consists of a
   single Python statement, and always ends with a newline; the constructor adds
   a newline when necessary.


.. attribute:: want

   The expected output from running the example's source code (either from
   stdout, or a traceback in case of exception).  :attr:`want` ends with a
   newline unless no output is expected, in which case it's an empty string.  The
   constructor adds a newline when necessary.


.. attribute:: exc_msg

   The exception message generated by the example, if the example is expected to
   generate an exception; or ``None`` if it is not expected to generate an
   exception.  This exception message is compared against the return value of
   :func:`traceback.format_exception_only`.  :attr:`exc_msg` ends with a newline
   unless it's ``None``.  The constructor adds a newline if needed.


.. attribute:: lineno

   The line number within the string containing this example where the example
   begins.  This line number is zero-based with respect to the beginning of the
   containing string.


.. attribute:: indent

   The example's indentation in the containing string, i.e., the number of space
   characters that precede the example's first prompt.


.. attribute:: options

   A dictionary mapping from option flags to ``True`` or ``False``, which is used
   to override default options for this example.  Any option flags not contained
   in this dictionary are left at their default value (as specified by the
   :class:`DocTestRunner`'s :attr:`optionflags`). By default, no options are set.



+-*/+-*/+-*/DocTestFailure _ 
+-*/+-*/+-*/+-*/test d 
test

The :class:`DocTest` object that was being run when the example failed.



+-*/+-*/+-*/+-*/got d 
got

The example's actual output.



+-*/+-*/+-*/+-*/example d 
example

The :class:`Example` that failed.



+-*/+-*/+-*/UnexpectedException _ 
+-*/+-*/+-*/+-*/test d 
test

The :class:`DocTest` object that was being run when the example failed.



+-*/+-*/+-*/+-*/exc_info d 
exc_info

A tuple containing information about the unexpected exception, as returned by
:func:`sys.exc_info`.



+-*/+-*/+-*/+-*/example d 
example

The :class:`Example` that failed.



+-*/+-*/test p Regression tests package containing the testing suite for Python.
+-*/+-*/+-*/support p Support for Python's regression test suite.
+-*/+-*/+-*/+-*/forget f 
forget(module_name)

Remove the module named *module_name* from ``sys.modules`` and delete any
byte-compiled files of the module.



+-*/+-*/+-*/+-*/captured_stdout f 
captured_stdout()

This is a context manager that runs the :keyword:`with` statement body using
a :class:`StringIO.StringIO` object as sys.stdout.  That object can be
retrieved using the ``as`` clause of the :keyword:`with` statement.

Example use::

   with captured_stdout() as s:
       print("hello")
   assert s.getvalue() == "hello"



+-*/+-*/+-*/+-*/check_warnings f 
check_warnings(\*filters, quiet=True)

A convenience wrapper for :func:`warnings.catch_warnings()` that makes it
easier to test that a warning was correctly raised.  It is approximately
equivalent to calling ``warnings.catch_warnings(record=True)`` with
:meth:`warnings.simplefilter` set to ``always`` and with the option to
automatically validate the results that are recorded.

``check_warnings`` accepts 2-tuples of the form ``("message regexp",
WarningCategory)`` as positional arguments. If one or more *filters* are
provided, or if the optional keyword argument *quiet* is :const:`False`,
it checks to make sure the warnings are as expected:  each specified filter
must match at least one of the warnings raised by the enclosed code or the
test fails, and if any warnings are raised that do not match any of the
specified filters the test fails.  To disable the first of these checks,
set *quiet* to :const:`True`.

If no arguments are specified, it defaults to::

   check_warnings(("", Warning), quiet=True)

In this case all warnings are caught and no errors are raised.

On entry to the context manager, a :class:`WarningRecorder` instance is
returned. The underlying warnings list from
:func:`~warnings.catch_warnings` is available via the recorder object's
:attr:`warnings` attribute.  As a convenience, the attributes of the object
representing the most recent warning can also be accessed directly through
the recorder object (see example below).  If no warning has been raised,
then any of the attributes that would otherwise be expected on an object
representing a warning will return :const:`None`.

The recorder object also has a :meth:`reset` method, which clears the
warnings list.

The context manager is designed to be used like this::

   with check_warnings(("assertion is always true", SyntaxWarning),
                       ("", UserWarning)):
       exec('assert(False, "Hey!")')
       warnings.warn(UserWarning("Hide me!"))

In this case if either warning was not raised, or some other warning was
raised, :func:`check_warnings` would raise an error.

When a test needs to look more deeply into the warnings, rather than
just checking whether or not they occurred, code like this can be used::

   with check_warnings(quiet=True) as w:
       warnings.warn("foo")
       assert str(w.args[0]) == "foo"
       warnings.warn("bar")
       assert str(w.args[0]) == "bar"
       assert str(w.warnings[0].args[0]) == "foo"
       assert str(w.warnings[1].args[0]) == "bar"
       w.reset()
       assert len(w.warnings) == 0


Here all warnings will be caught, and the test code tests the captured
warnings directly.

.. versionchanged:: 3.2
   New optional arguments *filters* and *quiet*.



+-*/+-*/+-*/+-*/import_fresh_module f 
import_fresh_module(name, fresh=(), blocked=(), deprecated=False)

This function imports and returns a fresh copy of the named Python module
by removing the named module from ``sys.modules`` before doing the import.
Note that unlike :func:`reload`, the original module is not affected by
this operation.

*fresh* is an iterable of additional module names that are also removed
from the ``sys.modules`` cache before doing the import.

*blocked* is an iterable of module names that are replaced with :const:`0`
in the module cache during the import to ensure that attempts to import
them raise :exc:`ImportError`.

The named module and any modules named in the *fresh* and *blocked*
parameters are saved before starting the import and then reinserted into
``sys.modules`` when the fresh import is complete.

Module and package deprecation messages are suppressed during this import
if *deprecated* is :const:`True`.

This function will raise :exc:`unittest.SkipTest` is the named module
cannot be imported.

Example use::

   # Get copies of the warnings module for testing without
   # affecting the version being used by the rest of the test suite
   # One copy uses the C implementation, the other is forced to use
   # the pure Python fallback implementation
   py_warnings = import_fresh_module('warnings', blocked=['_warnings'])
   c_warnings = import_fresh_module('warnings', fresh=['_warnings'])

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/run_unittest f 
run_unittest(\*classes)

Execute :class:`unittest.TestCase` subclasses passed to the function. The
function scans the classes for methods starting with the prefix ``test_``
and executes the tests individually.

It is also legal to pass strings as parameters; these should be keys in
``sys.modules``. Each associated module will be scanned by
``unittest.TestLoader.loadTestsFromModule()``. This is usually seen in the
following :func:`test_main` function::

   def test_main():
       support.run_unittest(__name__)

This will run all tests defined in the named module.



+-*/+-*/+-*/+-*/is_resource_enabled f 
is_resource_enabled(resource)

Return :const:`True` if *resource* is enabled and available. The list of
available resources is only set when :mod:`test.regrtest` is executing the
tests.



+-*/+-*/+-*/+-*/import_module f 
import_module(name, deprecated=False)

This function imports and returns the named module. Unlike a normal
import, this function raises :exc:`unittest.SkipTest` if the module
cannot be imported.

Module and package deprecation messages are suppressed during this import
if *deprecated* is :const:`True`.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/requires f 
requires(resource, msg=None)

Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the
argument to :exc:`ResourceDenied` if it is raised. Always returns
:const:`True` if called by a function whose ``__name__`` is ``'__main__'``.
Used when tests are executed by :mod:`test.regrtest`.



+-*/+-*/+-*/+-*/findfile f 
findfile(filename)

Return the path to the file named *filename*. If no match is found
*filename* is returned. This does not equal a failure since it could be the
path to the file.



+-*/+-*/+-*/+-*/is_jython d 
is_jython

:const:`True` if the running interpreter is Jython.



+-*/+-*/+-*/+-*/verbose d 
verbose

:const:`True` when verbose output is enabled. Should be checked when more
detailed information is desired about a running test. *verbose* is set by
:mod:`test.regrtest`.



+-*/+-*/+-*/+-*/TESTFN d 
TESTFN

Set to a name that is safe to use as the name of a temporary file.  Any
temporary file that is created should be closed and unlinked (removed).



+-*/+-*/+-*/+-*/ResourceDenied e 
ResourceDenied

Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a
network connection) is not available. Raised by the :func:`requires`
function.



+-*/+-*/+-*/+-*/TestFailed e 
TestFailed

Exception to be raised when a test fails. This is deprecated in favor of
:mod:`unittest`\ -based tests and :class:`unittest.TestCase`'s assertion
methods.



+-*/+-*/+-*/+-*/WarningsRecorder c 
WarningsRecorder()

Class used to record warnings for unit tests. See documentation of
:func:`check_warnings` above for more details.


+-*/+-*/+-*/+-*/EnvironmentVarGuard c 
EnvironmentVarGuard()

Class used to temporarily set or unset environment variables.  Instances can
be used as a context manager and have a complete dictionary interface for
querying/modifying the underlying ``os.environ``. After exit from the
context manager all changes to environment variables done through this
instance will be rolled back.

.. versionchanged:: 3.1
   Added dictionary interface.


+-*/+-*/+-*/+-*/+-*/set m 
set(envvar, value)

Temporarily set the environment variable ``envvar`` to the value of
``value``.



+-*/+-*/+-*/+-*/+-*/unset m 
unset(envvar)

Temporarily unset the environment variable ``envvar``.



+-*/+-*/+-*/+-*/TransientResource c 
TransientResource(exc, **kwargs)

Instances are a context manager that raises :exc:`ResourceDenied` if the
specified exception type is raised.  Any keyword arguments are treated as
attribute/value pairs to be compared against any exception raised within the
:keyword:`with` statement.  Only if all pairs match properly against
attributes on the exception is :exc:`ResourceDenied` raised.



+-*/debug _ Debugging and Profiling
+-*/+-*/bdb p Debugger framework.
+-*/+-*/+-*/checkfuncname f 
checkfuncname(b, frame)

Check whether we should break here, depending on the way the breakpoint *b*
was set.

If it was set via line number, it checks if ``b.line`` is the same as the one
in the frame also passed as argument.  If the breakpoint was set via function
name, we have to check we are in the right frame (the right function) and if
we are in its first executable line.


+-*/+-*/+-*/set_trace f 
set_trace()

Start debugging with a :class:`Bdb` instance from caller's frame.


+-*/+-*/+-*/effective f 
effective(file, line, frame)

Determine if there is an effective (active) breakpoint at this line of code.
Return a tuple of the breakpoint and a boolean that indicates if it is ok
to delete a temporary breakpoint.  Return ``(None, None)`` if there is no
matching breakpoint.


+-*/+-*/+-*/BdbQuit e 
BdbQuit

Exception raised by the :class:`Bdb` class for quitting the debugger.



+-*/+-*/+-*/Bdb c 
Bdb(skip=None)

The :class:`Bdb` class acts as a generic Python debugger base class.

This class takes care of the details of the trace facility; a derived class
should implement user interaction.  The standard debugger class
(:class:`pdb.Pdb`) is an example.

The *skip* argument, if given, must be an iterable of glob-style
module name patterns.  The debugger will not step into frames that
originate in a module that matches one of these patterns. Whether a
frame is considered to originate in a certain module is determined
by the ``__name__`` in the frame globals.

.. versionadded:: 3.1
   The *skip* argument.

The following methods of :class:`Bdb` normally don't need to be overridden.


+-*/+-*/+-*/+-*/runeval m 
runeval(expr, globals=None, locals=None)

Debug an expression executed via the :func:`eval` function.  *globals* and
*locals* have the same meaning as in :meth:`run`.


+-*/+-*/+-*/+-*/get_file_breaks m 
get_file_breaks(filename)

Return all breakpoints in *filename*, or an empty list if none are set.


+-*/+-*/+-*/+-*/clear_bpbynumber m 
clear_bpbynumber(arg)

Delete the breakpoint which has the index *arg* in the
:attr:`Breakpoint.bpbynumber`.  If *arg* is not numeric or out of range,
return an error message.


+-*/+-*/+-*/+-*/clear_all_breaks m 
clear_all_breaks()

Delete all existing breakpoints.


+-*/+-*/+-*/+-*/dispatch_return m 
dispatch_return(frame, arg)

If the debugger should stop on this function return, invoke the
:meth:`user_return` method (which should be overridden in subclasses).
Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
(which can be set from :meth:`user_return`).  Return a reference to the
:meth:`trace_dispatch` method for further tracing in that scope.


+-*/+-*/+-*/+-*/user_exception m 
user_exception(frame, exc_info)

This method is called from :meth:`dispatch_exception` when
:meth:`stop_here` yields True.


+-*/+-*/+-*/+-*/set_trace m 
set_trace([frame])

Start debugging from *frame*.  If *frame* is not specified, debugging
starts from caller's frame.


+-*/+-*/+-*/+-*/runcall m 
runcall(func, *args, **kwds)

Debug a single function call, and return its result.




+-*/+-*/+-*/+-*/set_next m 
set_next(frame)

Stop on the next line in or below the given frame.


+-*/+-*/+-*/+-*/set_quit m 
set_quit()

Set the :attr:`quitting` attribute to True.  This raises :exc:`BdbQuit` in
the next call to one of the :meth:`dispatch_\*` methods.



+-*/+-*/+-*/+-*/get_bpbynumber m 
get_bpbynumber(arg)

Return a breakpoint specified by the given number.  If *arg* is a string,
it will be converted to a number.  If *arg* is a non-numeric string, if
the given breakpoint never existed or has been deleted, a
:exc:`ValueError` is raised.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/set_continue m 
set_continue()

Stop only at breakpoints or when finished.  If there are no breakpoints,
set the system trace function to None.


+-*/+-*/+-*/+-*/set_until m 
set_until(frame)

Stop when the line with the line no greater than the current one is
reached or when returning from current frame


+-*/+-*/+-*/+-*/dispatch_call m 
dispatch_call(frame, arg)

If the debugger should stop on this function call, invoke the
:meth:`user_call` method (which should be overridden in subclasses).
Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
(which can be set from :meth:`user_call`).  Return a reference to the
:meth:`trace_dispatch` method for further tracing in that scope.


+-*/+-*/+-*/+-*/canonic m 
canonic(filename)

Auxiliary method for getting a filename in a canonical form, that is, as a
case-normalized (on case-insensitive filesystems) absolute path, stripped
of surrounding angle brackets.


+-*/+-*/+-*/+-*/break_anywhere m 
break_anywhere(frame)

This method checks if there is a breakpoint in the filename of the current
frame.


+-*/+-*/+-*/+-*/run m 
run(cmd, globals=None, locals=None)

Debug a statement executed via the :func:`exec` function.  *globals*
defaults to :attr:`__main__.__dict__`, *locals* defaults to *globals*.


+-*/+-*/+-*/+-*/runctx m 
runctx(cmd, globals, locals)

For backwards compatibility.  Calls the :meth:`run` method.


+-*/+-*/+-*/+-*/get_all_breaks m 
get_all_breaks()

Return all breakpoints that are set.



+-*/+-*/+-*/+-*/format_stack_entry m 
format_stack_entry(frame_lineno, lprefix=': ')

Return a string with information about a stack entry, identified by a
``(frame, lineno)`` tuple:

* The canonical form of the filename which contains the frame.
* The function name, or ``"<lambda>"``.
* The input arguments.
* The return value.
* The line of code (if it exists).



+-*/+-*/+-*/+-*/stop_here m 
stop_here(frame)

This method checks if the *frame* is somewhere below :attr:`botframe` in
the call stack.  :attr:`botframe` is the frame in which debugging started.


+-*/+-*/+-*/+-*/clear_break m 
clear_break(filename, lineno)

Delete the breakpoints in *filename* and *lineno*.  If none were set, an
error message is returned.


+-*/+-*/+-*/+-*/set_break m 
set_break(filename, lineno, temporary=0, cond, funcname)

Set a new breakpoint.  If the *lineno* line doesn't exist for the
*filename* passed as argument, return an error message.  The *filename*
should be in canonical form, as described in the :meth:`canonic` method.


+-*/+-*/+-*/+-*/dispatch_line m 
dispatch_line(frame)

If the debugger should stop on the current line, invoke the
:meth:`user_line` method (which should be overridden in subclasses).
Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
(which can be set from :meth:`user_line`).  Return a reference to the
:meth:`trace_dispatch` method for further tracing in that scope.


+-*/+-*/+-*/+-*/do_clear m 
do_clear(arg)

Handle how a breakpoint must be removed when it is a temporary one.

This method must be implemented by derived classes.



+-*/+-*/+-*/+-*/get_breaks m 
get_breaks(filename, lineno)

Return all breakpoints for *lineno* in *filename*, or an empty list if
none are set.


+-*/+-*/+-*/+-*/get_stack m 
get_stack(f, t)

Get a list of records for a frame and all higher (calling) and lower
frames, and the size of the higher part.


+-*/+-*/+-*/+-*/reset m 
reset()

Set the :attr:`botframe`, :attr:`stopframe`, :attr:`returnframe` and
:attr:`quitting` attributes with values ready to start debugging.


+-*/+-*/+-*/+-*/set_step m 
set_step()

Stop after one line of code.


+-*/+-*/+-*/+-*/set_return m 
set_return(frame)

Stop when returning from the given frame.


+-*/+-*/+-*/+-*/get_break m 
get_break(filename, lineno)

Check if there is a breakpoint for *lineno* of *filename*.


+-*/+-*/+-*/+-*/clear_all_file_breaks m 
clear_all_file_breaks(filename)

Delete all breakpoints in *filename*.  If none were set, an error message
is returned.


+-*/+-*/+-*/+-*/dispatch_exception m 
dispatch_exception(frame, arg)

If the debugger should stop at this exception, invokes the
:meth:`user_exception` method (which should be overridden in subclasses).
Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
(which can be set from :meth:`user_exception`).  Return a reference to the
:meth:`trace_dispatch` method for further tracing in that scope.


+-*/+-*/+-*/+-*/user_return m 
user_return(frame, return_value)

This method is called from :meth:`dispatch_return` when :meth:`stop_here`
yields True.


+-*/+-*/+-*/+-*/trace_dispatch m 
trace_dispatch(frame, event, arg)

This function is installed as the trace function of debugged frames.  Its
return value is the new trace function (in most cases, that is, itself).

The default implementation decides how to dispatch a frame, depending on
the type of event (passed as a string) that is about to be executed.
*event* can be one of the following:

* ``"line"``: A new line of code is going to be executed.
* ``"call"``: A function is about to be called, or another code block
  entered.
* ``"return"``: A function or other code block is about to return.
* ``"exception"``: An exception has occurred.
* ``"c_call"``: A C function is about to be called.
* ``"c_return"``: A C function has returned.
* ``"c_exception"``: A C function has raised an exception.

For the Python events, specialized functions (see below) are called.  For
the C events, no action is taken.

The *arg* parameter depends on the previous event.

See the documentation for :func:`sys.settrace` for more information on the
trace function.  For more information on code and frame objects, refer to
:ref:`types`.


+-*/+-*/+-*/+-*/user_line m 
user_line(frame)

This method is called from :meth:`dispatch_line` when either
:meth:`stop_here` or :meth:`break_here` yields True.


+-*/+-*/+-*/+-*/user_call m 
user_call(frame, argument_list)

This method is called from :meth:`dispatch_call` when there is the
possibility that a break might be necessary anywhere inside the called
function.


+-*/+-*/+-*/+-*/break_here m 
break_here(frame)

This method checks if there is a breakpoint in the filename and line
belonging to *frame* or, at least, in the current function.  If the
breakpoint is a temporary one, this method deletes it.


+-*/+-*/+-*/Breakpoint c 
Breakpoint(self, file, line, temporary=0, cond=None, funcname=None)

This class implements temporary breakpoints, ignore counts, disabling and
(re-)enabling, and conditionals.

Breakpoints are indexed by number through a list called :attr:`bpbynumber`
and by ``(file, line)`` pairs through :attr:`bplist`.  The former points to a
single instance of class :class:`Breakpoint`.  The latter points to a list of
such instances since there may be more than one breakpoint per line.

When creating a breakpoint, its associated filename should be in canonical
form.  If a *funcname* is defined, a breakpoint hit will be counted when the
first line of that function is executed.  A conditional breakpoint always
counts a hit.

:class:`Breakpoint` instances have the following methods:


+-*/+-*/+-*/+-*/bpprint m 
bpprint(out=None)

Print the output of :meth:`bpformat` to the file *out*, or if it is
``None``, to standard output.




+-*/+-*/+-*/+-*/bpformat m 
bpformat()

Return a string with all the information about the breakpoint, nicely
formatted:

* The breakpoint number.
* If it is temporary or not.
* Its file,line position.
* The condition that causes a break.
* If it must be ignored the next N times.
* The breakpoint hit count.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/enable m 
enable()

Mark the breakpoint as enabled.



+-*/+-*/+-*/+-*/disable m 
disable()

Mark the breakpoint as disabled.



+-*/+-*/+-*/+-*/deleteMe m 
deleteMe()

Delete the breakpoint from the list associated to a file/line.  If it is
the last breakpoint in that position, it also deletes the entry for the
file/line.



+-*/+-*/cProfile p Python profiler
+-*/+-*/+-*/runctx f 
runctx(command, globals, locals, filename=None)

This function is similar to :func:`run`, with added arguments to supply the
globals and locals dictionaries for the *command* string.



+-*/+-*/+-*/run f 
run(command, filename=None, sort=-1)

This function takes a single argument that can be passed to the :func:`exec`
function, and an optional file name.  In all cases this routine attempts to
:func:`exec` its first argument, and gather profiling statistics from the
execution. If no file name is present, then this function automatically
prints a simple profiling report, sorted by the standard name string
(file/line/function-name) that is presented in each line.  The following is a
typical output from such a call::

         2706 function calls (2004 primitive calls) in 4.504 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)
     43/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)
    ...

The first line indicates that 2706 calls were monitored.  Of those calls, 2004
were :dfn:`primitive`.  We define :dfn:`primitive` to mean that the call was not
induced via recursion. The next line: ``Ordered by: standard name``, indicates
that the text string in the far right column was used to sort the output. The
column headings include:

ncalls
   for the number of calls,

tottime
   for the total time spent in the given function (and excluding time made in
   calls to sub-functions),

percall
   is the quotient of ``tottime`` divided by ``ncalls``

cumtime
   is the total time spent in this and all subfunctions (from invocation till
   exit). This figure is accurate *even* for recursive functions.

percall
   is the quotient of ``cumtime`` divided by primitive calls

filename:lineno(function)
   provides the respective data of each function

When there are two numbers in the first column (for example, ``43/3``), then the
latter is the number of primitive calls, and the former is the actual number of
calls.  Note that when the function does not recurse, these two values are the
same, and only the single figure is printed.

If *sort* is given, it can be one of ``'stdname'`` (sort by filename:lineno),
``'calls'`` (sort by number of calls), ``'time'`` (sort by total time) or
``'cumulative'`` (sort by cumulative time).  The default is ``'stdname'``.



+-*/+-*/pdb p The Python debugger for interactive interpreters.
+-*/+-*/+-*/runcall f 
runcall(function, *args, **kwds)

Call the *function* (a function or method object, not a string) with the
given arguments.  When :func:`runcall` returns, it returns whatever the
function call returned.  The debugger prompt appears as soon as the function
is entered.



+-*/+-*/+-*/set_trace f 
set_trace()

Enter the debugger at the calling stack frame.  This is useful to hard-code a
breakpoint at a given point in a program, even if the code is not otherwise
being debugged (e.g. when an assertion fails).



+-*/+-*/+-*/runeval f 
runeval(expression, globals=None, locals=None)

Evaluate the *expression* (given as a string or a code object) under debugger
control.  When :func:`runeval` returns, it returns the value of the
expression.  Otherwise this function is similar to :func:`run`.



+-*/+-*/+-*/run f 
run(statement, globals=None, locals=None)

Execute the *statement* (given as a string or a code object) under debugger
control.  The debugger prompt appears before any code is executed; you can
set breakpoints and type :pdbcmd:`continue`, or you can step through the
statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are
explained below).  The optional *globals* and *locals* arguments specify the
environment in which the code is executed; by default the dictionary of the
module :mod:`__main__` is used.  (See the explanation of the built-in
:func:`exec` or :func:`eval` functions.)



+-*/+-*/+-*/post_mortem f 
post_mortem(traceback=None)

Enter post-mortem debugging of the given *traceback* object.  If no
*traceback* is given, it uses the one of the exception that is currently
being handled (an exception must be being handled if the default is to be
used).



+-*/+-*/+-*/pm f 
pm()

Enter post-mortem debugging of the traceback found in
:data:`sys.last_traceback`.



+-*/+-*/+-*/Pdb c 
Pdb(completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False)

:class:`Pdb` is the debugger class.

The *completekey*, *stdin* and *stdout* arguments are passed to the
underlying :class:`cmd.Cmd` class; see the description there.

The *skip* argument, if given, must be an iterable of glob-style module name
patterns.  The debugger will not step into frames that originate in a module
that matches one of these patterns. [1]_

By default, Pdb sets a handler for the SIGINT signal (which is sent when the
user presses Ctrl-C on the console) when you give a ``continue`` command.
This allows you to break into the debugger again by pressing Ctrl-C.  If you
want Pdb not to touch the SIGINT handler, set *nosigint* tot true.

Example call to enable tracing with *skip*::

   import pdb; pdb.Pdb(skip=['django.*']).set_trace()

.. versionadded:: 3.1
   The *skip* argument.

.. versionadded:: 3.2
   The *nosigint* argument.  Previously, a SIGINT handler was never set by
   Pdb.


+-*/+-*/+-*/+-*/runcall m 
runcall(function, *args, **kwds)

See the documentation for the functions explained above.




+-*/+-*/+-*/+-*/runeval m 
runeval(expression, globals=None, locals=None)

See the documentation for the functions explained above.




+-*/+-*/+-*/+-*/set_trace m 
set_trace()

See the documentation for the functions explained above.




+-*/+-*/+-*/+-*/run m 
run(statement, globals=None, locals=None)

See the documentation for the functions explained above.




+-*/+-*/pstats p Statistics object for use with the profiler.
+-*/+-*/+-*/Stats c 
Stats(*filenames, stream=sys.stdout)

This class constructor creates an instance of a "statistics object" from a
*filename* (or set of filenames).  :class:`Stats` objects are manipulated by
methods, in order to print useful reports.  You may specify an alternate output
stream by giving the keyword argument, ``stream``.

The file selected by the above constructor must have been created by the
corresponding version of :mod:`profile` or :mod:`cProfile`.  To be specific,
there is *no* file compatibility guaranteed with future versions of this
profiler, and there is no compatibility with files produced by other profilers.
If several files are provided, all the statistics for identical functions will
be coalesced, so that an overall view of several processes can be considered in
a single report.  If additional files need to be combined with data in an
existing :class:`Stats` object, the :meth:`add` method can be used.

.. (such as the old system profiler).



+-*/+-*/+-*/+-*/print_callers m 
print_callers(*restrictions)

This method for the :class:`Stats` class prints a list of all functions that
called each function in the profiled database.  The ordering is identical to
that provided by :meth:`print_stats`, and the definition of the restricting
argument is also identical.  Each caller is reported on its own line.  The
format differs slightly depending on the profiler that produced the stats:

* With :mod:`profile`, a number is shown in parentheses after each caller to
  show how many times this specific call was made.  For convenience, a second
  non-parenthesized number repeats the cumulative time spent in the function
  at the right.

* With :mod:`cProfile`, each caller is preceded by three numbers: the number of
  times this specific call was made, and the total and cumulative times spent in
  the current function while it was invoked by this specific caller.



+-*/+-*/+-*/+-*/reverse_order m 
reverse_order()

This method for the :class:`Stats` class reverses the ordering of the basic list
within the object.  Note that by default ascending vs descending order is
properly selected based on the sort key of choice.

.. This method is provided primarily for compatibility with the old profiler.



+-*/+-*/+-*/+-*/print_stats m 
print_stats(*restrictions)

This method for the :class:`Stats` class prints out a report as described in the
:func:`profile.run` definition.

The order of the printing is based on the last :meth:`sort_stats` operation done
on the object (subject to caveats in :meth:`add` and :meth:`strip_dirs`).

The arguments provided (if any) can be used to limit the list down to the
significant entries.  Initially, the list is taken to be the complete set of
profiled functions.  Each restriction is either an integer (to select a count of
lines), or a decimal fraction between 0.0 and 1.0 inclusive (to select a
percentage of lines), or a regular expression (to pattern match the standard
name that is printed; as of Python 1.5b1, this uses the Perl-style regular
expression syntax defined by the :mod:`re` module).  If several restrictions are
provided, then they are applied sequentially.  For example::

   print_stats(.1, 'foo:')

would first limit the printing to first 10% of list, and then only print
functions that were part of filename :file:`.\*foo:`.  In contrast, the
command::

   print_stats('foo:', .1)

would limit the list to all functions having file names :file:`.\*foo:`, and
then proceed to only print the first 10% of them.



+-*/+-*/+-*/+-*/sort_stats m 
sort_stats(*keys)

This method modifies the :class:`Stats` object by sorting it according to the
supplied criteria.  The argument is typically a string identifying the basis of
a sort (example: ``'time'`` or ``'name'``).

When more than one key is provided, then additional keys are used as secondary
criteria when there is equality in all keys selected before them.  For example,
``sort_stats('name', 'file')`` will sort all the entries according to their
function name, and resolve all ties (identical function names) by sorting by
file name.

Abbreviations can be used for any key names, as long as the abbreviation is
unambiguous.  The following are the keys currently defined:

+------------------+----------------------+
| Valid Arg        | Meaning              |
+==================+======================+
| ``'calls'``      | call count           |
+------------------+----------------------+
| ``'cumulative'`` | cumulative time      |
+------------------+----------------------+
| ``'file'``       | file name            |
+------------------+----------------------+
| ``'module'``     | file name            |
+------------------+----------------------+
| ``'pcalls'``     | primitive call count |
+------------------+----------------------+
| ``'line'``       | line number          |
+------------------+----------------------+
| ``'name'``       | function name        |
+------------------+----------------------+
| ``'nfl'``        | name/file/line       |
+------------------+----------------------+
| ``'stdname'``    | standard name        |
+------------------+----------------------+
| ``'time'``       | internal time        |
+------------------+----------------------+

Note that all sorts on statistics are in descending order (placing most time
consuming items first), where as name, file, and line number searches are in
ascending order (alphabetical). The subtle distinction between ``'nfl'`` and
``'stdname'`` is that the standard name is a sort of the name as printed, which
means that the embedded line numbers get compared in an odd way.  For example,
lines 3, 20, and 40 would (if the file names were the same) appear in the string
order 20, 3 and 40.  In contrast, ``'nfl'`` does a numeric compare of the line
numbers.  In fact, ``sort_stats('nfl')`` is the same as ``sort_stats('name',
'file', 'line')``.

For backward-compatibility reasons, the numeric arguments ``-1``, ``0``, ``1``,
and ``2`` are permitted.  They are interpreted as ``'stdname'``, ``'calls'``,
``'time'``, and ``'cumulative'`` respectively.  If this old style format
(numeric) is used, only one sort key (the numeric key) will be used, and
additional arguments will be silently ignored.

.. For compatibility with the old profiler,



+-*/+-*/+-*/+-*/dump_stats m 
dump_stats(filename)

Save the data loaded into the :class:`Stats` object to a file named *filename*.
The file is created if it does not exist, and is overwritten if it already
exists.  This is equivalent to the method of the same name on the
:class:`profile.Profile` and :class:`cProfile.Profile` classes.



+-*/+-*/+-*/+-*/add m 
add(*filenames)

This method of the :class:`Stats` class accumulates additional profiling
information into the current profiling object.  Its arguments should refer to
filenames created by the corresponding version of :func:`profile.run` or
:func:`cProfile.run`. Statistics for identically named (re: file, line, name)
functions are automatically accumulated into single function statistics.



+-*/+-*/+-*/+-*/strip_dirs m 
strip_dirs()

This method for the :class:`Stats` class removes all leading path information
from file names.  It is very useful in reducing the size of the printout to fit
within (close to) 80 columns.  This method modifies the object, and the stripped
information is lost.  After performing a strip operation, the object is
considered to have its entries in a "random" order, as it was just after object
initialization and loading.  If :meth:`strip_dirs` causes two function names to
be indistinguishable (they are on the same line of the same filename, and have
the same function name), then the statistics for these two entries are
accumulated into a single entry.



+-*/+-*/+-*/+-*/print_callees m 
print_callees(*restrictions)

This method for the :class:`Stats` class prints a list of all function that were
called by the indicated function.  Aside from this reversal of direction of
calls (re: called vs was called by), the arguments and ordering are identical to
the :meth:`print_callers` method.



+-*/+-*/trace p Trace or track Python statement execution.
+-*/+-*/+-*/Trace c 
Trace(count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False)

Create an object to trace execution of a single statement or expression.  All
parameters are optional.  *count* enables counting of line numbers.  *trace*
enables line execution tracing.  *countfuncs* enables listing of the
functions called during the run.  *countcallers* enables call relationship
tracking.  *ignoremods* is a list of modules or packages to ignore.
*ignoredirs* is a list of directories whose modules or packages should be
ignored.  *infile* is the name of the file from which to read stored count
information.  *outfile* is the name of the file in which to write updated
count information.  *timing* enables a timestamp relative to when tracing was
started to be displayed.

 .. method:: run(cmd)

    Execute the command and gather statistics from the execution with
    the current tracing parameters.  *cmd* must be a string or code object,
    suitable for passing into :func:`exec`.

 .. method:: runctx(cmd, globals=None, locals=None)

    Execute the command and gather statistics from the execution with the
    current tracing parameters, in the defined global and local
    environments.  If not defined, *globals* and *locals* default to empty
    dictionaries.

 .. method:: runfunc(func, *args, **kwds)

    Call *func* with the given arguments under control of the :class:`Trace`
    object with the current tracing parameters.

 .. method:: results()

    Return a :class:`CoverageResults` object that contains the cumulative
    results of all previous calls to ``run``, ``runctx`` and ``runfunc``
    for the given :class:`Trace` instance.  Does not reset the accumulated
    trace results.


+-*/+-*/+-*/CoverageResults c 
CoverageResults

A container for coverage results, created by :meth:`Trace.results`.  Should
not be created directly by the user.

 .. method:: update(other)

    Merge in data from another :class:`CoverageResults` object.

 .. method:: write_results(show_missing=True, summary=False, coverdir=None)

    Write coverage results.  Set *show_missing* to show lines that had no
    hits.  Set *summary* to include in the output the coverage summary per
    module.  *coverdir* specifies the directory into which the coverage
    result files will be output.  If ``None``, the results for each source
    file are placed in its directory.


+-*/python _ Python Runtime Services
+-*/+-*/fpectl p Provide control for floating point exception handling.
+-*/+-*/+-*/turnoff_sigfpe f 
turnoff_sigfpe()

Reset default handling of floating point exceptions.



+-*/+-*/+-*/turnon_sigfpe f 
turnon_sigfpe()

Turn on the generation of :const:`SIGFPE`, and set up an appropriate signal
handler.



+-*/+-*/+-*/FloatingPointError e 
FloatingPointError

After :func:`turnon_sigfpe` has been executed, a floating point operation that
raises one of the IEEE-754 exceptions Division by Zero, Overflow, or Invalid
operation will in turn raise this standard Python exception.



+-*/+-*/site p Module responsible for site-specific configuration.
+-*/+-*/+-*/getsitepackages f 
getsitepackages()

Return a list containing all global site-packages directories (and possibly
site-python).

.. versionadded:: 3.2



+-*/+-*/+-*/getusersitepackages f 
getusersitepackages()

Return the path of the user-specific site-packages directory,
:data:`USER_SITE`.  If it is not initialized yet, this function will also set
it, respecting :envvar:`PYTHONNOUSERSITE` and :data:`USER_BASE`.

.. versionadded:: 3.2



+-*/+-*/+-*/getuserbase f 
getuserbase()

Return the path of the user base directory, :data:`USER_BASE`.  If it is not
initialized yet, this function will also set it, respecting
:envvar:`PYTHONUSERBASE`.

.. versionadded:: 3.2



+-*/+-*/+-*/addsitedir f 
addsitedir(sitedir, known_paths=None)

Add a directory to sys.path and process its :file:`.pth` files.  Typically
used in :mod:`sitecustomize` or :mod:`usercustomize` (see above).



+-*/+-*/+-*/PREFIXES d 
PREFIXES

A list of prefixes for site-packages directories.



+-*/+-*/+-*/USER_BASE d 
USER_BASE

Path to the base directory for the user site-packages.  Can be ``None`` if
:func:`getuserbase` hasn't been called yet.  Default value is
:file:`~/.local` for UNIX and Mac OS X non-framework builds,
:file:`~/Library/Python/{X.Y}` for Mac framework builds, and
:file:`{%APPDATA%}\\Python` for Windows.  This value is used by Distutils to
compute the installation directories for scripts, data files, Python modules,
etc. for the :ref:`user installation scheme <inst-alt-install-user>`.  See
also :envvar:`PYTHONUSERBASE`.



+-*/+-*/+-*/USER_SITE d 
USER_SITE

Path to the user site-packages for the running Python.  Can be ``None`` if
:func:`getusersitepackages` hasn't been called yet.  Default value is
:file:`~/.local/lib/python{X.Y}/site-packages` for UNIX and non-framework Mac
OS X builds, :file:`~/Library/Python/{X.Y}/lib/python/site-packages` for Mac
framework builds, and :file:`{%APPDATA%}\\Python\\Python{XY}\\site-packages`
on Windows.  This directory is a site directory, which means that
:file:`.pth` files in it will be processed.



+-*/+-*/+-*/ENABLE_USER_SITE d 
ENABLE_USER_SITE

Flag showing the status of the user site-packages directory.  ``True`` means
that it is enabled and was added to ``sys.path``.  ``False`` means that it
was disabled by user request (with :option:`-s` or
:envvar:`PYTHONNOUSERSITE`).  ``None`` means it was disabled for security
reasons (mismatch between user or group id and effective id) or by an
administrator.



+-*/+-*/sysconfig p Python's configuration information
+-*/+-*/+-*/get_config_var f 
get_config_var(name)

Return the value of a single variable *name*. Equivalent to
``get_config_vars().get(name)``.

If *name* is not found, return ``None``.


+-*/+-*/+-*/get_makefile_filename f 
get_makefile_filename()

Return the path of :file:`Makefile`.


+-*/+-*/+-*/is_python_build f 
is_python_build()

Return ``True`` if the current Python installation was built from source.



+-*/+-*/+-*/get_paths f 
get_paths([scheme, [vars, [expand]]])

Return a dictionary containing all installation paths corresponding to an
installation scheme. See :func:`get_path` for more information.

If *scheme* is not provided, will use the default scheme for the current
platform.

If *vars* is provided, it must be a dictionary of variables that will
update the dictionary used to expand the paths.

If *expand* is set to False, the paths will not be expanded.

If *scheme* is not an existing scheme, :func:`get_paths` will raise a
:exc:`KeyError`.



+-*/+-*/+-*/get_python_version f 
get_python_version()

Return the ``MAJOR.MINOR`` Python version number as a string.  Similar to
``sys.version[:3]``.



+-*/+-*/+-*/get_scheme_names f 
get_scheme_names()

Return a tuple containing all schemes currently supported in
:mod:`sysconfig`.



+-*/+-*/+-*/get_path f 
get_path(name, [scheme, [vars, [expand]]])

Return an installation path corresponding to the path *name*, from the
install scheme named *scheme*.

*name* has to be a value from the list returned by :func:`get_path_names`.

:mod:`sysconfig` stores installation paths corresponding to each path name,
for each platform, with variables to be expanded.  For instance the *stdlib*
path for the *nt* scheme is: ``{base}/Lib``.

:func:`get_path` will use the variables returned by :func:`get_config_vars`
to expand the path.  All variables have default values for each platform so
one may call this function and get the default value.

If *scheme* is provided, it must be a value from the list returned by
:func:`get_path_names`.  Otherwise, the default scheme for the current
platform is used.

If *vars* is provided, it must be a dictionary of variables that will update
the dictionary return by :func:`get_config_vars`.

If *expand* is set to ``False``, the path will not be expanded using the
variables.

If *name* is not found, return ``None``.



+-*/+-*/+-*/get_config_vars f 
get_config_vars(\*args)

With no arguments, return a dictionary of all configuration variables
relevant for the current platform.

With arguments, return a list of values that result from looking up each
argument in the configuration variable dictionary.

For each argument, if the value is not found, return ``None``.



+-*/+-*/+-*/parse_config_h f 
parse_config_h(fp[, vars])

Parse a :file:`config.h`\-style file.

*fp* is a file-like object pointing to the :file:`config.h`\-like file.

A dictionary containing name/value pairs is returned.  If an optional
dictionary is passed in as the second argument, it is used instead of a new
dictionary, and updated with the values read in the file.



+-*/+-*/+-*/get_platform f 
get_platform()

Return a string that identifies the current platform.

This is used mainly to distinguish platform-specific build directories and
platform-specific built distributions.  Typically includes the OS name and
version and the architecture (as supplied by :func:`os.uname`), although the
exact information included depends on the OS; e.g. for IRIX the architecture
isn't particularly important (IRIX only runs on SGI hardware), but for Linux
the kernel version isn't particularly important.

Examples of returned values:

- linux-i586
- linux-alpha (?)
- solaris-2.6-sun4u
- irix-5.3
- irix64-6.2

Windows will return one of:

- win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)
- win-ia64 (64bit Windows on Itanium)
- win32 (all others - specifically, sys.platform is returned)

Mac OS X can return:

- macosx-10.6-ppc
- macosx-10.4-ppc64
- macosx-10.3-i386
- macosx-10.4-fat

For other non-POSIX platforms, currently just returns :data:`sys.platform`.



+-*/+-*/+-*/get_config_h_filename f 
get_config_h_filename()

Return the path of :file:`pyconfig.h`.


+-*/+-*/+-*/get_path_names f 
get_path_names()

Return a tuple containing all path names currently supported in
:mod:`sysconfig`.



+-*/custominterp _ Custom Python Interpreters
+-*/+-*/code p Facilities to implement read-eval-print loops.
+-*/+-*/+-*/interact f 
interact(banner=None, readfunc=None, local=None)

Convenience function to run a read-eval-print loop.  This creates a new instance
of :class:`InteractiveConsole` and sets *readfunc* to be used as the
:meth:`raw_input` method, if provided.  If *local* is provided, it is passed to
the :class:`InteractiveConsole` constructor for use as the default namespace for
the interpreter loop.  The :meth:`interact` method of the instance is then run
with *banner* passed as the banner to use, if provided.  The console object is
discarded after use.



+-*/+-*/+-*/compile_command f 
compile_command(source, filename="<input>", symbol="single")

This function is useful for programs that want to emulate Python's interpreter
main loop (a.k.a. the read-eval-print loop).  The tricky part is to determine
when the user has entered an incomplete command that can be completed by
entering more text (as opposed to a complete command or a syntax error).  This
function *almost* always makes the same decision as the real interpreter main
loop.

*source* is the source string; *filename* is the optional filename from which
source was read, defaulting to ``'<input>'``; and *symbol* is the optional
grammar start symbol, which should be either ``'single'`` (the default) or
``'eval'``.

Returns a code object (the same as ``compile(source, filename, symbol)``) if the
command is complete and valid; ``None`` if the command is incomplete; raises
:exc:`SyntaxError` if the command is complete and contains a syntax error, or
raises :exc:`OverflowError` or :exc:`ValueError` if the command contains an
invalid literal.



+-*/+-*/+-*/InteractiveInterpreter c 
InteractiveInterpreter(locals=None)

This class deals with parsing and interpreter state (the user's namespace); it
does not deal with input buffering or prompting or input file naming (the
filename is always passed in explicitly). The optional *locals* argument
specifies the dictionary in which code will be executed; it defaults to a newly
created dictionary with key ``'__name__'`` set to ``'__console__'`` and key
``'__doc__'`` set to ``None``.



+-*/+-*/+-*/+-*/write m 
write(data)

Write a string to the standard error stream (``sys.stderr``). Derived classes
should override this to provide the appropriate output handling as needed.



+-*/+-*/+-*/+-*/runsource m 
runsource(source, filename="<input>", symbol="single")

Compile and run some source in the interpreter. Arguments are the same as for
:func:`compile_command`; the default for *filename* is ``'<input>'``, and for
*symbol* is ``'single'``.  One several things can happen:

* The input is incorrect; :func:`compile_command` raised an exception
  (:exc:`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be
  printed by calling the :meth:`showsyntaxerror` method.  :meth:`runsource`
  returns ``False``.

* The input is incomplete, and more input is required; :func:`compile_command`
  returned ``None``. :meth:`runsource` returns ``True``.

* The input is complete; :func:`compile_command` returned a code object.  The
  code is executed by calling the :meth:`runcode` (which also handles run-time
  exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns ``False``.

The return value can be used to decide whether to use ``sys.ps1`` or ``sys.ps2``
to prompt the next line.



+-*/+-*/+-*/+-*/runcode m 
runcode(code)

Execute a code object. When an exception occurs, :meth:`showtraceback` is called
to display a traceback.  All exceptions are caught except :exc:`SystemExit`,
which is allowed to propagate.

A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in
this code, and may not always be caught.  The caller should be prepared to deal
with it.



+-*/+-*/+-*/+-*/showtraceback m 
showtraceback()

Display the exception that just occurred.  We remove the first stack item
because it is within the interpreter object implementation. The output is
written by the :meth:`write` method.



+-*/+-*/+-*/+-*/showsyntaxerror m 
showsyntaxerror(filename=None)

Display the syntax error that just occurred.  This does not display a stack
trace because there isn't one for syntax errors. If *filename* is given, it is
stuffed into the exception instead of the default filename provided by Python's
parser, because it always uses ``'<string>'`` when reading from a string. The
output is written by the :meth:`write` method.



+-*/+-*/+-*/InteractiveConsole c 
InteractiveConsole(locals=None, filename="<console>")

Closely emulate the behavior of the interactive Python interpreter. This class
builds on :class:`InteractiveInterpreter` and adds prompting using the familiar
``sys.ps1`` and ``sys.ps2``, and input buffering.



+-*/+-*/+-*/+-*/push m 
push(line)

Push a line of source text to the interpreter. The line should not have a
trailing newline; it may have internal newlines.  The line is appended to a
buffer and the interpreter's :meth:`runsource` method is called with the
concatenated contents of the buffer as source.  If this indicates that the
command was executed or invalid, the buffer is reset; otherwise, the command is
incomplete, and the buffer is left as it was after the line was appended.  The
return value is ``True`` if more input is required, ``False`` if the line was
dealt with in some way (this is the same as :meth:`runsource`).



+-*/+-*/+-*/+-*/interact m 
interact(banner=None)

Closely emulate the interactive Python console. The optional banner argument
specify the banner to print before the first interaction; by default it prints a
banner similar to the one printed by the standard Python interpreter, followed
by the class name of the console object in parentheses (so as not to confuse
this with the real interpreter -- since it's so close!).



+-*/+-*/+-*/+-*/resetbuffer m 
resetbuffer()

Remove any unhandled source text from the input buffer.



+-*/+-*/+-*/+-*/raw_input m 
raw_input(prompt="")

Write a prompt and read a line.  The returned line does not include the trailing
newline.  When the user enters the EOF key sequence, :exc:`EOFError` is raised.
The base implementation reads from ``sys.stdin``; a subclass may replace this
with a different implementation.



+-*/+-*/codeop p Compile (possibly incomplete) Python code.
+-*/+-*/+-*/compile_command f 
compile_command(source, filename="<input>", symbol="single")

Tries to compile *source*, which should be a string of Python code and return a
code object if *source* is valid Python code. In that case, the filename
attribute of the code object will be *filename*, which defaults to
``'<input>'``. Returns ``None`` if *source* is *not* valid Python code, but is a
prefix of valid Python code.

If there is a problem with *source*, an exception will be raised.
:exc:`SyntaxError` is raised if there is invalid Python syntax, and
:exc:`OverflowError` or :exc:`ValueError` if there is an invalid literal.

The *symbol* argument determines whether *source* is compiled as a statement
(``'single'``, the default) or as an :term:`expression` (``'eval'``).  Any
other value will cause :exc:`ValueError` to  be raised.

.. note::

   It is possible (but not likely) that the parser stops parsing with a
   successful outcome before reaching the end of the source; in this case,
   trailing symbols may be ignored instead of causing an error.  For example,
   a backslash followed by two newlines may be followed by arbitrary garbage.
   This will be fixed once the API for the parser is better.



+-*/+-*/+-*/Compile c 
Compile()

Instances of this class have :meth:`__call__` methods identical in signature to
the built-in function :func:`compile`, but with the difference that if the
instance compiles program text containing a :mod:`__future__` statement, the
instance 'remembers' and compiles all subsequent program texts with the
statement in force.



+-*/+-*/+-*/CommandCompiler c 
CommandCompiler()

Instances of this class have :meth:`__call__` methods identical in signature to
:func:`compile_command`; the difference is that if the instance compiles program
text containing a ``__future__`` statement, the instance 'remembers' and
compiles all subsequent program texts with the statement in force.


+-*/modules _ Importing Modules
+-*/+-*/imp p Access the implementation of the import statement.
+-*/+-*/+-*/get_magic f 
get_magic()

.. index:: pair: file; byte-code

Return the magic string value used to recognize byte-compiled code files
(:file:`.pyc` files).  (This value may be different for each Python version.)



+-*/+-*/+-*/source_from_cache f 
source_from_cache(path)

Given the *path* to a :pep:`3147` file name, return the associated source code
file path.  For example, if *path* is
``/foo/bar/__pycache__/baz.cpython-32.pyc`` the returned path would be
``/foo/bar/baz.py``.  *path* need not exist, however if it does not conform
to :pep:`3147` format, a ``ValueError`` is raised.



+-*/+-*/+-*/lock_held f 
lock_held()

Return ``True`` if the import lock is currently held, else ``False``. On
platforms without threads, always return ``False``.

On platforms with threads, a thread executing an import holds an internal lock
until the import is complete. This lock blocks other threads from doing an
import until the original import completes, which in turn prevents other threads
from seeing incomplete module objects constructed by the original thread while
in the process of completing its import (and the imports, if any, triggered by
that).



+-*/+-*/+-*/acquire_lock f 
acquire_lock()

Acquire the interpreter's import lock for the current thread.  This lock should
be used by import hooks to ensure thread-safety when importing modules.

Once a thread has acquired the import lock, the same thread may acquire it
again without blocking; the thread must release it once for each time it has
acquired it.

On platforms without threads, this function does nothing.



+-*/+-*/+-*/find_module f 
find_module(name[, path])

Try to find the module *name*.  If *path* is omitted or ``None``, the list of
directory names given by ``sys.path`` is searched, but first a few special
places are searched: the function tries to find a built-in module with the
given name (:const:`C_BUILTIN`), then a frozen module (:const:`PY_FROZEN`),
and on some systems some other places are looked in as well (on Windows, it
looks in the registry which may point to a specific file).

Otherwise, *path* must be a list of directory names; each directory is
searched for files with any of the suffixes returned by :func:`get_suffixes`
above.  Invalid names in the list are silently ignored (but all list items
must be strings).

If search is successful, the return value is a 3-element tuple ``(file,
pathname, description)``:

*file* is an open :term:`file object` positioned at the beginning, *pathname*
is the pathname of the file found, and *description* is a 3-element tuple as
contained in the list returned by :func:`get_suffixes` describing the kind of
module found.

If the module does not live in a file, the returned *file* is ``None``,
*pathname* is the empty string, and the *description* tuple contains empty
strings for its suffix and mode; the module type is indicated as given in
parentheses above.  If the search is unsuccessful, :exc:`ImportError` is
raised.  Other exceptions indicate problems with the arguments or
environment.

If the module is a package, *file* is ``None``, *pathname* is the package
path and the last item in the *description* tuple is :const:`PKG_DIRECTORY`.

This function does not handle hierarchical module names (names containing
dots).  In order to find *P*.*M*, that is, submodule *M* of package *P*, use
:func:`find_module` and :func:`load_module` to find and load package *P*, and
then use :func:`find_module` with the *path* argument set to ``P.__path__``.
When *P* itself has a dotted name, apply this recipe recursively.



+-*/+-*/+-*/get_suffixes f 
get_suffixes()

Return a list of 3-element tuples, each describing a particular type of
module. Each triple has the form ``(suffix, mode, type)``, where *suffix* is
a string to be appended to the module name to form the filename to search
for, *mode* is the mode string to pass to the built-in :func:`open` function
to open the file (this can be ``'r'`` for text files or ``'rb'`` for binary
files), and *type* is the file type, which has one of the values
:const:`PY_SOURCE`, :const:`PY_COMPILED`, or :const:`C_EXTENSION`, described
below.



+-*/+-*/+-*/cache_from_source f 
cache_from_source(path, debug_override=None)

Return the :pep:`3147` path to the byte-compiled file associated with the
source *path*.  For example, if *path* is ``/foo/bar/baz.py`` the return
value would be ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2.
The ``cpython-32`` string comes from the current magic tag (see
:func:`get_tag`).  The returned path will end in ``.pyc`` when
``__debug__`` is True or ``.pyo`` for an optimized Python
(i.e. ``__debug__`` is False).  By passing in True or False for
*debug_override* you can override the system's value for ``__debug__`` for
extension selection.

*path* need not exist.



+-*/+-*/+-*/new_module f 
new_module(name)

Return a new empty module object called *name*.  This object is *not* inserted
in ``sys.modules``.



+-*/+-*/+-*/load_module f 
load_module(name, file, pathname, description)

Load a module that was previously found by :func:`find_module` (or by an
otherwise conducted search yielding compatible results).  This function does
more than importing the module: if the module was already imported, it will
reload the module!  The *name* argument indicates the full
module name (including the package name, if this is a submodule of a
package).  The *file* argument is an open file, and *pathname* is the
corresponding file name; these can be ``None`` and ``''``, respectively, when
the module is a package or not being loaded from a file.  The *description*
argument is a tuple, as would be returned by :func:`get_suffixes`, describing
what kind of module must be loaded.

If the load is successful, the return value is the module object; otherwise,
an exception (usually :exc:`ImportError`) is raised.

**Important:** the caller is responsible for closing the *file* argument, if
it was not ``None``, even when an exception is raised.  This is best done
using a :keyword:`try` ... :keyword:`finally` statement.



+-*/+-*/+-*/reload f 
reload(module)

Reload a previously imported *module*.  The argument must be a module object, so
it must have been successfully imported before.  This is useful if you have
edited the module source file using an external editor and want to try out the
new version without leaving the Python interpreter.  The return value is the
module object (the same as the *module* argument).

When ``reload(module)`` is executed:

* Python modules' code is recompiled and the module-level code reexecuted,
  defining a new set of objects which are bound to names in the module's
  dictionary.  The ``init`` function of extension modules is not called a second
  time.

* As with all other objects in Python the old objects are only reclaimed after
  their reference counts drop to zero.

* The names in the module namespace are updated to point to any new or changed
  objects.

* Other references to the old objects (such as names external to the module) are
  not rebound to refer to the new objects and must be updated in each namespace
  where they occur if that is desired.

There are a number of other caveats:

If a module is syntactically correct but its initialization fails, the first
:keyword:`import` statement for it does not bind its name locally, but does
store a (partially initialized) module object in ``sys.modules``.  To reload the
module you must first :keyword:`import` it again (this will bind the name to the
partially initialized module object) before you can :func:`reload` it.

When a module is reloaded, its dictionary (containing the module's global
variables) is retained.  Redefinitions of names will override the old
definitions, so this is generally not a problem.  If the new version of a module
does not define a name that was defined by the old version, the old definition
remains.  This feature can be used to the module's advantage if it maintains a
global table or cache of objects --- with a :keyword:`try` statement it can test
for the table's presence and skip its initialization if desired::

   try:
       cache
   except NameError:
       cache = {}

It is legal though generally not very useful to reload built-in or dynamically
loaded modules, except for :mod:`sys`, :mod:`__main__` and :mod:`__builtin__`.
In many cases, however, extension modules are not designed to be initialized
more than once, and may fail in arbitrary ways when reloaded.

If a module imports objects from another module using :keyword:`from` ...
:keyword:`import` ..., calling :func:`reload` for the other module does not
redefine the objects imported from it --- one way around this is to re-execute
the :keyword:`from` statement, another is to use :keyword:`import` and qualified
names (*module*.*name*) instead.

If a module instantiates instances of a class, reloading the module that defines
the class does not affect the method definitions of the instances --- they
continue to use the old class definition.  The same is true for derived classes.



+-*/+-*/+-*/get_tag f 
get_tag()

Return the :pep:`3147` magic tag string matching this version of Python's
magic number, as returned by :func:`get_magic`.



+-*/+-*/+-*/release_lock f 
release_lock()

Release the interpreter's import lock. On platforms without threads, this
function does nothing.



+-*/+-*/+-*/PY_COMPILED d python已编译对象(.pyc)
PY_COMPILED
+-*/+-*/+-*/PKG_DIRECTORY d python包目录
PKG_DIRECTORY
+-*/+-*/+-*/PY_SOURCE d python源文件
PY_SOURCE
+-*/+-*/+-*/PY_FROZEN d 冻结的模块
PY_FROZEN
+-*/+-*/+-*/C_EXTENSION d 动态可加载的C扩展模块
C_EXTENSION
+-*/+-*/+-*/C_BUILTIN d 内置模块
C_BUILTIN
+-*/+-*/+-*/NullImporter c 
NullImporter(path_string)

The :class:`NullImporter` type is a :pep:`302` import hook that handles
non-directory path strings by failing to find any modules.  Calling this type
with an existing directory or empty string raises :exc:`ImportError`.
Otherwise, a :class:`NullImporter` instance is returned.

Python adds instances of this type to ``sys.path_importer_cache`` for any path
entries that are not directories and are not handled by any other path hooks on
``sys.path_hooks``.  Instances have only one method:



+-*/+-*/+-*/+-*/NullImporter.find_module m 
NullImporter.find_module(fullname [, path])

This method always returns ``None``, indicating that the requested module could
not be found.




+-*/+-*/importlib p An implementation of the import machinery.
+-*/+-*/+-*/__import__ f 
__import__(name, globals={}, locals={}, fromlist=list(), level=0)

An implementation of the built-in :func:`__import__` function.


+-*/+-*/+-*/import_module f 
import_module(name, package=None)

Import a module. The *name* argument specifies what module to
import in absolute or relative terms
(e.g. either ``pkg.mod`` or ``..mod``). If the name is
specified in relative terms, then the *package* argument must be set to
the name of the package which is to act as the anchor for resolving the
package name (e.g. ``import_module('..mod', 'pkg.subpkg')`` will import
``pkg.mod``).

The :func:`import_module` function acts as a simplifying wrapper around
:func:`importlib.__import__`. This means all semantics of the function are
derived from :func:`importlib.__import__`, including requiring the package
from which an import is occurring to have been previously imported
(i.e., *package* must already be imported). The most important difference
is that :func:`import_module` returns the most nested package or module
that was imported (e.g. ``pkg.mod``), while :func:`__import__` returns the
top-level package or module (e.g. ``pkg``).



+-*/+-*/+-*/abc p Abstract base classes related to import
+-*/+-*/+-*/+-*/PyPycLoader c 
PyPycLoader

An abstract base class inheriting from :class:`PyLoader`.
This ABC is meant to help in creating loaders that support both Python
source and bytecode.

.. deprecated:: 3.2
    This class has been deprecated in favor of :class:`SourceLoader` and to
    properly support :pep:`3147`. If compatibility is required with
    Python 3.1, implement both :class:`SourceLoader` and :class:`PyLoader`;
    instructions on how to do so are included in the documentation for
    :class:`PyLoader`. Do note that this solution will not support
    sourceless/bytecode-only loading; only source *and* bytecode loading.


+-*/+-*/+-*/+-*/+-*/bytecode_path m 
bytecode_path(fullname)

An abstract method which returns the path to the bytecode for the
specified module, if it exists. It returns ``None``
if no bytecode exists (yet).
Raises :exc:`ImportError` if the loader knows it cannot handle the
module.


+-*/+-*/+-*/+-*/+-*/get_filename m 
get_filename(fullname)

A concrete implementation of
:meth:`ExecutionLoader.get_filename` that relies on
:meth:`PyLoader.source_path` and :meth:`bytecode_path`.
If :meth:`source_path` returns a path, then that value is returned.
Else if :meth:`bytecode_path` returns a path, that path will be
returned. If a path is not available from both methods,
:exc:`ImportError` is raised.


+-*/+-*/+-*/+-*/+-*/write_bytecode m 
write_bytecode(fullname, bytecode)

An abstract method which has the loader write *bytecode* for future
use. If the bytecode is written, return ``True``. Return
``False`` if the bytecode could not be written. This method
should not be called if :data:`sys.dont_write_bytecode` is true.
The *bytecode* argument should be a bytes string or bytes array.




+-*/+-*/+-*/+-*/+-*/source_mtime m 
source_mtime(fullname)

An abstract method which returns the modification time for the source
code of the specified module. The modification time should be an
integer. If there is no source code, return ``None``. If the
module cannot be found then :exc:`ImportError` is raised.


+-*/+-*/+-*/+-*/InspectLoader c 
InspectLoader

An abstract base class for a :term:`loader` which implements the optional
:pep:`302` protocol for loaders that inspect modules.


+-*/+-*/+-*/+-*/+-*/get_code m 
get_code(fullname)

An abstract method to return the :class:`code` object for a module.
``None`` is returned if the module does not have a code object
(e.g. built-in module).  :exc:`ImportError` is raised if loader cannot
find the requested module.


+-*/+-*/+-*/+-*/+-*/is_package m 
is_package(fullname)

An abstract method to return a true value if the module is a package, a
false value otherwise. :exc:`ImportError` is raised if the
:term:`loader` cannot find the module.




+-*/+-*/+-*/+-*/+-*/get_source m 
get_source(fullname)

An abstract method to return the source of a module. It is returned as
a text string with universal newlines. Returns ``None`` if no
source is available (e.g. a built-in module). Raises :exc:`ImportError`
if the loader cannot find the module specified.


+-*/+-*/+-*/+-*/SourceLoader c 
SourceLoader

An abstract base class for implementing source (and optionally bytecode)
file loading. The class inherits from both :class:`ResourceLoader` and
:class:`ExecutionLoader`, requiring the implementation of:

* :meth:`ResourceLoader.get_data`
* :meth:`ExecutionLoader.get_filename`
      Should only return the path to the source file; sourceless
      loading is not supported.

The abstract methods defined by this class are to add optional bytecode
file support. Not implementing these optional methods causes the loader to
only work with source code. Implementing the methods allows the loader to
work with source *and* bytecode files; it does not allow for *sourceless*
loading where only bytecode is provided.  Bytecode files are an
optimization to speed up loading by removing the parsing step of Python's
compiler, and so no bytecode-specific API is exposed.


+-*/+-*/+-*/+-*/+-*/load_module m 
load_module(self, fullname)

Concrete implementation of :meth:`Loader.load_module`.


+-*/+-*/+-*/+-*/+-*/get_source m 
get_source(self, fullname)

Concrete implementation of :meth:`InspectLoader.get_source`.


+-*/+-*/+-*/+-*/+-*/path_mtime m 
path_mtime(self, path)

Optional abstract method which returns the modification time for the
specified path.


+-*/+-*/+-*/+-*/+-*/is_package m 
is_package(self, fullname)

Concrete implementation of :meth:`InspectLoader.is_package`. A module
is determined to be a package if its file path is a file named
``__init__`` when the file extension is removed.




+-*/+-*/+-*/+-*/+-*/set_data m 
set_data(self, path, data)

Optional abstract method which writes the specified bytes to a file
path. Any intermediate directories which do not exist are to be created
automatically.

When writing to the path fails because the path is read-only
(:attr:`errno.EACCES`), do not propagate the exception.


+-*/+-*/+-*/+-*/+-*/get_code m 
get_code(self, fullname)

Concrete implementation of :meth:`InspectLoader.get_code`.


+-*/+-*/+-*/+-*/ResourceLoader c 
ResourceLoader

An abstract base class for a :term:`loader` which implements the optional
:pep:`302` protocol for loading arbitrary resources from the storage
back-end.


+-*/+-*/+-*/+-*/+-*/get_data m 
get_data(path)

An abstract method to return the bytes for the data located at *path*.
Loaders that have a file-like storage back-end
that allows storing arbitrary data
can implement this abstract method to give direct access
to the data stored. :exc:`IOError` is to be raised if the *path* cannot
be found. The *path* is expected to be constructed using a module's
:attr:`__file__` attribute or an item from a package's :attr:`__path__`.




+-*/+-*/+-*/+-*/Loader c 
Loader

An abstract base class for a :term:`loader`.
See :pep:`302` for the exact definition for a loader.


+-*/+-*/+-*/+-*/+-*/load_module m 
load_module(fullname)

An abstract method for loading a module. If the module cannot be
loaded, :exc:`ImportError` is raised, otherwise the loaded module is
returned.

If the requested module already exists in :data:`sys.modules`, that
module should be used and reloaded.
Otherwise the loader should create a new module and insert it into
:data:`sys.modules` before any loading begins, to prevent recursion
from the import. If the loader inserted a module and the load fails, it
must be removed by the loader from :data:`sys.modules`; modules already
in :data:`sys.modules` before the loader began execution should be left
alone. The :func:`importlib.util.module_for_loader` decorator handles
all of these details.

The loader should set several attributes on the module.
(Note that some of these attributes can change when a module is
reloaded.)

- :attr:`__name__`
    The name of the module.

- :attr:`__file__`
    The path to where the module data is stored (not set for built-in
    modules).

- :attr:`__path__`
    A list of strings specifying the search path within a
    package. This attribute is not set on modules.

- :attr:`__package__`
    The parent package for the module/package. If the module is
    top-level then it has a value of the empty string. The
    :func:`importlib.util.set_package` decorator can handle the details
    for :attr:`__package__`.

- :attr:`__loader__`
    The loader used to load the module.
    (This is not set by the built-in import machinery,
    but it should be set whenever a :term:`loader` is used.)




+-*/+-*/+-*/+-*/PyLoader c 
PyLoader

An abstract base class inheriting from
:class:`ExecutionLoader` and
:class:`ResourceLoader` designed to ease the loading of
Python source modules (bytecode is not handled; see
:class:`SourceLoader` for a source/bytecode ABC). A subclass
implementing this ABC will only need to worry about exposing how the source
code is stored; all other details for loading Python source code will be
handled by the concrete implementations of key methods.

.. deprecated:: 3.2
    This class has been deprecated in favor of :class:`SourceLoader` and is
    slated for removal in Python 3.4. See below for how to create a
    subclass that is compatible with Python 3.1 onwards.

If compatibility with Python 3.1 is required, then use the following idiom
to implement a subclass that will work with Python 3.1 onwards (make sure
to implement :meth:`ExecutionLoader.get_filename`)::

    try:
        from importlib.abc import SourceLoader
    except ImportError:
        from importlib.abc import PyLoader as SourceLoader


    class CustomLoader(SourceLoader):
        def get_filename(self, fullname):
            """Return the path to the source file."""
            # Implement ...

        def source_path(self, fullname):
            """Implement source_path in terms of get_filename."""
            try:
                return self.get_filename(fullname)
            except ImportError:
                return None

        def is_package(self, fullname):
            """Implement is_package by looking for an __init__ file
            name as returned by get_filename."""
            filename = os.path.basename(self.get_filename(fullname))
            return os.path.splitext(filename)[0] == '__init__'



+-*/+-*/+-*/+-*/+-*/get_filename m 
get_filename(fullname)

A concrete implementation of
:meth:`importlib.abc.ExecutionLoader.get_filename` that
relies on :meth:`source_path`. If :meth:`source_path` returns
``None``, then :exc:`ImportError` is raised.


+-*/+-*/+-*/+-*/+-*/load_module m 
load_module(fullname)

A concrete implementation of :meth:`importlib.abc.Loader.load_module`
that loads Python source code. All needed information comes from the
abstract methods required by this ABC. The only pertinent assumption
made by this method is that when loading a package
:attr:`__path__` is set to ``[os.path.dirname(__file__)]``.


+-*/+-*/+-*/+-*/+-*/source_path m 
source_path(fullname)

An abstract method that returns the path to the source code for a
module. Should return ``None`` if there is no source code.
Raises :exc:`ImportError` if the loader knows it cannot handle the
module.


+-*/+-*/+-*/+-*/+-*/get_code m 
get_code(fullname)

A concrete implementation of
:meth:`importlib.abc.InspectLoader.get_code` that creates code objects
from Python source code, by requesting the source code (using
:meth:`source_path` and :meth:`get_data`) and compiling it with the
built-in :func:`compile` function.


+-*/+-*/+-*/+-*/+-*/get_source m 
get_source(fullname)

A concrete implementation of
:meth:`importlib.abc.InspectLoader.get_source`. Uses
:meth:`importlib.abc.ResourceLoader.get_data` and :meth:`source_path`
to get the source code.  It tries to guess the source encoding using
:func:`tokenize.detect_encoding`.




+-*/+-*/+-*/+-*/ExecutionLoader c 
ExecutionLoader

An abstract base class which inherits from :class:`InspectLoader` that,
when implemented, helps a module to be executed as a script. The ABC
represents an optional :pep:`302` protocol.


+-*/+-*/+-*/+-*/+-*/get_filename m 
get_filename(fullname)

An abstract method that is to return the value of :attr:`__file__` for
the specified module. If no path is available, :exc:`ImportError` is
raised.

If source code is available, then the method should return the path to
the source file, regardless of whether a bytecode was used to load the
module.




+-*/+-*/+-*/+-*/Finder c 
Finder

An abstract base class representing a :term:`finder`.
See :pep:`302` for the exact definition for a finder.


+-*/+-*/+-*/+-*/+-*/find_module m 
find_module(fullname, path=None)

An abstract method for finding a :term:`loader` for the specified
module. If the :term:`finder` is found on :data:`sys.meta_path` and the
module to be searched for is a subpackage or module then *path* will
be the value of :attr:`__path__` from the parent package. If a loader
cannot be found, ``None`` is returned.




+-*/+-*/+-*/machinery p Importers and path hooks
+-*/+-*/+-*/+-*/FrozenImporter c 
FrozenImporter

An :term:`importer` for frozen modules. This class implements the
:class:`importlib.abc.Finder` and :class:`importlib.abc.InspectLoader`
ABCs.

Only class methods are defined by this class to alleviate the need for
instantiation.



+-*/+-*/+-*/+-*/PathFinder c 
PathFinder

:term:`Finder` for :data:`sys.path`. This class implements the
:class:`importlib.abc.Finder` ABC.

This class does not perfectly mirror the semantics of :keyword:`import` in
terms of :data:`sys.path`. No implicit path hooks are assumed for
simplification of the class and its semantics.

Only class methods are defined by this class to alleviate the need for
instantiation.


+-*/+-*/+-*/+-*/+-*/find_module m 
find_module(fullname, path=None)

Class method that attempts to find a :term:`loader` for the module
specified by *fullname* on :data:`sys.path` or, if defined, on
*path*. For each path entry that is searched,
:data:`sys.path_importer_cache` is checked. If an non-false object is
found then it is used as the :term:`finder` to look for the module
being searched for. If no entry is found in
:data:`sys.path_importer_cache`, then :data:`sys.path_hooks` is
searched for a finder for the path entry and, if found, is stored in
:data:`sys.path_importer_cache` along with being queried about the
module. If no finder is ever found then ``None`` is returned.




+-*/+-*/+-*/+-*/BuiltinImporter c 
BuiltinImporter

An :term:`importer` for built-in modules. All known built-in modules are
listed in :data:`sys.builtin_module_names`. This class implements the
:class:`importlib.abc.Finder` and :class:`importlib.abc.InspectLoader`
ABCs.

Only class methods are defined by this class to alleviate the need for
instantiation.



+-*/+-*/+-*/util p Importers and path hooks
+-*/+-*/modulefinder p Find modules used by a script.
+-*/+-*/+-*/AddPackagePath f 
AddPackagePath(pkg_name, path)

Record that the package named *pkg_name* can be found in the specified *path*.



+-*/+-*/+-*/ReplacePackage f 
ReplacePackage(oldname, newname)

Allows specifying that the module named *oldname* is in fact the package named
*newname*.



+-*/+-*/+-*/ModuleFinder c 
ModuleFinder(path=None, debug=0, excludes=[], replace_paths=[])

This class provides :meth:`run_script` and :meth:`report` methods to determine
the set of modules imported by a script. *path* can be a list of directories to
search for modules; if not specified, ``sys.path`` is used.  *debug* sets the
debugging level; higher values make the class print debugging messages about
what it's doing. *excludes* is a list of module names to exclude from the
analysis. *replace_paths* is a list of ``(oldpath, newpath)`` tuples that will
be replaced in module paths.



+-*/+-*/+-*/+-*/modules d 
modules

A dictionary mapping module names to modules. See
:ref:`modulefinder-example`




+-*/+-*/+-*/+-*/report m 
report()

Print a report to standard output that lists the modules imported by the
script and their paths, as well as modules that are missing or seem to be
missing.


+-*/+-*/+-*/+-*/run_script m 
run_script(pathname)

Analyze the contents of the *pathname* file, which must contain Python
code.


+-*/+-*/pkgutil p Utilities for the import system.
+-*/+-*/+-*/iter_modules f 
iter_modules(path=None, prefix='')

Yields ``(module_loader, name, ispkg)`` for all submodules on *path*, or, if
path is ``None``, all top-level modules on ``sys.path``.

*path* should be either ``None`` or a list of paths to look for modules in.

*prefix* is a string to output on the front of every module name on output.



+-*/+-*/+-*/find_loader f 
find_loader(fullname)

Find a :pep:`302` "loader" object for *fullname*.

If *fullname* contains dots, path must be the containing package's
``__path__``.  Returns ``None`` if the module cannot be found or imported.
This function uses :func:`iter_importers`, and is thus subject to the same
limitations regarding platform-specific special import locations such as the
Windows registry.



+-*/+-*/+-*/get_importer f 
get_importer(path_item)

Retrieve a :pep:`302` importer for the given *path_item*.

The returned importer is cached in :data:`sys.path_importer_cache` if it was
newly created by a path hook.

If there is no importer, a wrapper around the basic import machinery is
returned.  This wrapper is never inserted into the importer cache (``None``
is inserted instead).

The cache (or part of it) can be cleared manually if a rescan of
:data:`sys.path_hooks` is necessary.



+-*/+-*/+-*/get_data f 
get_data(package, resource)

Get a resource from a package.

This is a wrapper for the :pep:`302` loader :func:`get_data` API.  The
*package* argument should be the name of a package, in standard module format
(``foo.bar``).  The *resource* argument should be in the form of a relative
filename, using ``/`` as the path separator.  The parent directory name
``..`` is not allowed, and nor is a rooted name (starting with a ``/``).

The function returns a binary string that is the contents of the specified
resource.

For packages located in the filesystem, which have already been imported,
this is the rough equivalent of::

   d = os.path.dirname(sys.modules[package].__file__)
   data = open(os.path.join(d, resource), 'rb').read()

If the package cannot be located or loaded, or it uses a :pep:`302` loader
which does not support :func:`get_data`, then ``None`` is returned.


+-*/+-*/+-*/iter_importers f 
iter_importers(fullname='')

Yield :pep:`302` importers for the given module name.

If fullname contains a '.', the importers will be for the package containing
fullname, otherwise they will be importers for :data:`sys.meta_path`,
:data:`sys.path`, and Python's "classic" import machinery, in that order.  If
the named module is in a package, that package is imported as a side effect
of invoking this function.

Non-:pep:`302` mechanisms (e.g. the Windows registry) used by the standard
import machinery to find files in alternative locations are partially
supported, but are searched *after* :data:`sys.path`.  Normally, these
locations are searched *before* :data:`sys.path`, preventing :data:`sys.path`
entries from shadowing them.

For this to cause a visible difference in behaviour, there must be a module
or package name that is accessible via both :data:`sys.path` and one of the
non-:pep:`302` file system mechanisms.  In this case, the emulation will find
the former version, while the builtin import mechanism will find the latter.

Items of the following types can be affected by this discrepancy:
``imp.C_EXTENSION``, ``imp.PY_SOURCE``, ``imp.PY_COMPILED``,
``imp.PKG_DIRECTORY``.



+-*/+-*/+-*/extend_path f 
extend_path(path, name)

Extend the search path for the modules which comprise a package.  Intended
use is to place the following code in a package's :file:`__init__.py`::

   from pkgutil import extend_path
   __path__ = extend_path(__path__, __name__)

This will add to the package's ``__path__`` all subdirectories of directories
on ``sys.path`` named after the package.  This is useful if one wants to
distribute different parts of a single logical package as multiple
directories.

It also looks for :file:`\*.pkg` files beginning where ``*`` matches the
*name* argument.  This feature is similar to :file:`\*.pth` files (see the
:mod:`site` module for more information), except that it doesn't special-case
lines starting with ``import``.  A :file:`\*.pkg` file is trusted at face
value: apart from checking for duplicates, all entries found in a
:file:`\*.pkg` file are added to the path, regardless of whether they exist
on the filesystem.  (This is a feature.)

If the input path is not a list (as is the case for frozen packages) it is
returned unchanged.  The input path is not modified; an extended copy is
returned.  Items are only appended to the copy at the end.

It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys.path`
that are not strings referring to existing directories are ignored. Unicode
items on :data:`sys.path` that cause errors when used as filenames may cause
this function to raise an exception (in line with :func:`os.path.isdir`
behavior).



+-*/+-*/+-*/get_loader f 
get_loader(module_or_name)

Get a :pep:`302` "loader" object for *module_or_name*.

If the module or package is accessible via the normal import mechanism, a
wrapper around the relevant part of that machinery is returned.  Returns
``None`` if the module cannot be found or imported.  If the named module is
not already imported, its containing package (if any) is imported, in order
to establish the package ``__path__``.

This function uses :func:`iter_importers`, and is thus subject to the same
limitations regarding platform-specific special import locations such as the
Windows registry.



+-*/+-*/+-*/walk_packages f 
walk_packages(path=None, prefix='', onerror=None)

Yields ``(module_loader, name, ispkg)`` for all modules recursively on
*path*, or, if path is ``None``, all accessible modules.

*path* should be either ``None`` or a list of paths to look for modules in.

*prefix* is a string to output on the front of every module name on output.

Note that this function must import all *packages* (*not* all modules!) on
the given *path*, in order to access the ``__path__`` attribute to find
submodules.

*onerror* is a function which gets called with one argument (the name of the
package which was being imported) if any exception occurs while trying to
import a package.  If no *onerror* function is supplied, :exc:`ImportError`\s
are caught and ignored, while all other exceptions are propagated,
terminating the search.

Examples::

   # list all modules python can access
   walk_packages()

   # list all submodules of ctypes
   walk_packages(ctypes.__path__, ctypes.__name__ + '.')



+-*/+-*/+-*/ImpLoader c 
ImpLoader(fullname, file, filename, etc)

:pep:`302` Loader that wraps Python's "classic" import algorithm.



+-*/+-*/+-*/ImpImporter c 
ImpImporter(dirname=None)

:pep:`302` Importer that wraps Python's "classic" import algorithm.

If *dirname* is a string, a :pep:`302` importer is created that searches that
directory.  If *dirname* is ``None``, a :pep:`302` importer is created that
searches the current :data:`sys.path`, plus any modules that are frozen or
built-in.

Note that :class:`ImpImporter` does not currently support being used by
placement on :data:`sys.meta_path`.



+-*/+-*/runpy p Locate and run Python modules without importing them first.
+-*/+-*/+-*/run_module f 
run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)

Execute the code of the specified module and return the resulting module
globals dictionary. The module's code is first located using the standard
import mechanism (refer to :pep:`302` for details) and then executed in a
fresh module namespace.

If the supplied module name refers to a package rather than a normal
module, then that package is imported and the ``__main__`` submodule within
that package is then executed and the resulting module globals dictionary
returned.

The optional dictionary argument *init_globals* may be used to pre-populate
the module's globals dictionary before the code is executed. The supplied
dictionary will not be modified. If any of the special global variables
below are defined in the supplied dictionary, those definitions are
overridden by :func:`run_module`.

The special global variables ``__name__``, ``__file__``, ``__cached__``,
``__loader__``
and ``__package__`` are set in the globals dictionary before the module
code is executed (Note that this is a minimal set of variables - other
variables may be set implicitly as an interpreter implementation detail).

``__name__`` is set to *run_name* if this optional argument is not
:const:`None`, to ``mod_name + '.__main__'`` if the named module is a
package and to the *mod_name* argument otherwise.

``__file__`` is set to the name provided by the module loader. If the
loader does not make filename information available, this variable is set
to :const:`None`.

``__cached__`` will be set to ``None``.

``__loader__`` is set to the :pep:`302` module loader used to retrieve the
code for the module (This loader may be a wrapper around the standard
import mechanism).

``__package__`` is set to *mod_name* if the named module is a package and
to ``mod_name.rpartition('.')[0]`` otherwise.

If the argument *alter_sys* is supplied and evaluates to :const:`True`,
then ``sys.argv[0]`` is updated with the value of ``__file__`` and
``sys.modules[__name__]`` is updated with a temporary module object for the
module being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]``
are restored to their original values before the function returns.

Note that this manipulation of :mod:`sys` is not thread-safe. Other threads
may see the partially initialised module, as well as the altered list of
arguments. It is recommended that the :mod:`sys` module be left alone when
invoking this function from threaded code.


.. versionchanged:: 3.1
   Added ability to execute packages by looking for a ``__main__`` submodule.

.. versionchanged:: 3.2
   Added ``__cached__`` global variable (see :PEP:`3147`).



+-*/+-*/+-*/run_path f 
run_path(file_path, init_globals=None, run_name=None)

Execute the code at the named filesystem location and return the resulting
module globals dictionary. As with a script name supplied to the CPython
command line, the supplied path may refer to a Python source file, a
compiled bytecode file or a valid sys.path entry containing a ``__main__``
module (e.g. a zipfile containing a top-level ``__main__.py`` file).

For a simple script, the specified code is simply executed in a fresh
module namespace. For a valid sys.path entry (typically a zipfile or
directory), the entry is first added to the beginning of ``sys.path``. The
function then looks for and executes a :mod:`__main__` module using the
updated path. Note that there is no special protection against invoking
an existing :mod:`__main__` entry located elsewhere on ``sys.path`` if
there is no such module at the specified location.

The optional dictionary argument *init_globals* may be used to pre-populate
the module's globals dictionary before the code is executed. The supplied
dictionary will not be modified. If any of the special global variables
below are defined in the supplied dictionary, those definitions are
overridden by :func:`run_path`.

The special global variables ``__name__``, ``__file__``, ``__loader__``
and ``__package__`` are set in the globals dictionary before the module
code is executed (Note that this is a minimal set of variables - other
variables may be set implicitly as an interpreter implementation detail).

``__name__`` is set to *run_name* if this optional argument is not
:const:`None` and to ``'<run_path>'`` otherwise.

``__file__`` is set to the name provided by the module loader. If the
loader does not make filename information available, this variable is set
to :const:`None`. For a simple script, this will be set to ``file_path``.

``__loader__`` is set to the :pep:`302` module loader used to retrieve the
code for the module (This loader may be a wrapper around the standard
import mechanism). For a simple script, this will be set to :const:`None`.

``__package__`` is set to ``__name__.rpartition('.')[0]``.

A number of alterations are also made to the :mod:`sys` module. Firstly,
``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated
with the value of ``file_path`` and ``sys.modules[__name__]`` is updated
with a temporary module object for the module being executed. All
modifications to items in :mod:`sys` are reverted before the function
returns.

Note that, unlike :func:`run_module`, the alterations made to :mod:`sys`
are not optional in this function as these adjustments are essential to
allowing the execution of sys.path entries. As the thread-safety
limitations still apply, use of this function in threaded code should be
either serialised with the import lock or delegated to a separate process.

.. versionadded:: 3.2


+-*/+-*/zipimport p support for importing Python modules from ZIP archives.
+-*/+-*/+-*/ZipImportError e 
ZipImportError

Exception raised by zipimporter objects. It's a subclass of :exc:`ImportError`,
so it can be caught as :exc:`ImportError`, too.



+-*/+-*/+-*/zipimporter c 
zipimporter(archivepath)

Create a new zipimporter instance. *archivepath* must be a path to a ZIP
file, or to a specific path within a ZIP file.  For example, an *archivepath*
of :file:`foo/bar.zip/lib` will look for modules in the :file:`lib` directory
inside the ZIP file :file:`foo/bar.zip` (provided that it exists).

:exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid ZIP
archive.


+-*/+-*/+-*/+-*/prefix d 
prefix

The subpath within the ZIP file where modules are searched.  This is the
empty string for zipimporter objects which point to the root of the ZIP
file.


+-*/+-*/+-*/+-*/archive d 
archive

The file name of the importer's associated ZIP file, without a possible
subpath.



+-*/+-*/+-*/+-*/get_source m 
get_source(fullname)

Return the source code for the specified module. Raise
:exc:`ZipImportError` if the module couldn't be found, return
:const:`None` if the archive does contain the module, but has no source
for it.



+-*/+-*/+-*/+-*/find_module m 
find_module(fullname[, path])

Search for a module specified by *fullname*. *fullname* must be the fully
qualified (dotted) module name. It returns the zipimporter instance itself
if the module was found, or :const:`None` if it wasn't. The optional
*path* argument is ignored---it's there for compatibility with the
importer protocol.



+-*/+-*/+-*/+-*/get_data m 
get_data(pathname)

Return the data associated with *pathname*. Raise :exc:`IOError` if the
file wasn't found.



+-*/+-*/+-*/+-*/load_module m 
load_module(fullname)

Load the module specified by *fullname*. *fullname* must be the fully
qualified (dotted) module name. It returns the imported module, or raises
:exc:`ZipImportError` if it wasn't found.



+-*/+-*/+-*/+-*/get_filename m 
get_filename(fullname)

Return the value ``__file__`` would be set to if the specified module
was imported. Raise :exc:`ZipImportError` if the module couldn't be
found.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/is_package m 
is_package(fullname)

Return True if the module specified by *fullname* is a package. Raise
:exc:`ZipImportError` if the module couldn't be found.



+-*/+-*/+-*/+-*/get_code m 
get_code(fullname)

Return the code object for the specified module. Raise
:exc:`ZipImportError` if the module couldn't be found.



+-*/language _ Python Language Services
+-*/+-*/ast p Abstract Syntax Tree classes and manipulation.
+-*/+-*/+-*/fix_missing_locations f 
fix_missing_locations(node)

When you compile a node tree with :func:`compile`, the compiler expects
:attr:`lineno` and :attr:`col_offset` attributes for every node that supports
them.  This is rather tedious to fill in for generated nodes, so this helper
adds these attributes recursively where not already set, by setting them to
the values of the parent node.  It works recursively starting at *node*.



+-*/+-*/+-*/iter_fields f 
iter_fields(node)

Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
that is present on *node*.



+-*/+-*/+-*/dump f 
dump(node, annotate_fields=True, include_attributes=False)

Return a formatted dump of the tree in *node*.  This is mainly useful for
debugging purposes.  The returned string will show the names and the values
for fields.  This makes the code impossible to evaluate, so if evaluation is
wanted *annotate_fields* must be set to False.  Attributes such as line
numbers and column offsets are not dumped by default.  If this is wanted,
*include_attributes* can be set to ``True``.


+-*/+-*/+-*/walk f 
walk(node)

Recursively yield all descendant nodes in the tree starting at *node*
(including *node* itself), in no specified order.  This is useful if you only
want to modify nodes in place and don't care about the context.



+-*/+-*/+-*/parse f 
parse(source, filename='<unknown>', mode='exec')

Parse the source into an AST node.  Equivalent to ``compile(source,
filename, mode, ast.PyCF_ONLY_AST)``.



+-*/+-*/+-*/copy_location f 
copy_location(new_node, old_node)

Copy source location (:attr:`lineno` and :attr:`col_offset`) from *old_node*
to *new_node* if possible, and return *new_node*.



+-*/+-*/+-*/increment_lineno f 
increment_lineno(node, n=1)

Increment the line number of each node in the tree starting at *node* by *n*.
This is useful to "move code" to a different location in a file.



+-*/+-*/+-*/get_docstring f 
get_docstring(node, clean=True)

Return the docstring of the given *node* (which must be a
:class:`FunctionDef`, :class:`ClassDef` or :class:`Module` node), or ``None``
if it has no docstring.  If *clean* is true, clean up the docstring's
indentation with :func:`inspect.cleandoc`.



+-*/+-*/+-*/iter_child_nodes f 
iter_child_nodes(node)

Yield all direct child nodes of *node*, that is, all fields that are nodes
and all items of fields that are lists of nodes.



+-*/+-*/+-*/literal_eval f 
literal_eval(node_or_string)

Safely evaluate an expression node or a string containing a Python
expression.  The string or node provided may only consist of the following
Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
sets, booleans, and ``None``.

This can be used for safely evaluating strings containing Python expressions
from untrusted sources without the need to parse the values oneself.

.. versionchanged:: 3.2
   Now allows bytes and set literals.



+-*/+-*/+-*/NodeVisitor c 
NodeVisitor()

A node visitor base class that walks the abstract syntax tree and calls a
visitor function for every node found.  This function may return a value
which is forwarded by the :meth:`visit` method.

This class is meant to be subclassed, with the subclass adding visitor
methods.


+-*/+-*/+-*/+-*/generic_visit m 
generic_visit(node)

This visitor calls :meth:`visit` on all children of the node.

Note that child nodes of nodes that have a custom visitor method won't be
visited unless the visitor calls :meth:`generic_visit` or visits them
itself.


+-*/+-*/+-*/+-*/visit m 
visit(node)

Visit a node.  The default implementation calls the method called
:samp:`self.visit_{classname}` where *classname* is the name of the node
class, or :meth:`generic_visit` if that method doesn't exist.


+-*/+-*/+-*/NodeTransformer c 
NodeTransformer()

A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
allows modification of nodes.

The :class:`NodeTransformer` will walk the AST and use the return value of
the visitor methods to replace or remove the old node.  If the return value
of the visitor method is ``None``, the node will be removed from its
location, otherwise it is replaced with the return value.  The return value
may be the original node in which case no replacement takes place.

Here is an example transformer that rewrites all occurrences of name lookups
(``foo``) to ``data['foo']``::

   class RewriteName(NodeTransformer):

       def visit_Name(self, node):
           return copy_location(Subscript(
               value=Name(id='data', ctx=Load()),
               slice=Index(value=Str(s=node.id)),
               ctx=node.ctx
           ), node)

Keep in mind that if the node you're operating on has child nodes you must
either transform the child nodes yourself or call the :meth:`generic_visit`
method for the node first.

For nodes that were part of a collection of statements (that applies to all
statement nodes), the visitor may also return a list of nodes rather than
just a single node.

Usually you use the transformer like this::

   node = YourTransformer().visit(node)



+-*/+-*/+-*/AST c 
AST

This is the base of all AST node classes.  The actual node classes are
derived from the :file:`Parser/Python.asdl` file, which is reproduced
:ref:`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C
module and re-exported in :mod:`ast`.

There is one class defined for each left-hand side symbol in the abstract
grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition,
there is one class defined for each constructor on the right-hand side; these
classes inherit from the classes for the left-hand side trees.  For example,
:class:`ast.BinOp` inherits from :class:`ast.expr`.  For production rules
with alternatives (aka "sums"), the left-hand side class is abstract: only
instances of specific constructor nodes are ever created.

.. attribute:: _fields

   Each concrete class has an attribute :attr:`_fields` which gives the names
   of all child nodes.

   Each instance of a concrete class has one attribute for each child node,
   of the type as defined in the grammar.  For example, :class:`ast.BinOp`
   instances have an attribute :attr:`left` of type :class:`ast.expr`.

   If these attributes are marked as optional in the grammar (using a
   question mark), the value might be ``None``.  If the attributes can have
   zero-or-more values (marked with an asterisk), the values are represented
   as Python lists.  All possible attributes must be present and have valid
   values when compiling an AST with :func:`compile`.

.. attribute:: lineno
               col_offset

   Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have
   :attr:`lineno` and :attr:`col_offset` attributes.  The :attr:`lineno` is
   the line number of source text (1-indexed so the first line is line 1) and
   the :attr:`col_offset` is the UTF-8 byte offset of the first token that
   generated the node.  The UTF-8 offset is recorded because the parser uses
   UTF-8 internally.

The constructor of a class :class:`ast.T` parses its arguments as follows:

* If there are positional arguments, there must be as many as there are items
  in :attr:`T._fields`; they will be assigned as attributes of these names.
* If there are keyword arguments, they will set the attributes of the same
  names to the given values.

For example, to create and populate an :class:`ast.UnaryOp` node, you could
use ::

   node = ast.UnaryOp()
   node.op = ast.USub()
   node.operand = ast.Num()
   node.operand.n = 5
   node.operand.lineno = 0
   node.operand.col_offset = 0
   node.lineno = 0
   node.col_offset = 0

or the more compact ::

   node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),
                      lineno=0, col_offset=0)



+-*/+-*/compileall p Tools for byte-compiling all Python source files in a directory tree.
+-*/+-*/+-*/compile_file f 
compile_file(fullname, ddir=None, force=False, rx=None, quiet=False, legacy=False, optimize=-1)

Compile the file with path *fullname*.

If *ddir* is given, it is prepended to the path to the file being compiled
for use in compilation time tracebacks, and is also compiled in to the
byte-code file, where it will be used in tracebacks and other messages in
cases where the source file does not exist at the time the byte-code file is
executed.

If *rx* is given, its search method is passed the full path name to the
file being compiled, and if it returns a true value, the file is not
compiled and ``True`` is returned.

If *quiet* is true, nothing is printed to the standard output unless errors
occur.

If *legacy* is true, byte-code files are written to their legacy locations
and names, which may overwrite byte-code files created by another version of
Python.  The default is to write files to their :pep:`3147` locations and
names, which allows byte-code files from multiple versions of Python to
coexist.

*optimize* specifies the optimization level for the compiler.  It is passed to
the built-in :func:`compile` function.

.. versionadded:: 3.2



+-*/+-*/+-*/compile_path f 
compile_path(skip_curdir=True, maxlevels=0, force=False, legacy=False, optimize=-1)

Byte-compile all the :file:`.py` files found along ``sys.path``. If
*skip_curdir* is true (the default), the current directory is not included
in the search.  All other parameters are passed to the :func:`compile_dir`
function.  Note that unlike the other compile functions, ``maxlevels``
defaults to ``0``.

.. versionchanged:: 3.2
   Added the *legacy* and *optimize* parameter.



+-*/+-*/+-*/compile_dir f 
compile_dir(dir, maxlevels=10, ddir=None, force=False, rx=None, quiet=False, legacy=False, optimize=-1)

Recursively descend the directory tree named by *dir*, compiling all :file:`.py`
files along the way.

The *maxlevels* parameter is used to limit the depth of the recursion; it
defaults to ``10``.

If *ddir* is given, it is prepended to the path to each file being compiled
for use in compilation time tracebacks, and is also compiled in to the
byte-code file, where it will be used in tracebacks and other messages in
cases where the source file does not exist at the time the byte-code file is
executed.

If *force* is true, modules are re-compiled even if the timestamps are up to
date.

If *rx* is given, its search method is called on the complete path to each
file considered for compilation, and if it returns a true value, the file
is skipped.

If *quiet* is true, nothing is printed to the standard output unless errors
occur.

If *legacy* is true, byte-code files are written to their legacy locations
and names, which may overwrite byte-code files created by another version of
Python.  The default is to write files to their :pep:`3147` locations and
names, which allows byte-code files from multiple versions of Python to
coexist.

*optimize* specifies the optimization level for the compiler.  It is passed to
the built-in :func:`compile` function.

.. versionchanged:: 3.2
   Added the *legacy* and *optimize* parameter.



+-*/+-*/dis p Disassembler for Python bytecode.
+-*/+-*/+-*/distb f 
distb(tb=None)

Disassemble the top-of-stack function of a traceback, using the last
traceback if none was passed.  The instruction causing the exception is
indicated.



+-*/+-*/+-*/findlabels f 
findlabels(code)

Detect all offsets in the code object *code* which are jump targets, and
return a list of these offsets.



+-*/+-*/+-*/disassemble f 
disassemble(code, lasti=-1)

Disassemble a code object, indicating the last instruction if *lasti* was
provided.  The output is divided in the following columns:

#. the line number, for the first instruction of each line
#. the current instruction, indicated as ``-->``,
#. a labelled instruction, indicated with ``>>``,
#. the address of the instruction,
#. the operation code name,
#. operation parameters, and
#. interpretation of the parameters in parentheses.

The parameter interpretation recognizes local and global variable names,
constant values, branch targets, and compare operators.



+-*/+-*/+-*/show_code f 
show_code(x)

Print detailed code object information for the supplied function, method,
source code string or code object to stdout.

This is a convenient shorthand for ``print(code_info(x))``, intended for
interactive exploration at the interpreter prompt.

.. versionadded:: 3.2


+-*/+-*/+-*/disco f 
disco(code, lasti=-1)

Disassemble a code object, indicating the last instruction if *lasti* was
provided.  The output is divided in the following columns:

#. the line number, for the first instruction of each line
#. the current instruction, indicated as ``-->``,
#. a labelled instruction, indicated with ``>>``,
#. the address of the instruction,
#. the operation code name,
#. operation parameters, and
#. interpretation of the parameters in parentheses.

The parameter interpretation recognizes local and global variable names,
constant values, branch targets, and compare operators.



+-*/+-*/+-*/code_info f 
code_info(x)

Return a formatted multi-line string with detailed code object information
for the supplied function, method, source code string or code object.

Note that the exact contents of code info strings are highly implementation
dependent and they may change arbitrarily across Python VMs or Python
releases.

.. versionadded:: 3.2



+-*/+-*/+-*/findlinestarts f 
findlinestarts(code)

This generator function uses the ``co_firstlineno`` and ``co_lnotab``
attributes of the code object *code* to find the offsets which are starts of
lines in the source code.  They are generated as ``(offset, lineno)`` pairs.



+-*/+-*/+-*/dis f 
dis(x=None)

Disassemble the *x* object.  *x* can denote either a module, a class, a
method, a function, a code object, a string of source code or a byte sequence
of raw bytecode.  For a module, it disassembles all functions.  For a class,
it disassembles all methods.  For a code object or sequence of raw bytecode,
it prints one line per bytecode instruction.  Strings are first compiled to
code objects with the :func:`compile` built-in function before being
disassembled.  If no object is provided, this function disassembles the last
traceback.



+-*/+-*/+-*/hasjrel d 
hasjrel

Sequence of bytecodes that have a relative jump target.



+-*/+-*/+-*/hasconst d 
hasconst

Sequence of bytecodes that have a constant parameter.



+-*/+-*/+-*/hasfree d 
hasfree

Sequence of bytecodes that access a free variable.



+-*/+-*/+-*/hascompare d 
hascompare

Sequence of bytecodes of Boolean operations.



+-*/+-*/+-*/hasjabs d 
hasjabs

Sequence of bytecodes that have an absolute jump target.



+-*/+-*/+-*/opmap d 
opmap

Dictionary mapping operation names to bytecodes.



+-*/+-*/+-*/haslocal d 
haslocal

Sequence of bytecodes that access a local variable.



+-*/+-*/+-*/opname d 
opname

Sequence of operation names, indexable using the bytecode.



+-*/+-*/+-*/cmp_op d 
cmp_op

Sequence of all compare operation names.



+-*/+-*/+-*/hasname d 
hasname

Sequence of bytecodes that access an attribute by name.



+-*/+-*/keyword p Test whether a string is a keyword in Python.
+-*/+-*/+-*/iskeyword f 
iskeyword(s)

Return true if *s* is a Python keyword.



+-*/+-*/+-*/kwlist d 
kwlist

Sequence containing all the keywords defined for the interpreter.  If any
keywords are defined to only be active when particular :mod:`__future__`
statements are in effect, these will be included as well.


+-*/+-*/parser p Access parse trees for Python source code.
+-*/+-*/+-*/isexpr f 
isexpr(st)

.. index:: builtin: compile

When *st* represents an ``'eval'`` form, this function returns true, otherwise
it returns false.  This is useful, since code objects normally cannot be queried
for this information using existing built-in functions.  Note that the code
objects created by :func:`compilest` cannot be queried like this either, and
are identical to those created by the built-in :func:`compile` function.



+-*/+-*/+-*/expr f 
expr(source)

The :func:`expr` function parses the parameter *source* as if it were an input
to ``compile(source, 'file.py', 'eval')``.  If the parse succeeds, an ST object
is created to hold the internal parse tree representation, otherwise an
appropriate exception is raised.



+-*/+-*/+-*/tuple2st f 
tuple2st(sequence)

This is the same function as :func:`sequence2st`.  This entry point is
maintained for backward compatibility.



+-*/+-*/+-*/issuite f 
issuite(st)

This function mirrors :func:`isexpr` in that it reports whether an ST object
represents an ``'exec'`` form, commonly known as a "suite."  It is not safe to
assume that this function is equivalent to ``not isexpr(st)``, as additional
syntactic fragments may be supported in the future.



+-*/+-*/+-*/st2tuple f 
st2tuple(st, line_info=False, col_info=False)

This function accepts an ST object from the caller in *st* and returns a
Python tuple representing the equivalent parse tree.  Other than returning a
tuple instead of a list, this function is identical to :func:`st2list`.

If *line_info* is true, line number information will be included for all
terminal tokens as a third element of the list representing the token.  This
information is omitted if the flag is false or omitted.



+-*/+-*/+-*/suite f 
suite(source)

The :func:`suite` function parses the parameter *source* as if it were an input
to ``compile(source, 'file.py', 'exec')``.  If the parse succeeds, an ST object
is created to hold the internal parse tree representation, otherwise an
appropriate exception is raised.



+-*/+-*/+-*/st2list f 
st2list(st, line_info=False, col_info=False)

This function accepts an ST object from the caller in *st* and returns a
Python list representing the equivalent parse tree.  The resulting list
representation can be used for inspection or the creation of a new parse tree in
list form.  This function does not fail so long as memory is available to build
the list representation.  If the parse tree will only be used for inspection,
:func:`st2tuple` should be used instead to reduce memory consumption and
fragmentation.  When the list representation is required, this function is
significantly faster than retrieving a tuple representation and converting that
to nested lists.

If *line_info* is true, line number information will be included for all
terminal tokens as a third element of the list representing the token.  Note
that the line number provided specifies the line on which the token *ends*.
This information is omitted if the flag is false or omitted.



+-*/+-*/+-*/compilest f 
compilest(st, filename='<syntax-tree>')

.. index::
   builtin: exec
   builtin: eval

The Python byte compiler can be invoked on an ST object to produce code objects
which can be used as part of a call to the built-in :func:`exec` or :func:`eval`
functions. This function provides the interface to the compiler, passing the
internal parse tree from *st* to the parser, using the source file name
specified by the *filename* parameter. The default value supplied for *filename*
indicates that the source was an ST object.

Compiling an ST object may result in exceptions related to compilation; an
example would be a :exc:`SyntaxError` caused by the parse tree for ``del f(0)``:
this statement is considered legal within the formal grammar for Python but is
not a legal language construct.  The :exc:`SyntaxError` raised for this
condition is actually generated by the Python byte-compiler normally, which is
why it can be raised at this point by the :mod:`parser` module.  Most causes of
compilation failure can be diagnosed programmatically by inspection of the parse
tree.



+-*/+-*/+-*/sequence2st f 
sequence2st(sequence)

This function accepts a parse tree represented as a sequence and builds an
internal representation if possible.  If it can validate that the tree conforms
to the Python grammar and all nodes are valid node types in the host version of
Python, an ST object is created from the internal representation and returned
to the called.  If there is a problem creating the internal representation, or
if the tree cannot be validated, a :exc:`ParserError` exception is raised.  An
ST object created this way should not be assumed to compile correctly; normal
exceptions raised by compilation may still be initiated when the ST object is
passed to :func:`compilest`.  This may indicate problems not related to syntax
(such as a :exc:`MemoryError` exception), but may also be due to constructs such
as the result of parsing ``del f(0)``, which escapes the Python parser but is
checked by the bytecode compiler.

Sequences representing terminal tokens may be represented as either two-element
lists of the form ``(1, 'name')`` or as three-element lists of the form ``(1,
'name', 56)``.  If the third element is present, it is assumed to be a valid
line number.  The line number may be specified for any subset of the terminal
symbols in the input tree.



+-*/+-*/+-*/STType d 
STType

The type of the objects returned by :func:`expr`, :func:`suite` and
:func:`sequence2st`.


+-*/+-*/+-*/ParserError e 
ParserError

Exception raised when a failure occurs within the parser module.  This is
generally produced for validation failures rather than the built-in
:exc:`SyntaxError` raised during normal parsing. The exception argument is
either a string describing the reason of the failure or a tuple containing a
sequence causing the failure from a parse tree passed to :func:`sequence2st`
and an explanatory string.  Calls to :func:`sequence2st` need to be able to
handle either type of exception, while calls to other functions in the module
will only need to be aware of the simple string values.


+-*/+-*/+-*/ST _ 
+-*/+-*/+-*/+-*/compile m 
compile(filename='<syntax-tree>')

Same as ``compilest(st, filename)``.



+-*/+-*/+-*/+-*/totuple m 
totuple(line_info=False, col_info=False)

Same as ``st2tuple(st, line_info, col_info)``.



+-*/+-*/+-*/+-*/issuite m 
issuite()

Same as ``issuite(st)``.



+-*/+-*/+-*/+-*/isexpr m 
isexpr()

Same as ``isexpr(st)``.



+-*/+-*/+-*/+-*/tolist m 
tolist(line_info=False, col_info=False)

Same as ``st2list(st, line_info, col_info)``.



+-*/+-*/pickletools p Contains extensive comments about the pickle protocols andpickle-machine opcodes, as well as some useful functions.
+-*/+-*/+-*/genops f 
genops(pickle)

Provides an :term:`iterator` over all of the opcodes in a pickle, returning a
sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of an
:class:`OpcodeInfo` class; *arg* is the decoded value, as a Python object, of
the opcode's argument; *pos* is the position at which this opcode is located.
*pickle* can be a string or a file-like object.


+-*/+-*/+-*/optimize f 
optimize(picklestring)

Returns a new equivalent pickle string after eliminating unused ``PUT``
opcodes. The optimized pickle is shorter, takes less transmission time,
requires less storage space, and unpickles more efficiently.



+-*/+-*/+-*/dis f 
dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)

 Outputs a symbolic disassembly of the pickle to the file-like
 object *out*, defaulting to ``sys.stdout``.  *pickle* can be a
 string or a file-like object.  *memo* can be a Python dictionary
 that will be used as the pickle's memo; it can be used to perform
 disassemblies across multiple pickles created by the same
 pickler. Successive levels, indicated by ``MARK`` opcodes in the
 stream, are indented by *indentlevel* spaces.  If a nonzero value
 is given to *annotate*, each opcode in the output is annotated with
 a short description.  The value of *annotate* is used as a hint for
 the column where annotation should start.

.. versionadded:: 3.2
   The *annotate* argument.


+-*/+-*/py_compile p Generate byte-code files from Python source files.
+-*/+-*/+-*/compile f 
compile(file, cfile=None, dfile=None, doraise=False, optimize=-1)

Compile a source file to byte-code and write out the byte-code cache  file.
The source code is loaded from the file name *file*.  The  byte-code is
written to *cfile*, which defaults to the :PEP:`3147` path, ending in
``.pyc`` (``.pyo`` if optimization is enabled in the current interpreter).
For example, if *file* is ``/foo/bar/baz.py`` *cfile* will default to
``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2.  If *dfile* is
specified, it is used as the name of the source file in error messages when
instead of *file*.  If *doraise* is true, a :exc:`PyCompileError` is raised
when an error is encountered while compiling *file*. If *doraise* is false
(the default), an error string is written to ``sys.stderr``, but no exception
is raised.  This function returns the path to byte-compiled file, i.e.
whatever *cfile* value was used.

*optimize* controls the optimization level and is passed to the built-in
:func:`compile` function.  The default of ``-1`` selects the optimization
level of the current interpreter.

.. versionchanged:: 3.2
   Changed default value of *cfile* to be :PEP:`3147`-compliant.  Previous
   default was *file* + ``'c'`` (``'o'`` if optimization was enabled).
   Also added the *optimize* parameter.



+-*/+-*/+-*/main f 
main(args=None)

Compile several source files.  The files named in *args* (or on the command
line, if *args* is ``None``) are compiled and the resulting bytecode is
cached in the normal manner.  This function does not search a directory
structure to locate source files; it only compiles files named explicitly.
If ``'-'`` is the only parameter in args, the list of files is taken from
standard input.

.. versionchanged:: 3.2
   Added support for ``'-'``.


+-*/+-*/+-*/PyCompileError e 
PyCompileError

Exception raised when an error occurs while attempting to compile the file.



+-*/+-*/pyclbr p Supports information extraction for a Python class browser.
+-*/+-*/+-*/readmodule_ex f 
readmodule_ex(module, path=None)

Like :func:`readmodule`, but the returned dictionary, in addition to
mapping class names to class descriptor objects, also maps top-level
function names to function descriptor objects.  Moreover, if the module
being read is a package, the key ``'__path__'`` in the returned
dictionary has as its value a list which contains the package search
path.



+-*/+-*/+-*/readmodule f 
readmodule(module, path=None)

Read a module and return a dictionary mapping class names to class
descriptor objects.  The parameter *module* should be the name of a
module as a string; it may be the name of a module within a package.  The
*path* parameter should be a sequence, and is used to augment the value
of ``sys.path``, which is used to locate module source code.



+-*/+-*/+-*/Function _ 
+-*/+-*/+-*/+-*/file d 
file

Name of the file containing the ``def`` statement defining the function.



+-*/+-*/+-*/+-*/name d 
name

The name of the function.



+-*/+-*/+-*/+-*/module d 
module

The name of the module defining the function described by the function
descriptor.



+-*/+-*/+-*/+-*/lineno d 
lineno

The line number of the ``def`` statement within the file named by
:attr:`~Function.file`.



+-*/+-*/+-*/Class _ 
+-*/+-*/+-*/+-*/methods d 
methods

A dictionary mapping method names to line numbers.



+-*/+-*/+-*/+-*/module d 
module

The name of the module defining the class described by the class descriptor.



+-*/+-*/+-*/+-*/lineno d 
lineno

The line number of the ``class`` statement within the file named by
:attr:`~Class.file`.



+-*/+-*/+-*/+-*/file d 
file

Name of the file containing the ``class`` statement defining the class.



+-*/+-*/+-*/+-*/super d 
super

A list of :class:`Class` objects which describe the immediate base
classes of the class being described.  Classes which are named as
superclasses but which are not discoverable by :func:`readmodule` are
listed as a string with the class name instead of as :class:`Class`
objects.



+-*/+-*/+-*/+-*/name d 
name

The name of the class.



+-*/+-*/symbol p Constants representing internal nodes of the parse tree.
+-*/+-*/+-*/sym_name d 
sym_name

Dictionary mapping the numeric values of the constants defined in this module
back to name strings, allowing more human-readable representation of parse trees
to be generated.



+-*/+-*/symtable p Interface to the compiler's internal symbol tables.
+-*/+-*/+-*/symtable f 
symtable(code, filename, compile_type)

Return the toplevel :class:`SymbolTable` for the Python source *code*.
*filename* is the name of the file containing the code.  *compile_type* is
like the *mode* argument to :func:`compile`.



+-*/+-*/+-*/Function c 
Function

A namespace for a function or method.  This class inherits
:class:`SymbolTable`.


+-*/+-*/+-*/+-*/get_parameters m 
get_parameters()

Return a tuple containing names of parameters to this function.


+-*/+-*/+-*/+-*/get_globals m 
get_globals()

Return a tuple containing names of globals in this function.


+-*/+-*/+-*/+-*/get_locals m 
get_locals()

Return a tuple containing names of locals in this function.


+-*/+-*/+-*/+-*/get_frees m 
get_frees()

Return a tuple containing names of free variables in this function.




+-*/+-*/+-*/Symbol c 
Symbol

An entry in a :class:`SymbolTable` corresponding to an identifier in the
source.  The constructor is not public.


+-*/+-*/+-*/+-*/is_local m 
is_local()

Return ``True`` if the symbol is local to its block.


+-*/+-*/+-*/+-*/is_global m 
is_global()

Return ``True`` if the symbol is global.


+-*/+-*/+-*/+-*/is_assigned m 
is_assigned()

Return ``True`` if the symbol is assigned to in its block.


+-*/+-*/+-*/+-*/is_imported m 
is_imported()

Return ``True`` if the symbol is created from an import statement.


+-*/+-*/+-*/+-*/is_declared_global m 
is_declared_global()

Return ``True`` if the symbol is declared global with a global statement.


+-*/+-*/+-*/+-*/is_parameter m 
is_parameter()

Return ``True`` if the symbol is a parameter.


+-*/+-*/+-*/+-*/is_namespace m 
is_namespace()

Return ``True`` if name binding introduces new namespace.

If the name is used as the target of a function or class statement, this
will be true.

For example::

   >>> table = symtable.symtable("def some_func(): pass", "string", "exec")
   >>> table.lookup("some_func").is_namespace()
   True

Note that a single name can be bound to multiple objects.  If the result
is ``True``, the name may also be bound to other objects, like an int or
list, that does not introduce a new namespace.


+-*/+-*/+-*/+-*/get_name m 
get_name()

Return the symbol's name.


+-*/+-*/+-*/+-*/get_namespaces m 
get_namespaces()

Return a list of namespaces bound to this name.


+-*/+-*/+-*/+-*/is_referenced m 
is_referenced()

Return ``True`` if the symbol is used in its block.


+-*/+-*/+-*/+-*/is_free m 
is_free()

Return ``True`` if the symbol is referenced in its block, but not assigned
to.


+-*/+-*/+-*/+-*/get_namespace m 
get_namespace()

Return the namespace bound to this name.  If more than one namespace is
bound, a :exc:`ValueError` is raised.



+-*/+-*/+-*/SymbolTable c 
SymbolTable

A namespace table for a block.  The constructor is not public.


+-*/+-*/+-*/+-*/get_lineno m 
get_lineno()

Return the number of the first line in the block this table represents.


+-*/+-*/+-*/+-*/get_symbols m 
get_symbols()

Return a list of :class:`Symbol` instances for names in the table.


+-*/+-*/+-*/+-*/is_optimized m 
is_optimized()

Return ``True`` if the locals in this table can be optimized.


+-*/+-*/+-*/+-*/is_nested m 
is_nested()

Return ``True`` if the block is a nested class or function.


+-*/+-*/+-*/+-*/has_import_star m 
has_import_star()

Return ``True`` if the block uses a starred from-import.


+-*/+-*/+-*/+-*/has_children m 
has_children()

Return ``True`` if the block has nested namespaces within it.  These can
be obtained with :meth:`get_children`.


+-*/+-*/+-*/+-*/has_exec m 
has_exec()

Return ``True`` if the block uses ``exec``.


+-*/+-*/+-*/+-*/get_name m 
get_name()

Return the table's name.  This is the name of the class if the table is
for a class, the name of the function if the table is for a function, or
``'top'`` if the table is global (:meth:`get_type` returns ``'module'``).


+-*/+-*/+-*/+-*/get_id m 
get_id()

Return the table's identifier.


+-*/+-*/+-*/+-*/get_type m 
get_type()

Return the type of the symbol table.  Possible values are ``'class'``,
``'module'``, and ``'function'``.


+-*/+-*/+-*/+-*/lookup m 
lookup(name)

Lookup *name* in the table and return a :class:`Symbol` instance.


+-*/+-*/+-*/+-*/get_children m 
get_children()

Return a list of the nested symbol tables.




+-*/+-*/+-*/+-*/get_identifiers m 
get_identifiers()

Return a list of names of symbols in this table.


+-*/+-*/+-*/Class c 
Class

A namespace of a class.  This class inherits :class:`SymbolTable`.


+-*/+-*/+-*/+-*/get_methods m 
get_methods()

Return a tuple containing the names of methods declared in the class.




+-*/+-*/tabnanny p Tool for detecting white space related problems in Pythonsource files in a directory tree.
+-*/+-*/+-*/tokeneater f 
tokeneater(type, token, start, end, line)

This function is used by :func:`check` as a callback parameter to the function
:func:`tokenize.tokenize`.


+-*/+-*/+-*/check f 
check(file_or_dir)

If *file_or_dir* is a directory and not a symbolic link, then recursively
descend the directory tree named by *file_or_dir*, checking all :file:`.py`
files along the way.  If *file_or_dir* is an ordinary Python source file, it
is checked for whitespace related problems.  The diagnostic messages are
written to standard output using the :func:`print` function.



+-*/+-*/+-*/verbose d 
verbose

Flag indicating whether to print verbose messages. This is incremented by the
``-v`` option if called as a script.



+-*/+-*/+-*/filename_only d 
filename_only

Flag indicating whether to print only the filenames of files containing
whitespace related problems.  This is set to true by the ``-q`` option if called
as a script.



+-*/+-*/+-*/NannyNag e 
NannyNag

Raised by :func:`tokeneater` if detecting an ambiguous indent. Captured and
handled in :func:`check`.



+-*/+-*/token p Constants representing terminal nodes of the parse tree.
+-*/+-*/+-*/ISNONTERMINAL f 
ISNONTERMINAL(x)

Return true for non-terminal token values.



+-*/+-*/+-*/ISTERMINAL f 
ISTERMINAL(x)

Return true for terminal token values.



+-*/+-*/+-*/ISEOF f 
ISEOF(x)

Return true if *x* is the marker indicating the end of input.



+-*/+-*/+-*/DEDENT d 
DEDENT



+-*/+-*/+-*/LPAR d 
LPAR



+-*/+-*/+-*/ENDMARKER d 
ENDMARKER



+-*/+-*/+-*/SLASH d 
SLASH



+-*/+-*/+-*/LESS d 
LESS



+-*/+-*/+-*/SLASHEQUAL d 
SLASHEQUAL



+-*/+-*/+-*/NUMBER d 
NUMBER



+-*/+-*/+-*/RPAR d 
RPAR



+-*/+-*/+-*/CIRCUMFLEX d 
CIRCUMFLEX



+-*/+-*/+-*/NOTEQUAL d 
NOTEQUAL



+-*/+-*/+-*/VBAR d 
VBAR



+-*/+-*/+-*/BACKQUOTE d 
BACKQUOTE



+-*/+-*/+-*/DOUBLESTAR d 
DOUBLESTAR



+-*/+-*/+-*/STAR d 
STAR



+-*/+-*/+-*/MINUS d 
MINUS



+-*/+-*/+-*/DOT d 
DOT



+-*/+-*/+-*/RBRACE d 
RBRACE



+-*/+-*/+-*/STAREQUAL d 
STAREQUAL



+-*/+-*/+-*/GREATEREQUAL d 
GREATEREQUAL



+-*/+-*/+-*/MINEQUAL d 
MINEQUAL



+-*/+-*/+-*/LEFTSHIFTEQUAL d 
LEFTSHIFTEQUAL



+-*/+-*/+-*/SEMI d 
SEMI



+-*/+-*/+-*/CIRCUMFLEXEQUAL d 
CIRCUMFLEXEQUAL



+-*/+-*/+-*/NEWLINE d 
NEWLINE



+-*/+-*/+-*/DOUBLESLASHEQUAL d 
DOUBLESLASHEQUAL



+-*/+-*/+-*/COLON d 
COLON



+-*/+-*/+-*/PERCENTEQUAL d 
PERCENTEQUAL



+-*/+-*/+-*/TILDE d 
TILDE



+-*/+-*/+-*/PLUS d 
PLUS



+-*/+-*/+-*/ERRORTOKEN d 
ERRORTOKEN



+-*/+-*/+-*/RSQB d 
RSQB



+-*/+-*/+-*/EQEQUAL d 
EQEQUAL



+-*/+-*/+-*/AMPEREQUAL d 
AMPEREQUAL



+-*/+-*/+-*/RIGHTSHIFT d 
RIGHTSHIFT



+-*/+-*/+-*/STRING d 
STRING



+-*/+-*/+-*/NT_OFFSET d 
NT_OFFSET



+-*/+-*/+-*/PERCENT d 
PERCENT



+-*/+-*/+-*/DOUBLESLASH d 
DOUBLESLASH



+-*/+-*/+-*/DOUBLESTAREQUAL d 
DOUBLESTAREQUAL



+-*/+-*/+-*/EQUAL d 
EQUAL



+-*/+-*/+-*/PLUSEQUAL d 
PLUSEQUAL



+-*/+-*/+-*/AT d 
AT



+-*/+-*/+-*/AMPER d 
AMPER



+-*/+-*/+-*/LESSEQUAL d 
LESSEQUAL



+-*/+-*/+-*/LSQB d 
LSQB



+-*/+-*/+-*/N_TOKENS d 
N_TOKENS



+-*/+-*/+-*/RIGHTSHIFTEQUAL d 
RIGHTSHIFTEQUAL



+-*/+-*/+-*/GREATER d 
GREATER



+-*/+-*/+-*/LBRACE d 
LBRACE



+-*/+-*/+-*/INDENT d 
INDENT



+-*/+-*/+-*/NAME d 
NAME



+-*/+-*/+-*/tok_name d 
tok_name

Dictionary mapping the numeric values of the constants defined in this module
back to name strings, allowing more human-readable representation of parse trees
to be generated.



+-*/+-*/+-*/VBAREQUAL d 
VBAREQUAL



+-*/+-*/+-*/LEFTSHIFT d 
LEFTSHIFT



+-*/+-*/+-*/COMMA d 
COMMA



+-*/+-*/+-*/OP d 
OP



+-*/+-*/tokenize p Lexical scanner for Python source code.
+-*/+-*/+-*/detect_encoding f 
detect_encoding(readline)

The :func:`detect_encoding` function is used to detect the encoding that
should be used to decode a Python source file. It requires one argument,
readline, in the same way as the :func:`tokenize` generator.

It will call readline a maximum of twice, and return the encoding used
(as a string) and a list of any lines (not decoded from bytes) it has read
in.

It detects the encoding from the presence of a UTF-8 BOM or an encoding
cookie as specified in :pep:`263`. If both a BOM and a cookie are present,
but disagree, a SyntaxError will be raised. Note that if the BOM is found,
``'utf-8-sig'`` will be returned as an encoding.

If no encoding is specified, then the default of ``'utf-8'`` will be
returned.

Use :func:`open` to open Python source files: it uses
:func:`detect_encoding` to detect the file encoding.



+-*/+-*/+-*/open f 
open(filename)

Open a file in read only mode using the encoding detected by
:func:`detect_encoding`.

.. versionadded:: 3.2



+-*/+-*/+-*/untokenize f 
untokenize(iterable)

Converts tokens back into Python source code.  The *iterable* must return
sequences with at least two elements, the token type and the token string.
Any additional sequence elements are ignored.

The reconstructed script is returned as a single string.  The result is
guaranteed to tokenize back to match the input so that the conversion is
lossless and round-trips are assured.  The guarantee applies only to the
token type and token string as the spacing between tokens (column
positions) may change.

It returns bytes, encoded using the ENCODING token, which is the first
token sequence output by :func:`tokenize`.



+-*/+-*/+-*/tokenize f 
tokenize(readline)

The :func:`tokenize` generator requires one argument, *readline*, which
must be a callable object which provides the same interface as the
:meth:`io.IOBase.readline` method of file objects.  Each call to the
function should return one line of input as bytes.

The generator produces 5-tuples with these members: the token type; the
token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and
column where the token begins in the source; a 2-tuple ``(erow, ecol)`` of
ints specifying the row and column where the token ends in the source; and
the line on which the token was found. The line passed (the last tuple item)
is the *logical* line; continuation lines are included.  The 5 tuple is
returned as a :term:`named tuple` with the field names:
``type string start end line``.

.. versionchanged:: 3.1
   Added support for named tuples.

:func:`tokenize` determines the source encoding of the file by looking for a
UTF-8 BOM or encoding cookie, according to :pep:`263`.



+-*/+-*/+-*/COMMENT d 
COMMENT

Token value used to indicate a comment.



+-*/+-*/+-*/NL d 
NL

Token value used to indicate a non-terminating newline.  The NEWLINE token
indicates the end of a logical line of Python code; NL tokens are generated
when a logical line of code is continued over multiple physical lines.



+-*/+-*/+-*/ENCODING d 
ENCODING

Token value that indicates the encoding used to decode the source bytes
into text. The first token returned by :func:`tokenize` will always be an
ENCODING token.



+-*/windows _ MS Windows Specific Services
+-*/+-*/msilib p Creation of Microsoft Installer files, and CAB files.
+-*/+-*/+-*/UuidCreate f 
UuidCreate()

Return the string representation of a new unique identifier. This wraps the
Windows API functions :c:func:`UuidCreate` and :c:func:`UuidToString`.



+-*/+-*/+-*/gen_uuid f 
gen_uuid()

Return a new UUID, in the format that MSI typically requires (i.e. in curly
braces, and with all hexdigits in upper-case).



+-*/+-*/+-*/FCICreate f 
FCICreate(cabname, files)

Create a new CAB file named *cabname*. *files* must be a list of tuples, each
containing the name of the file on disk, and the name of the file inside the CAB
file.

The files are added to the CAB file in the order they appear in the list. All
files are added into a single CAB file, using the MSZIP compression algorithm.

Callbacks to Python for the various steps of MSI creation are currently not
exposed.



+-*/+-*/+-*/OpenDatabase f 
OpenDatabase(path, persist)

Return a new database object by calling MsiOpenDatabase.   *path* is the file
name of the MSI file; *persist* can be one of the constants
``MSIDBOPEN_CREATEDIRECT``, ``MSIDBOPEN_CREATE``, ``MSIDBOPEN_DIRECT``,
``MSIDBOPEN_READONLY``, or ``MSIDBOPEN_TRANSACT``, and may include the flag
``MSIDBOPEN_PATCHFILE``. See the Microsoft documentation for the meaning of
these flags; depending on the flags, an existing database is opened, or a new
one created.



+-*/+-*/+-*/add_data f 
add_data(database, table, records)

Add all *records* to the table named *table* in *database*.

The *table* argument must be one of the predefined tables in the MSI schema,
e.g. ``'Feature'``, ``'File'``, ``'Component'``, ``'Dialog'``, ``'Control'``,
etc.

*records* should be a list of tuples, each one containing all fields of a
record according to the schema of the table.  For optional fields,
``None`` can be passed.

Field values can be int or long numbers, strings, or instances of the Binary
class.



+-*/+-*/+-*/add_tables f 
add_tables(database, module)

Add all table content from *module* to *database*. *module* must contain an
attribute *tables* listing all tables for which content should be added, and one
attribute per table that has the actual content.

This is typically used to install the sequence tables.



+-*/+-*/+-*/CreateRecord f 
CreateRecord(count)

Return a new record object by calling :c:func:`MSICreateRecord`. *count* is the
number of fields of the record.



+-*/+-*/+-*/init_database f 
init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)

Create and return a new database *name*, initialize it with *schema*, and set
the properties *ProductName*, *ProductCode*, *ProductVersion*, and
*Manufacturer*.

*schema* must be a module object containing ``tables`` and
``_Validation_records`` attributes; typically, :mod:`msilib.schema` should be
used.

The database will contain just the schema and the validation records when this
function returns.



+-*/+-*/+-*/add_stream f 
add_stream(database, name, path)

Add the file *path* into the ``_Stream`` table of *database*, with the stream
name *name*.



+-*/+-*/+-*/text d 
text

This module contains definitions for the UIText and ActionText tables, for the
standard installer actions.


+-*/+-*/+-*/sequence d 
sequence

This module contains table contents for the standard sequence tables:
*AdminExecuteSequence*, *AdminUISequence*, *AdvtExecuteSequence*,
*InstallExecuteSequence*, and *InstallUISequence*.



+-*/+-*/+-*/schema d 
schema

This is the standard MSI schema for MSI 2.0, with the *tables* variable
providing a list of table definitions, and *_Validation_records* providing the
data for MSI validation.



+-*/+-*/+-*/Control c 
Control(dlg, name)

Base class of the dialog controls. *dlg* is the dialog object the control
belongs to, and *name* is the control's name.



+-*/+-*/+-*/+-*/event m 
event(event, argument, condition=1, ordering=None)

Make an entry into the ``ControlEvent`` table for this control.



+-*/+-*/+-*/+-*/condition m 
condition(action, condition)

Make an entry into the ``ControlCondition`` table for this control.




+-*/+-*/+-*/+-*/mapping m 
mapping(event, attribute)

Make an entry into the ``EventMapping`` table for this control.



+-*/+-*/+-*/Binary c 
Binary(filename)

Represents entries in the Binary table; inserting such an object using
:func:`add_data` reads the file named *filename* into the table.



+-*/+-*/+-*/Dialog c 
Dialog(db, name, x, y, w, h, attr, title, first,  default, cancel)

Return a new :class:`Dialog` object. An entry in the ``Dialog`` table is made,
with the specified coordinates, dialog attributes, title, name of the first,
default, and cancel controls.



+-*/+-*/+-*/+-*/control m 
control(name, type, x, y, width, height,  attributes, property, text, control_next, help)

Return a new :class:`Control` object. An entry in the ``Control`` table is
made with the specified parameters.

This is a generic method; for specific types, specialized methods are
provided.



+-*/+-*/+-*/+-*/checkbox m 
checkbox(name, x, y, width, height,  attributes, property, text, next_control)

Add and return a ``CheckBox`` control.




+-*/+-*/+-*/+-*/text m 
text(name, x, y, width, height, attributes, text)

Add and return a ``Text`` control.



+-*/+-*/+-*/+-*/pushbutton m 
pushbutton(name, x, y, width, height, attributes,  text, next_control)

Add and return a ``PushButton`` control.



+-*/+-*/+-*/+-*/bitmap m 
bitmap(name, x, y, width, height, text)

Add and return a ``Bitmap`` control.



+-*/+-*/+-*/+-*/radiogroup m 
radiogroup(name, x, y, width, height,  attributes, property, text, next_control)

Add and return a ``RadioButtonGroup`` control.



+-*/+-*/+-*/+-*/line m 
line(name, x, y, width, height)

Add and return a ``Line`` control.



+-*/+-*/+-*/Feature c 
Feature(db, id, title, desc, display, level=1, parent=None, directory=None,  attributes=0)

Add a new record to the ``Feature`` table, using the values *id*, *parent.id*,
*title*, *desc*, *display*, *level*, *directory*, and *attributes*. The
resulting feature object can be passed to the :meth:`start_component` method of
:class:`Directory`.



+-*/+-*/+-*/+-*/set_current m 
set_current()

Make this feature the current feature of :mod:`msilib`. New components are
automatically added to the default feature, unless a feature is explicitly
specified.




+-*/+-*/+-*/RadioButtonGroup c 
RadioButtonGroup(dlg, name, property)

Create a radio button control named *name*. *property* is the installer property
that gets set when a radio button is selected.



+-*/+-*/+-*/+-*/add m 
add(name, x, y, width, height, text, value=None)

Add a radio button named *name* to the group, at the coordinates *x*, *y*,
*width*, *height*, and with the label *text*. If *value* is ``None``, it
defaults to *name*.




+-*/+-*/+-*/Directory c 
Directory(database, cab, basedir, physical,  logical, default, [componentflags])

Create a new directory in the Directory table. There is a current component at
each point in time for the directory, which is either explicitly created through
:meth:`start_component`, or implicitly when files are added for the first time.
Files are added into the current component, and into the cab file.  To create a
directory, a base directory object needs to be specified (can be ``None``), the
path to the physical directory, and a logical directory name.  *default*
specifies the DefaultDir slot in the directory table. *componentflags* specifies
the default flags that new components get.



+-*/+-*/+-*/+-*/glob m 
glob(pattern, exclude=None)

Add a list of files to the current component as specified in the glob
pattern.  Individual files can be excluded in the *exclude* list.



+-*/+-*/+-*/+-*/remove_pyc m 
remove_pyc()

Remove ``.pyc``/``.pyo`` files on uninstall.




+-*/+-*/+-*/+-*/start_component m 
start_component(component=None, feature=None, flags=None, keyfile=None, uuid=None)

Add an entry to the Component table, and make this component the current
component for this directory. If no component name is given, the directory
name is used. If no *feature* is given, the current feature is used. If no
*flags* are given, the directory's default flags are used. If no *keyfile*
is given, the KeyPath is left null in the Component table.



+-*/+-*/+-*/+-*/add_file m 
add_file(file, src=None, version=None, language=None)

Add a file to the current component of the directory, starting a new one
if there is no current component. By default, the file name in the source
and the file table will be identical. If the *src* file is specified, it
is interpreted relative to the current directory. Optionally, a *version*
and a *language* can be specified for the entry in the File table.



+-*/+-*/+-*/CAB c 
CAB(name)

The class :class:`CAB` represents a CAB file. During MSI construction, files
will be added simultaneously to the ``Files`` table, and to a CAB file. Then,
when all files have been added, the CAB file can be written, then added to the
MSI file.

*name* is the name of the CAB file in the MSI file.



+-*/+-*/+-*/+-*/commit m 
commit(database)

Generate a CAB file, add it as a stream to the MSI file, put it into the
``Media`` table, and remove the generated file from the disk.




+-*/+-*/+-*/+-*/append m 
append(full, file, logical)

Add the file with the pathname *full* to the CAB file, under the name
*logical*.  If there is already a file named *logical*, a new file name is
created.

Return the index of the file in the CAB file, and the new name of the file
inside the CAB file.



+-*/+-*/+-*/SummaryInformation _ 
+-*/+-*/+-*/+-*/SetProperty m 
SetProperty(field, value)

Set a property through :c:func:`MsiSummaryInfoSetProperty`. *field* can have the
same values as in :meth:`GetProperty`, *value* is the new value of the property.
Possible value types are integer and string.



+-*/+-*/+-*/+-*/GetPropertyCount m 
GetPropertyCount()

Return the number of summary properties, through
:c:func:`MsiSummaryInfoGetPropertyCount`.



+-*/+-*/+-*/+-*/GetProperty m 
GetProperty(field)

Return a property of the summary, through :c:func:`MsiSummaryInfoGetProperty`.
*field* is the name of the property, and can be one of the constants
``PID_CODEPAGE``, ``PID_TITLE``, ``PID_SUBJECT``, ``PID_AUTHOR``,
``PID_KEYWORDS``, ``PID_COMMENTS``, ``PID_TEMPLATE``, ``PID_LASTAUTHOR``,
``PID_REVNUMBER``, ``PID_LASTPRINTED``, ``PID_CREATE_DTM``,
``PID_LASTSAVE_DTM``, ``PID_PAGECOUNT``, ``PID_WORDCOUNT``, ``PID_CHARCOUNT``,
``PID_APPNAME``, or ``PID_SECURITY``.



+-*/+-*/+-*/+-*/Persist m 
Persist()

Write the modified properties to the summary information stream, using
:c:func:`MsiSummaryInfoPersist`.



+-*/+-*/+-*/Record _ 
+-*/+-*/+-*/+-*/ClearData m 
ClearData()

Set all fields of the record to 0, through :c:func:`MsiRecordClearData`.



+-*/+-*/+-*/+-*/GetString m 
GetString(field)

Return the value of *field* as a string where possible.  *field* must
be an integer.



+-*/+-*/+-*/+-*/GetFieldCount m 
GetFieldCount()

Return the number of fields of the record, through
:c:func:`MsiRecordGetFieldCount`.



+-*/+-*/+-*/+-*/SetStream m 
SetStream(field, value)

Set *field* to the contents of the file named *value*, through
:c:func:`MsiRecordSetStream`. *field* must be an integer; *value* a string.



+-*/+-*/+-*/+-*/SetString m 
SetString(field, value)

Set *field* to *value* through :c:func:`MsiRecordSetString`. *field* must be an
integer; *value* a string.



+-*/+-*/+-*/+-*/GetInteger m 
GetInteger(field)

Return the value of *field* as an integer where possible.  *field* must
be an integer.



+-*/+-*/+-*/+-*/SetInteger m 
SetInteger(field, value)

Set *field* to *value* through :c:func:`MsiRecordSetInteger`. Both *field* and
*value* must be an integer.



+-*/+-*/+-*/Database _ 
+-*/+-*/+-*/+-*/Commit m 
Commit()

Commit the changes pending in the current transaction, by calling
:c:func:`MSIDatabaseCommit`.



+-*/+-*/+-*/+-*/OpenView m 
OpenView(sql)

Return a view object, by calling :c:func:`MSIDatabaseOpenView`. *sql* is the SQL
statement to execute.



+-*/+-*/+-*/+-*/GetSummaryInformation m 
GetSummaryInformation(count)

Return a new summary information object, by calling
:c:func:`MsiGetSummaryInformation`.  *count* is the maximum number of updated
values.



+-*/+-*/+-*/View _ 
+-*/+-*/+-*/+-*/Close m 
Close()

Close the view, through :c:func:`MsiViewClose`.



+-*/+-*/+-*/+-*/Execute m 
Execute(params)

Execute the SQL query of the view, through :c:func:`MSIViewExecute`. If
*params* is not ``None``, it is a record describing actual values of the
parameter tokens in the query.



+-*/+-*/+-*/+-*/Modify m 
Modify(kind, data)

Modify the view, by calling :c:func:`MsiViewModify`. *kind* can be one of
``MSIMODIFY_SEEK``, ``MSIMODIFY_REFRESH``, ``MSIMODIFY_INSERT``,
``MSIMODIFY_UPDATE``, ``MSIMODIFY_ASSIGN``, ``MSIMODIFY_REPLACE``,
``MSIMODIFY_MERGE``, ``MSIMODIFY_DELETE``, ``MSIMODIFY_INSERT_TEMPORARY``,
``MSIMODIFY_VALIDATE``, ``MSIMODIFY_VALIDATE_NEW``,
``MSIMODIFY_VALIDATE_FIELD``, or ``MSIMODIFY_VALIDATE_DELETE``.

*data* must be a record describing the new data.



+-*/+-*/+-*/+-*/Fetch m 
Fetch()

Return a result record of the query, through calling :c:func:`MsiViewFetch`.



+-*/+-*/+-*/+-*/GetColumnInfo m 
GetColumnInfo(kind)

Return a record describing the columns of the view, through calling
:c:func:`MsiViewGetColumnInfo`. *kind* can be either ``MSICOLINFO_NAMES`` or
``MSICOLINFO_TYPES``.



+-*/+-*/msvcrt p Miscellaneous useful routines from the MS VC++ runtime.
+-*/+-*/+-*/getch f 
getch()

Read a keypress and return the resulting character as a byte string.
Nothing is echoed to the console.  This call will block if a keypress
is not already available, but will not wait for :kbd:`Enter` to be
pressed. If the pressed key was a special function key, this will
return ``'\000'`` or ``'\xe0'``; the next call will return the keycode.
The :kbd:`Control-C` keypress cannot be read with this function.



+-*/+-*/+-*/heapmin f 
heapmin()

Force the :c:func:`malloc` heap to clean itself up and return unused blocks to
the operating system.  On failure, this raises :exc:`IOError`.


+-*/+-*/+-*/setmode f 
setmode(fd, flags)

Set the line-end translation mode for the file descriptor *fd*. To set it to
text mode, *flags* should be :const:`os.O_TEXT`; for binary, it should be
:const:`os.O_BINARY`.



+-*/+-*/+-*/getche f 
getche()

Similar to :func:`getch`, but the keypress will be echoed if it  represents a
printable character.



+-*/+-*/+-*/locking f 
locking(fd, mode, nbytes)

Lock part of a file based on file descriptor *fd* from the C runtime.  Raises
:exc:`IOError` on failure.  The locked region of the file extends from the
current file position for *nbytes* bytes, and may continue beyond the end of the
file.  *mode* must be one of the :const:`LK_\*` constants listed below. Multiple
regions in a file may be locked at the same time, but may not overlap.  Adjacent
regions are not merged; they must be unlocked individually.



+-*/+-*/+-*/kbhit f 
kbhit()

Return true if a keypress is waiting to be read.



+-*/+-*/+-*/getwche f 
getwche()

Wide char variant of :func:`getche`, returning a Unicode value.



+-*/+-*/+-*/ungetch f 
ungetch(char)

Cause the byte string *char* to be "pushed back" into the console buffer;
it will be the next character read by :func:`getch` or :func:`getche`.



+-*/+-*/+-*/get_osfhandle f 
get_osfhandle(fd)

Return the file handle for the file descriptor *fd*.  Raises :exc:`IOError` if
*fd* is not recognized.



+-*/+-*/+-*/ungetwch f 
ungetwch(unicode_char)

Wide char variant of :func:`ungetch`, accepting a Unicode value.



+-*/+-*/+-*/getwch f 
getwch()

Wide char variant of :func:`getch`, returning a Unicode value.



+-*/+-*/+-*/open_osfhandle f 
open_osfhandle(handle, flags)

Create a C runtime file descriptor from the file handle *handle*.  The *flags*
parameter should be a bitwise OR of :const:`os.O_APPEND`, :const:`os.O_RDONLY`,
and :const:`os.O_TEXT`.  The returned file descriptor may be used as a parameter
to :func:`os.fdopen` to create a file object.



+-*/+-*/+-*/putch f 
putch(char)

Print the byte string *char* to the console without buffering.



+-*/+-*/+-*/putwch f 
putwch(unicode_char)

Wide char variant of :func:`putch`, accepting a Unicode value.



+-*/+-*/+-*/LK_NBLCK d 
LK_NBLCK

Locks the specified bytes. If the bytes cannot be locked, :exc:`IOError` is
raised.



+-*/+-*/+-*/LK_NBRLCK d 
LK_NBRLCK

Locks the specified bytes. If the bytes cannot be locked, :exc:`IOError` is
raised.



+-*/+-*/+-*/LK_LOCK d 
LK_LOCK

Locks the specified bytes. If the bytes cannot be locked, the program
immediately tries again after 1 second.  If, after 10 attempts, the bytes cannot
be locked, :exc:`IOError` is raised.



+-*/+-*/+-*/LK_RLCK d 
LK_RLCK

Locks the specified bytes. If the bytes cannot be locked, the program
immediately tries again after 1 second.  If, after 10 attempts, the bytes cannot
be locked, :exc:`IOError` is raised.



+-*/+-*/+-*/LK_UNLCK d 
LK_UNLCK

Unlocks the specified bytes, which must have been previously locked.



+-*/+-*/winreg p Routines and objects for manipulating the Windows registry.
+-*/+-*/+-*/QueryInfoKey f 
QueryInfoKey(key)

Returns information about a key, as a tuple.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

The result is a tuple of 3 items:

+-------+---------------------------------------------+
| Index | Meaning                                     |
+=======+=============================================+
| ``0`` | An integer giving the number of sub keys    |
|       | this key has.                               |
+-------+---------------------------------------------+
| ``1`` | An integer giving the number of values this |
|       | key has.                                    |
+-------+---------------------------------------------+
| ``2`` | An integer giving when the key was last     |
|       | modified (if available) as 100's of         |
|       | nanoseconds since Jan 1, 1600.              |
+-------+---------------------------------------------+



+-*/+-*/+-*/OpenKeyEx f 
OpenKeyEx()

The functionality of :func:`OpenKeyEx` is provided via :func:`OpenKey`,
by the use of default arguments.



+-*/+-*/+-*/SaveKey f 
SaveKey(key, file_name)

Saves the specified key, and all its subkeys to the specified file.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*file_name* is the name of the file to save registry data to.  This file
cannot already exist. If this filename includes an extension, it cannot be
used on file allocation table (FAT) file systems by the :meth:`LoadKey`
method.

If *key* represents a key on a remote computer, the path described by
*file_name* is relative to the remote computer. The caller of this method must
possess the :const:`SeBackupPrivilege` security privilege.  Note that
privileges are different than permissions -- see the
`Conflicts Between User Rights and Permissions documentation
<http://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx>`__
for more details.

This function passes NULL for *security_attributes* to the API.



+-*/+-*/+-*/ExpandEnvironmentStrings f 
ExpandEnvironmentStrings(str)

Expands environment variable placeholders ``%NAME%`` in strings like
:const:`REG_EXPAND_SZ`::

   >>> ExpandEnvironmentStrings('%windir%')
   'C:\\Windows'



+-*/+-*/+-*/OpenKey f 
OpenKey(key, sub_key, reserved=0, access=KEY_ALL_ACCESS)

Opens the specified key, returning a :ref:`handle object <handle-object>`.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that identifies the sub_key to open.

*res* is a reserved integer, and must be zero.  The default is zero.

*sam* is an integer that specifies an access mask that describes the desired
security access for the key.  Default is :const:`KEY_READ`.  See :ref:`Access
Rights <access-rights>` for other allowed values.

The result is a new handle to the specified key.

If the function fails, :exc:`WindowsError` is raised.

.. versionchanged:: 3.2 Allow the use of named arguments.



+-*/+-*/+-*/DeleteKey f 
DeleteKey(key, sub_key)

Deletes the specified key.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that must be a subkey of the key identified by the *key*
parameter.  This value must not be ``None``, and the key may not have subkeys.

*This method can not delete keys with subkeys.*

If the method succeeds, the entire key, including all of its values, is removed.
If the method fails, a :exc:`WindowsError` exception is raised.



+-*/+-*/+-*/CreateKeyEx f 
CreateKeyEx(key, sub_key, reserved=0, access=KEY_ALL_ACCESS)

Creates or opens the specified key, returning a
:ref:`handle object <handle-object>`.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that names the key this method opens or creates.

*res* is a reserved integer, and must be zero. The default is zero.

*sam* is an integer that specifies an access mask that describes the desired
security access for the key.  Default is :const:`KEY_ALL_ACCESS`.  See
:ref:`Access Rights <access-rights>` for other allowed values.

If *key* is one of the predefined keys, *sub_key* may be ``None``. In that
case, the handle returned is the same key handle passed in to the function.

If the key already exists, this function opens the existing key.

The return value is the handle of the opened key. If the function fails, a
:exc:`WindowsError` exception is raised.

.. versionadded:: 3.2



+-*/+-*/+-*/QueryReflectionKey f 
QueryReflectionKey(key)

Determines the reflection state for the specified key.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

Returns ``True`` if reflection is disabled.

Will generally raise :exc:`NotImplemented` if executed on a 32-bit
operating system.



+-*/+-*/+-*/DeleteKeyEx f 
DeleteKeyEx(key, sub_key, access=KEY_ALL_ACCESS, reserved=0)

Deletes the specified key.

.. note::
   The :func:`DeleteKeyEx` function is implemented with the RegDeleteKeyEx
   Windows API function, which is specific to 64-bit versions of Windows.
   See the `RegDeleteKeyEx documentation
   <http://msdn.microsoft.com/en-us/library/ms724847%28VS.85%29.aspx>`__.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that must be a subkey of the key identified by the
*key* parameter. This value must not be ``None``, and the key may not have
subkeys.

*res* is a reserved integer, and must be zero. The default is zero.

*sam* is an integer that specifies an access mask that describes the desired
security access for the key.  Default is :const:`KEY_ALL_ACCESS`.  See
:ref:`Access Rights <access-rights>` for other allowed values.

*This method can not delete keys with subkeys.*

If the method succeeds, the entire key, including all of its values, is
removed. If the method fails, a :exc:`WindowsError` exception is raised.

On unsupported Windows versions, :exc:`NotImplementedError` is raised.

.. versionadded:: 3.2



+-*/+-*/+-*/FlushKey f 
FlushKey(key)

Writes all the attributes of a key to the registry.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

It is not necessary to call :func:`FlushKey` to change a key. Registry changes are
flushed to disk by the registry using its lazy flusher.  Registry changes are
also flushed to disk at system shutdown.  Unlike :func:`CloseKey`, the
:func:`FlushKey` method returns only when all the data has been written to the
registry. An application should only call :func:`FlushKey` if it requires
absolute certainty that registry changes are on disk.

.. note::

   If you don't know whether a :func:`FlushKey` call is required, it probably
   isn't.



+-*/+-*/+-*/DeleteValue f 
DeleteValue(key, value)

Removes a named value from a registry key.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*value* is a string that identifies the value to remove.



+-*/+-*/+-*/QueryValue f 
QueryValue(key, sub_key)

Retrieves the unnamed value for a key, as a string.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that holds the name of the subkey with which the value is
associated.  If this parameter is ``None`` or empty, the function retrieves the
value set by the :func:`SetValue` method for the key identified by *key*.

Values in the registry have name, type, and data components. This method
retrieves the data for a key's first value that has a NULL name. But the
underlying API call doesn't return the type, so always use
:func:`QueryValueEx` if possible.



+-*/+-*/+-*/ConnectRegistry f 
ConnectRegistry(computer_name, key)

Establishes a connection to a predefined registry handle on another computer,
and returns a :ref:`handle object <handle-object>`.

*computer_name* is the name of the remote computer, of the form
``r"\\computername"``.  If ``None``, the local computer is used.

*key* is the predefined handle to connect to.

The return value is the handle of the opened key. If the function fails, a
:exc:`WindowsError` exception is raised.



+-*/+-*/+-*/CloseKey f 
CloseKey(hkey)

Closes a previously opened registry key.  The *hkey* argument specifies a
previously opened key.

.. note::

   If *hkey* is not closed using this method (or via :meth:`hkey.Close()
   <PyHKEY.Close>`), it is closed when the *hkey* object is destroyed by
   Python.



+-*/+-*/+-*/SetValueEx f 
SetValueEx(key, value_name, reserved, type, value)

Stores data in the value field of an open registry key.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*value_name* is a string that names the subkey with which the value is
associated.

*type* is an integer that specifies the type of the data. See
:ref:`Value Types <value-types>` for the available types.

*reserved* can be anything -- zero is always passed to the API.

*value* is a string that specifies the new value.

This method can also set additional value and type information for the specified
key.  The key identified by the key parameter must have been opened with
:const:`KEY_SET_VALUE` access.

To open the key, use the :func:`CreateKey` or :func:`OpenKey` methods.

Value lengths are limited by available memory. Long values (more than 2048
bytes) should be stored as files with the filenames stored in the configuration
registry.  This helps the registry perform efficiently.



+-*/+-*/+-*/CreateKey f 
CreateKey(key, sub_key)

Creates or opens the specified key, returning a
:ref:`handle object <handle-object>`.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that names the key this method opens or creates.

If *key* is one of the predefined keys, *sub_key* may be ``None``. In that
case, the handle returned is the same key handle passed in to the function.

If the key already exists, this function opens the existing key.

The return value is the handle of the opened key. If the function fails, a
:exc:`WindowsError` exception is raised.



+-*/+-*/+-*/DisableReflectionKey f 
DisableReflectionKey(key)

Disables registry reflection for 32-bit processes running on a 64-bit
operating system.

*key* is an already open key, or one of the predefined :ref:`HKEY_* constants
<hkey-constants>`.

Will generally raise :exc:`NotImplemented` if executed on a 32-bit operating
system.

If the key is not on the reflection list, the function succeeds but has no
effect.  Disabling reflection for a key does not affect reflection of any
subkeys.



+-*/+-*/+-*/LoadKey f 
LoadKey(key, sub_key, file_name)

Creates a subkey under the specified key and stores registration information
from a specified file into that subkey.

*key* is a handle returned by :func:`ConnectRegistry` or one of the constants
:const:`HKEY_USERS` or :const:`HKEY_LOCAL_MACHINE`.

*sub_key* is a string that identifies the subkey to load.

*file_name* is the name of the file to load registry data from. This file must
have been created with the :func:`SaveKey` function. Under the file allocation
table (FAT) file system, the filename may not have an extension.

A call to :func:`LoadKey` fails if the calling process does not have the
:const:`SE_RESTORE_PRIVILEGE` privilege.  Note that privileges are different
from permissions -- see the `RegLoadKey documentation
<http://msdn.microsoft.com/en-us/library/ms724889%28v=VS.85%29.aspx>`__ for
more details.

If *key* is a handle returned by :func:`ConnectRegistry`, then the path
specified in *file_name* is relative to the remote computer.



+-*/+-*/+-*/EnumKey f 
EnumKey(key, index)

Enumerates subkeys of an open registry key, returning a string.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*index* is an integer that identifies the index of the key to retrieve.

The function retrieves the name of one subkey each time it is called.  It is
typically called repeatedly until a :exc:`WindowsError` exception is
raised, indicating, no more values are available.



+-*/+-*/+-*/QueryValueEx f 
QueryValueEx(key, value_name)

Retrieves the type and data for a specified value name associated with
an open registry key.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*value_name* is a string indicating the value to query.

The result is a tuple of 2 items:

+-------+-----------------------------------------+
| Index | Meaning                                 |
+=======+=========================================+
| ``0`` | The value of the registry item.         |
+-------+-----------------------------------------+
| ``1`` | An integer giving the registry type for |
|       | this value (see table in docs for       |
|       | :meth:`SetValueEx`)                     |
+-------+-----------------------------------------+



+-*/+-*/+-*/SetValue f 
SetValue(key, sub_key, type, value)

Associates a value with a specified key.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*sub_key* is a string that names the subkey with which the value is associated.

*type* is an integer that specifies the type of the data. Currently this must be
:const:`REG_SZ`, meaning only strings are supported.  Use the :func:`SetValueEx`
function for support for other data types.

*value* is a string that specifies the new value.

If the key specified by the *sub_key* parameter does not exist, the SetValue
function creates it.

Value lengths are limited by available memory. Long values (more than 2048
bytes) should be stored as files with the filenames stored in the configuration
registry.  This helps the registry perform efficiently.

The key identified by the *key* parameter must have been opened with
:const:`KEY_SET_VALUE` access.



+-*/+-*/+-*/EnumValue f 
EnumValue(key, index)

Enumerates values of an open registry key, returning a tuple.

*key* is an already open key, or one of the predefined
:ref:`HKEY_* constants <hkey-constants>`.

*index* is an integer that identifies the index of the value to retrieve.

The function retrieves the name of one subkey each time it is called. It is
typically called repeatedly, until a :exc:`WindowsError` exception is
raised, indicating no more values.

The result is a tuple of 3 items:

+-------+--------------------------------------------+
| Index | Meaning                                    |
+=======+============================================+
| ``0`` | A string that identifies the value name    |
+-------+--------------------------------------------+
| ``1`` | An object that holds the value data, and   |
|       | whose type depends on the underlying       |
|       | registry type                              |
+-------+--------------------------------------------+
| ``2`` | An integer that identifies the type of the |
|       | value data (see table in docs for          |
|       | :meth:`SetValueEx`)                        |
+-------+--------------------------------------------+



+-*/+-*/+-*/EnableReflectionKey f 
EnableReflectionKey(key)

Restores registry reflection for the specified disabled key.

*key* is an already open key, or one of the predefined :ref:`HKEY_* constants
<hkey-constants>`.

Will generally raise :exc:`NotImplemented` if executed on a 32-bit operating
system.

Restoring reflection for a key does not affect reflection of any subkeys.



+-*/+-*/+-*/REG_DWORD_BIG_ENDIAN d 
REG_DWORD_BIG_ENDIAN

A 32-bit number in big-endian format.


+-*/+-*/+-*/REG_SZ d 
REG_SZ

A null-terminated string.



+-*/+-*/+-*/REG_BINARY d 
REG_BINARY

Binary data in any form.


+-*/+-*/+-*/REG_EXPAND_SZ d 
REG_EXPAND_SZ

Null-terminated string containing references to environment
variables (``%PATH%``).


+-*/+-*/+-*/REG_FULL_RESOURCE_DESCRIPTOR d 
REG_FULL_RESOURCE_DESCRIPTOR

A hardware setting.


+-*/+-*/+-*/KEY_ENUMERATE_SUB_KEYS d 
KEY_ENUMERATE_SUB_KEYS

Required to enumerate the subkeys of a registry key.


+-*/+-*/+-*/KEY_CREATE_SUB_KEY d 
KEY_CREATE_SUB_KEY

Required to create a subkey of a registry key.


+-*/+-*/+-*/KEY_NOTIFY d 
KEY_NOTIFY

Required to request change notifications for a registry key or for
subkeys of a registry key.


+-*/+-*/+-*/KEY_WRITE d 
KEY_WRITE

Combines the STANDARD_RIGHTS_WRITE, :const:`KEY_SET_VALUE`, and
:const:`KEY_CREATE_SUB_KEY` access rights.


+-*/+-*/+-*/KEY_ALL_ACCESS d 
KEY_ALL_ACCESS

Combines the STANDARD_RIGHTS_REQUIRED, :const:`KEY_QUERY_VALUE`,
:const:`KEY_SET_VALUE`, :const:`KEY_CREATE_SUB_KEY`,
:const:`KEY_ENUMERATE_SUB_KEYS`, :const:`KEY_NOTIFY`,
and :const:`KEY_CREATE_LINK` access rights.


+-*/+-*/+-*/REG_LINK d 
REG_LINK

A Unicode symbolic link.


+-*/+-*/+-*/HKEY_PERFORMANCE_DATA d 
HKEY_PERFORMANCE_DATA

Registry entries subordinate to this key allow you to access
performance data. The data is not actually stored in the registry;
the registry functions cause the system to collect the data from
its source.



+-*/+-*/+-*/REG_DWORD d 
REG_DWORD

32-bit number.


+-*/+-*/+-*/KEY_WOW64_64KEY d 
KEY_WOW64_64KEY

Indicates that an application on 64-bit Windows should operate on
the 64-bit registry view.


+-*/+-*/+-*/KEY_QUERY_VALUE d 
KEY_QUERY_VALUE

Required to query the values of a registry key.


+-*/+-*/+-*/HKEY_USERS d 
HKEY_USERS

Registry entries subordinate to this key define the default user
configuration for new users on the local computer and the user
configuration for the current user.


+-*/+-*/+-*/HKEY_CURRENT_CONFIG d 
HKEY_CURRENT_CONFIG

Contains information about the current hardware profile of the
local computer system.


+-*/+-*/+-*/KEY_READ d 
KEY_READ

Combines the STANDARD_RIGHTS_READ, :const:`KEY_QUERY_VALUE`,
:const:`KEY_ENUMERATE_SUB_KEYS`, and :const:`KEY_NOTIFY` values.


+-*/+-*/+-*/KEY_EXECUTE d 
KEY_EXECUTE

Equivalent to :const:`KEY_READ`.


+-*/+-*/+-*/KEY_WOW64_32KEY d 
KEY_WOW64_32KEY

Indicates that an application on 64-bit Windows should operate on
the 32-bit registry view.



+-*/+-*/+-*/REG_MULTI_SZ d 
REG_MULTI_SZ

A sequence of null-terminated strings, terminated by two null characters.
(Python handles this termination automatically.)


+-*/+-*/+-*/KEY_SET_VALUE d 
KEY_SET_VALUE

Required to create, delete, or set a registry value.


+-*/+-*/+-*/REG_DWORD_LITTLE_ENDIAN d 
REG_DWORD_LITTLE_ENDIAN

A 32-bit number in little-endian format.


+-*/+-*/+-*/HKEY_DYN_DATA d 
HKEY_DYN_DATA

This key is not used in versions of Windows after 98.



+-*/+-*/+-*/HKEY_CURRENT_USER d 
HKEY_CURRENT_USER

Registry entries subordinate to this key define the preferences of
the current user. These preferences include the settings of
environment variables, data about program groups, colors, printers,
network connections, and application preferences.


+-*/+-*/+-*/HKEY_LOCAL_MACHINE d 
HKEY_LOCAL_MACHINE

Registry entries subordinate to this key define the physical state
of the computer, including data about the bus type, system memory,
and installed hardware and software.


+-*/+-*/+-*/REG_RESOURCE_REQUIREMENTS_LIST d 
REG_RESOURCE_REQUIREMENTS_LIST

A hardware resource list.


+-*/+-*/+-*/HKEY_CLASSES_ROOT d 
HKEY_CLASSES_ROOT

Registry entries subordinate to this key define types (or classes) of
documents and the properties associated with those types. Shell and
COM applications use the information stored under this key.



+-*/+-*/+-*/REG_NONE d 
REG_NONE

No defined value type.


+-*/+-*/+-*/KEY_CREATE_LINK d 
KEY_CREATE_LINK

Reserved for system use.



+-*/+-*/+-*/REG_RESOURCE_LIST d 
REG_RESOURCE_LIST

A device-driver resource list.


+-*/+-*/+-*/PyHKEY _ 
+-*/+-*/+-*/+-*/Close m 
Close()

Closes the underlying Windows handle.

If the handle is already closed, no error is raised.



+-*/+-*/+-*/+-*/__enter__ m 
__enter__()

The HKEY object implements :meth:`~object.__enter__` and
:meth:`~object.__exit__` and thus supports the context protocol for the
:keyword:`with` statement::

   with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
       ...  # work with key

will automatically close *key* when control leaves the :keyword:`with` block.




+-*/+-*/+-*/+-*/__exit__ m 
__exit__(\*exc_info)

The HKEY object implements :meth:`~object.__enter__` and
:meth:`~object.__exit__` and thus supports the context protocol for the
:keyword:`with` statement::

   with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
       ...  # work with key

will automatically close *key* when control leaves the :keyword:`with` block.




+-*/+-*/+-*/+-*/Detach m 
Detach()

Detaches the Windows handle from the handle object.

The result is an integer that holds the value of the handle before it is
detached.  If the handle is already detached or closed, this will return
zero.

After calling this function, the handle is effectively invalidated, but the
handle is not closed.  You would call this function when you need the
underlying Win32 handle to exist beyond the lifetime of the handle object.


+-*/+-*/winsound p Access to the sound-playing machinery for Windows.
+-*/+-*/+-*/Beep f 
Beep(frequency, duration)

Beep the PC's speaker. The *frequency* parameter specifies frequency, in hertz,
of the sound, and must be in the range 37 through 32,767. The *duration*
parameter specifies the number of milliseconds the sound should last.  If the
system is not able to beep the speaker, :exc:`RuntimeError` is raised.



+-*/+-*/+-*/PlaySound f 
PlaySound(sound, flags)

Call the underlying :c:func:`PlaySound` function from the Platform API.  The
*sound* parameter may be a filename, audio data as a string, or ``None``.  Its
interpretation depends on the value of *flags*, which can be a bitwise ORed
combination of the constants described below. If the *sound* parameter is
``None``, any currently playing waveform sound is stopped. If the system
indicates an error, :exc:`RuntimeError` is raised.



+-*/+-*/+-*/MessageBeep f 
MessageBeep(type=MB_OK)

Call the underlying :c:func:`MessageBeep` function from the Platform API.  This
plays a sound as specified in the registry.  The *type* argument specifies which
sound to play; possible values are ``-1``, ``MB_ICONASTERISK``,
``MB_ICONEXCLAMATION``, ``MB_ICONHAND``, ``MB_ICONQUESTION``, and ``MB_OK``, all
described below.  The value ``-1`` produces a "simple beep"; this is the final
fallback if a sound cannot be played otherwise.



+-*/+-*/+-*/MB_ICONASTERISK d 
MB_ICONASTERISK

Play the ``SystemDefault`` sound.



+-*/+-*/+-*/SND_ASYNC d 
SND_ASYNC

Return immediately, allowing sounds to play asynchronously.



+-*/+-*/+-*/SND_NOWAIT d 
SND_NOWAIT

Return immediately if the sound driver is busy.



+-*/+-*/+-*/SND_MEMORY d 
SND_MEMORY

The *sound* parameter to :func:`PlaySound` is a memory image of a WAV file, as a
string.

.. note::

   This module does not support playing from a memory image asynchronously, so a
   combination of this flag and :const:`SND_ASYNC` will raise :exc:`RuntimeError`.



+-*/+-*/+-*/SND_PURGE d 
SND_PURGE

Stop playing all instances of the specified sound.

.. note::

   This flag is not supported on modern Windows platforms.



+-*/+-*/+-*/SND_ALIAS d 
SND_ALIAS

The *sound* parameter is a sound association name from the registry.  If the
registry contains no such name, play the system default sound unless
:const:`SND_NODEFAULT` is also specified. If no default sound is registered,
raise :exc:`RuntimeError`. Do not use with :const:`SND_FILENAME`.

All Win32 systems support at least the following; most systems support many
more:

+--------------------------+----------------------------------------+
| :func:`PlaySound` *name* | Corresponding Control Panel Sound name |
+==========================+========================================+
| ``'SystemAsterisk'``     | Asterisk                               |
+--------------------------+----------------------------------------+
| ``'SystemExclamation'``  | Exclamation                            |
+--------------------------+----------------------------------------+
| ``'SystemExit'``         | Exit Windows                           |
+--------------------------+----------------------------------------+
| ``'SystemHand'``         | Critical Stop                          |
+--------------------------+----------------------------------------+
| ``'SystemQuestion'``     | Question                               |
+--------------------------+----------------------------------------+

For example::

   import winsound
   # Play Windows exit sound.
   winsound.PlaySound("SystemExit", winsound.SND_ALIAS)

   # Probably play Windows default sound, if any is registered (because
   # "*" probably isn't the registered name of any sound).
   winsound.PlaySound("*", winsound.SND_ALIAS)



+-*/+-*/+-*/MB_OK d 
MB_OK

Play the ``SystemDefault`` sound.



+-*/+-*/+-*/SND_FILENAME d 
SND_FILENAME

The *sound* parameter is the name of a WAV file. Do not use with
:const:`SND_ALIAS`.



+-*/+-*/+-*/SND_NODEFAULT d 
SND_NODEFAULT

If the specified sound cannot be found, do not play the system default sound.



+-*/+-*/+-*/SND_NOSTOP d 
SND_NOSTOP

Do not interrupt sounds currently playing.



+-*/+-*/+-*/MB_ICONQUESTION d 
MB_ICONQUESTION

Play the ``SystemQuestion`` sound.



+-*/+-*/+-*/SND_LOOP d 
SND_LOOP

Play the sound repeatedly.  The :const:`SND_ASYNC` flag must also be used to
avoid blocking.  Cannot be used with :const:`SND_MEMORY`.



+-*/+-*/+-*/MB_ICONHAND d 
MB_ICONHAND

Play the ``SystemHand`` sound.



+-*/+-*/+-*/MB_ICONEXCLAMATION d 
MB_ICONEXCLAMATION

Play the ``SystemExclamation`` sound.



+-*/unix _ Unix Specific Services
+-*/+-*/crypt p The crypt() function used to check Unix passwords.
+-*/+-*/+-*/crypt f 
crypt(word, salt)

*word* will usually be a user's password as typed at a prompt or  in a graphical
interface.  *salt* is usually a random two-character string which will be used
to perturb the DES algorithm in one of 4096 ways.  The characters in *salt* must
be in the set ``[./a-zA-Z0-9]``.  Returns the hashed password as a string, which
will be composed of characters from the same alphabet as the salt (the first two
characters represent the salt itself).

.. index:: single: crypt(3)

Since a few :manpage:`crypt(3)` extensions allow different values, with
different sizes in the *salt*, it is recommended to use  the full crypted
password as salt when checking for a password.


+-*/+-*/fcntl p The fcntl() and ioctl() system calls.
      O_RDONLY       只读(O_RDONLY,O_WRONLY,O_RDWR必须有一个且只能有一个)
      O_WRONLY       只写(O_RDONLY,O_WRONLY,O_RDWR必须有一个且只能有一个)
      O_RDWR         读写(O_RDONLY,O_WRONLY,O_RDWR必须有一个且只能有一个)
      O_APPEND       附加到文件结尾
              (打开时指针位于文件结尾,每次写操作都会先把指针移到文件尾部)
      O_NONBLOCK     不阻塞(unix)(file为fifo或字符或块文件)
      O_RSYNC        同步读取(unix) 
      O_DSYNC        同步写入(unix)
      O_SYNC         同步更新(unix)(每次更改都会更新文件时间) 
      O_ASYNC        异步(mac)
+-*/+-*/+-*/fcntl f 
fcntl(fd, op[, arg])
  fd:  文件描述符
  op:
      F_DUPFD 复制文件描述符
      F_GETFD

Perform the requested operation on file descriptor *fd* (file objects providing
a :meth:`fileno` method are accepted as well). The operation is defined by *op*
and is operating system dependent.  These codes are also found in the
:mod:`fcntl` module. The argument *arg* is optional, and defaults to the integer
value ``0``.  When present, it can either be an integer value, or a string.
With the argument missing or an integer value, the return value of this function
is the integer return value of the C :c:func:`fcntl` call.  When the argument is
a string it represents a binary structure, e.g. created by :func:`struct.pack`.
The binary data is copied to a buffer whose address is passed to the C
:c:func:`fcntl` call.  The return value after a successful call is the contents
of the buffer, converted to a string object.  The length of the returned string
will be the same as the length of the *arg* argument.  This is limited to 1024
bytes.  If the information returned in the buffer by the operating system is
larger than 1024 bytes, this is most likely to result in a segmentation
violation or a more subtle data corruption.

If the :c:func:`fcntl` fails, an :exc:`IOError` is raised.



+-*/+-*/+-*/ioctl f 
ioctl(fd, op[, arg[, mutate_flag]])

This function is identical to the :func:`fcntl` function, except that the
argument handling is even more complicated.

The op parameter is limited to values that can fit in 32-bits.

The parameter *arg* can be one of an integer, absent (treated identically to the
integer ``0``), an object supporting the read-only buffer interface (most likely
a plain Python string) or an object supporting the read-write buffer interface.

In all but the last case, behaviour is as for the :func:`fcntl` function.

If a mutable buffer is passed, then the behaviour is determined by the value of
the *mutate_flag* parameter.

If it is false, the buffer's mutability is ignored and behaviour is as for a
read-only buffer, except that the 1024 byte limit mentioned above is avoided --
so long as the buffer you pass is as least as long as what the operating system
wants to put there, things should work.

If *mutate_flag* is true (the default), then the buffer is (in effect) passed
to the underlying :func:`ioctl` system call, the latter's return code is
passed back to the calling Python, and the buffer's new contents reflect the
action of the :func:`ioctl`.  This is a slight simplification, because if the
supplied buffer is less than 1024 bytes long it is first copied into a static
buffer 1024 bytes long which is then passed to :func:`ioctl` and copied back
into the supplied buffer.

An example::

   >>> import array, fcntl, struct, termios, os
   >>> os.getpgrp()
   13341
   >>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, "  "))[0]
   13341
   >>> buf = array.array('h', [0])
   >>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)
   0
   >>> buf
   array('h', [13341])



+-*/+-*/+-*/lockf f 
lockf(fd, operation, [length, [start, [whence]]])

This is essentially a wrapper around the :func:`fcntl` locking calls.  *fd* is
the file descriptor of the file to lock or unlock, and *operation* is one of the
following values:

* :const:`LOCK_UN` -- unlock
* :const:`LOCK_SH` -- acquire a shared lock
* :const:`LOCK_EX` -- acquire an exclusive lock

When *operation* is :const:`LOCK_SH` or :const:`LOCK_EX`, it can also be
bitwise ORed with :const:`LOCK_NB` to avoid blocking on lock acquisition.
If :const:`LOCK_NB` is used and the lock cannot be acquired, an
:exc:`IOError` will be raised and the exception will have an *errno*
attribute set to :const:`EACCES` or :const:`EAGAIN` (depending on the
operating system; for portability, check for both values).  On at least some
systems, :const:`LOCK_EX` can only be used if the file descriptor refers to a
file opened for writing.

*length* is the number of bytes to lock, *start* is the byte offset at which the
lock starts, relative to *whence*, and *whence* is as with :func:`fileobj.seek`,
specifically:

* :const:`0` -- relative to the start of the file (:const:`SEEK_SET`)
* :const:`1` -- relative to the current buffer position (:const:`SEEK_CUR`)
* :const:`2` -- relative to the end of the file (:const:`SEEK_END`)

The default for *start* is 0, which means to start at the beginning of the file.
The default for *length* is 0 which means to lock to the end of the file.  The
default for *whence* is also 0.


+-*/+-*/+-*/flock f 
flock(fd, op)

Perform the lock operation *op* on file descriptor *fd* (file objects providing
a :meth:`fileno` method are accepted as well). See the Unix manual
:manpage:`flock(2)` for details.  (On some systems, this function is emulated
using :c:func:`fcntl`.)



+-*/+-*/grp p group模块(unix)
+-*/+-*/+-*/struct_group c
+-*/+-*/+-*/+-*/gr_name d 组名
+-*/+-*/+-*/+-*/gr_passwd d
+-*/+-*/+-*/+-*/gr_gid d 组id
+-*/+-*/+-*/+-*/gr_mem d 该组所有用户名列表
+-*/+-*/+-*/getgrall f 返回所有组列表，元素为struct_group
+-*/+-*/+-*/getgrnam f 由组名获取组信息,返回struct_group命名元组
getgrnam(name)
  未找到则报错
+-*/+-*/+-*/getgrgid f 由组id获取组信息,返回struct_group命名元组
getgrgid(gid)
  未找到则报错
+-*/+-*/pwd p passwd模块(unix)
+-*/+-*/+-*/struct_passwd c
+-*/+-*/+-*/+-*/pw_name d 登录名
+-*/+-*/+-*/+-*/pw_passwd d 登陆密码
+-*/+-*/+-*/+-*/pw_uid d 用户id
+-*/+-*/+-*/+-*/pw_gid d 组id
+-*/+-*/+-*/+-*/pw_gecos d 附加信息(通常用于finger)
+-*/+-*/+-*/+-*/pw_dir d 用户目录
+-*/+-*/+-*/+-*/pw_shell d 使用的shell
+-*/+-*/+-*/getpwall f 返回所有用户列表,元素为struct_passwd
+-*/+-*/+-*/getpwnam f 由用户名获取其登录设置,返回struct_passwd命名元组
getpwnam(name)
  未找到则报错
+-*/+-*/+-*/getpwuid f 由用户id获取其登录设置,返回struct_passwd命名元组
getpwuid(uid)
  未找到则报错
+-*/+-*/spwd p shadow模块(unix)
+-*/+-*/+-*/struct_spwd c
+-*/+-*/+-*/+-*/sp_nam d 用户名
+-*/+-*/+-*/+-*/sp_pwd d 加密口令
+-*/+-*/+-*/+-*/sp_lstchg d 上次更改的时间(1970开始的天数)
+-*/+-*/+-*/+-*/sp_min d 至少多少天后才能改密码
+-*/+-*/+-*/+-*/sp_max d 最多多少天必须改密码
+-*/+-*/+-*/+-*/sp_warn d 离到期多少天开始警告(-1无效)
+-*/+-*/+-*/+-*/sp_inact d 最多不活动天数(-1无效)
+-*/+-*/+-*/+-*/sp_expire d 到期时间(1970开始的天数)(-1无效)
+-*/+-*/+-*/+-*/sp_flag d 保留字段
+-*/+-*/+-*/getspnam f 由用户名获得其账户信息,返回struct_spwd命名元组
getspnam(name)
  只有超级用户才能有效获得结果
  未找到则报错
+-*/+-*/+-*/getspall f 返回所有账户信息列表,其元素为struct_spwd
getspall()
  只有超级用户才能有效获得结果
+-*/+-*/nis p Interface to Sun's NIS (Yellow Pages) library.
+-*/+-*/+-*/maps f 
maps([domain=default_domain])

Return a list of all valid maps.

The *domain* argument allows to override the NIS domain used for the lookup. If
unspecified, lookup is in the default NIS domain.



+-*/+-*/+-*/get_default_domain f 
get_default_domain()

Return the system default NIS domain.



+-*/+-*/+-*/match f 
match(key, mapname[, domain=default_domain])

Return the match for *key* in map *mapname*, or raise an error
(:exc:`nis.error`) if there is none. Both should be strings, *key* is 8-bit
clean. Return value is an arbitrary array of bytes (may contain ``NULL`` and
other joys).

Note that *mapname* is first checked if it is an alias to another name.

The *domain* argument allows to override the NIS domain used for the lookup. If
unspecified, lookup is in the default NIS domain.



+-*/+-*/+-*/cat f 
cat(mapname[, domain=default_domain])

Return a dictionary mapping *key* to *value* such that ``match(key,
mapname)==value``. Note that both keys and values of the dictionary are
arbitrary arrays of bytes.

Note that *mapname* is first checked if it is an alias to another name.

The *domain* argument allows to override the NIS domain used for the lookup. If
unspecified, lookup is in the default NIS domain.



+-*/+-*/+-*/error e 
error

An error raised when a NIS function returns an error code.



+-*/+-*/pipes p A Python interface to Unix shell pipelines.
+-*/+-*/+-*/Template c 
Template()

An abstraction of a pipeline.


+-*/+-*/+-*/+-*/reset m 
reset()

Restore a pipeline template to its initial state.



+-*/+-*/+-*/+-*/clone m 
clone()

Return a new, equivalent, pipeline template.



+-*/+-*/+-*/+-*/prepend m 
prepend(cmd, kind)

Add a new action at the beginning. See :meth:`append` for explanations of the
arguments.



+-*/+-*/+-*/+-*/debug m 
debug(flag)

If *flag* is true, turn debugging on. Otherwise, turn debugging off. When
debugging is on, commands to be executed are printed, and the shell is given
``set -x`` command to be more verbose.



+-*/+-*/+-*/+-*/copy m 
copy(infile, outfile)

Copy *infile* to *outfile* through the pipe.



+-*/+-*/+-*/+-*/open m 
open(file, mode)

Return a file-like object, open to *file*, but read from or written to by the
pipeline.  Note that only one of ``'r'``, ``'w'`` may be given.



+-*/+-*/+-*/+-*/append m 
append(cmd, kind)

Append a new action at the end. The *cmd* variable must be a valid bourne shell
command. The *kind* variable consists of two letters.

The first letter can be either of ``'-'`` (which means the command reads its
standard input), ``'f'`` (which means the commands reads a given file on the
command line) or ``'.'`` (which means the commands reads no input, and hence
must be first.)

Similarly, the second letter can be either of ``'-'`` (which means  the command
writes to standard output), ``'f'`` (which means the  command writes a file on
the command line) or ``'.'`` (which means the command does not write anything,
and hence must be last.)



+-*/+-*/pty p Pseudo-Terminal Handling for Linux.
+-*/+-*/+-*/fork f 
fork()

Fork. Connect the child's controlling terminal to a pseudo-terminal. Return
value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is
*invalid*. The parent's return value is the *pid* of the child, and *fd* is a
file descriptor connected to the child's controlling terminal (and also to the
child's standard input and output).



+-*/+-*/+-*/spawn f 
spawn(argv[, master_read[, stdin_read]])

Spawn a process, and connect its controlling terminal with the current
process's standard io. This is often used to baffle programs which insist on
reading from the controlling terminal.

The functions *master_read* and *stdin_read* should be functions which read from
a file descriptor. The defaults try to read 1024 bytes each time they are
called.



+-*/+-*/+-*/openpty f 
openpty()

Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or
emulation code for generic Unix systems. Return a pair of file descriptors
``(master, slave)``, for the master and the slave end, respectively.



+-*/+-*/resource p An interface to provide resource usage information on the current process.
+-*/+-*/+-*/getpagesize f 
getpagesize()

Returns the number of bytes in a system page. (This need not be the same as the
hardware page size.) This function is useful for determining the number of bytes
of memory a process is using. The third element of the tuple returned by
:func:`getrusage` describes memory usage in pages; multiplying by page size
produces number of bytes.


+-*/+-*/+-*/getrlimit f 
getrlimit(resource)

Returns a tuple ``(soft, hard)`` with the current soft and hard limits of
*resource*. Raises :exc:`ValueError` if an invalid resource is specified, or
:exc:`error` if the underlying system call fails unexpectedly.



+-*/+-*/+-*/getrusage f 
getrusage(who)

This function returns an object that describes the resources consumed by either
the current process or its children, as specified by the *who* parameter.  The
*who* parameter should be specified using one of the :const:`RUSAGE_\*`
constants described below.

The fields of the return value each describe how a particular system resource
has been used, e.g. amount of time spent running is user mode or number of times
the process was swapped out of main memory. Some values are dependent on the
clock tick internal, e.g. the amount of memory the process is using.

For backward compatibility, the return value is also accessible as a tuple of 16
elements.

The fields :attr:`ru_utime` and :attr:`ru_stime` of the return value are
floating point values representing the amount of time spent executing in user
mode and the amount of time spent executing in system mode, respectively. The
remaining values are integers. Consult the :manpage:`getrusage(2)` man page for
detailed information about these values. A brief summary is presented here:

+--------+---------------------+-------------------------------+
| Index  | Field               | Resource                      |
+========+=====================+===============================+
| ``0``  | :attr:`ru_utime`    | time in user mode (float)     |
+--------+---------------------+-------------------------------+
| ``1``  | :attr:`ru_stime`    | time in system mode (float)   |
+--------+---------------------+-------------------------------+
| ``2``  | :attr:`ru_maxrss`   | maximum resident set size     |
+--------+---------------------+-------------------------------+
| ``3``  | :attr:`ru_ixrss`    | shared memory size            |
+--------+---------------------+-------------------------------+
| ``4``  | :attr:`ru_idrss`    | unshared memory size          |
+--------+---------------------+-------------------------------+
| ``5``  | :attr:`ru_isrss`    | unshared stack size           |
+--------+---------------------+-------------------------------+
| ``6``  | :attr:`ru_minflt`   | page faults not requiring I/O |
+--------+---------------------+-------------------------------+
| ``7``  | :attr:`ru_majflt`   | page faults requiring I/O     |
+--------+---------------------+-------------------------------+
| ``8``  | :attr:`ru_nswap`    | number of swap outs           |
+--------+---------------------+-------------------------------+
| ``9``  | :attr:`ru_inblock`  | block input operations        |
+--------+---------------------+-------------------------------+
| ``10`` | :attr:`ru_oublock`  | block output operations       |
+--------+---------------------+-------------------------------+
| ``11`` | :attr:`ru_msgsnd`   | messages sent                 |
+--------+---------------------+-------------------------------+
| ``12`` | :attr:`ru_msgrcv`   | messages received             |
+--------+---------------------+-------------------------------+
| ``13`` | :attr:`ru_nsignals` | signals received              |
+--------+---------------------+-------------------------------+
| ``14`` | :attr:`ru_nvcsw`    | voluntary context switches    |
+--------+---------------------+-------------------------------+
| ``15`` | :attr:`ru_nivcsw`   | involuntary context switches  |
+--------+---------------------+-------------------------------+

This function will raise a :exc:`ValueError` if an invalid *who* parameter is
specified. It may also raise :exc:`error` exception in unusual circumstances.



+-*/+-*/+-*/setrlimit f 
setrlimit(resource, limits)

Sets new limits of consumption of *resource*. The *limits* argument must be a
tuple ``(soft, hard)`` of two integers describing the new limits. A value of
``-1`` can be used to specify the maximum possible upper limit.

Raises :exc:`ValueError` if an invalid resource is specified, if the new soft
limit exceeds the hard limit, or if a process tries to raise its hard limit
(unless the process has an effective UID of super-user).  Can also raise
:exc:`error` if the underlying system call fails.


+-*/+-*/+-*/RUSAGE_BOTH d 
RUSAGE_BOTH

Pass to :func:`getrusage` to request resources consumed by both the current
process and child processes.  May not be available on all systems.



+-*/+-*/+-*/RUSAGE_THREAD d 
RUSAGE_THREAD

Pass to :func:`getrusage` to request resources consumed by the current
thread.  May not be available on all systems.

.. versionadded:: 3.2


+-*/+-*/+-*/RUSAGE_CHILDREN d 
RUSAGE_CHILDREN

Pass to :func:`getrusage` to request resources consumed by child processes
of the calling process which have been terminated and waited for.



+-*/+-*/+-*/RLIMIT_RSS d 
RLIMIT_RSS

The maximum resident set size that should be made available to the process.



+-*/+-*/+-*/RLIMIT_FSIZE d 
RLIMIT_FSIZE

The maximum size of a file which the process may create.  This only affects the
stack of the main thread in a multi-threaded process.



+-*/+-*/+-*/RLIMIT_CORE d 
RLIMIT_CORE

The maximum size (in bytes) of a core file that the current process can create.
This may result in the creation of a partial core file if a larger core would be
required to contain the entire process image.



+-*/+-*/+-*/RLIMIT_DATA d 
RLIMIT_DATA

The maximum size (in bytes) of the process's heap.



+-*/+-*/+-*/RLIMIT_MEMLOCK d 
RLIMIT_MEMLOCK

The maximum address space which may be locked in memory.



+-*/+-*/+-*/RLIMIT_OFILE d 
RLIMIT_OFILE

The BSD name for :const:`RLIMIT_NOFILE`.



+-*/+-*/+-*/RLIMIT_NPROC d 
RLIMIT_NPROC

The maximum number of processes the current process may create.



+-*/+-*/+-*/RLIMIT_STACK d 
RLIMIT_STACK

The maximum size (in bytes) of the call stack for the current process.



+-*/+-*/+-*/RLIMIT_AS d 
RLIMIT_AS

The maximum area (in bytes) of address space which may be taken by the process.



+-*/+-*/+-*/RLIMIT_VMEM d 
RLIMIT_VMEM

The largest area of mapped memory which the process may occupy.



+-*/+-*/+-*/RLIMIT_NOFILE d 
RLIMIT_NOFILE

The maximum number of open file descriptors for the current process.



+-*/+-*/+-*/RLIMIT_CPU d 
RLIMIT_CPU

The maximum amount of processor time (in seconds) that a process can use. If
this limit is exceeded, a :const:`SIGXCPU` signal is sent to the process. (See
the :mod:`signal` module documentation for information about how to catch this
signal and do something useful, e.g. flush open files to disk.)



+-*/+-*/+-*/RUSAGE_SELF d 
RUSAGE_SELF

Pass to :func:`getrusage` to request resources consumed by the calling
process, which is the sum of resources used by all threads in the process.



+-*/+-*/+-*/error e 
error

The functions described below may raise this error if the underlying system call
failures unexpectedly.



+-*/+-*/syslog p An interface to the Unix syslog library routines.
+-*/+-*/+-*/syslog f 
syslog([priority,] message)

Send the string *message* to the system logger.  A trailing newline is added
if necessary.  Each message is tagged with a priority composed of a
*facility* and a *level*.  The optional *priority* argument, which defaults
to :const:`LOG_INFO`, determines the message priority.  If the facility is
not encoded in *priority* using logical-or (``LOG_INFO | LOG_USER``), the
value given in the :func:`openlog` call is used.

If :func:`openlog` has not been called prior to the call to :func:`syslog`,
``openlog()`` will be called with no arguments.



+-*/+-*/+-*/closelog f 
closelog()

Reset the syslog module values and call the system library ``closelog()``.

This causes the module to behave as it does when initially imported.  For
example, :func:`openlog` will be called on the first :func:`syslog` call (if
:func:`openlog` hasn't already been called), and *ident* and other
:func:`openlog` parameters are reset to defaults.



+-*/+-*/+-*/setlogmask f 
setlogmask(maskpri)

Set the priority mask to *maskpri* and return the previous mask value.  Calls
to :func:`syslog` with a priority level not set in *maskpri* are ignored.
The default is to log all priorities.  The function ``LOG_MASK(pri)``
calculates the mask for the individual priority *pri*.  The function
``LOG_UPTO(pri)`` calculates the mask for all priorities up to and including
*pri*.


+-*/+-*/+-*/openlog f 
openlog([ident[, logopt[, facility]]])

Logging options of subsequent :func:`syslog` calls can be set by calling
:func:`openlog`.  :func:`syslog` will call :func:`openlog` with no arguments
if the log is not currently open.

The optional *ident* keyword argument is a string which is prepended to every
message, and defaults to ``sys.argv[0]`` with leading path components
stripped.  The optional *logopt* keyword argument (default is 0) is a bit
field -- see below for possible values to combine.  The optional *facility*
keyword argument (default is :const:`LOG_USER`) sets the default facility for
messages which do not have a facility explicitly encoded.

.. versionchanged:: 3.2
   In previous versions, keyword arguments were not allowed, and *ident* was
   required.  The default for *ident* was dependent on the system libraries,
   and often was ``python`` instead of the name of the python program file.



+-*/+-*/termios p POSIX style tty control.
+-*/+-*/+-*/tcgetattr f 
tcgetattr(fd)

Return a list containing the tty attributes for file descriptor *fd*, as
follows: ``[iflag, oflag, cflag, lflag, ispeed, ospeed, cc]`` where *cc* is a
list of the tty special characters (each a string of length 1, except the
items with indices :const:`VMIN` and :const:`VTIME`, which are integers when
these fields are defined).  The interpretation of the flags and the speeds as
well as the indexing in the *cc* array must be done using the symbolic
constants defined in the :mod:`termios` module.



+-*/+-*/+-*/tcsetattr f 
tcsetattr(fd, when, attributes)

Set the tty attributes for file descriptor *fd* from the *attributes*, which is
a list like the one returned by :func:`tcgetattr`.  The *when* argument
determines when the attributes are changed: :const:`TCSANOW` to change
immediately, :const:`TCSADRAIN` to change after transmitting all queued output,
or :const:`TCSAFLUSH` to change after transmitting all queued output and
discarding all queued input.



+-*/+-*/+-*/tcdrain f 
tcdrain(fd)

Wait until all output written to file descriptor *fd* has been transmitted.



+-*/+-*/+-*/tcflush f 
tcflush(fd, queue)

Discard queued data on file descriptor *fd*.  The *queue* selector specifies
which queue: :const:`TCIFLUSH` for the input queue, :const:`TCOFLUSH` for the
output queue, or :const:`TCIOFLUSH` for both queues.



+-*/+-*/+-*/tcflow f 
tcflow(fd, action)

Suspend or resume input or output on file descriptor *fd*.  The *action*
argument can be :const:`TCOOFF` to suspend output, :const:`TCOON` to restart
output, :const:`TCIOFF` to suspend input, or :const:`TCION` to restart input.



+-*/+-*/+-*/tcsendbreak f 
tcsendbreak(fd, duration)

Send a break on file descriptor *fd*.  A zero *duration* sends a break for 0.25
--0.5 seconds; a nonzero *duration* has a system dependent meaning.



+-*/+-*/tty p Utility functions that perform common terminal control operations.
+-*/+-*/+-*/setraw f 
setraw(fd, when=termios.TCSAFLUSH)

Change the mode of the file descriptor *fd* to raw. If *when* is omitted, it
defaults to :const:`termios.TCSAFLUSH`, and is passed to
:func:`termios.tcsetattr`.



+-*/+-*/+-*/setcbreak f 
setcbreak(fd, when=termios.TCSAFLUSH)

Change the mode of file descriptor *fd* to cbreak. If *when* is omitted, it
defaults to :const:`termios.TCSAFLUSH`, and is passed to
:func:`termios.tcsetattr`.



+-*/other _
+-*/+-*/stringprep p String preparation, as per RFC 3453
+-*/+-*/+-*/in_table_c6 f 
in_table_c6(code)

Determine whether *code* is in tableC.6  (Inappropriate for plain text).



+-*/+-*/+-*/in_table_c21 f 
in_table_c21(code)

Determine whether *code* is in tableC.2.1  (ASCII control characters).



+-*/+-*/+-*/map_table_b2 f 
map_table_b2(code)

Return the mapped value for *code* according to tableB.2 (Mapping for
case-folding used with NFKC).



+-*/+-*/+-*/map_table_b3 f 
map_table_b3(code)

Return the mapped value for *code* according to tableB.3 (Mapping for
case-folding used with no normalization).



+-*/+-*/+-*/in_table_c22 f 
in_table_c22(code)

Determine whether *code* is in tableC.2.2  (Non-ASCII control characters).



+-*/+-*/+-*/in_table_c21_c22 f 
in_table_c21_c22(code)

Determine whether *code* is in tableC.2  (Control characters, union of C.2.1 and
C.2.2).



+-*/+-*/+-*/in_table_c11_c12 f 
in_table_c11_c12(code)

Determine whether *code* is in tableC.1  (Space characters, union of C.1.1 and
C.1.2).



+-*/+-*/+-*/in_table_c5 f 
in_table_c5(code)

Determine whether *code* is in tableC.5  (Surrogate codes).



+-*/+-*/+-*/in_table_b1 f 
in_table_b1(code)

Determine whether *code* is in tableB.1 (Commonly mapped to nothing).



+-*/+-*/+-*/in_table_c9 f 
in_table_c9(code)

Determine whether *code* is in tableC.9  (Tagging characters).



+-*/+-*/+-*/in_table_c8 f 
in_table_c8(code)

Determine whether *code* is in tableC.8  (Change display properties or are
deprecated).



+-*/+-*/+-*/in_table_d2 f 
in_table_d2(code)

Determine whether *code* is in tableD.2  (Characters with bidirectional property
"L").



+-*/+-*/+-*/in_table_c11 f 
in_table_c11(code)

Determine whether *code* is in tableC.1.1  (ASCII space characters).



+-*/+-*/+-*/in_table_c4 f 
in_table_c4(code)

Determine whether *code* is in tableC.4  (Non-character code points).



+-*/+-*/+-*/in_table_a1 f 
in_table_a1(code)

Determine whether *code* is in tableA.1 (Unassigned code points in Unicode 3.2).



+-*/+-*/+-*/in_table_c12 f 
in_table_c12(code)

Determine whether *code* is in tableC.1.2  (Non-ASCII space characters).



+-*/+-*/+-*/in_table_c7 f 
in_table_c7(code)

Determine whether *code* is in tableC.7  (Inappropriate for canonical
representation).



+-*/+-*/+-*/in_table_c3 f 
in_table_c3(code)

Determine whether *code* is in tableC.3  (Private use).



+-*/+-*/+-*/in_table_d1 f 
in_table_d1(code)

Determine whether *code* is in tableD.1  (Characters with bidirectional property
"R" or "AL").



+-*/+-*/unicodedata p Access the Unicode Database.
+-*/+-*/+-*/category f 
category(chr)

Returns the general category assigned to the character *chr* as
string.



+-*/+-*/+-*/normalize f 
normalize(form, unistr)

Return the normal form *form* for the Unicode string *unistr*. Valid values for
*form* are 'NFC', 'NFKC', 'NFD', and 'NFKD'.

The Unicode standard defines various normalization forms of a Unicode string,
based on the definition of canonical equivalence and compatibility equivalence.
In Unicode, several characters can be expressed in various way. For example, the
character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as
the sequence U+0327 (COMBINING CEDILLA) U+0043 (LATIN CAPITAL LETTER C).

For each character, there are two normal forms: normal form C and normal form D.
Normal form D (NFD) is also known as canonical decomposition, and translates
each character into its decomposed form. Normal form C (NFC) first applies a
canonical decomposition, then composes pre-combined characters again.

In addition to these two forms, there are two additional normal forms based on
compatibility equivalence. In Unicode, certain characters are supported which
normally would be unified with other characters. For example, U+2160 (ROMAN
NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I).
However, it is supported in Unicode for compatibility with existing character
sets (e.g. gb2312).

The normal form KD (NFKD) will apply the compatibility decomposition, i.e.
replace all compatibility characters with their equivalents. The normal form KC
(NFKC) first applies the compatibility decomposition, followed by the canonical
composition.

Even if two unicode strings are normalized and look the same to
a human reader, if one has combining characters and the other
doesn't, they may not compare equal.



+-*/+-*/+-*/digit f 
digit(chr[, default])

Returns the digit value assigned to the character *chr* as integer.
If no such value is defined, *default* is returned, or, if not given,
:exc:`ValueError` is raised.



+-*/+-*/+-*/name f 
name(chr[, default])

Returns the name assigned to the character *chr* as a string. If no
name is defined, *default* is returned, or, if not given, :exc:`ValueError` is
raised.



+-*/+-*/+-*/decimal f 
decimal(chr[, default])

Returns the decimal value assigned to the character *chr* as integer.
If no such value is defined, *default* is returned, or, if not given,
:exc:`ValueError` is raised.



+-*/+-*/+-*/numeric f 
numeric(chr[, default])

Returns the numeric value assigned to the character *chr* as float.
If no such value is defined, *default* is returned, or, if not given,
:exc:`ValueError` is raised.



+-*/+-*/+-*/lookup f 
lookup(name)

Look up character by name.  If a character with the given name is found, return
the corresponding character.  If not found, :exc:`KeyError` is raised.



+-*/+-*/+-*/mirrored f 
mirrored(chr)

Returns the mirrored property assigned to the character *chr* as
integer. Returns ``1`` if the character has been identified as a "mirrored"
character in bidirectional text, ``0`` otherwise.



+-*/+-*/+-*/combining f 
combining(chr)

Returns the canonical combining class assigned to the character *chr*
as integer. Returns ``0`` if no combining class is defined.



+-*/+-*/+-*/bidirectional f 获取unicode字符的方向类别
bidirectional(chr)
  返回值            说明
  'L','LRE','LRO' 从左到右
  'R','RLE','RLO' 从右到左
  'AL'            从右到左(阿拉伯字符)
  'AN'            阿拉伯数字
  'EN'            欧洲数字
  'ES'            欧洲数字分隔符
  'CS'            通用数字分隔符
  'ET'            欧洲数字终止符
  'BN'            边界不确定
  'B'             段落分隔符
  'S'             部分分隔符
  'WS'            空格
  'NSM'           非间距标记
  'ON'            其他
+-*/+-*/+-*/decomposition f 
decomposition(chr)

Returns the character decomposition mapping assigned to the character
*chr* as string. An empty string is returned in case no such mapping is
defined.



+-*/+-*/+-*/east_asian_width f 
east_asian_width(chr)

Returns the east asian width assigned to the character *chr* as
string.



+-*/+-*/+-*/unidata_version d 
unidata_version

The version of the Unicode database used in this module.



+-*/+-*/+-*/ucd_3_2_0 d 
ucd_3_2_0

This is an object that has the same methods as the entire module, but uses the
Unicode database version 3.2 instead, for applications that require this
specific version of the Unicode database (such as IDNA).


+-*/+-*/formatter p Generic output formatter and device interface.
+-*/+-*/+-*/AS_IS d 
AS_IS

Value which can be used in the font specification passed to the ``push_font()``
method described below, or as the new value to any other ``push_property()``
method.  Pushing the ``AS_IS`` value allows the corresponding ``pop_property()``
method to be called without having to track whether the property was changed.


+-*/+-*/+-*/AbstractFormatter c 
AbstractFormatter(writer)

The standard formatter.  This implementation has demonstrated wide applicability
to many writers, and may be used directly in most circumstances.  It has been
used to implement a full-featured World Wide Web browser.



+-*/+-*/+-*/NullFormatter c 
NullFormatter(writer=None)

A formatter which does nothing.  If *writer* is omitted, a :class:`NullWriter`
instance is created.  No methods of the writer are called by
:class:`NullFormatter` instances.  Implementations should inherit from this
class if implementing a writer interface but don't need to inherit any
implementation.



+-*/+-*/+-*/NullWriter c 
NullWriter()

A writer which only provides the interface definition; no actions are taken on
any methods.  This should be the base class for all writers which do not need to
inherit any implementation methods.



+-*/+-*/+-*/AbstractWriter c 
AbstractWriter()

A writer which can be used in debugging formatters, but not much else.  Each
method simply announces itself by printing its name and arguments on standard
output.



+-*/+-*/+-*/DumbWriter c 
DumbWriter(file=None, maxcol=72)

Simple writer class which writes output on the :term:`file object` passed
in as *file* or, if *file* is omitted, on standard output.  The output is
simply word-wrapped to the number of columns specified by *maxcol*.  This
class is suitable for reflowing a sequence of paragraphs.



+-*/+-*/+-*/writer _ 
+-*/+-*/+-*/+-*/new_spacing m 
new_spacing(spacing)

Set the spacing style to *spacing*.



+-*/+-*/+-*/+-*/send_literal_data m 
send_literal_data(data)

Output character data which has already been formatted for display.  Generally,
this should be interpreted to mean that line breaks indicated by newline
characters should be preserved and no new line breaks should be introduced.  The
data may contain embedded newline and tab characters, unlike data provided to
the :meth:`send_formatted_data` interface.



+-*/+-*/+-*/+-*/new_font m 
new_font(font)

Set the font style.  The value of *font* will be ``None``, indicating that the
device's default font should be used, or a tuple of the form ``(size,
italic, bold, teletype)``.  Size will be a string indicating the size of
font that should be used; specific strings and their interpretation must be
defined by the application.  The *italic*, *bold*, and *teletype* values are
Boolean values specifying which of those font attributes should be used.



+-*/+-*/+-*/+-*/send_flowing_data m 
send_flowing_data(data)

Output character data which may be word-wrapped and re-flowed as needed.  Within
any sequence of calls to this method, the writer may assume that spans of
multiple whitespace characters have been collapsed to single space characters.



+-*/+-*/+-*/+-*/new_alignment m 
new_alignment(align)

Set the alignment style.  The *align* value can be any object, but by convention
is a string or ``None``, where ``None`` indicates that the writer's "preferred"
alignment should be used. Conventional *align* values are ``'left'``,
``'center'``, ``'right'``, and ``'justify'``.



+-*/+-*/+-*/+-*/send_line_break m 
send_line_break()

Break the current line.



+-*/+-*/+-*/+-*/new_margin m 
new_margin(margin, level)

Set the margin level to the integer *level* and the logical tag to *margin*.
Interpretation of the logical tag is at the writer's discretion; the only
restriction on the value of the logical tag is that it not be a false value for
non-zero values of *level*.



+-*/+-*/+-*/+-*/send_label_data m 
send_label_data(data)

Set *data* to the left of the current left margin, if possible. The value of
*data* is not restricted; treatment of non-string values is entirely
application- and writer-dependent.  This method will only be called at the
beginning of a line.



+-*/+-*/+-*/+-*/flush m 
flush()

Flush any buffered output or device control events.



+-*/+-*/+-*/+-*/send_paragraph m 
send_paragraph(blankline)

Produce a paragraph separation of at least *blankline* blank lines, or the
equivalent.  The *blankline* value will be an integer.  Note that the
implementation will receive a call to :meth:`send_line_break` before this call
if a line break is needed;  this method should not include ending the last line
of the paragraph. It is only responsible for vertical spacing between
paragraphs.



+-*/+-*/+-*/+-*/send_hor_rule m 
send_hor_rule(*args, **kw)

Display a horizontal rule on the output device.  The arguments to this method
are entirely application- and writer-specific, and should be interpreted with
care.  The method implementation may assume that a line break has already been
issued via :meth:`send_line_break`.



+-*/+-*/+-*/+-*/new_styles m 
new_styles(styles)

Set additional styles.  The *styles* value is a tuple of arbitrary values; the
value :const:`AS_IS` should be ignored.  The *styles* tuple may be interpreted
either as a set or as a stack depending on the requirements of the application
and writer implementation.



+-*/+-*/+-*/formatter _ 
+-*/+-*/+-*/+-*/writer d 
writer

The writer instance with which the formatter interacts.



+-*/+-*/+-*/+-*/push_alignment m 
push_alignment(align)

Push a new alignment setting onto the alignment stack.  This may be
:const:`AS_IS` if no change is desired.  If the alignment value is changed from
the previous setting, the writer's :meth:`new_alignment` method is called with
the *align* value.



+-*/+-*/+-*/+-*/add_literal_data m 
add_literal_data(data)

Provide data which should be passed to the writer unchanged. Whitespace,
including newline and tab characters, are considered legal in the value of
*data*.



+-*/+-*/+-*/+-*/pop_alignment m 
pop_alignment()

Restore the previous alignment.



+-*/+-*/+-*/+-*/add_line_break m 
add_line_break()

Add a hard line break if one does not already exist.  This does not break the
logical paragraph.



+-*/+-*/+-*/+-*/pop_style m 
pop_style(n=1)

Pop the last *n* style specifications passed to :meth:`push_style`.  A tuple
representing the revised stack, including :const:`AS_IS` values, is passed to
the writer's :meth:`new_styles` method.



+-*/+-*/+-*/+-*/pop_margin m 
pop_margin()

Restore the previous margin.



+-*/+-*/+-*/+-*/end_paragraph m 
end_paragraph(blanklines)

Close any open paragraphs and insert at least *blanklines* before the next
paragraph.



+-*/+-*/+-*/+-*/assert_line_data m 
assert_line_data(flag=1)

Inform the formatter that data has been added to the current paragraph
out-of-band.  This should be used when the writer has been manipulated
directly.  The optional *flag* argument can be set to false if the writer
manipulations produced a hard line break at the end of the output.



+-*/+-*/+-*/+-*/push_margin m 
push_margin(margin)

Increase the number of left margin indentations by one, associating the logical
tag *margin* with the new indentation.  The initial margin level is ``0``.
Changed values of the logical tag must be true values; false values other than
:const:`AS_IS` are not sufficient to change the margin.



+-*/+-*/+-*/+-*/add_hor_rule m 
add_hor_rule(*args, **kw)

Insert a horizontal rule in the output.  A hard break is inserted if there is
data in the current paragraph, but the logical paragraph is not broken.  The
arguments and keywords are passed on to the writer's :meth:`send_line_break`
method.



+-*/+-*/+-*/+-*/add_flowing_data m 
add_flowing_data(data)

Provide data which should be formatted with collapsed whitespace. Whitespace
from preceding and successive calls to :meth:`add_flowing_data` is considered as
well when the whitespace collapse is performed.  The data which is passed to
this method is expected to be word-wrapped by the output device.  Note that any
word-wrapping still must be performed by the writer object due to the need to
rely on device and font information.



+-*/+-*/+-*/+-*/set_spacing m 
set_spacing(spacing)

Set the spacing style for the writer.



+-*/+-*/+-*/+-*/add_label_data m 
add_label_data(format, counter)

Insert a label which should be placed to the left of the current left margin.
This should be used for constructing bulleted or numbered lists.  If the
*format* value is a string, it is interpreted as a format specification for
*counter*, which should be an integer. The result of this formatting becomes the
value of the label; if *format* is not a string it is used as the label value
directly. The label value is passed as the only argument to the writer's
:meth:`send_label_data` method.  Interpretation of non-string label values is
dependent on the associated writer.

Format specifications are strings which, in combination with a counter value,
are used to compute label values.  Each character in the format string is copied
to the label value, with some characters recognized to indicate a transform on
the counter value.  Specifically, the character ``'1'`` represents the counter
value formatter as an Arabic number, the characters ``'A'`` and ``'a'``
represent alphabetic representations of the counter value in upper and lower
case, respectively, and ``'I'`` and ``'i'`` represent the counter value in Roman
numerals, in upper and lower case.  Note that the alphabetic and roman
transforms require that the counter value be greater than zero.



+-*/+-*/+-*/+-*/push_style m 
push_style(*styles)

Push any number of arbitrary style specifications.  All styles are pushed onto
the styles stack in order.  A tuple representing the entire stack, including
:const:`AS_IS` values, is passed to the writer's :meth:`new_styles` method.



+-*/+-*/+-*/+-*/push_font m 
push_font((size, italic, bold, teletype))

Change some or all font properties of the writer object.  Properties which are
not set to :const:`AS_IS` are set to the values passed in while others are
maintained at their current settings.  The writer's :meth:`new_font` method is
called with the fully resolved font specification.



+-*/+-*/+-*/+-*/flush_softspace m 
flush_softspace()

Send any pending whitespace buffered from a previous call to
:meth:`add_flowing_data` to the associated writer object.  This should be called
before any direct manipulation of the writer object.



+-*/+-*/+-*/+-*/pop_font m 
pop_font()

Restore the previous font.



+-*/+-*/reprlib p Alternate repr() implementation with size limits.
+-*/+-*/+-*/repr f 
repr(obj)

This is the :meth:`~Repr.repr` method of ``aRepr``.  It returns a string
similar to that returned by the built-in function of the same name, but with
limits on most sizes.


+-*/+-*/+-*/aRepr d 
aRepr

This is an instance of :class:`Repr` which is used to provide the
:func:`.repr` function described below.  Changing the attributes of this
object will affect the size limits used by :func:`.repr` and the Python
debugger.



+-*/+-*/+-*/Repr c 
Repr()

Class which provides formatting services useful in implementing functions
similar to the built-in :func:`repr`; size limits for  different object types
are added to avoid the generation of representations which are excessively long.



+-*/+-*/+-*/+-*/maxtuple d 
maxtuple

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxdeque d 
maxdeque

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxarray d 
maxarray

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxstring d 
maxstring

Limit on the number of characters in the representation of the string.  Note
that the "normal" representation of the string is used as the character source:
if escape sequences are needed in the representation, these may be mangled when
the representation is shortened.  The default is ``30``.



+-*/+-*/+-*/+-*/maxother d 
maxother

This limit is used to control the size of object types for which no specific
formatting method is available on the :class:`Repr` object. It is applied in a
similar manner as :attr:`maxstring`.  The default is ``20``.



+-*/+-*/+-*/+-*/maxlong d 
maxlong

Maximum number of characters in the representation for an integer.  Digits
are dropped from the middle.  The default is ``40``.



+-*/+-*/+-*/+-*/maxfrozenset d 
maxfrozenset

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxdict d 
maxdict

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxset d 
maxset

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxlist d 
maxlist

Limits on the number of entries represented for the named object type.  The
default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for
the others.



+-*/+-*/+-*/+-*/maxlevel d 
maxlevel

Depth limit on the creation of recursive representations.  The default is ``6``.



+-*/+-*/+-*/+-*/repr1 m 
repr1(obj, level)

Recursive implementation used by :meth:`.repr`.  This uses the type of *obj* to
determine which formatting method to call, passing it *obj* and *level*.  The
type-specific methods should call :meth:`repr1` to perform recursive formatting,
with ``level - 1`` for the value of *level* in the recursive  call.



+-*/+-*/+-*/+-*/repr_TYPE m 
repr_TYPE(obj, level)

Formatting methods for specific types are implemented as methods with a name
based on the type name.  In the method name, **TYPE** is replaced by
``string.join(string.split(type(obj).__name__, '_'))``. Dispatch to these
methods is handled by :meth:`repr1`. Type-specific methods which need to
recursively format a value should call ``self.repr1(subobj, level - 1)``.



+-*/+-*/+-*/+-*/repr m 
repr(obj)

The equivalent to the built-in :func:`repr` that uses the formatting imposed by
the instance.



+-*/+-*/fileinput p Loop over standard input or a list of files.
+-*/+-*/+-*/fileno f 
fileno()

Return the integer "file descriptor" for the current file. When no file is
opened (before the first line and between files), returns ``-1``.



+-*/+-*/+-*/nextfile f 
nextfile()

Close the current file so that the next iteration will read the first line from
the next file (if any); lines not read from the file will not count towards the
cumulative line count.  The filename is not changed until after the first line
of the next file has been read.  Before the first line has been read, this
function has no effect; it cannot be used to skip the first file.  After the
last line of the last file has been read, this function has no effect.



+-*/+-*/+-*/isstdin f 
isstdin()

Returns true if the last line was read from ``sys.stdin``, otherwise returns
false.



+-*/+-*/+-*/isfirstline f 
isfirstline()

Returns true if the line just read is the first line of its file, otherwise
returns false.



+-*/+-*/+-*/hook_compressed f 
hook_compressed(filename, mode)

Transparently opens files compressed with gzip and bzip2 (recognized by the
extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2`
modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file is
opened normally (ie, using :func:`open` without any decompression).

Usage example:  ``fi = fileinput.FileInput(openhook=fileinput.hook_compressed)``



+-*/+-*/+-*/hook_encoded f 
hook_encoded(encoding)

Returns a hook which opens each file with :func:`codecs.open`, using the given
*encoding* to read the file.

Usage example: ``fi =
fileinput.FileInput(openhook=fileinput.hook_encoded("iso-8859-1"))``


+-*/+-*/+-*/filelineno f 
filelineno()

Return the line number in the current file.  Before the first line has been
read, returns ``0``.  After the last line of the last file has been read,
returns the line number of that line within the file.



+-*/+-*/+-*/lineno f 
lineno()

Return the cumulative line number of the line that has just been read.  Before
the first line has been read, returns ``0``.  After the last line of the last
file has been read, returns the line number of that line.



+-*/+-*/+-*/close f 
close()

Close the sequence.


+-*/+-*/+-*/input f 
input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)

Create an instance of the :class:`FileInput` class.  The instance will be used
as global state for the functions of this module, and is also returned to use
during iteration.  The parameters to this function will be passed along to the
constructor of the :class:`FileInput` class.

The :class:`FileInput` instance can be used as a context manager in the
:keyword:`with` statement.  In this example, *input* is closed after the
:keyword:`with` statement is exited, even if an exception occurs::

   with fileinput.input(files=('spam.txt', 'eggs.txt')) as f:
       for line in f:
           process(line)

.. versionchanged:: 3.2
   Can be used as a context manager.



+-*/+-*/+-*/filename f 
filename()

Return the name of the file currently being read.  Before the first line has
been read, returns ``None``.



+-*/+-*/+-*/FileInput c 
FileInput(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)

Class :class:`FileInput` is the implementation; its methods :meth:`filename`,
:meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, :meth:`isfirstline`,
:meth:`isstdin`, :meth:`nextfile` and :meth:`close` correspond to the functions
of the same name in the module. In addition it has a :meth:`readline` method
which returns the next input line, and a :meth:`__getitem__` method which
implements the sequence behavior.  The sequence must be accessed in strictly
sequential order; random access and :meth:`readline` cannot be mixed.

With *mode* you can specify which file mode will be passed to :func:`open`. It
must be one of ``'r'``, ``'rU'``, ``'U'`` and ``'rb'``.

The *openhook*, when given, must be a function that takes two arguments,
*filename* and *mode*, and returns an accordingly opened file-like object. You
cannot use *inplace* and *openhook* together.

A :class:`FileInput` instance can be used as a context manager in the
:keyword:`with` statement.  In this example, *input* is closed after the
:keyword:`with` statement is exited, even if an exception occurs::

   with FileInput(files=('spam.txt', 'eggs.txt')) as input:
       process(input)

.. versionchanged:: 3.2
   Can be used as a context manager.



+-*/+-*/linecache p This module provides random access to individual lines from text files.
+-*/+-*/+-*/checkcache f 
checkcache(filename=None)

Check the cache for validity.  Use this function if files in the cache  may have
changed on disk, and you require the updated version.  If *filename* is omitted,
it will check all the entries in the cache.



+-*/+-*/+-*/getline f 
getline(filename, lineno, module_globals=None)

Get line *lineno* from file named *filename*. This function will never raise an
exception --- it will return ``''`` on errors (the terminating newline character
will be included for lines that are found).

.. index:: triple: module; search; path

If a file named *filename* is not found, the function will look for it in the
module search path, ``sys.path``, after first checking for a :pep:`302`
``__loader__`` in *module_globals*, in case the module was imported from a
zipfile or other non-filesystem import source.



+-*/+-*/+-*/clearcache f 
clearcache()

Clear the cache.  Use this function if you no longer need lines from files
previously read using :func:`getline`.



+-*/+-*/rlcompleter p Python identifier completion, suitable for the GNU readline library.
+-*/+-*/+-*/Completer _ 
+-*/+-*/+-*/+-*/complete m 
complete(text, state)

Return the *state*\ th completion for *text*.

If called for *text* that doesn't include a period character (``'.'``), it will
complete from names currently defined in :mod:`__main__`, :mod:`builtins` and
keywords (as defined by the :mod:`keyword` module).

If called for a dotted name, it will try to evaluate anything without obvious
side-effects (functions will not be evaluated, but it can generate calls to
:meth:`__getattr__`) up to the last part, and find matches for the rest via the
:func:`dir` function.  Any exception raised during the evaluation of the
expression is caught, silenced and :const:`None` is returned.



+-*/+-*/_thread p Low-level threading API.(python3)
python2: thread
+-*/+-*/+-*/allocate_lock f 
allocate_lock()

Return a new lock object.  Methods of locks are described below.  The lock is
initially unlocked.



+-*/+-*/+-*/start_new_thread f 
start_new_thread(function, args[, kwargs])

Start a new thread and return its identifier.  The thread executes the function
*function* with the argument list *args* (which must be a tuple).  The optional
*kwargs* argument specifies a dictionary of keyword arguments. When the function
returns, the thread silently exits.  When the function terminates with an
unhandled exception, a stack trace is printed and then the thread exits (but
other threads continue to run).



+-*/+-*/+-*/get_ident f 
get_ident()

Return the 'thread identifier' of the current thread.  This is a nonzero
integer.  Its value has no direct meaning; it is intended as a magic cookie to
be used e.g. to index a dictionary of thread-specific data.  Thread identifiers
may be recycled when a thread exits and another thread is created.



+-*/+-*/+-*/exit f 
exit()

Raise the :exc:`SystemExit` exception.  When not caught, this will cause the
thread to exit silently.


+-*/+-*/+-*/interrupt_main f 
interrupt_main()

Raise a :exc:`KeyboardInterrupt` exception in the main thread.  A subthread can
use this function to interrupt the main thread.



+-*/+-*/+-*/stack_size f 
stack_size([size])

Return the thread stack size used when creating new threads.  The optional
*size* argument specifies the stack size to be used for subsequently created
threads, and must be 0 (use platform or configured default) or a positive
integer value of at least 32,768 (32kB). If changing the thread stack size is
unsupported, a :exc:`ThreadError` is raised.  If the specified stack size is
invalid, a :exc:`ValueError` is raised and the stack size is unmodified.  32kB
is currently the minimum supported stack size value to guarantee sufficient
stack space for the interpreter itself.  Note that some platforms may have
particular restrictions on values for the stack size, such as requiring a
minimum stack size > 32kB or requiring allocation in multiples of the system
memory page size - platform documentation should be referred to for more
information (4kB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
Availability: Windows, systems with POSIX threads.



+-*/+-*/+-*/LockType d 
LockType

This is the type of lock objects.



+-*/+-*/+-*/TIMEOUT_MAX d 
TIMEOUT_MAX

The maximum value allowed for the *timeout* parameter of
:meth:`Lock.acquire`. Specifying a timeout greater than this value will
raise an :exc:`OverflowError`.

.. versionadded:: 3.2



+-*/+-*/+-*/error e 
error

Raised on thread-specific errors.



+-*/+-*/+-*/lock _ 
+-*/+-*/+-*/+-*/release m 
release()

Releases the lock.  The lock must have been acquired earlier, but not
necessarily by the same thread.



+-*/+-*/+-*/+-*/acquire m 
acquire(waitflag=1, timeout=-1)

Without any optional argument, this method acquires the lock unconditionally, if
necessary waiting until it is released by another thread (only one thread at a
time can acquire a lock --- that's their reason for existence).

If the integer *waitflag* argument is present, the action depends on its
value: if it is zero, the lock is only acquired if it can be acquired
immediately without waiting, while if it is nonzero, the lock is acquired
unconditionally as above.

If the floating-point *timeout* argument is present and positive, it
specifies the maximum wait time in seconds before returning.  A negative
*timeout* argument specifies an unbounded wait.  You cannot specify
a *timeout* if *waitflag* is zero.

The return value is ``True`` if the lock is acquired successfully,
``False`` if not.

.. versionchanged:: 3.2
   The *timeout* parameter is new.

.. versionchanged:: 3.2
   Lock acquires can now be interrupted by signals on POSIX.



+-*/+-*/+-*/+-*/locked m 
locked()

Return the status of the lock: ``True`` if it has been acquired by some thread,
``False`` if not.


+-*/+-*/curses p An interface to the curses library, providing portableterminal handling.
+-*/+-*/+-*/has_ic f 
has_ic()

Return ``True`` if the terminal has insert- and delete-character capabilities.
This function is included for historical reasons only, as all modern software
terminal emulators have such capabilities.



+-*/+-*/+-*/nonl f 
nonl()

Leave newline mode.  Disable translation of return into newline on input, and
disable low-level translation of newline into newline/return on output (but this
does not change the behavior of ``addch('\n')``, which always does the
equivalent of return and line feed on the virtual screen).  With translation
off, curses can sometimes speed up vertical motion a little; also, it will be
able to detect the return key on input.



+-*/+-*/+-*/tigetstr f 
tigetstr(capname)

Return the value of the string capability corresponding to the terminfo
capability name *capname*.  ``None`` is returned if *capname* is not a string
capability, or is canceled or absent from the terminal description.



+-*/+-*/+-*/initscr f 
initscr()

Initialize the library. Return a :class:`WindowObject` which represents the
whole screen.

.. note::

   If there is an error opening the terminal, the underlying curses library may
   cause the interpreter to exit.



+-*/+-*/+-*/can_change_color f 
can_change_color()

Return ``True`` or ``False``, depending on whether the programmer can change the colors
displayed by the terminal.



+-*/+-*/+-*/meta f 
meta(yes)

If *yes* is 1, allow 8-bit characters to be input. If *yes* is 0,  allow only
7-bit chars.



+-*/+-*/+-*/curs_set f 
curs_set(visibility)

Set the cursor state.  *visibility* can be set to 0, 1, or 2, for invisible,
normal, or very visible.  If the terminal supports the visibility requested, the
previous cursor state is returned; otherwise, an exception is raised.  On many
terminals, the "visible" mode is an underline cursor and the "very visible" mode
is a block cursor.



+-*/+-*/+-*/noqiflush f 
noqiflush()

When the :func:`noqiflush` routine is used, normal flush of input and output queues
associated with the INTR, QUIT and SUSP characters will not be done.  You may
want to call :func:`noqiflush` in a signal handler if you want output to
continue as though the interrupt had not occurred, after the handler exits.



+-*/+-*/+-*/has_il f 
has_il()

Return ``True`` if the terminal has insert- and delete-line capabilities, or can
simulate  them  using scrolling regions. This function is included for
historical reasons only, as all modern software terminal emulators have such
capabilities.



+-*/+-*/+-*/def_prog_mode f 
def_prog_mode()

Save the current terminal mode as the "program" mode, the mode when the running
program is using curses.  (Its counterpart is the "shell" mode, for when the
program is not in curses.)  Subsequent calls to :func:`reset_prog_mode` will
restore this mode.



+-*/+-*/+-*/doupdate f 
doupdate()

Update the physical screen.  The curses library keeps two data structures, one
representing the current physical screen contents and a virtual screen
representing the desired next state.  The :func:`doupdate` ground updates the
physical screen to match the virtual screen.

The virtual screen may be updated by a :meth:`noutrefresh` call after write
operations such as :meth:`addstr` have been performed on a window.  The normal
:meth:`refresh` call is simply :meth:`noutrefresh` followed by :func:`doupdate`;
if you have to update multiple windows, you can speed performance and perhaps
reduce screen flicker by issuing :meth:`noutrefresh` calls on all windows,
followed by a single :func:`doupdate`.



+-*/+-*/+-*/raw f 
raw()

Enter raw mode.  In raw mode, normal line buffering and  processing of
interrupt, quit, suspend, and flow control keys are turned off; characters are
presented to curses input functions one by one.



+-*/+-*/+-*/typeahead f 
typeahead(fd)

Specify that the file descriptor *fd* be used for typeahead checking.  If *fd*
is ``-1``, then no typeahead checking is done.

The curses library does "line-breakout optimization" by looking for typeahead
periodically while updating the screen.  If input is found, and it is coming
from a tty, the current update is postponed until refresh or doupdate is called
again, allowing faster response to commands typed in advance. This function
allows specifying a different file descriptor for typeahead checking.



+-*/+-*/+-*/has_key f 
has_key(ch)

Take a key value *ch*, and return ``True`` if the current terminal type recognizes
a key with that value.



+-*/+-*/+-*/use_default_colors f 
use_default_colors()

Allow use of default values for colors on terminals supporting this feature. Use
this to support transparency in your application.  The default color is assigned
to the color number -1. After calling this function,  ``init_pair(x,
curses.COLOR_RED, -1)`` initializes, for instance, color pair *x* to a red
foreground color on the default background.



+-*/+-*/+-*/ungetch f 
ungetch(ch)

Push *ch* so the next :meth:`getch` will return it.

.. note::

   Only one *ch* can be pushed before :meth:`getch` is called.



+-*/+-*/+-*/resize_term f 
resize_term(nlines, ncols)

Backend function used by :func:`resizeterm`, performing most of the work;
when resizing the windows, :func:`resize_term` blank-fills the areas that are
extended.  The calling application should fill in these areas with
appropriate data.  The :func:`resize_term` function attempts to resize all
windows.  However, due to the calling convention of pads, it is not possible
to resize these without additional interaction with the application.



+-*/+-*/+-*/start_color f 
start_color()

Must be called if the programmer wants to use colors, and before any other color
manipulation routine is called.  It is good practice to call this routine right
after :func:`initscr`.

:func:`start_color` initializes eight basic colors (black, red,  green, yellow,
blue, magenta, cyan, and white), and two global variables in the :mod:`curses`
module, :const:`COLORS` and :const:`COLOR_PAIRS`, containing the maximum number
of colors and color-pairs the terminal can support.  It also restores the colors
on the terminal to the values they had when the terminal was just turned on.



+-*/+-*/+-*/halfdelay f 
halfdelay(tenths)

Used for half-delay mode, which is similar to cbreak mode in that characters
typed by the user are immediately available to the program. However, after
blocking for *tenths* tenths of seconds, an exception is raised if nothing has
been typed.  The value of *tenths* must be a number between ``1`` and ``255``.  Use
:func:`nocbreak` to leave half-delay mode.



+-*/+-*/+-*/pair_content f 
pair_content(pair_number)

Return a tuple ``(fg, bg)`` containing the colors for the requested color pair.
The value of *pair_number* must be between ``1`` and ``COLOR_PAIRS - 1``.



+-*/+-*/+-*/getwin f 
getwin(file)

Read window related data stored in the file by an earlier :func:`putwin` call.
The routine then creates and initializes a new window using that data, returning
the new window object.



+-*/+-*/+-*/flushinp f 
flushinp()

Flush all input buffers.  This throws away any  typeahead  that  has been typed
by the user and has not yet been processed by the program.



+-*/+-*/+-*/color_content f 
color_content(color_number)

Return the intensity of the red, green, and blue (RGB) components in the color
*color_number*, which must be between ``0`` and :const:`COLORS`.  A 3-tuple is
returned, containing the R,G,B values for the given color, which will be between
``0`` (no component) and ``1000`` (maximum amount of component).



+-*/+-*/+-*/termattrs f 
termattrs()

Return a logical OR of all video attributes supported by the terminal.  This
information is useful when a curses program needs complete control over the
appearance of the screen.



+-*/+-*/+-*/init_pair f 
init_pair(pair_number, fg, bg)

Change the definition of a color-pair.  It takes three arguments: the number of
the color-pair to be changed, the foreground color number, and the background
color number.  The value of *pair_number* must be between ``1`` and
``COLOR_PAIRS - 1`` (the ``0`` color pair is wired to white on black and cannot
be changed).  The value of *fg* and *bg* arguments must be between ``0`` and
:const:`COLORS`.  If the color-pair was previously initialized, the screen is
refreshed and all occurrences of that color-pair are changed to the new
definition.



+-*/+-*/+-*/endwin f 
endwin()

De-initialize the library, and return terminal to normal status.



+-*/+-*/+-*/nocbreak f 
nocbreak()

Leave cbreak mode.  Return to normal "cooked" mode with line buffering.



+-*/+-*/+-*/flash f 
flash()

Flash the screen.  That is, change it to reverse-video and then change it back
in a short interval.  Some people prefer such as 'visible bell' to the audible
attention signal produced by :func:`beep`.



+-*/+-*/+-*/setupterm f 
setupterm([termstr, fd])

Initialize the terminal.  *termstr* is a string giving the terminal name; if
omitted, the value of the :envvar:`TERM` environment variable will be used.  *fd* is the
file descriptor to which any initialization sequences will be sent; if not
supplied, the file descriptor for ``sys.stdout`` will be used.



+-*/+-*/+-*/wrapper f 
wrapper(func, ...)

Initialize curses and call another callable object, *func*, which should be the
rest of your curses-using application.  If the application raises an exception,
this function will restore the terminal to a sane state before re-raising the
exception and generating a traceback.  The callable object *func* is then passed
the main window 'stdscr' as its first argument, followed by any other arguments
passed to :func:`wrapper`.  Before calling *func*, :func:`wrapper` turns on
cbreak mode, turns off echo, enables the terminal keypad, and initializes colors
if the terminal has color support.  On exit (whether normally or by exception)
it restores cooked mode, turns on echo, and disables the terminal keypad.



+-*/+-*/+-*/unctrl f 
unctrl(ch)

Return a string which is a printable representation of the character *ch*.
Control characters are displayed as a caret followed by the character, for
example as ``^C``. Printing characters are left as they are.



+-*/+-*/+-*/cbreak f 
cbreak()

Enter cbreak mode.  In cbreak mode (sometimes called "rare" mode) normal tty
line buffering is turned off and characters are available to be read one by one.
However, unlike raw mode, special characters (interrupt, quit, suspend, and flow
control) retain their effects on the tty driver and calling program.  Calling
first :func:`raw` then :func:`cbreak` leaves the terminal in cbreak mode.



+-*/+-*/+-*/savetty f 
savetty()

Save the current state of the terminal modes in a buffer, usable by
:func:`resetty`.



+-*/+-*/+-*/putp f 
putp(string)

Equivalent to ``tputs(str, 1, putchar)``; emit the value of a specified
terminfo capability for the current terminal.  Note that the output of :func:`putp`
always goes to standard output.



+-*/+-*/+-*/qiflush f 
qiflush( [flag] )

If *flag* is ``False``, the effect is the same as calling :func:`noqiflush`. If
*flag* is ``True``, or no argument is provided, the queues will be flushed when
these control characters are read.



+-*/+-*/+-*/is_term_resized f 
is_term_resized(nlines, ncols)

Return ``True`` if :func:`resize_term` would modify the window structure,
``False`` otherwise.



+-*/+-*/+-*/mousemask f 
mousemask(mousemask)

Set the mouse events to be reported, and return a tuple ``(availmask,
oldmask)``.   *availmask* indicates which of the specified mouse events can be
reported; on complete failure it returns 0.  *oldmask* is the previous value of
the given window's mouse event mask.  If this function is never called, no mouse
events are ever reported.



+-*/+-*/+-*/tigetnum f 
tigetnum(capname)

Return the value of the numeric capability corresponding to the terminfo
capability name *capname*.  The value ``-2`` is returned if *capname* is not a
numeric capability, or ``-1`` if it is canceled or absent from the terminal
description.



+-*/+-*/+-*/reset_shell_mode f 
reset_shell_mode()

Restore the  terminal  to "shell" mode, as previously saved  by
:func:`def_shell_mode`.



+-*/+-*/+-*/baudrate f 
baudrate()

Return the output speed of the terminal in bits per second.  On software
terminal emulators it will have a fixed high value. Included for historical
reasons; in former times, it was used to  write output loops for time delays and
occasionally to change interfaces depending on the line speed.



+-*/+-*/+-*/resizeterm f 
resizeterm(nlines, ncols)

Resize the standard and current windows to the specified dimensions, and
adjusts other bookkeeping data used by the curses library that record the
window dimensions (in particular the SIGWINCH handler).



+-*/+-*/+-*/init_color f 
init_color(color_number, r, g, b)

Change the definition of a color, taking the number of the color to be changed
followed by three RGB values (for the amounts of red, green, and blue
components).  The value of *color_number* must be between ``0`` and
:const:`COLORS`.  Each of *r*, *g*, *b*, must be a value between ``0`` and
``1000``.  When :func:`init_color` is used, all occurrences of that color on the
screen immediately change to the new definition.  This function is a no-op on
most terminals; it is active only if :func:`can_change_color` returns ``1``.



+-*/+-*/+-*/killchar f 
killchar()

Return the user's current line kill character. Under Unix operating systems
this is a property of the controlling tty of the curses program, and is not set
by the curses library itself.



+-*/+-*/+-*/napms f 
napms(ms)

Sleep for *ms* milliseconds.



+-*/+-*/+-*/color_pair f 
color_pair(color_number)

Return the attribute value for displaying text in the specified color.  This
attribute value can be combined with :const:`A_STANDOUT`, :const:`A_REVERSE`,
and the other :const:`A_\*` attributes.  :func:`pair_number` is the counterpart
to this function.



+-*/+-*/+-*/beep f 
beep()

Emit a short attention sound.



+-*/+-*/+-*/noraw f 
noraw()

Leave raw mode. Return to normal "cooked" mode with line buffering.



+-*/+-*/+-*/newpad f 
newpad(nlines, ncols)

Create and return a pointer to a new pad data structure with the given number
of lines and columns.  A pad is returned as a window object.

A pad is like a window, except that it is not restricted by the screen size, and
is not necessarily associated with a particular part of the screen.  Pads can be
used when a large window is needed, and only a part of the window will be on the
screen at one time.  Automatic refreshes of pads (such as from scrolling or
echoing of input) do not occur.  The :meth:`refresh` and :meth:`noutrefresh`
methods of a pad require 6 arguments to specify the part of the pad to be
displayed and the location on the screen to be used for the display. The
arguments are *pminrow*, *pmincol*, *sminrow*, *smincol*, *smaxrow*, *smaxcol*; the *p*
arguments refer to the upper left corner of the pad region to be displayed and
the *s* arguments define a clipping box on the screen within which the pad region
is to be displayed.



+-*/+-*/+-*/newwin f 
newwin([nlines, ncols,] begin_y, begin_x)

Return a new window, whose left-upper corner is at  ``(begin_y, begin_x)``, and
whose height/width is  *nlines*/*ncols*.

By default, the window will extend from the  specified position to the lower
right corner of the screen.



+-*/+-*/+-*/nl f 
nl()

Enter newline mode.  This mode translates the return key into newline on input,
and translates newline into return and line-feed on output. Newline mode is
initially on.



+-*/+-*/+-*/echo f 
echo()

Enter echo mode.  In echo mode, each character input is echoed to the screen as
it is entered.



+-*/+-*/+-*/setsyx f 
setsyx(y, x)

Set the virtual screen cursor to *y*, *x*. If *y* and *x* are both -1, then
leaveok is set.



+-*/+-*/+-*/keyname f 
keyname(k)

Return the name of the key numbered *k*.  The name of a key generating printable
ASCII character is the key's character.  The name of a control-key combination
is a two-character string consisting of a caret followed by the corresponding
printable ASCII character.  The name of an alt-key combination (128-255) is a
string consisting of the prefix 'M-' followed by the name of the corresponding
ASCII character.



+-*/+-*/+-*/has_colors f 
has_colors()

Return ``True`` if the terminal can display colors; otherwise, return ``False``.



+-*/+-*/+-*/erasechar f 
erasechar()

Return the user's current erase character.  Under Unix operating systems this
is a property of the controlling tty of the curses program, and is not set by
the curses library itself.



+-*/+-*/+-*/use_env f 
use_env(flag)

If used, this function should be called before :func:`initscr` or newterm are
called.  When *flag* is ``False``, the values of lines and columns specified in the
terminfo database will be used, even if environment variables :envvar:`LINES`
and :envvar:`COLUMNS` (used by default) are set, or if curses is running in a
window (in which case default behavior would be to use the window size if
:envvar:`LINES` and :envvar:`COLUMNS` are not set).



+-*/+-*/+-*/def_shell_mode f 
def_shell_mode()

Save the current terminal mode as the "shell" mode, the mode when the running
program is not using curses.  (Its counterpart is the "program" mode, when the
program is using curses capabilities.) Subsequent calls to
:func:`reset_shell_mode` will restore this mode.



+-*/+-*/+-*/termname f 
termname()

Return the value of the environment variable :envvar:`TERM`, truncated to 14 characters.



+-*/+-*/+-*/mouseinterval f 
mouseinterval(interval)

Set the maximum time in milliseconds that can elapse between press and release
events in order for them to be recognized as a click, and return the previous
interval value.  The default value is 200 msec, or one fifth of a second.



+-*/+-*/+-*/getmouse f 
getmouse()

After :meth:`getch` returns :const:`KEY_MOUSE` to signal a mouse event, this
method should be call to retrieve the queued mouse event, represented as a
5-tuple ``(id, x, y, z, bstate)``. *id* is an ID value used to distinguish
multiple devices, and *x*, *y*, *z* are the event's coordinates.  (*z* is
currently unused.)  *bstate* is an integer value whose bits will be set to
indicate the type of event, and will be the bitwise OR of one or more of the
following constants, where *n* is the button number from 1 to 4:
:const:`BUTTONn_PRESSED`, :const:`BUTTONn_RELEASED`, :const:`BUTTONn_CLICKED`,
:const:`BUTTONn_DOUBLE_CLICKED`, :const:`BUTTONn_TRIPLE_CLICKED`,
:const:`BUTTON_SHIFT`, :const:`BUTTON_CTRL`, :const:`BUTTON_ALT`.



+-*/+-*/+-*/ungetmouse f 
ungetmouse(id, x, y, z, bstate)

Push a :const:`KEY_MOUSE` event onto the input queue, associating the given
state data with it.



+-*/+-*/+-*/resetty f 
resetty()

Restore the state of the terminal modes to what it was at the last call to
:func:`savetty`.



+-*/+-*/+-*/filter f 
filter()

The :func:`.filter` routine, if used, must be called before :func:`initscr` is
called.  The effect is that, during those calls, :envvar:`LINES` is set to 1; the
capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home
string is set to the value of cr. The effect is that the cursor is confined to
the current line, and so are screen updates.  This may be used for enabling
character-at-a-time  line editing without touching the rest of the screen.



+-*/+-*/+-*/getsyx f 
getsyx()

Return the current coordinates of the virtual screen cursor in y and x.  If
leaveok is currently true, then -1,-1 is returned.



+-*/+-*/+-*/isendwin f 
isendwin()

Return ``True`` if :func:`endwin` has been called (that is, the  curses library has
been deinitialized).



+-*/+-*/+-*/noecho f 
noecho()

Leave echo mode.  Echoing of input characters is turned off.



+-*/+-*/+-*/reset_prog_mode f 
reset_prog_mode()

Restore the  terminal  to "program" mode, as previously saved  by
:func:`def_prog_mode`.



+-*/+-*/+-*/longname f 
longname()

Return a string containing the terminfo long name field describing the current
terminal.  The maximum length of a verbose description is 128 characters.  It is
defined only after the call to :func:`initscr`.



+-*/+-*/+-*/tigetflag f 
tigetflag(capname)

Return the value of the Boolean capability corresponding to the terminfo
capability name *capname*.  The value ``-1`` is returned if *capname* is not a
Boolean capability, or ``0`` if it is canceled or absent from the terminal
description.



+-*/+-*/+-*/pair_number f 
pair_number(attr)

Return the number of the color-pair set by the attribute value *attr*.
:func:`color_pair` is the counterpart to this function.



+-*/+-*/+-*/delay_output f 
delay_output(ms)

Insert an *ms* millisecond pause in output.



+-*/+-*/+-*/tparm f 
tparm(str[, ...])

Instantiate the string *str* with the supplied parameters, where *str* should
be a parameterized string obtained from the terminfo database.  E.g.
``tparm(tigetstr("cup"), 5, 3)`` could result in ``'\033[6;4H'``, the exact
result depending on terminal type.



+-*/+-*/+-*/version d 
version

A string representing the current version of the module.  Also available as
:const:`__version__`.


+-*/+-*/+-*/OK d 
OK

Some curses routines  that  return  an integer, such as  :func:`napms`, return
:const:`OK` upon success.



+-*/+-*/+-*/ERR d 
ERR

Some curses routines  that  return  an integer, such as  :func:`getch`, return
:const:`ERR` upon failure.



+-*/+-*/+-*/error e 
error

Exception raised when a curses library function returns an error.


+-*/+-*/+-*/window _ 
+-*/+-*/+-*/+-*/setscrreg m 
setscrreg(top, bottom)

Set the scrolling region from line *top* to line *bottom*. All scrolling actions
will take place in this region.



+-*/+-*/+-*/+-*/keypad m 
keypad(yes)

If *yes* is 1, escape sequences generated by some keys (keypad,  function keys)
will be interpreted by :mod:`curses`. If *yes* is 0, escape sequences will be
left as is in the input stream.



+-*/+-*/+-*/+-*/instr m 
instr([y, x] [, n])

Return a string of characters, extracted from the window starting at the
current cursor position, or at *y*, *x* if specified. Attributes are stripped
from the characters.  If *n* is specified, :meth:`instr` returns a string
at most *n* characters long (exclusive of the trailing NUL).



+-*/+-*/+-*/+-*/insdelln m 
insdelln(nlines)

Insert *nlines* lines into the specified window above the current line.  The
*nlines* bottom lines are lost.  For negative *nlines*, delete *nlines* lines
starting with the one under the cursor, and move the remaining lines up.  The
bottom *nlines* lines are cleared.  The current cursor position remains the
same.



+-*/+-*/+-*/+-*/move m 
move(new_y, new_x)

Move cursor to ``(new_y, new_x)``.



+-*/+-*/+-*/+-*/overlay m 
overlay(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])

Overlay the window on top of *destwin*. The windows need not be the same size,
only the overlapping region is copied. This copy is non-destructive, which means
that the current background character does not overwrite the old contents of
*destwin*.

To get fine-grained control over the copied region, the second form of
:meth:`overlay` can be used. *sminrow* and *smincol* are the upper-left
coordinates of the source window, and the other variables mark a rectangle in
the destination window.



+-*/+-*/+-*/+-*/getkey m 
getkey([y, x])

Get a character, returning a string instead of an integer, as :meth:`getch`
does. Function keys, keypad keys and so on return a multibyte string containing
the key name.  In no-delay mode, an exception is raised if there is no input.



+-*/+-*/+-*/+-*/idcok m 
idcok(flag)

If *flag* is ``False``, curses no longer considers using the hardware insert/delete
character feature of the terminal; if *flag* is ``True``, use of character insertion
and deletion is enabled.  When curses is first initialized, use of character
insert/delete is enabled by default.



+-*/+-*/+-*/+-*/hline m 
hline([y, x,] ch, n)

Display a horizontal line starting at ``(y, x)`` with length *n* consisting of
the character *ch*.



+-*/+-*/+-*/+-*/enclose m 
enclose(y, x)

Test whether the given pair of screen-relative character-cell coordinates are
enclosed by the given window, returning ``True`` or ``False``.  It is useful for
determining what subset of the screen windows enclose the location of a mouse
event.



+-*/+-*/+-*/+-*/vline m 
vline([y, x,] ch, n)

Display a vertical line starting at ``(y, x)`` with length *n* consisting of the
character *ch*.



+-*/+-*/+-*/+-*/chgat m 
chgat([y, x, ] [num,] attr)

Set the attributes of *num* characters at the current cursor position, or at
position ``(y, x)`` if supplied. If no value of *num* is given or *num* = -1,
the attribute will  be set on all the characters to the end of the line.  This
function does not move the cursor. The changed line will be touched using the
:meth:`touchline` method so that the contents will be redisplayed by the next
window refresh.



+-*/+-*/+-*/+-*/subpad m 
subpad([nlines, ncols,] begin_y, begin_x)

Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and
whose width/height is *ncols*/*nlines*.



+-*/+-*/+-*/+-*/addch m 
addch([y, x,] ch[, attr])

.. note::

   A *character* means a C character (an ASCII code), rather than a Python
   character (a string of length 1). (This note is true whenever the
   documentation mentions a character.) The built-in :func:`ord` is handy for
   conveying strings to codes.

Paint character *ch* at ``(y, x)`` with attributes *attr*, overwriting any
character previously painter at that location.  By default, the character
position and attributes are the current settings for the window object.



+-*/+-*/+-*/+-*/idlok m 
idlok(yes)

If called with *yes* equal to 1, :mod:`curses` will try and use hardware line
editing facilities. Otherwise, line insertion/deletion are disabled.



+-*/+-*/+-*/+-*/bkgdset m 
bkgdset(ch[, attr])

Set the window's background.  A window's background consists of a character and
any combination of attributes.  The attribute part of the background is combined
(OR'ed) with all non-blank characters that are written into the window.  Both
the character and attribute parts of the background are combined with the blank
characters.  The background becomes a property of the character and moves with
the character through any scrolling and insert/delete line/character operations.



+-*/+-*/+-*/+-*/border m 
border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])

Draw a border around the edges of the window. Each parameter specifies  the
character to use for a specific part of the border; see the table below for more
details.  The characters can be specified as integers or as one-character
strings.

.. note::

   A ``0`` value for any parameter will cause the default character to be used for
   that parameter.  Keyword parameters can *not* be used.  The defaults are listed
   in this table:

+-----------+---------------------+-----------------------+
| Parameter | Description         | Default value         |
+===========+=====================+=======================+
| *ls*      | Left side           | :const:`ACS_VLINE`    |
+-----------+---------------------+-----------------------+
| *rs*      | Right side          | :const:`ACS_VLINE`    |
+-----------+---------------------+-----------------------+
| *ts*      | Top                 | :const:`ACS_HLINE`    |
+-----------+---------------------+-----------------------+
| *bs*      | Bottom              | :const:`ACS_HLINE`    |
+-----------+---------------------+-----------------------+
| *tl*      | Upper-left corner   | :const:`ACS_ULCORNER` |
+-----------+---------------------+-----------------------+
| *tr*      | Upper-right corner  | :const:`ACS_URCORNER` |
+-----------+---------------------+-----------------------+
| *bl*      | Bottom-left corner  | :const:`ACS_LLCORNER` |
+-----------+---------------------+-----------------------+
| *br*      | Bottom-right corner | :const:`ACS_LRCORNER` |
+-----------+---------------------+-----------------------+



+-*/+-*/+-*/+-*/addnstr m 
addnstr([y, x,] str, n[, attr])

Paint at most *n* characters of the  string *str* at ``(y, x)`` with attributes
*attr*, overwriting anything previously on the display.



+-*/+-*/+-*/+-*/overwrite m 
overwrite(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])

Overwrite the window on top of *destwin*. The windows need not be the same size,
in which case only the overlapping region is copied. This copy is destructive,
which means that the current background character overwrites the old contents of
*destwin*.

To get fine-grained control over the copied region, the second form of
:meth:`overwrite` can be used. *sminrow* and *smincol* are the upper-left
coordinates of the source window, the other variables mark a rectangle in the
destination window.



+-*/+-*/+-*/+-*/bkgd m 
bkgd(ch[, attr])

Set the background property of the window to the character *ch*, with
attributes *attr*.  The change is then applied to every character position in
that window:

* The attribute of every character in the window  is changed to the new
  background attribute.

* Wherever  the  former background character appears, it is changed to the new
  background character.



+-*/+-*/+-*/+-*/clrtobot m 
clrtobot()

Erase from cursor to the end of the window: all lines below the cursor are
deleted, and then the equivalent of :meth:`clrtoeol` is performed.



+-*/+-*/+-*/+-*/getyx m 
getyx()

Return a tuple ``(y, x)`` of current cursor position  relative to the window's
upper-left corner.



+-*/+-*/+-*/+-*/insertln m 
insertln()

Insert a blank line under the cursor. All following lines are moved down by one
line.



+-*/+-*/+-*/+-*/notimeout m 
notimeout(yes)

If *yes* is ``1``, escape sequences will not be timed out.

If *yes* is ``0``, after a few milliseconds, an escape sequence will not be
interpreted, and will be left in the input stream as is.



+-*/+-*/+-*/+-*/insstr m 
insstr([y, x, ] str [, attr])

Insert a character string (as many characters as will fit on the line) before
the character under the cursor.  All characters to the right of the cursor are
shifted right, with the rightmost characters on the line being lost.  The cursor
position does not change (after moving to *y*, *x*, if specified).



+-*/+-*/+-*/+-*/noutrefresh m 
noutrefresh()

Mark for refresh but wait.  This function updates the data structure
representing the desired state of the window, but does not force an update of
the physical screen.  To accomplish that, call  :func:`doupdate`.



+-*/+-*/+-*/+-*/putwin m 
putwin(file)

Write all data associated with the window into the provided file object.  This
information can be later retrieved using the :func:`getwin` function.



+-*/+-*/+-*/+-*/insnstr m 
insnstr([y, x,] str, n [, attr])

Insert a character string (as many characters as will fit on the line) before
the character under the cursor, up to *n* characters.   If *n* is zero or
negative, the entire string is inserted. All characters to the right of the
cursor are shifted right, with the rightmost characters on the line being lost.
The cursor position does not change (after moving to *y*, *x*, if specified).



+-*/+-*/+-*/+-*/untouchwin m 
untouchwin()

Mark all lines in  the  window  as unchanged since the last call to
:meth:`refresh`.



+-*/+-*/+-*/+-*/getstr m 
getstr([y, x])

Read a string from the user, with primitive line editing capacity.



+-*/+-*/+-*/+-*/deleteln m 
deleteln()

Delete the line under the cursor. All following lines are moved up by one line.



+-*/+-*/+-*/+-*/touchline m 
touchline(start, count[, changed])

Pretend *count* lines have been changed, starting with line *start*.  If
*changed* is supplied, it specifies whether the affected lines are marked as
having been changed (*changed*\ =1) or unchanged (*changed*\ =0).



+-*/+-*/+-*/+-*/redrawln m 
redrawln(beg, num)

Indicate that the *num* screen lines, starting at line *beg*, are corrupted and
should be completely redrawn on the next :meth:`refresh` call.



+-*/+-*/+-*/+-*/inch m 
inch([y, x])

Return the character at the given position in the window. The bottom 8 bits are
the character proper, and upper bits are the attributes.



+-*/+-*/+-*/+-*/echochar m 
echochar(ch[, attr])

Add character *ch* with attribute *attr*, and immediately  call :meth:`refresh`
on the window.



+-*/+-*/+-*/+-*/leaveok m 
leaveok(yes)

If *yes* is 1, cursor is left where it is on update, instead of being at "cursor
position."  This reduces cursor movement where possible. If possible the cursor
will be made invisible.

If *yes* is 0, cursor will always be at "cursor position" after an update.



+-*/+-*/+-*/+-*/nodelay m 
nodelay(yes)

If *yes* is ``1``, :meth:`getch` will be non-blocking.



+-*/+-*/+-*/+-*/subwin m 
subwin([nlines, ncols,] begin_y, begin_x)

Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and
whose width/height is *ncols*/*nlines*.

By default, the sub-window will extend from the specified position to the lower
right corner of the window.



+-*/+-*/+-*/+-*/standend m 
standend()

Turn off the standout attribute.  On some terminals this has the side effect of
turning off all attributes.



+-*/+-*/+-*/+-*/getch m 
getch([y, x])

Get a character. Note that the integer returned does *not* have to be in ASCII
range: function keys, keypad keys and so on return numbers higher than 256. In
no-delay mode, -1 is returned if there is no input, else :func:`getch` waits
until a key is pressed.



+-*/+-*/+-*/+-*/clear m 
clear()

Like :meth:`erase`, but also cause the whole window to be repainted upon next
call to :meth:`refresh`.



+-*/+-*/+-*/+-*/addstr m 
addstr([y, x,] str[, attr])

Paint the string *str* at ``(y, x)`` with attributes *attr*, overwriting
anything previously on the display.



+-*/+-*/+-*/+-*/attron m 
attron(attr)

Add attribute *attr* from the "background" set applied to all writes to the
current window.



+-*/+-*/+-*/+-*/clearok m 
clearok(yes)

If *yes* is 1, the next call to :meth:`refresh` will clear the window
completely.



+-*/+-*/+-*/+-*/attrset m 
attrset(attr)

Set the "background" set of attributes to *attr*.  This set is initially 0 (no
attributes).



+-*/+-*/+-*/+-*/is_wintouched m 
is_wintouched()

Return ``True`` if the specified window was modified since the last call to
:meth:`refresh`; otherwise return ``False``.



+-*/+-*/+-*/+-*/derwin m 
derwin([nlines, ncols,] begin_y, begin_x)

An abbreviation for "derive window", :meth:`derwin` is the same as calling
:meth:`subwin`, except that *begin_y* and *begin_x* are relative to the origin
of the window, rather than relative to the entire screen.  Return a window
object for the derived window.



+-*/+-*/+-*/+-*/mvderwin m 
mvderwin(y, x)

Move the window inside its parent window.  The screen-relative parameters of
the window are not changed.  This routine is used to display different parts of
the parent window at the same physical position on the screen.



+-*/+-*/+-*/+-*/scrollok m 
scrollok(flag)

Control what happens when the cursor of a window is moved off the edge of the
window or scrolling region, either as a result of a newline action on the bottom
line, or typing the last character of the last line.  If *flag* is false, the
cursor is left on the bottom line.  If *flag* is true, the window is scrolled up
one line.  Note that in order to get the physical scrolling effect on the
terminal, it is also necessary to call :meth:`idlok`.



+-*/+-*/+-*/+-*/standout m 
standout()

Turn on attribute *A_STANDOUT*.



+-*/+-*/+-*/+-*/clrtoeol m 
clrtoeol()

Erase from cursor to the end of the line.



+-*/+-*/+-*/+-*/redrawwin m 
redrawwin()

Touch the entire window, causing it to be completely redrawn on the next
:meth:`refresh` call.



+-*/+-*/+-*/+-*/resize m 
resize(nlines, ncols)

Reallocate storage for a curses window to adjust its dimensions to the
specified values.  If either dimension is larger than the current values, the
window's data is filled with blanks that have the current background
rendition (as set by :meth:`bkgdset`) merged into them.



+-*/+-*/+-*/+-*/getbegyx m 
getbegyx()

Return a tuple ``(y, x)`` of co-ordinates of upper-left corner.



+-*/+-*/+-*/+-*/box m 
box([vertch, horch])

Similar to :meth:`border`, but both *ls* and *rs* are *vertch* and both *ts* and
*bs* are *horch*.  The default corner characters are always used by this function.



+-*/+-*/+-*/+-*/is_linetouched m 
is_linetouched(line)

Return ``True`` if the specified line was modified since the last call to
:meth:`refresh`; otherwise return ``False``.  Raise a :exc:`curses.error`
exception if *line* is not valid for the given window.



+-*/+-*/+-*/+-*/mvwin m 
mvwin(new_y, new_x)

Move the window so its upper-left corner is at ``(new_y, new_x)``.



+-*/+-*/+-*/+-*/syncdown m 
syncdown()

Touch each location in the window that has been touched in any of its ancestor
windows.  This routine is called by :meth:`refresh`, so it should almost never
be necessary to call it manually.



+-*/+-*/+-*/+-*/getparyx m 
getparyx()

Return the beginning coordinates of this window relative to its parent window
into two integer variables y and x.  Return ``-1, -1`` if this window has no
parent.



+-*/+-*/+-*/+-*/attroff m 
attroff(attr)

Remove attribute *attr* from the "background" set applied to all writes to the
current window.



+-*/+-*/+-*/+-*/cursyncup m 
cursyncup()

Update the current cursor position of all the ancestors of the window to
reflect the current cursor position of the window.



+-*/+-*/+-*/+-*/refresh m 
refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])

Update the display immediately (sync actual screen with previous
drawing/deleting methods).

The 6 optional arguments can only be specified when the window is a pad created
with :func:`newpad`.  The additional parameters are needed to indicate what part
of the pad and screen are involved. *pminrow* and *pmincol* specify the upper
left-hand corner of the rectangle to be displayed in the pad.  *sminrow*,
*smincol*, *smaxrow*, and *smaxcol* specify the edges of the rectangle to be
displayed on the screen.  The lower right-hand corner of the rectangle to be
displayed in the pad is calculated from the screen coordinates, since the
rectangles must be the same size.  Both rectangles must be entirely contained
within their respective structures.  Negative values of *pminrow*, *pmincol*,
*sminrow*, or *smincol* are treated as if they were zero.



+-*/+-*/+-*/+-*/scroll m 
scroll([lines=1])

Scroll the screen or scrolling region upward by *lines* lines.



+-*/+-*/+-*/+-*/syncok m 
syncok(flag)

If called with *flag* set to ``True``, then :meth:`syncup` is called automatically
whenever there is a change in the window.



+-*/+-*/+-*/+-*/erase m 
erase()

Clear the window.



+-*/+-*/+-*/+-*/immedok m 
immedok(flag)

If *flag* is ``True``, any change in the window image automatically causes the
window to be refreshed; you no longer have to call :meth:`refresh` yourself.
However, it may degrade performance considerably, due to repeated calls to
wrefresh.  This option is disabled by default.



+-*/+-*/+-*/+-*/timeout m 
timeout(delay)

Set blocking or non-blocking read behavior for the window.  If *delay* is
negative, blocking read is used (which will wait indefinitely for input).  If
*delay* is zero, then non-blocking read is used, and -1 will be returned by
:meth:`getch` if no input is waiting.  If *delay* is positive, then
:meth:`getch` will block for *delay* milliseconds, and return -1 if there is
still no input at the end of that time.



+-*/+-*/+-*/+-*/insch m 
insch([y, x,] ch[, attr])

Paint character *ch* at ``(y, x)`` with attributes *attr*, moving the line from
position *x* right by one character.



+-*/+-*/+-*/+-*/getmaxyx m 
getmaxyx()

Return a tuple ``(y, x)`` of the height and width of the window.



+-*/+-*/+-*/+-*/delch m 
delch([y, x])

Delete any character at ``(y, x)``.



+-*/+-*/+-*/+-*/syncup m 
syncup()

Touch all locations in ancestors of the window that have been changed in  the
window.



+-*/+-*/+-*/+-*/touchwin m 
touchwin()

Pretend the whole window has been changed, for purposes of drawing
optimizations.



+-*/+-*/+-*/+-*/getbkgd m 
getbkgd()

Return the given window's current background character/attribute pair.



+-*/+-*/+-*/ascii p Constants and set-membership functions for ASCII characters.
+-*/+-*/+-*/+-*/unctrl f 
unctrl(c)

Return a string representation of the ASCII character *c*.  If *c* is printable,
this string is the character itself.  If the character is a control character
(0x00-0x1f) the string consists of a caret (``'^'``) followed by the
corresponding uppercase letter. If the character is an ASCII delete (0x7f) the
string is ``'^?'``.  If the character has its meta bit (0x80) set, the meta bit
is stripped, the preceding rules applied, and ``'!'`` prepended to the result.



+-*/+-*/+-*/+-*/isupper f 
isupper(c)

Checks for an ASCII uppercase letter.



+-*/+-*/+-*/+-*/isalnum f 
isalnum(c)

Checks for an ASCII alphanumeric character; it is equivalent to ``isalpha(c) or
isdigit(c)``.



+-*/+-*/+-*/+-*/ctrl f 
ctrl(c)

Return the control character corresponding to the given character (the character
bit value is bitwise-anded with 0x1f).



+-*/+-*/+-*/+-*/ismeta f 
ismeta(c)

Checks for a non-ASCII character (ordinal values 0x80 and above).


+-*/+-*/+-*/+-*/isctrl f 
isctrl(c)

Checks for an ASCII control character (ordinal values 0 to 31).



+-*/+-*/+-*/+-*/isxdigit f 
isxdigit(c)

Checks for an ASCII hexadecimal digit.  This is equivalent to ``c in
string.hexdigits``.



+-*/+-*/+-*/+-*/iscntrl f 
iscntrl(c)

Checks for an ASCII control character (in the range 0x00 to 0x1f).



+-*/+-*/+-*/+-*/islower f 
islower(c)

Checks for an ASCII lower-case character.



+-*/+-*/+-*/+-*/isprint f 
isprint(c)

Checks for any ASCII printable character including space.



+-*/+-*/+-*/+-*/isgraph f 
isgraph(c)

Checks for ASCII any printable character except space.



+-*/+-*/+-*/+-*/isascii f 
isascii(c)

Checks for a character value that fits in the 7-bit ASCII set.



+-*/+-*/+-*/+-*/isdigit f 
isdigit(c)

Checks for an ASCII decimal digit, ``'0'`` through ``'9'``.  This is equivalent
to ``c in string.digits``.



+-*/+-*/+-*/+-*/isalpha f 
isalpha(c)

Checks for an ASCII alphabetic character; it is equivalent to ``isupper(c) or
islower(c)``.



+-*/+-*/+-*/+-*/alt f 
alt(c)

Return the 8-bit character corresponding to the given ASCII character (the
character bit value is bitwise-ored with 0x80).


+-*/+-*/+-*/+-*/ispunct f 
ispunct(c)

Checks for any printable ASCII character which is not a space or an alphanumeric
character.



+-*/+-*/+-*/+-*/ascii f 
ascii(c)

Return the ASCII value corresponding to the low 7 bits of *c*.



+-*/+-*/+-*/+-*/isspace f 
isspace(c)

Checks for ASCII white-space characters; space, line feed, carriage return, form
feed, horizontal tab, vertical tab.



+-*/+-*/+-*/+-*/isblank f 
isblank(c)

Checks for an ASCII whitespace character.



+-*/+-*/+-*/+-*/controlnames d 
controlnames

A 33-element string array that contains the ASCII mnemonics for the thirty-two
ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic
``SP`` for the space character.



+-*/+-*/+-*/panel p A panel stack extension that adds depth to  curses windows.
+-*/+-*/+-*/+-*/new_panel f 
new_panel(win)

Returns a panel object, associating it with the given window *win*. Be aware
that you need to keep the returned panel object referenced explicitly.  If you
don't, the panel object is garbage collected and removed from the panel stack.



+-*/+-*/+-*/+-*/bottom_panel f 
bottom_panel()

Returns the bottom panel in the panel stack.



+-*/+-*/+-*/+-*/update_panels f 
update_panels()

Updates the virtual screen after changes in the panel stack. This does not call
:func:`curses.doupdate`, so you'll have to do this yourself.



+-*/+-*/+-*/+-*/top_panel f 
top_panel()

Returns the top panel in the panel stack.



+-*/+-*/+-*/+-*/Panel _ 
+-*/+-*/+-*/+-*/+-*/userptr m 
userptr()

Returns the user pointer for the panel.  This might be any Python object.



+-*/+-*/+-*/+-*/+-*/hide m 
hide()

Hide the panel. This does not delete the object, it just makes the window on
screen invisible.



+-*/+-*/+-*/+-*/+-*/bottom m 
bottom()

Push the panel to the bottom of the stack.



+-*/+-*/+-*/+-*/+-*/top m 
top()

Push panel to the top of the stack.



+-*/+-*/+-*/+-*/+-*/move m 
move(y, x)

Move the panel to the screen coordinates ``(y, x)``.



+-*/+-*/+-*/+-*/+-*/window m 
window()

Returns the window object associated with the panel.



+-*/+-*/+-*/+-*/+-*/replace m 
replace(win)

Change the window associated with the panel to the window *win*.



+-*/+-*/+-*/+-*/+-*/below m 
below()

Returns the panel below the current panel.



+-*/+-*/+-*/+-*/+-*/above m 
above()

Returns the panel above the current panel.



+-*/+-*/+-*/+-*/+-*/show m 
show()

Display the panel (which might have been hidden).



+-*/+-*/+-*/+-*/+-*/hidden m 
hidden()

Returns true if the panel is hidden (not visible), false otherwise.



+-*/+-*/+-*/+-*/+-*/set_userptr m 
set_userptr(obj)

Set the panel's user pointer to *obj*. This is used to associate an arbitrary
piece of data with the panel, and can be any Python object.



+-*/+-*/+-*/textpad p Emacs-like input editing in a curses window.
+-*/+-*/+-*/+-*/rectangle f 
rectangle(win, uly, ulx, lry, lrx)

Draw a rectangle.  The first argument must be a window object; the remaining
arguments are coordinates relative to that window.  The second and third
arguments are the y and x coordinates of the upper left hand corner of the
rectangle to be drawn; the fourth and fifth arguments are the y and x
coordinates of the lower right hand corner. The rectangle will be drawn using
VT100/IBM PC forms characters on terminals that make this possible (including
xterm and most other software terminal emulators).  Otherwise it will be drawn
with ASCII  dashes, vertical bars, and plus signs.



+-*/+-*/+-*/+-*/Textbox c 
Textbox(win)

Return a textbox widget object.  The *win* argument should be a curses
:class:`WindowObject` in which the textbox is to be contained. The edit cursor
of the textbox is initially located at the upper left hand corner of the
containing window, with coordinates ``(0, 0)``. The instance's
:attr:`stripspaces` flag is initially on.

:class:`Textbox` objects have the following methods:



+-*/+-*/+-*/+-*/+-*/stripspaces d 
stripspaces

This attribute is a flag which controls the interpretation of blanks in
the window.  When it is on, trailing blanks on each line are ignored; any
cursor motion that would land the cursor on a trailing blank goes to the
end of that line instead, and trailing blanks are stripped when the window
contents are gathered.



+-*/+-*/+-*/+-*/+-*/edit m 
edit([validator])

This is the entry point you will normally use.  It accepts editing
keystrokes until one of the termination keystrokes is entered.  If
*validator* is supplied, it must be a function.  It will be called for
each keystroke entered with the keystroke as a parameter; command dispatch
is done on the result. This method returns the window contents as a
string; whether blanks in the window are included is affected by the
:attr:`stripspaces` attribute.



+-*/+-*/+-*/+-*/+-*/do_command m 
do_command(ch)

Process a single command keystroke.  Here are the supported special
keystrokes:

+------------------+-------------------------------------------+
| Keystroke        | Action                                    |
+==================+===========================================+
| :kbd:`Control-A` | Go to left edge of window.                |
+------------------+-------------------------------------------+
| :kbd:`Control-B` | Cursor left, wrapping to previous line if |
|                  | appropriate.                              |
+------------------+-------------------------------------------+
| :kbd:`Control-D` | Delete character under cursor.            |
+------------------+-------------------------------------------+
| :kbd:`Control-E` | Go to right edge (stripspaces off) or end |
|                  | of line (stripspaces on).                 |
+------------------+-------------------------------------------+
| :kbd:`Control-F` | Cursor right, wrapping to next line when  |
|                  | appropriate.                              |
+------------------+-------------------------------------------+
| :kbd:`Control-G` | Terminate, returning the window contents. |
+------------------+-------------------------------------------+
| :kbd:`Control-H` | Delete character backward.                |
+------------------+-------------------------------------------+
| :kbd:`Control-J` | Terminate if the window is 1 line,        |
|                  | otherwise insert newline.                 |
+------------------+-------------------------------------------+
| :kbd:`Control-K` | If line is blank, delete it, otherwise    |
|                  | clear to end of line.                     |
+------------------+-------------------------------------------+
| :kbd:`Control-L` | Refresh screen.                           |
+------------------+-------------------------------------------+
| :kbd:`Control-N` | Cursor down; move down one line.          |
+------------------+-------------------------------------------+
| :kbd:`Control-O` | Insert a blank line at cursor location.   |
+------------------+-------------------------------------------+
| :kbd:`Control-P` | Cursor up; move up one line.              |
+------------------+-------------------------------------------+

Move operations do nothing if the cursor is at an edge where the movement
is not possible.  The following synonyms are supported where possible:

+------------------------+------------------+
| Constant               | Keystroke        |
+========================+==================+
| :const:`KEY_LEFT`      | :kbd:`Control-B` |
+------------------------+------------------+
| :const:`KEY_RIGHT`     | :kbd:`Control-F` |
+------------------------+------------------+
| :const:`KEY_UP`        | :kbd:`Control-P` |
+------------------------+------------------+
| :const:`KEY_DOWN`      | :kbd:`Control-N` |
+------------------------+------------------+
| :const:`KEY_BACKSPACE` | :kbd:`Control-h` |
+------------------------+------------------+

All other keystrokes are treated as a command to insert the given
character and move right (with line wrapping).



+-*/+-*/+-*/+-*/+-*/gather m 
gather()

Return the window contents as a string; whether blanks in the
window are included is affected by the :attr:`stripspaces` member.



+-*/+-*/getopt p Portable parser for command line options; support both short andlong option names.
+-*/+-*/+-*/getopt f 
getopt(args, shortopts, longopts=[])

Parses command line options and parameter list.  *args* is the argument list to
be parsed, without the leading reference to the running program. Typically, this
means ``sys.argv[1:]``. *shortopts* is the string of option letters that the
script wants to recognize, with options that require an argument followed by a
colon (``':'``; i.e., the same format that Unix :c:func:`getopt` uses).

.. note::

   Unlike GNU :c:func:`getopt`, after a non-option argument, all further
   arguments are considered also non-options. This is similar to the way
   non-GNU Unix systems work.

*longopts*, if specified, must be a list of strings with the names of the
long options which should be supported.  The leading ``'--'`` characters
should not be included in the option name.  Long options which require an
argument should be followed by an equal sign (``'='``).  Optional arguments
are not supported.  To accept only long options, *shortopts* should be an
empty string.  Long options on the command line can be recognized so long as
they provide a prefix of the option name that matches exactly one of the
accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the
option ``--fo`` will match as ``--foo``, but ``--f`` will
not match uniquely, so :exc:`GetoptError` will be raised.

The return value consists of two elements: the first is a list of ``(option,
value)`` pairs; the second is the list of program arguments left after the
option list was stripped (this is a trailing slice of *args*).  Each
option-and-value pair returned has the option as its first element, prefixed
with a hyphen for short options (e.g., ``'-x'``) or two hyphens for long
options (e.g., ``'--long-option'``), and the option argument as its
second element, or an empty string if the option has no argument.  The
options occur in the list in the same order in which they were found, thus
allowing multiple occurrences.  Long and short options may be mixed.



+-*/+-*/+-*/gnu_getopt f 
gnu_getopt(args, shortopts, longopts=[])

This function works like :func:`getopt`, except that GNU style scanning mode is
used by default. This means that option and non-option arguments may be
intermixed. The :func:`getopt` function stops processing options as soon as a
non-option argument is encountered.

If the first character of the option string is ``'+'``, or if the environment
variable :envvar:`POSIXLY_CORRECT` is set, then option processing stops as
soon as a non-option argument is encountered.



+-*/+-*/+-*/GetoptError e 
GetoptError

This is raised when an unrecognized option is found in the argument list or when
an option requiring an argument is given none. The argument to the exception is
a string indicating the cause of the error.  For long options, an argument given
to an option which does not require one will also cause this exception to be
raised.  The attributes :attr:`msg` and :attr:`opt` give the error message and
related option; if there is no specific option to which the exception relates,
:attr:`opt` is an empty string.


+-*/+-*/+-*/error e 
error

Alias for :exc:`GetoptError`; for backward compatibility.


+-*/+-*/nntplib p NNTP protocol client (requires sockets).
+-*/+-*/+-*/decode_header f 
decode_header(header_str)

Decode a header value, un-escaping any escaped non-ASCII characters.
*header_str* must be a :class:`str` object.  The unescaped value is
returned.  Using this function is recommended to display some headers
in a human readable form::

   >>> decode_header("Some subject")
   'Some subject'
   >>> decode_header("=?ISO-8859-15?Q?D=E9buter_en_Python?=")
   'Débuter en Python'
   >>> decode_header("Re: =?UTF-8?B?cHJvYmzDqG1lIGRlIG1hdHJpY2U=?=")
   'Re: problème de matrice'


+-*/+-*/+-*/NNTPReplyError e 
NNTPReplyError

Exception raised when an unexpected reply is received from the server.



+-*/+-*/+-*/NNTPTemporaryError e 
NNTPTemporaryError

Exception raised when a response code in the range 400--499 is received.



+-*/+-*/+-*/NNTPError e 
NNTPError

Derived from the standard exception :exc:`Exception`, this is the base
class for all exceptions raised by the :mod:`nntplib` module.  Instances
of this class have the following attribute:

.. attribute:: response

   The response of the server if available, as a :class:`str` object.



+-*/+-*/+-*/NNTPDataError e 
NNTPDataError

Exception raised when there is some error in the response data.



+-*/+-*/+-*/NNTPPermanentError e 
NNTPPermanentError

Exception raised when a response code in the range 500--599 is received.



+-*/+-*/+-*/NNTPProtocolError e 
NNTPProtocolError

Exception raised when a reply is received from the server that does not begin
with a digit in the range 1--5.



+-*/+-*/+-*/NNTP c 
NNTP(host, port=119, user=None, password=None, readermode=None, usenetrc=False, [timeout])

Return a new :class:`NNTP` object, representing a connection
to the NNTP server running on host *host*, listening at port *port*.
An optional *timeout* can be specified for the socket connection.
If the optional *user* and *password* are provided, or if suitable
credentials are present in :file:`/.netrc` and the optional flag *usenetrc*
is true, the ``AUTHINFO USER`` and ``AUTHINFO PASS`` commands are used
to identify and authenticate the user to the server.  If the optional
flag *readermode* is true, then a ``mode reader`` command is sent before
authentication is performed.  Reader mode is sometimes necessary if you are
connecting to an NNTP server on the local machine and intend to call
reader-specific commands, such as ``group``.  If you get unexpected
:exc:`NNTPPermanentError`\ s, you might need to set *readermode*.

.. versionchanged:: 3.2
   *usenetrc* is now False by default.



+-*/+-*/+-*/+-*/nntp_version d 
nntp_version

An integer representing the version of the NNTP protocol supported by the
server.  In practice, this should be ``2`` for servers advertising
:rfc:`3977` compliance and ``1`` for others.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/nntp_implementation d 
nntp_implementation

A string describing the software name and version of the NNTP server,
or :const:`None` if not advertised by the server.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/body m 
body(message_spec=None, *, file=None)

Same as :meth:`article()`, but sends a ``BODY`` command.  The *lines*
returned (or written to *file*) will only contain the message body, not the
headers.



+-*/+-*/+-*/+-*/help m 
help(*, file=None)

Send a ``HELP`` command.  Return a pair ``(response, list)`` where *list* is a
list of help strings.



+-*/+-*/+-*/+-*/starttls m 
starttls(ssl_context=None)

Send a ``STARTTLS`` command.  The *ssl_context* argument is optional
and should be a :class:`ssl.SSLContext` object.  This will enable
encryption on the NNTP connection.

Note that this may not be done after authentication information has
been transmitted, and authentication occurs by default if possible during a
:class:`NNTP` object initialization.  See :meth:`NNTP.login` for information
on suppressing this behavior.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/over m 
over(message_spec, *, file=None)

Send a ``OVER`` command, or a ``XOVER`` command on legacy servers.
*message_spec* can be either a string representing a message id, or
a ``(first, last)`` tuple of numbers indicating a range of articles in
the current group, or a ``(first, None)`` tuple indicating a range of
articles starting from *first* to the last article in the current group,
or :const:`None` to select the current article in the current group.

Return a pair ``(response, overviews)``.  *overviews* is a list of
``(article_number, overview)`` tuples, one for each article selected
by *message_spec*.  Each *overview* is a dictionary with the same number
of items, but this number depends on the server.  These items are either
message headers (the key is then the lower-cased header name) or metadata
items (the key is then the metadata name prepended with ``":"``).  The
following items are guaranteed to be present by the NNTP specification:

* the ``subject``, ``from``, ``date``, ``message-id`` and ``references``
  headers
* the ``:bytes`` metadata: the number of bytes in the entire raw article
  (including headers and body)
* the ``:lines`` metadata: the number of lines in the article body

The value of each item is either a string, or :const:`None` if not present.

It is advisable to use the :func:`decode_header` function on header
values when they may contain non-ASCII characters::

   >>> _, _, first, last, _ = s.group('gmane.comp.python.devel')
   >>> resp, overviews = s.over((last, last))
   >>> art_num, over = overviews[0]
   >>> art_num
   117216
   >>> list(over.keys())
   ['xref', 'from', ':lines', ':bytes', 'references', 'date', 'message-id', 'subject']
   >>> over['from']
   '=?UTF-8?B?Ik1hcnRpbiB2LiBMw7Z3aXMi?= <martin@v.loewis.de>'
   >>> nntplib.decode_header(over['from'])
   '"Martin v. Löwis" <martin@v.loewis.de>'

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/set_debuglevel m 
set_debuglevel(level)

Set the instance's debugging level.  This controls the amount of debugging
output printed.  The default, ``0``, produces no debugging output.  A value of
``1`` produces a moderate amount of debugging output, generally a single line
per request or response.  A value of ``2`` or higher produces the maximum amount
of debugging output, logging each line sent and received on the connection
(including message text).



+-*/+-*/+-*/+-*/stat m 
stat(message_spec=None)

Send a ``STAT`` command, where *message_spec* is either a message id
(enclosed in ``'<'`` and ``'>'``) or an article number in the current group.
If *message_spec* is omitted or :const:`None`, the current article in the
current group is considered.  Return a triple ``(response, number, id)``
where *number* is the article number and *id* is the message id.

   >>> _, _, first, last, _ = s.group('gmane.comp.python.devel')
   >>> resp, number, message_id = s.stat(first)
   >>> number, message_id
   (9099, '<20030112190404.GE29873@epoch.metaslash.com>')



+-*/+-*/+-*/+-*/xover m 
xover(start, end, *, file=None)

Send an ``XOVER`` command.  *start* and *end* are article numbers
delimiting the range of articles to select.  The return value is the
same of for :meth:`over()`.  It is recommended to use :meth:`over()`
instead, since it will automatically use the newer ``OVER`` command
if available.



+-*/+-*/+-*/+-*/descriptions m 
descriptions(grouppattern)

Send a ``LIST NEWSGROUPS`` command, where *grouppattern* is a wildmat string as
specified in :rfc:`3977` (it's essentially the same as DOS or UNIX shell wildcard
strings).  Return a pair ``(response, descriptions)``, where *descriptions*
is a dictionary mapping group names to textual descriptions.

   >>> resp, descs = s.descriptions('gmane.comp.python.*')
   >>> len(descs)
   295
   >>> descs.popitem()
   ('gmane.comp.python.bio.general', 'BioPython discussion list (Moderated)')



+-*/+-*/+-*/+-*/ihave m 
ihave(message_id, data)

Send an ``IHAVE`` command. *message_id* is the id of the message to send
to the server (enclosed in  ``'<'`` and ``'>'``).  The *data* parameter
and the return value are the same as for :meth:`post()`.



+-*/+-*/+-*/+-*/quit m 
quit()

Send a ``QUIT`` command and close the connection.  Once this method has been
called, no other methods of the NNTP object should be called.



+-*/+-*/+-*/+-*/getwelcome m 
getwelcome()

Return the welcome message sent by the server in reply to the initial
connection.  (This message sometimes contains disclaimers or help information
that may be relevant to the user.)



+-*/+-*/+-*/+-*/group m 
group(name)

Send a ``GROUP`` command, where *name* is the group name.  The group is
selected as the current group, if it exists.  Return a tuple
``(response, count, first, last, name)`` where *count* is the (estimated)
number of articles in the group, *first* is the first article number in
the group, *last* is the last article number in the group, and *name*
is the group name.



+-*/+-*/+-*/+-*/next m 
next()

Send a ``NEXT`` command.  Return as for :meth:`stat`.



+-*/+-*/+-*/+-*/xpath m 
xpath(id)

Return a pair ``(resp, path)``, where *path* is the directory path to the
article with message ID *id*.  Most of the time, this extension is not
enabled by NNTP server administrators.



+-*/+-*/+-*/+-*/head m 
head(message_spec=None, *, file=None)

Same as :meth:`article()`, but sends a ``HEAD`` command.  The *lines*
returned (or written to *file*) will only contain the message headers, not
the body.



+-*/+-*/+-*/+-*/slave m 
slave()

Send a ``SLAVE`` command.  Return the server's *response*.



+-*/+-*/+-*/+-*/description m 
description(group)

Get a description for a single group *group*.  If more than one group matches
(if 'group' is a real wildmat string), return the first match.   If no group
matches, return an empty string.

This elides the response code from the server.  If the response code is needed,
use :meth:`descriptions`.



+-*/+-*/+-*/+-*/post m 
post(data)

Post an article using the ``POST`` command.  The *data* argument is either
a :term:`file object` opened for binary reading, or any iterable of bytes
objects (representing raw lines of the article to be posted).  It should
represent a well-formed news article, including the required headers.  The
:meth:`post` method automatically escapes lines beginning with ``.`` and
appends the termination line.

If the method succeeds, the server's response is returned.  If the server
refuses posting, a :class:`NNTPReplyError` is raised.



+-*/+-*/+-*/+-*/date m 
date()

Return a pair ``(response, date)``.  *date* is a :class:`~datetime.datetime`
object containing the current date and time of the server.



+-*/+-*/+-*/+-*/article m 
article(message_spec=None, *, file=None)

Send an ``ARTICLE`` command, where *message_spec* has the same meaning as
for :meth:`stat`.  Return a tuple ``(response, info)`` where *info*
is a :class:`~collections.namedtuple` with three attributes *number*,
*message_id* and *lines* (in that order).  *number* is the article number
in the group (or 0 if the information is not available), *message_id* the
message id as a string, and *lines* a list of lines (without terminating
newlines) comprising the raw message including headers and body.

   >>> resp, info = s.article('<20030112190404.GE29873@epoch.metaslash.com>')
   >>> info.number
   0
   >>> info.message_id
   '<20030112190404.GE29873@epoch.metaslash.com>'
   >>> len(info.lines)
   65
   >>> info.lines[0]
   b'Path: main.gmane.org!not-for-mail'
   >>> info.lines[1]
   b'From: Neal Norwitz <neal@metaslash.com>'
   >>> info.lines[-3:]
   [b'There is a patch for 2.3 as well as 2.2.', b'', b'Neal']



+-*/+-*/+-*/+-*/xhdr m 
xhdr(header, string, *, file=None)

Send an ``XHDR`` command.  The *header* argument is a header keyword, e.g.
``'subject'``.  The *string* argument should have the form ``'first-last'``
where *first* and *last* are the first and last article numbers to search.
Return a pair ``(response, list)``, where *list* is a list of pairs ``(id,
text)``, where *id* is an article number (as a string) and *text* is the text of
the requested header for that article. If the *file* parameter is supplied, then
the output of the  ``XHDR`` command is stored in a file.  If *file* is a string,
then the method will open a file with that name, write to it  then close it.
If *file* is a :term:`file object`, then it will start calling :meth:`write` on
it to store the lines of the command output. If *file* is supplied, then the
returned *list* is an empty list.



+-*/+-*/+-*/+-*/getcapabilities m 获取服务器功能字符串列表(通常都为大写)
+-*/+-*/+-*/+-*/last m 
last()

Send a ``LAST`` command.  Return as for :meth:`stat`.



+-*/+-*/+-*/+-*/list m 
list(group_pattern=None, *, file=None)

Send a ``LIST`` or ``LIST ACTIVE`` command.  Return a pair
``(response, list)`` where *list* is a list of tuples representing all
the groups available from this NNTP server, optionally matching the
pattern string *group_pattern*.  Each tuple has the form
``(group, last, first, flag)``, where *group* is a group name, *last*
and *first* are the last and first article numbers, and *flag* usually
takes one of these values:

* ``y``: Local postings and articles from peers are allowed.
* ``m``: The group is moderated and all postings must be approved.
* ``n``: No local postings are allowed, only articles from peers.
* ``j``: Articles from peers are filed in the junk group instead.
* ``x``: No local postings, and articles from peers are ignored.
* ``=foo.bar``: Articles are filed in the ``foo.bar`` group instead.

If *flag* has another value, then the status of the newsgroup should be
considered unknown.

This command can return very large results, especially if *group_pattern*
is not specified.  It is best to cache the results offline unless you
really need to refresh them.

.. versionchanged:: 3.2
   *group_pattern* was added.



+-*/+-*/+-*/+-*/login m 
login(user=None, password=None, usenetrc=True)

Send ``AUTHINFO`` commands with the user name and password.  If *user*
and *password* are None and *usenetrc* is True, credentials from
``~/.netrc`` will be used if possible.

Unless intentionally delayed, login is normally performed during the
:class:`NNTP` object initialization and separately calling this function
is unnecessary.  To force authentication to be delayed, you must not set
*user* or *password* when creating the object, and must set *usenetrc* to
False.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/newgroups m 
newgroups(date, *, file=None)

Send a ``NEWGROUPS`` command.  The *date* argument should be a
:class:`datetime.date` or :class:`datetime.datetime` object.
Return a pair ``(response, groups)`` where *groups* is a list representing
the groups that are new since the given *date*. If *file* is supplied,
though, then *groups* will be empty.

   >>> from datetime import date, timedelta
   >>> resp, groups = s.newgroups(date.today() - timedelta(days=3))
   >>> len(groups)
   85
   >>> groups[0]
   GroupInfo(group='gmane.network.tor.devel', last='4', first='1', flag='m')



+-*/+-*/+-*/+-*/newnews m 
newnews(group, date, *, file=None)

Send a ``NEWNEWS`` command.  Here, *group* is a group name or ``'*'``, and
*date* has the same meaning as for :meth:`newgroups`.  Return a pair
``(response, articles)`` where *articles* is a list of message ids.

This command is frequently disabled by NNTP server administrators.



+-*/+-*/+-*/NNTP_SSL c 
NNTP_SSL(host, port=563, user=None, password=None, ssl_context=None, readermode=None, usenetrc=False, [timeout])

Return a new :class:`NNTP_SSL` object, representing an encrypted
connection to the NNTP server running on host *host*, listening at
port *port*.  :class:`NNTP_SSL` objects have the same methods as
:class:`NNTP` objects.  If *port* is omitted, port 563 (NNTPS) is used.
*ssl_context* is also optional, and is a :class:`~ssl.SSLContext` object.
All other parameters behave the same as for :class:`NNTP`.

Note that SSL-on-563 is discouraged per :rfc:`4642`, in favor of
STARTTLS as described below.  However, some servers only support the
former.

.. versionadded:: 3.2



+-*/+-*/smtpd p A SMTP server implementation in Python.
+-*/+-*/+-*/MailmanProxy c 
MailmanProxy(localaddr, remoteaddr)

Create a new pure proxy server. Arguments are as per :class:`SMTPServer`.
Everything will be relayed to *remoteaddr*, unless local mailman configurations
knows about an address, in which case it will be handled via mailman.  Note that
running this has a good chance to make you into an open relay, so please be
careful.


+-*/+-*/+-*/SMTPChannel c 
SMTPChannel(server, conn, addr)

Create a new :class:`SMTPChannel` object which manages the communication
between the server and a single SMTP client.

To use a custom SMTPChannel implementation you need to override the
:attr:`SMTPServer.channel_class` of your :class:`SMTPServer`.

The :class:`SMTPChannel` has the following instance variables:

.. attribute:: smtp_server

   Holds the :class:`SMTPServer` that spawned this channel.

.. attribute:: conn

   Holds the socket object connecting to the client.

.. attribute:: addr

   Holds the address of the client, the second value returned by
   socket.accept()

.. attribute:: received_lines

   Holds a list of the line strings (decoded using UTF-8) received from
   the client. The lines have their "\r\n" line ending translated to "\n".

.. attribute:: smtp_state

   Holds the current state of the channel. This will be either
   :attr:`COMMAND` initially and then :attr:`DATA` after the client sends
   a "DATA" line.

.. attribute:: seen_greeting

   Holds a string containing the greeting sent by the client in its "HELO".

.. attribute:: mailfrom

   Holds a string containing the address identified in the "MAIL FROM:" line
   from the client.

.. attribute:: rcpttos

   Holds a list of strings containing the addresses identified in the
   "RCPT TO:" lines from the client.

.. attribute:: received_data

   Holds a string containing all of the data sent by the client during the
   DATA state, up to but not including the terminating "\r\n.\r\n".

.. attribute:: fqdn

   Holds the fully-qualified domain name of the server as returned by
   ``socket.getfqdn()``.

.. attribute:: peer

   Holds the name of the client peer as returned by ``conn.getpeername()``
   where ``conn`` is :attr:`conn`.

The :class:`SMTPChannel` operates by invoking methods named ``smtp_<command>``
upon reception of a command line from the client. Built into the base
:class:`SMTPChannel` class are methods for handling the following commands
(and responding to them appropriately):

======== ===================================================================
Command  Action taken
======== ===================================================================
HELO     Accepts the greeting from the client and stores it in
         :attr:`seen_greeting`.
NOOP     Takes no action.
QUIT     Closes the connection cleanly.
MAIL     Accepts the "MAIL FROM:" syntax and stores the supplied address as
         :attr:`mailfrom`.
RCPT     Accepts the "RCPT TO:" syntax and stores the supplied addresses in
         the :attr:`rcpttos` list.
RSET     Resets the :attr:`mailfrom`, :attr:`rcpttos`, and
         :attr:`received_data`, but not the greeting.
DATA     Sets the internal state to :attr:`DATA` and stores remaining lines
         from the client in :attr:`received_data` until the terminator
         "\r\n.\r\n" is received.
======== ===================================================================


+-*/+-*/+-*/SMTPServer c 
SMTPServer(localaddr, remoteaddr)

Create a new :class:`SMTPServer` object, which binds to local address
*localaddr*.  It will treat *remoteaddr* as an upstream SMTP relayer.  It
inherits from :class:`asyncore.dispatcher`, and so will insert itself into
:mod:`asyncore`'s event loop on instantiation.


+-*/+-*/+-*/+-*/channel_class d 
channel_class

Override this in subclasses to use a custom :class:`SMTPChannel` for
managing SMTP clients.




+-*/+-*/+-*/+-*/process_message m 
process_message(peer, mailfrom, rcpttos, data)

Raise :exc:`NotImplementedError` exception. Override this in subclasses to
do something useful with this message. Whatever was passed in the
constructor as *remoteaddr* will be available as the :attr:`_remoteaddr`
attribute. *peer* is the remote host's address, *mailfrom* is the envelope
originator, *rcpttos* are the envelope recipients and *data* is a string
containing the contents of the e-mail (which should be in :rfc:`2822`
format).


+-*/+-*/+-*/DebuggingServer c 
DebuggingServer(localaddr, remoteaddr)

Create a new debugging server.  Arguments are as per :class:`SMTPServer`.
Messages will be discarded, and printed on stdout.



+-*/+-*/+-*/PureProxy c 
PureProxy(localaddr, remoteaddr)

Create a new pure proxy server. Arguments are as per :class:`SMTPServer`.
Everything will be relayed to *remoteaddr*.  Note that running this has a good
chance to make you into an open relay, so please be careful.



+-*/+-*/readline p GNU readline support for Python.
+-*/+-*/+-*/get_history_length f 
get_history_length()

Return the desired length of the history file.  Negative values imply unlimited
history file size.



+-*/+-*/+-*/set_pre_input_hook f 
set_pre_input_hook([function])

Set or remove the pre_input_hook function.  If *function* is specified, it will
be used as the new pre_input_hook function; if omitted or ``None``, any hook
function already installed is removed.  The pre_input_hook function is called
with no arguments after the first prompt has been printed and just before
readline starts reading input characters.



+-*/+-*/+-*/read_init_file f 
read_init_file([filename])

Parse a readline initialization file. The default filename is the last filename
used.



+-*/+-*/+-*/get_completer_delims f 
get_completer_delims()

Get the readline word delimiters for tab-completion.



+-*/+-*/+-*/get_history_item f 
get_history_item(index)

Return the current contents of history item at *index*.



+-*/+-*/+-*/parse_and_bind f 
parse_and_bind(string)

Parse and execute single line of a readline init file.



+-*/+-*/+-*/clear_history f 
clear_history()

Clear the current history.  (Note: this function is not available if the
installed version of GNU readline doesn't support it.)



+-*/+-*/+-*/redisplay f 
redisplay()

Change what's displayed on the screen to reflect the current contents of the
line buffer.



+-*/+-*/+-*/set_completer f 
set_completer([function])

Set or remove the completer function.  If *function* is specified, it will be
used as the new completer function; if omitted or ``None``, any completer
function already installed is removed.  The completer function is called as
``function(text, state)``, for *state* in ``0``, ``1``, ``2``, ..., until it
returns a non-string value.  It should return the next possible completion
starting with *text*.



+-*/+-*/+-*/set_completer_delims f 
set_completer_delims(string)

Set the readline word delimiters for tab-completion.



+-*/+-*/+-*/set_startup_hook f 
set_startup_hook([function])

Set or remove the startup_hook function.  If *function* is specified, it will be
used as the new startup_hook function; if omitted or ``None``, any hook function
already installed is removed.  The startup_hook function is called with no
arguments just before readline prints the first prompt.



+-*/+-*/+-*/get_endidx f 
get_endidx()

Get the ending index of the readline tab-completion scope.



+-*/+-*/+-*/set_completion_display_matches_hook f 
set_completion_display_matches_hook([function])

Set or remove the completion display function.  If *function* is
specified, it will be used as the new completion display function;
if omitted or ``None``, any completion display function already
installed is removed.  The completion display function is called as
``function(substitution, [matches], longest_match_length)`` once
each time matches need to be displayed.



+-*/+-*/+-*/get_completion_type f 
get_completion_type()

Get the type of completion being attempted.



+-*/+-*/+-*/get_current_history_length f 
get_current_history_length()

Return the number of lines currently in the history.  (This is different from
:func:`get_history_length`, which returns the maximum number of lines that will
be written to a history file.)



+-*/+-*/+-*/get_line_buffer f 
get_line_buffer()

Return the current contents of the line buffer.



+-*/+-*/+-*/get_completer f 
get_completer()

Get the completer function, or ``None`` if no completer function has been set.



+-*/+-*/+-*/write_history_file f 
write_history_file([filename])

Save a readline history file. The default filename is :file:`~/.history`.



+-*/+-*/+-*/read_history_file f 
read_history_file([filename])

Load a readline history file. The default filename is :file:`~/.history`.



+-*/+-*/+-*/remove_history_item f 
remove_history_item(pos)

Remove history item specified by its position from the history.



+-*/+-*/+-*/insert_text f 
insert_text(string)

Insert text into the command line.



+-*/+-*/+-*/replace_history_item f 
replace_history_item(pos, line)

Replace history item specified by its position with the given line.



+-*/+-*/+-*/set_history_length f 
set_history_length(length)

Set the number of lines to save in the history file. :func:`write_history_file`
uses this value to truncate the history file when saving.  Negative values imply
unlimited history file size.



+-*/+-*/+-*/get_begidx f 
get_begidx()

Get the beginning index of the readline tab-completion scope.



+-*/+-*/+-*/add_history f 
add_history(line)

Append a line to the history buffer, as if it was the last line typed.


+-*/persistence _ Data Persistence
+-*/+-*/copyreg p Register pickle support functions.
+-*/+-*/+-*/pickle f 
pickle(type, function, constructor=None)

Declares that *function* should be used as a "reduction" function for objects
of type *type*.  *function* should return either a string or a tuple
containing two or three elements.

The optional *constructor* parameter, if provided, is a callable object which
can be used to reconstruct the object when called with the tuple of arguments
returned by *function* at pickling time.  :exc:`TypeError` will be raised if
*object* is a class or *constructor* is not callable.

See the :mod:`pickle` module for more details on the interface expected of
*function* and *constructor*.



+-*/+-*/+-*/constructor f 
constructor(object)

Declares *object* to be a valid constructor.  If *object* is not callable (and
hence not valid as a constructor), raises :exc:`TypeError`.



+-*/+-*/dbm p Interfaces to various Unix "database" formats.
+-*/+-*/+-*/whichdb f 
whichdb(filename)

This function attempts to guess which of the several simple database modules
available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should
be used to open a given file.

Returns one of the following values: ``None`` if the file can't be opened
because it's unreadable or doesn't exist; the empty string (``''``) if the
file's format can't be guessed; or a string containing the required module
name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``.



+-*/+-*/+-*/open f 
open(file, flag='r', mode=0o666)

Open the database file *file* and return a corresponding object.

If the database file already exists, the :func:`whichdb` function is used to
determine its type and the appropriate module is used; if it does not exist,
the first module listed above that can be imported is used.

The optional *flag* argument can be:

+---------+-------------------------------------------+
| Value   | Meaning                                   |
+=========+===========================================+
| ``'r'`` | Open existing database for reading only   |
|         | (default)                                 |
+---------+-------------------------------------------+
| ``'w'`` | Open existing database for reading and    |
|         | writing                                   |
+---------+-------------------------------------------+
| ``'c'`` | Open database for reading and writing,    |
|         | creating it if it doesn't exist           |
+---------+-------------------------------------------+
| ``'n'`` | Always create a new, empty database, open |
|         | for reading and writing                   |
+---------+-------------------------------------------+

The optional *mode* argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal ``0o666`` (and will be
modified by the prevailing umask).



+-*/+-*/+-*/error e 
error

A tuple containing the exceptions that can be raised by each of the supported
modules, with a unique exception also named :exc:`dbm.error` as the first
item --- the latter is used when :exc:`dbm.error` is raised.



+-*/+-*/+-*/dumb p Portable implementation of the simple DBM interface.
+-*/+-*/+-*/+-*/open f 
open(filename[, flag[, mode]])

Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* argument is
the basename of the database file (without any specific extensions).  When a
dumbdbm database is created, files with :file:`.dat` and :file:`.dir` extensions
are created.

The optional *flag* argument is currently ignored; the database is always opened
for update, and will be created if it does not exist.

The optional *mode* argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal ``0o666`` (and will be modified
by the prevailing umask).

In addition to the methods provided by the :class:`collections.MutableMapping` class,
:class:`dumbdbm` objects provide the following method:


+-*/+-*/+-*/+-*/error e 
error

Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:`KeyError` is
raised for general mapping errors like specifying an incorrect key.



+-*/+-*/+-*/+-*/dumbdbm _ 
+-*/+-*/+-*/+-*/+-*/sync m 
sync()

Synchronize the on-disk directory and data files.  This method is called
by the :meth:`Shelve.sync` method.


+-*/+-*/+-*/gnu p GNU's reinterpretation of dbm.
+-*/+-*/+-*/+-*/open f 
open(filename[, flag[, mode]])

Open a ``gdbm`` database and return a :class:`gdbm` object.  The *filename*
argument is the name of the database file.

The optional *flag* argument can be:

+---------+-------------------------------------------+
| Value   | Meaning                                   |
+=========+===========================================+
| ``'r'`` | Open existing database for reading only   |
|         | (default)                                 |
+---------+-------------------------------------------+
| ``'w'`` | Open existing database for reading and    |
|         | writing                                   |
+---------+-------------------------------------------+
| ``'c'`` | Open database for reading and writing,    |
|         | creating it if it doesn't exist           |
+---------+-------------------------------------------+
| ``'n'`` | Always create a new, empty database, open |
|         | for reading and writing                   |
+---------+-------------------------------------------+

The following additional characters may be appended to the flag to control
how the database is opened:

+---------+--------------------------------------------+
| Value   | Meaning                                    |
+=========+============================================+
| ``'f'`` | Open the database in fast mode.  Writes    |
|         | to the database will not be synchronized.  |
+---------+--------------------------------------------+
| ``'s'`` | Synchronized mode. This will cause changes |
|         | to the database to be immediately written  |
|         | to the file.                               |
+---------+--------------------------------------------+
| ``'u'`` | Do not lock database.                      |
+---------+--------------------------------------------+

Not all flags are valid for all versions of ``gdbm``.  The module constant
:const:`open_flags` is a string of supported flag characters.  The exception
:exc:`error` is raised if an invalid flag is specified.

The optional *mode* argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal ``0o666``.


+-*/+-*/+-*/+-*/error e 
error

Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:`KeyError` is
raised for general mapping errors like specifying an incorrect key.



+-*/+-*/+-*/+-*/gdbm _ 
+-*/+-*/+-*/+-*/+-*/reorganize m 
reorganize()

If you have carried out a lot of deletions and would like to shrink the space
used by the ``gdbm`` file, this routine will reorganize the database.  ``gdbm``
objects will not shorten the length of a database file except by using this
reorganization; otherwise, deleted file space will be kept and reused as new
(key, value) pairs are added.


+-*/+-*/+-*/+-*/+-*/nextkey m 
nextkey(key)

Returns the key that follows *key* in the traversal.  The following code prints
every key in the database ``db``, without having to create a list in memory that
contains them all::

   k = db.firstkey()
   while k != None:
       print(k)
       k = db.nextkey(k)


+-*/+-*/+-*/+-*/+-*/sync m 
sync()

When the database has been opened in fast mode, this method forces any
unwritten data to be written to the disk.



+-*/+-*/+-*/+-*/+-*/firstkey m 
firstkey()

It's possible to loop over every key in the database using this method  and the
:meth:`nextkey` method.  The traversal is ordered by ``gdbm``'s internal
hash values, and won't be sorted by the key values.  This method returns
the starting key.


+-*/+-*/+-*/ndbm p The standard "database" interface, based on ndbm.
+-*/+-*/+-*/+-*/open f 
open(filename[, flag[, mode]])

Open a dbm database and return a ``dbm`` object.  The *filename* argument is the
name of the database file (without the :file:`.dir` or :file:`.pag` extensions).

The optional *flag* argument must be one of these values:

+---------+-------------------------------------------+
| Value   | Meaning                                   |
+=========+===========================================+
| ``'r'`` | Open existing database for reading only   |
|         | (default)                                 |
+---------+-------------------------------------------+
| ``'w'`` | Open existing database for reading and    |
|         | writing                                   |
+---------+-------------------------------------------+
| ``'c'`` | Open database for reading and writing,    |
|         | creating it if it doesn't exist           |
+---------+-------------------------------------------+
| ``'n'`` | Always create a new, empty database, open |
|         | for reading and writing                   |
+---------+-------------------------------------------+

The optional *mode* argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal ``0o666`` (and will be
modified by the prevailing umask).




+-*/+-*/+-*/+-*/library d 
library

Name of the ``ndbm`` implementation library used.



+-*/+-*/+-*/+-*/error e 
error

Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:`KeyError` is raised
for general mapping errors like specifying an incorrect key.



+-*/+-*/marshal p Convert Python objects to streams of bytes and back (with differentconstraints).
+-*/+-*/+-*/load f 
load(file)

Read one value from the open file and return it.  If no valid value is read
(e.g. because the data has a different Python version's incompatible marshal
format), raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`.  The
file must be an open file object opened in binary mode (``'rb'`` or
``'r+b'``).

.. note::

   If an object containing an unsupported type was marshalled with :func:`dump`,
   :func:`load` will substitute ``None`` for the unmarshallable type.



+-*/+-*/+-*/dumps f 
dumps(value[, version])

Return the string that would be written to a file by ``dump(value, file)``.  The
value must be a supported type.  Raise a :exc:`ValueError` exception if value
has (or contains an object that has) an unsupported type.

The *version* argument indicates the data format that ``dumps`` should use
(see below).



+-*/+-*/+-*/loads f 
loads(string)

Convert the string to a value.  If no valid value is found, raise
:exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`.  Extra characters in the
string are ignored.



+-*/+-*/+-*/dump f 
dump(value, file[, version])

Write the value on the open file.  The value must be a supported type.  The
file must be an open file object such as ``sys.stdout`` or returned by
:func:`open` or :func:`os.popen`.  It must be opened in binary mode (``'wb'``
or ``'w+b'``).

If the value has (or contains an object that has) an unsupported type, a
:exc:`ValueError` exception is raised --- but garbage data will also be written
to the file.  The object will not be properly read back by :func:`load`.

The *version* argument indicates the data format that ``dump`` should use
(see below).



+-*/+-*/+-*/version d 
version

Indicates the format that the module uses. Version 0 is the historical
format, version 1 shares interned strings and version 2 uses a binary format
for floating point numbers. The current version is 2.



+-*/fileformats _ File Formats
+-*/+-*/netrc p Loading of .netrc files.
+-*/+-*/+-*/NetrcParseError e 
NetrcParseError

Exception raised by the :class:`netrc` class when syntactical errors are
encountered in source text.  Instances of this exception provide three
interesting attributes:  :attr:`msg` is a textual explanation of the error,
:attr:`filename` is the name of the source file, and :attr:`lineno` gives the
line number on which the error was found.



+-*/+-*/+-*/netrc c 
netrc([file])

A :class:`netrc` instance or subclass instance encapsulates data from  a netrc
file.  The initialization argument, if present, specifies the file to parse.  If
no argument is given, the file :file:`.netrc` in the user's home directory will
be read.  Parse errors will raise :exc:`NetrcParseError` with diagnostic
information including the file name, line number, and terminating token.



+-*/+-*/+-*/+-*/macros d 
macros

Dictionary mapping macro names to string lists.


+-*/+-*/+-*/+-*/hosts d 
hosts

Dictionary mapping host names to ``(login, account, password)`` tuples.  The
'default' entry, if any, is represented as a pseudo-host by that name.



+-*/+-*/+-*/+-*/authenticators m 
authenticators(host)

Return a 3-tuple ``(login, account, password)`` of authenticators for *host*.
If the netrc file did not contain an entry for the given host, return the tuple
associated with the 'default' entry.  If neither matching host nor default entry
is available, return ``None``.



+-*/+-*/+-*/+-*/__repr__ m 
__repr__()

Dump the class data as a string in the format of a netrc file. (This discards
comments and may reorder the entries.)


+-*/+-*/plistlib p Generate and parse Mac OS X plist files.
+-*/+-*/+-*/writePlistToBytes f 
writePlistToBytes(rootObject)

Return *rootObject* as a plist-formatted bytes object.



+-*/+-*/+-*/writePlist f 
writePlist(rootObject, pathOrFile)

Write *rootObject* to a plist file. *pathOrFile* may either be a file name
or a (writable) file object.

A :exc:`TypeError` will be raised if the object is of an unsupported type or
a container that contains objects of unsupported types.



+-*/+-*/+-*/readPlist f 
readPlist(pathOrFile)

Read a plist file. *pathOrFile* may either be a file name or a (readable)
file object.  Return the unpacked root object (which usually is a
dictionary).

The XML data is parsed using the Expat parser from :mod:`xml.parsers.expat`
-- see its documentation for possible exceptions on ill-formed XML.
Unknown elements will simply be ignored by the plist parser.



+-*/+-*/+-*/readPlistFromBytes f 
readPlistFromBytes(data)

Read a plist data from a bytes object.  Return the root object.



+-*/+-*/+-*/Data c 
Data(data)

Return a "data" wrapper object around the bytes object *data*.  This is used
in functions converting from/to plists to represent the ``<data>`` type
available in plists.

It has one attribute, :attr:`data`, that can be used to retrieve the Python
bytes object stored in it.



+-*/+-*/xdrlib p Encoders and decoders for the External Data Representation (XDR).
+-*/+-*/+-*/Error e 
Error

The base exception class.  :exc:`Error` has a single public attribute
:attr:`msg` containing the description of the error.



+-*/+-*/+-*/ConversionError e 
ConversionError

Class derived from :exc:`Error`.  Contains no additional instance variables.


+-*/+-*/+-*/Packer c 
Packer()

:class:`Packer` is the class for packing data into XDR representation. The
:class:`Packer` class is instantiated with no arguments.



+-*/+-*/+-*/+-*/reset m 
reset()

Resets the pack buffer to the empty string.


+-*/+-*/+-*/+-*/pack_opaque m 
pack_opaque(data)

Packs a variable length opaque data string, similarly to :meth:`pack_string`.



+-*/+-*/+-*/+-*/pack_list m 
pack_list(list, pack_item)

Packs a *list* of homogeneous items.  This method is useful for lists with an
indeterminate size; i.e. the size is not available until the entire list has
been walked.  For each item in the list, an unsigned integer ``1`` is packed
first, followed by the data value from the list.  *pack_item* is the function
that is called to pack the individual item.  At the end of the list, an unsigned
integer ``0`` is packed.

For example, to pack a list of integers, the code might appear like this::

   import xdrlib
   p = xdrlib.Packer()
   p.pack_list([1, 2, 3], p.pack_int)



+-*/+-*/+-*/+-*/pack_fopaque m 
pack_fopaque(n, data)

Packs a fixed length opaque data stream, similarly to :meth:`pack_fstring`.



+-*/+-*/+-*/+-*/pack_string m 
pack_string(s)

Packs a variable length string, *s*.  The length of the string is first packed
as an unsigned integer, then the string data is packed with
:meth:`pack_fstring`.



+-*/+-*/+-*/+-*/pack_float m 
pack_float(value)

Packs the single-precision floating point number *value*.



+-*/+-*/+-*/+-*/pack_array m 
pack_array(list, pack_item)

Packs a variable length *list* of homogeneous items.  First, the length of the
list is packed as an unsigned integer, then each element is packed as in
:meth:`pack_farray` above.



+-*/+-*/+-*/+-*/pack_double m 
pack_double(value)

Packs the double-precision floating point number *value*.


+-*/+-*/+-*/+-*/pack_farray m 
pack_farray(n, array, pack_item)

Packs a fixed length list (*array*) of homogeneous items.  *n* is the length of
the list; it is *not* packed into the buffer, but a :exc:`ValueError` exception
is raised if ``len(array)`` is not equal to *n*.  As above, *pack_item* is the
function used to pack each element.



+-*/+-*/+-*/+-*/pack_bytes m 
pack_bytes(bytes)

Packs a variable length byte stream, similarly to :meth:`pack_string`.


+-*/+-*/+-*/+-*/pack_fstring m 
pack_fstring(n, s)

Packs a fixed length string, *s*.  *n* is the length of the string but it is
*not* packed into the data buffer.  The string is padded with null bytes if
necessary to guaranteed 4 byte alignment.



+-*/+-*/+-*/+-*/get_buffer m 
get_buffer()

Returns the current pack buffer as a string.



+-*/+-*/+-*/Unpacker c 
Unpacker(data)

``Unpacker`` is the complementary class which unpacks XDR data values from a
string buffer.  The input buffer is given as *data*.



+-*/+-*/+-*/+-*/unpack_fstring m 
unpack_fstring(n)

Unpacks and returns a fixed length string.  *n* is the number of characters
expected.  Padding with null bytes to guaranteed 4 byte alignment is assumed.



+-*/+-*/+-*/+-*/reset m 
reset(data)

Resets the string buffer with the given *data*.



+-*/+-*/+-*/+-*/unpack_fopaque m 
unpack_fopaque(n)

Unpacks and returns a fixed length opaque data stream, similarly to
:meth:`unpack_fstring`.



+-*/+-*/+-*/+-*/unpack_array m 
unpack_array(unpack_item)

Unpacks and returns a variable length *list* of homogeneous items. First, the
length of the list is unpacked as an unsigned integer, then each element is
unpacked as in :meth:`unpack_farray` above.



+-*/+-*/+-*/+-*/get_position m 
get_position()

Returns the current unpack position in the data buffer.



+-*/+-*/+-*/+-*/unpack_double m 
unpack_double()

Unpacks a double-precision floating point number, similarly to
:meth:`unpack_float`.


+-*/+-*/+-*/+-*/unpack_farray m 
unpack_farray(n, unpack_item)

Unpacks and returns (as a list) a fixed length array of homogeneous items.  *n*
is number of list elements to expect in the buffer. As above, *unpack_item* is
the function used to unpack each element.



+-*/+-*/+-*/+-*/unpack_opaque m 
unpack_opaque()

Unpacks and returns a variable length opaque data string, similarly to
:meth:`unpack_string`.



+-*/+-*/+-*/+-*/unpack_bytes m 
unpack_bytes()

Unpacks and returns a variable length byte stream, similarly to
:meth:`unpack_string`.


+-*/+-*/+-*/+-*/unpack_float m 
unpack_float()

Unpacks a single-precision floating point number.



+-*/+-*/+-*/+-*/unpack_list m 
unpack_list(unpack_item)

Unpacks and returns a list of homogeneous items.  The list is unpacked one
element at a time by first unpacking an unsigned integer flag.  If the flag is
``1``, then the item is unpacked and appended to the list.  A flag of ``0``
indicates the end of the list.  *unpack_item* is the function that is called to
unpack the items.



+-*/+-*/+-*/+-*/done m 
done()

Indicates unpack completion.  Raises an :exc:`Error` exception if all of the
data has not been unpacked.


+-*/+-*/+-*/+-*/set_position m 
set_position(position)

Sets the data buffer unpack position to *position*.  You should be careful about
using :meth:`get_position` and :meth:`set_position`.



+-*/+-*/+-*/+-*/get_buffer m 
get_buffer()

Returns the current unpack data buffer as a string.



+-*/+-*/+-*/+-*/unpack_string m 
unpack_string()

Unpacks and returns a variable length string.  The length of the string is first
unpacked as an unsigned integer, then the string data is unpacked with
:meth:`unpack_fstring`.



+-*/netdata _ Internet Data Handling
+-*/+-*/binhex p Encode and decode files in binhex4 format.
+-*/+-*/+-*/hexbin f 
hexbin(input, output)

Decode a binhex file *input*. *input* may be a filename or a file-like object
supporting :meth:`read` and :meth:`close` methods. The resulting file is written
to a file named *output*, unless the argument is ``None`` in which case the
output filename is read from the binhex file.


+-*/+-*/+-*/binhex f 
binhex(input, output)

Convert a binary file with filename *input* to binhex file *output*. The
*output* parameter can either be a filename or a file-like object (any object
supporting a :meth:`write` and :meth:`close` method).



+-*/+-*/+-*/Error e 
Error

Exception raised when something can't be encoded using the binhex format (for
example, a filename is too long to fit in the filename field), or when input is
not properly encoded binhex data.



+-*/+-*/mailbox p Manipulate mailboxes in various formats
+-*/+-*/+-*/Error e 
Error

The based class for all other module-specific exceptions.



+-*/+-*/+-*/NoSuchMailboxError e 
NoSuchMailboxError

Raised when a mailbox is expected but is not found, such as when instantiating a
:class:`Mailbox` subclass with a path that does not exist (and with the *create*
parameter set to ``False``), or when opening a folder that does not exist.



+-*/+-*/+-*/NotEmptyError e 
NotEmptyError

Raised when a mailbox is not empty but is expected to be, such as when deleting
a folder that contains messages.



+-*/+-*/+-*/FormatError e 
FormatError

Raised when the data in a file cannot be parsed, such as when an :class:`MH`
instance attempts to read a corrupted :file:`.mh_sequences` file.



+-*/+-*/+-*/ExternalClashError e 
ExternalClashError

Raised when some mailbox-related condition beyond the control of the program
causes it to be unable to proceed, such as when failing to acquire a lock that
another program already holds a lock, or when a uniquely-generated file name
already exists.



+-*/+-*/+-*/MHMessage c 
MHMessage(message=None)

A message with MH-specific behaviors. Parameter *message* has the same meaning
as with the :class:`Message` constructor.

MH messages do not support marks or flags in the traditional sense, but they
do support sequences, which are logical groupings of arbitrary messages. Some
mail reading programs (although not the standard :program:`mh` and
:program:`nmh`) use sequences in much the same way flags are used with other
formats, as follows:

+----------+------------------------------------------+
| Sequence | Explanation                              |
+==========+==========================================+
| unseen   | Not read, but previously detected by MUA |
+----------+------------------------------------------+
| replied  | Replied to                               |
+----------+------------------------------------------+
| flagged  | Marked as important                      |
+----------+------------------------------------------+

:class:`MHMessage` instances offer the following methods:



+-*/+-*/+-*/+-*/get_sequences m 
get_sequences()

Return a list of the names of sequences that include this message.



+-*/+-*/+-*/+-*/remove_sequence m 
remove_sequence(sequence)

Remove *sequence* from the list of sequences that include this message.



+-*/+-*/+-*/+-*/set_sequences m 
set_sequences(sequences)

Set the list of sequences that include this message.



+-*/+-*/+-*/+-*/add_sequence m 
add_sequence(sequence)

Add *sequence* to the list of sequences that include this message.



+-*/+-*/+-*/Maildir c 
Maildir(dirname, factory=None, create=True)

A subclass of :class:`Mailbox` for mailboxes in Maildir format. Parameter
*factory* is a callable object that accepts a file-like message representation
(which behaves as if opened in binary mode) and returns a custom representation.
If *factory* is ``None``, :class:`MaildirMessage` is used as the default message
representation. If *create* is ``True``, the mailbox is created if it does not
exist.

It is for historical reasons that *dirname* is named as such rather than *path*.

Maildir is a directory-based mailbox format invented for the qmail mail
transfer agent and now widely supported by other programs. Messages in a
Maildir mailbox are stored in separate files within a common directory
structure. This design allows Maildir mailboxes to be accessed and modified
by multiple unrelated programs without data corruption, so file locking is
unnecessary.

Maildir mailboxes contain three subdirectories, namely: :file:`tmp`,
:file:`new`, and :file:`cur`. Messages are created momentarily in the
:file:`tmp` subdirectory and then moved to the :file:`new` subdirectory to
finalize delivery. A mail user agent may subsequently move the message to the
:file:`cur` subdirectory and store information about the state of the message
in a special "info" section appended to its file name.

Folders of the style introduced by the Courier mail transfer agent are also
supported. Any subdirectory of the main mailbox is considered a folder if
``'.'`` is the first character in its name. Folder names are represented by
:class:`Maildir` without the leading ``'.'``. Each folder is itself a Maildir
mailbox but should not contain other folders. Instead, a logical nesting is
indicated using ``'.'`` to delimit levels, e.g., "Archived.2005.07".

.. note::

   The Maildir specification requires the use of a colon (``':'``) in certain
   message file names. However, some operating systems do not permit this
   character in file names, If you wish to use a Maildir-like format on such
   an operating system, you should specify another character to use
   instead. The exclamation point (``'!'``) is a popular choice. For
   example::

      import mailbox
      mailbox.Maildir.colon = '!'

   The :attr:`colon` attribute may also be set on a per-instance basis.

:class:`Maildir` instances have all of the methods of :class:`Mailbox` in
addition to the following:



+-*/+-*/+-*/+-*/__setitem__ m 
__setitem__(key, message)

.. warning::

   These methods generate unique file names based upon the current process
   ID. When using multiple threads, undetected name clashes may occur and
   cause corruption of the mailbox unless threads are coordinated to avoid
   using these methods to manipulate the same mailbox simultaneously.



+-*/+-*/+-*/+-*/list_folders m 
list_folders()

Return a list of the names of all folders.



+-*/+-*/+-*/+-*/clean m 
clean()

Delete temporary files from the mailbox that have not been accessed in the
last 36 hours. The Maildir specification says that mail-reading programs
should do this occasionally.


+-*/+-*/+-*/+-*/lock m 
lock()

Maildir mailboxes do not support (or require) locking, so these methods do
nothing.



+-*/+-*/+-*/+-*/add_folder m 
add_folder(folder)

Create a folder whose name is *folder* and return a :class:`Maildir`
instance representing it.



+-*/+-*/+-*/+-*/update m 
update(arg)

.. warning::

   These methods generate unique file names based upon the current process
   ID. When using multiple threads, undetected name clashes may occur and
   cause corruption of the mailbox unless threads are coordinated to avoid
   using these methods to manipulate the same mailbox simultaneously.



+-*/+-*/+-*/+-*/add m 
add(message)

.. warning::

   These methods generate unique file names based upon the current process
   ID. When using multiple threads, undetected name clashes may occur and
   cause corruption of the mailbox unless threads are coordinated to avoid
   using these methods to manipulate the same mailbox simultaneously.



+-*/+-*/+-*/+-*/unlock m 
unlock()

Maildir mailboxes do not support (or require) locking, so these methods do
nothing.



+-*/+-*/+-*/+-*/flush m 
flush()

All changes to Maildir mailboxes are immediately applied, so this method
does nothing.



+-*/+-*/+-*/+-*/get_folder m 
get_folder(folder)

Return a :class:`Maildir` instance representing the folder whose name is
*folder*. A :exc:`NoSuchMailboxError` exception is raised if the folder
does not exist.



+-*/+-*/+-*/+-*/close m 
close()

:class:`Maildir` instances do not keep any open files and the underlying
mailboxes do not support locking, so this method does nothing.



+-*/+-*/+-*/+-*/remove_folder m 
remove_folder(folder)

Delete the folder whose name is *folder*. If the folder contains any
messages, a :exc:`NotEmptyError` exception will be raised and the folder
will not be deleted.



+-*/+-*/+-*/+-*/get_file m 
get_file(key)

Depending upon the host platform, it may not be possible to modify or
remove the underlying message while the returned file remains open.




+-*/+-*/+-*/MMDF c 
MMDF(path, factory=None, create=True)

A subclass of :class:`Mailbox` for mailboxes in MMDF format. Parameter *factory*
is a callable object that accepts a file-like message representation (which
behaves as if opened in binary mode) and returns a custom representation. If
*factory* is ``None``, :class:`MMDFMessage` is used as the default message
representation. If *create* is ``True``, the mailbox is created if it does not
exist.

MMDF is a single-file mailbox format invented for the Multichannel Memorandum
Distribution Facility, a mail transfer agent. Each message is in the same
form as an mbox message but is bracketed before and after by lines containing
four Control-A (``'\001'``) characters. As with the mbox format, the
beginning of each message is indicated by a line whose first five characters
are "From ", but additional occurrences of "From " are not transformed to
">From " when storing messages because the extra message separator lines
prevent mistaking such occurrences for the starts of subsequent messages.

Some :class:`Mailbox` methods implemented by :class:`MMDF` deserve special
remarks:



+-*/+-*/+-*/+-*/lock m 
lock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls.




+-*/+-*/+-*/+-*/unlock m 
unlock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls.




+-*/+-*/+-*/+-*/get_file m 
get_file(key)

Using the file after calling :meth:`flush` or :meth:`close` on the
:class:`MMDF` instance may yield unpredictable results or raise an
exception.



+-*/+-*/+-*/MH c 
MH(path, factory=None, create=True)

A subclass of :class:`Mailbox` for mailboxes in MH format. Parameter *factory*
is a callable object that accepts a file-like message representation (which
behaves as if opened in binary mode) and returns a custom representation. If
*factory* is ``None``, :class:`MHMessage` is used as the default message
representation. If *create* is ``True``, the mailbox is created if it does not
exist.

MH is a directory-based mailbox format invented for the MH Message Handling
System, a mail user agent. Each message in an MH mailbox resides in its own
file. An MH mailbox may contain other MH mailboxes (called :dfn:`folders`) in
addition to messages. Folders may be nested indefinitely. MH mailboxes also
support :dfn:`sequences`, which are named lists used to logically group
messages without moving them to sub-folders. Sequences are defined in a file
called :file:`.mh_sequences` in each folder.

The :class:`MH` class manipulates MH mailboxes, but it does not attempt to
emulate all of :program:`mh`'s behaviors. In particular, it does not modify
and is not affected by the :file:`context` or :file:`.mh_profile` files that
are used by :program:`mh` to store its state and configuration.

:class:`MH` instances have all of the methods of :class:`Mailbox` in addition
to the following:



+-*/+-*/+-*/+-*/__delitem__ m 
__delitem__(key)

These methods immediately delete the message. The MH convention of marking
a message for deletion by prepending a comma to its name is not used.



+-*/+-*/+-*/+-*/list_folders m 
list_folders()

Return a list of the names of all folders.



+-*/+-*/+-*/+-*/get_folder m 
get_folder(folder)

Return an :class:`MH` instance representing the folder whose name is
*folder*. A :exc:`NoSuchMailboxError` exception is raised if the folder
does not exist.



+-*/+-*/+-*/+-*/add_folder m 
add_folder(folder)

Create a folder whose name is *folder* and return an :class:`MH` instance
representing it.



+-*/+-*/+-*/+-*/flush m 
flush()

All changes to MH mailboxes are immediately applied, so this method does
nothing.



+-*/+-*/+-*/+-*/unlock m 
unlock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls. For MH mailboxes, locking
the mailbox means locking the :file:`.mh_sequences` file and, only for the
duration of any operations that affect them, locking individual message
files.



+-*/+-*/+-*/+-*/remove m 
remove(key)

These methods immediately delete the message. The MH convention of marking
a message for deletion by prepending a comma to its name is not used.



+-*/+-*/+-*/+-*/remove_folder m 
remove_folder(folder)

Delete the folder whose name is *folder*. If the folder contains any
messages, a :exc:`NotEmptyError` exception will be raised and the folder
will not be deleted.



+-*/+-*/+-*/+-*/lock m 
lock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls. For MH mailboxes, locking
the mailbox means locking the :file:`.mh_sequences` file and, only for the
duration of any operations that affect them, locking individual message
files.



+-*/+-*/+-*/+-*/close m 
close()

:class:`MH` instances do not keep any open files, so this method is
equivalent to :meth:`unlock`.




+-*/+-*/+-*/+-*/discard m 
discard(key)

These methods immediately delete the message. The MH convention of marking
a message for deletion by prepending a comma to its name is not used.



+-*/+-*/+-*/+-*/get_sequences m 
get_sequences()

Return a dictionary of sequence names mapped to key lists. If there are no
sequences, the empty dictionary is returned.



+-*/+-*/+-*/+-*/get_file m 
get_file(key)

Depending upon the host platform, it may not be possible to remove the
underlying message while the returned file remains open.



+-*/+-*/+-*/+-*/set_sequences m 
set_sequences(sequences)

Re-define the sequences that exist in the mailbox based upon *sequences*,
a dictionary of names mapped to key lists, like returned by
:meth:`get_sequences`.



+-*/+-*/+-*/+-*/pack m 
pack()

Rename messages in the mailbox as necessary to eliminate gaps in
numbering.  Entries in the sequences list are updated correspondingly.

.. note::

   Already-issued keys are invalidated by this operation and should not be
   subsequently used.


+-*/+-*/+-*/MMDFMessage c 
MMDFMessage(message=None)

A message with MMDF-specific behaviors. Parameter *message* has the same meaning
as with the :class:`Message` constructor.

As with message in an mbox mailbox, MMDF messages are stored with the
sender's address and the delivery date in an initial line beginning with
"From ".  Likewise, flags that indicate the state of the message are
typically stored in :mailheader:`Status` and :mailheader:`X-Status` headers.

Conventional flags for MMDF messages are identical to those of mbox message
and are as follows:

+------+----------+--------------------------------+
| Flag | Meaning  | Explanation                    |
+======+==========+================================+
| R    | Read     | Read                           |
+------+----------+--------------------------------+
| O    | Old      | Previously detected by MUA     |
+------+----------+--------------------------------+
| D    | Deleted  | Marked for subsequent deletion |
+------+----------+--------------------------------+
| F    | Flagged  | Marked as important            |
+------+----------+--------------------------------+
| A    | Answered | Replied to                     |
+------+----------+--------------------------------+

The "R" and "O" flags are stored in the :mailheader:`Status` header, and the
"D", "F", and "A" flags are stored in the :mailheader:`X-Status` header. The
flags and headers typically appear in the order mentioned.

:class:`MMDFMessage` instances offer the following methods, which are
identical to those offered by :class:`mboxMessage`:



+-*/+-*/+-*/+-*/get_from m 
get_from()

Return a string representing the "From " line that marks the start of the
message in an mbox mailbox. The leading "From " and the trailing newline
are excluded.



+-*/+-*/+-*/+-*/get_flags m 
get_flags()

Return a string specifying the flags that are currently set. If the
message complies with the conventional format, the result is the
concatenation in the following order of zero or one occurrence of each of
``'R'``, ``'O'``, ``'D'``, ``'F'``, and ``'A'``.



+-*/+-*/+-*/+-*/add_flag m 
add_flag(flag)

Set the flag(s) specified by *flag* without changing other flags. To add
more than one flag at a time, *flag* may be a string of more than one
character.



+-*/+-*/+-*/+-*/set_flags m 
set_flags(flags)

Set the flags specified by *flags* and unset all others. Parameter *flags*
should be the concatenation in any order of zero or more occurrences of
each of ``'R'``, ``'O'``, ``'D'``, ``'F'``, and ``'A'``.



+-*/+-*/+-*/+-*/remove_flag m 
remove_flag(flag)

Unset the flag(s) specified by *flag* without changing other flags. To
remove more than one flag at a time, *flag* maybe a string of more than
one character.



+-*/+-*/+-*/+-*/set_from m 
set_from(from_, time_=None)

Set the "From " line to *from_*, which should be specified without a
leading "From " or trailing newline. For convenience, *time_* may be
specified and will be formatted appropriately and appended to *from_*. If
*time_* is specified, it should be a :class:`struct_time` instance, a
tuple suitable for passing to :meth:`time.strftime`, or ``True`` (to use
:meth:`time.gmtime`).



+-*/+-*/+-*/Mailbox c 
Mailbox

A mailbox, which may be inspected and modified.

The :class:`Mailbox` class defines an interface and is not intended to be
instantiated.  Instead, format-specific subclasses should inherit from
:class:`Mailbox` and your code should instantiate a particular subclass.

The :class:`Mailbox` interface is dictionary-like, with small keys
corresponding to messages. Keys are issued by the :class:`Mailbox` instance
with which they will be used and are only meaningful to that :class:`Mailbox`
instance. A key continues to identify a message even if the corresponding
message is modified, such as by replacing it with another message.

Messages may be added to a :class:`Mailbox` instance using the set-like
method :meth:`add` and removed using a ``del`` statement or the set-like
methods :meth:`remove` and :meth:`discard`.

:class:`Mailbox` interface semantics differ from dictionary semantics in some
noteworthy ways. Each time a message is requested, a new representation
(typically a :class:`Message` instance) is generated based upon the current
state of the mailbox. Similarly, when a message is added to a
:class:`Mailbox` instance, the provided message representation's contents are
copied. In neither case is a reference to the message representation kept by
the :class:`Mailbox` instance.

The default :class:`Mailbox` iterator iterates over message representations,
not keys as the default dictionary iterator does. Moreover, modification of a
mailbox during iteration is safe and well-defined. Messages added to the
mailbox after an iterator is created will not be seen by the
iterator. Messages removed from the mailbox before the iterator yields them
will be silently skipped, though using a key from an iterator may result in a
:exc:`KeyError` exception if the corresponding message is subsequently
removed.

.. warning::

   Be very cautious when modifying mailboxes that might be simultaneously
   changed by some other process.  The safest mailbox format to use for such
   tasks is Maildir; try to avoid using single-file formats such as mbox for
   concurrent writing.  If you're modifying a mailbox, you *must* lock it by
   calling the :meth:`lock` and :meth:`unlock` methods *before* reading any
   messages in the file or making any changes by adding or deleting a
   message.  Failing to lock the mailbox runs the risk of losing messages or
   corrupting the entire mailbox.

:class:`Mailbox` instances have the following methods:



+-*/+-*/+-*/+-*/lock m 
lock()

Acquire an exclusive advisory lock on the mailbox so that other processes
know not to modify it. An :exc:`ExternalClashError` is raised if the lock
is not available. The particular locking mechanisms used depend upon the
mailbox format.  You should *always* lock the mailbox before making any
modifications to its contents.



+-*/+-*/+-*/+-*/popitem m 
popitem()

Return an arbitrary (*key*, *message*) pair, where *key* is a key and
*message* is a message representation, and delete the corresponding
message. If the mailbox is empty, raise a :exc:`KeyError` exception. The
message is represented as an instance of the appropriate format-specific
:class:`Message` subclass unless a custom message factory was specified
when the :class:`Mailbox` instance was initialized.



+-*/+-*/+-*/+-*/pop m 
pop(key, default=None)

Return a representation of the message corresponding to *key* and delete
the message. If no such message exists, return *default*. The message is
represented as an instance of the appropriate format-specific
:class:`Message` subclass unless a custom message factory was specified
when the :class:`Mailbox` instance was initialized.



+-*/+-*/+-*/+-*/unlock m 
unlock()

Release the lock on the mailbox, if any.



+-*/+-*/+-*/+-*/flush m 
flush()

Write any pending changes to the filesystem. For some :class:`Mailbox`
subclasses, changes are always written immediately and :meth:`flush` does
nothing, but you should still make a habit of calling this method.



+-*/+-*/+-*/+-*/close m 
close()

Flush the mailbox, unlock it if necessary, and close any open files. For
some :class:`Mailbox` subclasses, this method does nothing.




+-*/+-*/+-*/+-*/__contains__ m 
__contains__(key)

Return ``True`` if *key* corresponds to a message, ``False`` otherwise.



+-*/+-*/+-*/+-*/add m 
add(message)

Add *message* to the mailbox and return the key that has been assigned to
it.

Parameter *message* may be a :class:`Message` instance, an
:class:`email.Message.Message` instance, a string, a byte string, or a
file-like object (which should be open in binary mode). If *message* is
an instance of the
appropriate format-specific :class:`Message` subclass (e.g., if it's an
:class:`mboxMessage` instance and this is an :class:`mbox` instance), its
format-specific information is used. Otherwise, reasonable defaults for
format-specific information are used.

.. versionchanged:: 3.2 support for binary input



+-*/+-*/+-*/+-*/get_string m 
get_string(key)

Return a string representation of the message corresponding to *key*, or
raise a :exc:`KeyError` exception if no such message exists.  The
message is processed through :class:`email.message.Message` to
convert it to a 7bit clean representation.



+-*/+-*/+-*/+-*/get_bytes m 
get_bytes(key)

Return a byte representation of the message corresponding to *key*, or
raise a :exc:`KeyError` exception if no such message exists.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/__len__ m 
__len__()

Return a count of messages in the mailbox.



+-*/+-*/+-*/+-*/itervalues m 
itervalues()

Return an iterator over representations of all messages if called as
:meth:`itervalues` or :meth:`__iter__` or return a list of such
representations if called as :meth:`values`. The messages are represented
as instances of the appropriate format-specific :class:`Message` subclass
unless a custom message factory was specified when the :class:`Mailbox`
instance was initialized.

.. note::

   The behavior of :meth:`__iter__` is unlike that of dictionaries, which
   iterate over keys.



+-*/+-*/+-*/+-*/__getitem__ m 
__getitem__(key)

Return a representation of the message corresponding to *key*. If no such
message exists, *default* is returned if the method was called as
:meth:`get` and a :exc:`KeyError` exception is raised if the method was
called as :meth:`__getitem__`. The message is represented as an instance
of the appropriate format-specific :class:`Message` subclass unless a
custom message factory was specified when the :class:`Mailbox` instance
was initialized.



+-*/+-*/+-*/+-*/get m 
get(key, default=None)

Return a representation of the message corresponding to *key*. If no such
message exists, *default* is returned if the method was called as
:meth:`get` and a :exc:`KeyError` exception is raised if the method was
called as :meth:`__getitem__`. The message is represented as an instance
of the appropriate format-specific :class:`Message` subclass unless a
custom message factory was specified when the :class:`Mailbox` instance
was initialized.



+-*/+-*/+-*/+-*/keys m 
keys()

Return an iterator over all keys if called as :meth:`iterkeys` or return a
list of keys if called as :meth:`keys`.



+-*/+-*/+-*/+-*/get_message m 
get_message(key)

Return a representation of the message corresponding to *key* as an
instance of the appropriate format-specific :class:`Message` subclass, or
raise a :exc:`KeyError` exception if no such message exists.



+-*/+-*/+-*/+-*/update m 
update(arg)

Parameter *arg* should be a *key*-to-*message* mapping or an iterable of
(*key*, *message*) pairs. Updates the mailbox so that, for each given
*key* and *message*, the message corresponding to *key* is set to
*message* as if by using :meth:`__setitem__`. As with :meth:`__setitem__`,
each *key* must already correspond to a message in the mailbox or else a
:exc:`KeyError` exception will be raised, so in general it is incorrect
for *arg* to be a :class:`Mailbox` instance.

.. note::

   Unlike with dictionaries, keyword arguments are not supported.



+-*/+-*/+-*/+-*/__iter__ m 
__iter__()

Return an iterator over representations of all messages if called as
:meth:`itervalues` or :meth:`__iter__` or return a list of such
representations if called as :meth:`values`. The messages are represented
as instances of the appropriate format-specific :class:`Message` subclass
unless a custom message factory was specified when the :class:`Mailbox`
instance was initialized.

.. note::

   The behavior of :meth:`__iter__` is unlike that of dictionaries, which
   iterate over keys.



+-*/+-*/+-*/+-*/iteritems m 
iteritems()

Return an iterator over (*key*, *message*) pairs, where *key* is a key and
*message* is a message representation, if called as :meth:`iteritems` or
return a list of such pairs if called as :meth:`items`. The messages are
represented as instances of the appropriate format-specific
:class:`Message` subclass unless a custom message factory was specified
when the :class:`Mailbox` instance was initialized.



+-*/+-*/+-*/+-*/iterkeys m 
iterkeys()

Return an iterator over all keys if called as :meth:`iterkeys` or return a
list of keys if called as :meth:`keys`.



+-*/+-*/+-*/+-*/__delitem__ m 
__delitem__(key)

Delete the message corresponding to *key* from the mailbox.

If no such message exists, a :exc:`KeyError` exception is raised if the
method was called as :meth:`remove` or :meth:`__delitem__` but no
exception is raised if the method was called as :meth:`discard`. The
behavior of :meth:`discard` may be preferred if the underlying mailbox
format supports concurrent modification by other processes.



+-*/+-*/+-*/+-*/items m 
items()

Return an iterator over (*key*, *message*) pairs, where *key* is a key and
*message* is a message representation, if called as :meth:`iteritems` or
return a list of such pairs if called as :meth:`items`. The messages are
represented as instances of the appropriate format-specific
:class:`Message` subclass unless a custom message factory was specified
when the :class:`Mailbox` instance was initialized.



+-*/+-*/+-*/+-*/clear m 
clear()

Delete all messages from the mailbox.



+-*/+-*/+-*/+-*/__setitem__ m 
__setitem__(key, message)

Replace the message corresponding to *key* with *message*. Raise a
:exc:`KeyError` exception if no message already corresponds to *key*.

As with :meth:`add`, parameter *message* may be a :class:`Message`
instance, an :class:`email.Message.Message` instance, a string, a byte
string, or a file-like object (which should be open in binary mode). If
*message* is an
instance of the appropriate format-specific :class:`Message` subclass
(e.g., if it's an :class:`mboxMessage` instance and this is an
:class:`mbox` instance), its format-specific information is
used. Otherwise, the format-specific information of the message that
currently corresponds to *key* is left unchanged.



+-*/+-*/+-*/+-*/remove m 
remove(key)

Delete the message corresponding to *key* from the mailbox.

If no such message exists, a :exc:`KeyError` exception is raised if the
method was called as :meth:`remove` or :meth:`__delitem__` but no
exception is raised if the method was called as :meth:`discard`. The
behavior of :meth:`discard` may be preferred if the underlying mailbox
format supports concurrent modification by other processes.



+-*/+-*/+-*/+-*/values m 
values()

Return an iterator over representations of all messages if called as
:meth:`itervalues` or :meth:`__iter__` or return a list of such
representations if called as :meth:`values`. The messages are represented
as instances of the appropriate format-specific :class:`Message` subclass
unless a custom message factory was specified when the :class:`Mailbox`
instance was initialized.

.. note::

   The behavior of :meth:`__iter__` is unlike that of dictionaries, which
   iterate over keys.



+-*/+-*/+-*/+-*/discard m 
discard(key)

Delete the message corresponding to *key* from the mailbox.

If no such message exists, a :exc:`KeyError` exception is raised if the
method was called as :meth:`remove` or :meth:`__delitem__` but no
exception is raised if the method was called as :meth:`discard`. The
behavior of :meth:`discard` may be preferred if the underlying mailbox
format supports concurrent modification by other processes.



+-*/+-*/+-*/+-*/get_file m 
get_file(key)

Return a file-like representation of the message corresponding to *key*,
or raise a :exc:`KeyError` exception if no such message exists.  The
file-like object behaves as if open in binary mode.  This file should be
closed once it is no longer needed.

.. versionchanged:: 3.2
   The file object really is a binary file; previously it was incorrectly
   returned in text mode.  Also, the file-like object now supports the
   context manager protocol: you can use a :keyword:`with` statement to
   automatically close it.

.. note::

   Unlike other representations of messages, file-like representations are
   not necessarily independent of the :class:`Mailbox` instance that
   created them or of the underlying mailbox.  More specific documentation
   is provided by each subclass.



+-*/+-*/+-*/BabylMessage c 
BabylMessage(message=None)

A message with Babyl-specific behaviors. Parameter *message* has the same
meaning as with the :class:`Message` constructor.

Certain message labels, called :dfn:`attributes`, are defined by convention
to have special meanings. The attributes are as follows:

+-----------+------------------------------------------+
| Label     | Explanation                              |
+===========+==========================================+
| unseen    | Not read, but previously detected by MUA |
+-----------+------------------------------------------+
| deleted   | Marked for subsequent deletion           |
+-----------+------------------------------------------+
| filed     | Copied to another file or mailbox        |
+-----------+------------------------------------------+
| answered  | Replied to                               |
+-----------+------------------------------------------+
| forwarded | Forwarded                                |
+-----------+------------------------------------------+
| edited    | Modified by the user                     |
+-----------+------------------------------------------+
| resent    | Resent                                   |
+-----------+------------------------------------------+

By default, Rmail displays only visible headers. The :class:`BabylMessage`
class, though, uses the original headers because they are more
complete. Visible headers may be accessed explicitly if desired.

:class:`BabylMessage` instances offer the following methods:



+-*/+-*/+-*/+-*/set_visible m 
set_visible(visible)

Set the message's visible headers to be the same as the headers in
*message*.  Parameter *visible* should be a :class:`Message` instance, an
:class:`email.Message.Message` instance, a string, or a file-like object
(which should be open in text mode).



+-*/+-*/+-*/+-*/set_labels m 
set_labels(labels)

Set the list of labels on the message to *labels*.



+-*/+-*/+-*/+-*/get_visible m 
get_visible()

Return an :class:`Message` instance whose headers are the message's
visible headers and whose body is empty.



+-*/+-*/+-*/+-*/remove_label m 
remove_label(label)

Remove *label* from the list of labels on the message.



+-*/+-*/+-*/+-*/get_labels m 
get_labels()

Return a list of labels on the message.



+-*/+-*/+-*/+-*/update_visible m 
update_visible()

When a :class:`BabylMessage` instance's original headers are modified, the
visible headers are not automatically modified to correspond. This method
updates the visible headers as follows: each visible header with a
corresponding original header is set to the value of the original header,
each visible header without a corresponding original header is removed,
and any of :mailheader:`Date`, :mailheader:`From`, :mailheader:`Reply-To`,
:mailheader:`To`, :mailheader:`CC`, and :mailheader:`Subject` that are
present in the original headers but not the visible headers are added to
the visible headers.



+-*/+-*/+-*/+-*/add_label m 
add_label(label)

Add *label* to the list of labels on the message.



+-*/+-*/+-*/MaildirMessage c 
MaildirMessage(message=None)

A message with Maildir-specific behaviors. Parameter *message* has the same
meaning as with the :class:`Message` constructor.

Typically, a mail user agent application moves all of the messages in the
:file:`new` subdirectory to the :file:`cur` subdirectory after the first time
the user opens and closes the mailbox, recording that the messages are old
whether or not they've actually been read. Each message in :file:`cur` has an
"info" section added to its file name to store information about its state.
(Some mail readers may also add an "info" section to messages in
:file:`new`.)  The "info" section may take one of two forms: it may contain
"2," followed by a list of standardized flags (e.g., "2,FR") or it may
contain "1," followed by so-called experimental information. Standard flags
for Maildir messages are as follows:

+------+---------+--------------------------------+
| Flag | Meaning | Explanation                    |
+======+=========+================================+
| D    | Draft   | Under composition              |
+------+---------+--------------------------------+
| F    | Flagged | Marked as important            |
+------+---------+--------------------------------+
| P    | Passed  | Forwarded, resent, or bounced  |
+------+---------+--------------------------------+
| R    | Replied | Replied to                     |
+------+---------+--------------------------------+
| S    | Seen    | Read                           |
+------+---------+--------------------------------+
| T    | Trashed | Marked for subsequent deletion |
+------+---------+--------------------------------+

:class:`MaildirMessage` instances offer the following methods:



+-*/+-*/+-*/+-*/get_flags m 
get_flags()

Return a string specifying the flags that are currently set. If the
message complies with the standard Maildir format, the result is the
concatenation in alphabetical order of zero or one occurrence of each of
``'D'``, ``'F'``, ``'P'``, ``'R'``, ``'S'``, and ``'T'``. The empty string
is returned if no flags are set or if "info" contains experimental
semantics.



+-*/+-*/+-*/+-*/add_flag m 
add_flag(flag)

Set the flag(s) specified by *flag* without changing other flags. To add
more than one flag at a time, *flag* may be a string of more than one
character. The current "info" is overwritten whether or not it contains
experimental information rather than flags.



+-*/+-*/+-*/+-*/get_date m 
get_date()

Return the delivery date of the message as a floating-point number
representing seconds since the epoch.



+-*/+-*/+-*/+-*/get_subdir m 
get_subdir()

Return either "new" (if the message should be stored in the :file:`new`
subdirectory) or "cur" (if the message should be stored in the :file:`cur`
subdirectory).

.. note::

   A message is typically moved from :file:`new` to :file:`cur` after its
   mailbox has been accessed, whether or not the message is has been
   read. A message ``msg`` has been read if ``"S" in msg.get_flags()`` is
   ``True``.



+-*/+-*/+-*/+-*/set_date m 
set_date(date)

Set the delivery date of the message to *date*, a floating-point number
representing seconds since the epoch.



+-*/+-*/+-*/+-*/get_info m 
get_info()

Return a string containing the "info" for a message. This is useful for
accessing and modifying "info" that is experimental (i.e., not a list of
flags).



+-*/+-*/+-*/+-*/set_flags m 
set_flags(flags)

Set the flags specified by *flags* and unset all others.



+-*/+-*/+-*/+-*/remove_flag m 
remove_flag(flag)

Unset the flag(s) specified by *flag* without changing other flags. To
remove more than one flag at a time, *flag* maybe a string of more than
one character.  If "info" contains experimental information rather than
flags, the current "info" is not modified.



+-*/+-*/+-*/+-*/set_info m 
set_info(info)

Set "info" to *info*, which should be a string.



+-*/+-*/+-*/+-*/set_subdir m 
set_subdir(subdir)

Set the subdirectory the message should be stored in. Parameter *subdir*
must be either "new" or "cur".



+-*/+-*/+-*/Message c 
Message(message=None)

A subclass of the :mod:`email.Message` module's :class:`Message`. Subclasses of
:class:`mailbox.Message` add mailbox-format-specific state and behavior.

If *message* is omitted, the new instance is created in a default, empty state.
If *message* is an :class:`email.Message.Message` instance, its contents are
copied; furthermore, any format-specific information is converted insofar as
possible if *message* is a :class:`Message` instance. If *message* is a string,
a byte string,
or a file, it should contain an :rfc:`2822`\ -compliant message, which is read
and parsed.  Files should be open in binary mode, but text mode files
are accepted for backward compatibility.

The format-specific state and behaviors offered by subclasses vary, but in
general it is only the properties that are not specific to a particular
mailbox that are supported (although presumably the properties are specific
to a particular mailbox format). For example, file offsets for single-file
mailbox formats and file names for directory-based mailbox formats are not
retained, because they are only applicable to the original mailbox. But state
such as whether a message has been read by the user or marked as important is
retained, because it applies to the message itself.

There is no requirement that :class:`Message` instances be used to represent
messages retrieved using :class:`Mailbox` instances. In some situations, the
time and memory required to generate :class:`Message` representations might
not not acceptable. For such situations, :class:`Mailbox` instances also
offer string and file-like representations, and a custom message factory may
be specified when a :class:`Mailbox` instance is initialized.



+-*/+-*/+-*/mbox c 
mbox(path, factory=None, create=True)

A subclass of :class:`Mailbox` for mailboxes in mbox format. Parameter *factory*
is a callable object that accepts a file-like message representation (which
behaves as if opened in binary mode) and returns a custom representation. If
*factory* is ``None``, :class:`mboxMessage` is used as the default message
representation. If *create* is ``True``, the mailbox is created if it does not
exist.

The mbox format is the classic format for storing mail on Unix systems. All
messages in an mbox mailbox are stored in a single file with the beginning of
each message indicated by a line whose first five characters are "From ".

Several variations of the mbox format exist to address perceived shortcomings in
the original. In the interest of compatibility, :class:`mbox` implements the
original format, which is sometimes referred to as :dfn:`mboxo`. This means that
the :mailheader:`Content-Length` header, if present, is ignored and that any
occurrences of "From " at the beginning of a line in a message body are
transformed to ">From " when storing the message, although occurrences of ">From
" are not transformed to "From " when reading the message.

Some :class:`Mailbox` methods implemented by :class:`mbox` deserve special
remarks:



+-*/+-*/+-*/+-*/lock m 
lock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls.




+-*/+-*/+-*/+-*/unlock m 
unlock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls.




+-*/+-*/+-*/+-*/get_file m 
get_file(key)

Using the file after calling :meth:`flush` or :meth:`close` on the
:class:`mbox` instance may yield unpredictable results or raise an
exception.



+-*/+-*/+-*/Babyl c 
Babyl(path, factory=None, create=True)

A subclass of :class:`Mailbox` for mailboxes in Babyl format. Parameter
*factory* is a callable object that accepts a file-like message representation
(which behaves as if opened in binary mode) and returns a custom representation.
If *factory* is ``None``, :class:`BabylMessage` is used as the default message
representation. If *create* is ``True``, the mailbox is created if it does not
exist.

Babyl is a single-file mailbox format used by the Rmail mail user agent
included with Emacs. The beginning of a message is indicated by a line
containing the two characters Control-Underscore (``'\037'``) and Control-L
(``'\014'``). The end of a message is indicated by the start of the next
message or, in the case of the last message, a line containing a
Control-Underscore (``'\037'``) character.

Messages in a Babyl mailbox have two sets of headers, original headers and
so-called visible headers. Visible headers are typically a subset of the
original headers that have been reformatted or abridged to be more
attractive. Each message in a Babyl mailbox also has an accompanying list of
:dfn:`labels`, or short strings that record extra information about the
message, and a list of all user-defined labels found in the mailbox is kept
in the Babyl options section.

:class:`Babyl` instances have all of the methods of :class:`Mailbox` in
addition to the following:



+-*/+-*/+-*/+-*/get_labels m 
get_labels()

Return a list of the names of all user-defined labels used in the mailbox.

.. note::

   The actual messages are inspected to determine which labels exist in
   the mailbox rather than consulting the list of labels in the Babyl
   options section, but the Babyl section is updated whenever the mailbox
   is modified.


+-*/+-*/+-*/+-*/lock m 
lock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls.




+-*/+-*/+-*/+-*/unlock m 
unlock()

Three locking mechanisms are used---dot locking and, if available, the
:c:func:`flock` and :c:func:`lockf` system calls.




+-*/+-*/+-*/+-*/get_file m 
get_file(key)

In Babyl mailboxes, the headers of a message are not stored contiguously
with the body of the message. To generate a file-like representation, the
headers and body are copied together into a :class:`StringIO` instance
(from the :mod:`StringIO` module), which has an API identical to that of a
file. As a result, the file-like object is truly independent of the
underlying mailbox but does not save memory compared to a string
representation.



+-*/+-*/+-*/mboxMessage c 
mboxMessage(message=None)

A message with mbox-specific behaviors. Parameter *message* has the same meaning
as with the :class:`Message` constructor.

Messages in an mbox mailbox are stored together in a single file. The
sender's envelope address and the time of delivery are typically stored in a
line beginning with "From " that is used to indicate the start of a message,
though there is considerable variation in the exact format of this data among
mbox implementations. Flags that indicate the state of the message, such as
whether it has been read or marked as important, are typically stored in
:mailheader:`Status` and :mailheader:`X-Status` headers.

Conventional flags for mbox messages are as follows:

+------+----------+--------------------------------+
| Flag | Meaning  | Explanation                    |
+======+==========+================================+
| R    | Read     | Read                           |
+------+----------+--------------------------------+
| O    | Old      | Previously detected by MUA     |
+------+----------+--------------------------------+
| D    | Deleted  | Marked for subsequent deletion |
+------+----------+--------------------------------+
| F    | Flagged  | Marked as important            |
+------+----------+--------------------------------+
| A    | Answered | Replied to                     |
+------+----------+--------------------------------+

The "R" and "O" flags are stored in the :mailheader:`Status` header, and the
"D", "F", and "A" flags are stored in the :mailheader:`X-Status` header. The
flags and headers typically appear in the order mentioned.

:class:`mboxMessage` instances offer the following methods:



+-*/+-*/+-*/+-*/get_from m 
get_from()

Return a string representing the "From " line that marks the start of the
message in an mbox mailbox. The leading "From " and the trailing newline
are excluded.



+-*/+-*/+-*/+-*/get_flags m 
get_flags()

Return a string specifying the flags that are currently set. If the
message complies with the conventional format, the result is the
concatenation in the following order of zero or one occurrence of each of
``'R'``, ``'O'``, ``'D'``, ``'F'``, and ``'A'``.



+-*/+-*/+-*/+-*/add_flag m 
add_flag(flag)

Set the flag(s) specified by *flag* without changing other flags. To add
more than one flag at a time, *flag* may be a string of more than one
character.



+-*/+-*/+-*/+-*/set_flags m 
set_flags(flags)

Set the flags specified by *flags* and unset all others. Parameter *flags*
should be the concatenation in any order of zero or more occurrences of
each of ``'R'``, ``'O'``, ``'D'``, ``'F'``, and ``'A'``.



+-*/+-*/+-*/+-*/remove_flag m 
remove_flag(flag)

Unset the flag(s) specified by *flag* without changing other flags. To
remove more than one flag at a time, *flag* maybe a string of more than
one character.



+-*/+-*/+-*/+-*/set_from m 
set_from(from_, time_=None)

Set the "From " line to *from_*, which should be specified without a
leading "From " or trailing newline. For convenience, *time_* may be
specified and will be formatted appropriately and appended to *from_*. If
*time_* is specified, it should be a :class:`struct_time` instance, a
tuple suitable for passing to :meth:`time.strftime`, or ``True`` (to use
:meth:`time.gmtime`).



+-*/+-*/mailcap p Mailcap file handling.
+-*/+-*/+-*/getcaps f 
getcaps()

Returns a dictionary mapping MIME types to a list of mailcap file entries. This
dictionary must be passed to the :func:`findmatch` function.  An entry is stored
as a list of dictionaries, but it shouldn't be necessary to know the details of
this representation.

The information is derived from all of the mailcap files found on the system.
Settings in the user's mailcap file :file:`$HOME/.mailcap` will override
settings in the system mailcap files :file:`/etc/mailcap`,
:file:`/usr/etc/mailcap`, and :file:`/usr/local/etc/mailcap`.


+-*/+-*/+-*/findmatch f 
findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[])

Return a 2-tuple; the first element is a string containing the command line to
be executed (which can be passed to :func:`os.system`), and the second element
is the mailcap entry for a given MIME type.  If no matching MIME type can be
found, ``(None, None)`` is returned.

*key* is the name of the field desired, which represents the type of activity to
be performed; the default value is 'view', since in the  most common case you
simply want to view the body of the MIME-typed data.  Other possible values
might be 'compose' and 'edit', if you wanted to create a new body of the given
MIME type or alter the existing body data.  See :rfc:`1524` for a complete list
of these fields.

*filename* is the filename to be substituted for ``%s`` in the command line; the
default value is ``'/dev/null'`` which is almost certainly not what you want, so
usually you'll override it by specifying a filename.

*plist* can be a list containing named parameters; the default value is simply
an empty list.  Each entry in the list must be a string containing the parameter
name, an equals sign (``'='``), and the parameter's value.  Mailcap entries can
contain  named parameters like ``%{foo}``, which will be replaced by the value
of the parameter named 'foo'.  For example, if the command line ``showpartial
%{id} %{number} %{total}`` was in a mailcap file, and *plist* was set to
``['id=1', 'number=2', 'total=3']``, the resulting command line would be
``'showpartial 1 2 3'``.

In a mailcap file, the "test" field can optionally be specified to test some
external condition (such as the machine architecture, or the window system in
use) to determine whether or not the mailcap line applies.  :func:`findmatch`
will automatically check such conditions and skip the entry if the check fails.



(select判断为可读的最小数据量,默认为1)
