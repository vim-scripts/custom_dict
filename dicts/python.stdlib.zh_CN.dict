/*-+ vim:ft=dict:sw=2:sts=2:
/*-+ p:module c:class m:method d:data f:function t:type M:class_method 
/*-+ _:not is complete word
+-*/语言 _ 一些说明
+-*/+-*/环境变量 _
+-*/+-*/+-*/PYTHONPATH _ 冒号(windows分号)分隔的模块搜索路径
+-*/+-*/+-*/PYTHONIOENCODING _ 标准输入输出所使用的编码方式
+-*/+-*/+-*/PYTHONOPTIMIZE _ 优化
+-*/+-*/+-*/PYTHONCASEOK _ 导入模块不区分大小写
+-*/+-*/语法 _
try .. except .. else .. finally ..
  finally部分不管怎样都会执行,其执行顺序在except或else之后 
  其内容不能包含continue
for(while) .. else ..
  else在for,while完整执行后执行,break和continue会跳过else
可以连续比较  x < y > z == w > u
+-*/+-*/+-*/序列赋值 _
python2,3通用:
  (a,b),c = 'ab','c'
python3:
  a,*b,c = 'axxxc'  # b == ['x','x','x']
  a,*b = 'a'  # b == []
  a*,b = 'b'  # a == []
+-*/+-*/+-*/函数参数 _ (python3)
  *表示位置参数结尾，后面如带有参数名称b，则此变量包含所有未处理的位置参数或为()
  其后的参数key,必须以key=xx的形式调用
def func(a,*b,key1,key2=xx): ...  # python3里...相当于pass
func(1,2,key1=3)  # b == (2,)
func(a=1,key1=2)  # b == ()
func(1,2,3)       # 出错,key1必须显式调用
def func(a,*,key1=xx): ...
func(1,2,3)   # a == 1 其后的2和3被忽略
def func(a,*b,c=xx,**d): ...
func(1,2,c=3,d=4,e=5)   # a == 1 ; b == (2,) ; c == 3 ; d == {'d':4,'e':5}
+-*/+-*/+-*/相对导入 _
__all__的设定只对from语句有影响
from .xxx import yyy 相对路径只用于模块包里
模块包里运行单个py要在sys.path里有设模块包的顶层路径才行
.;.xxx;..xxx也只能用于from语句
+-*/__builtin__ p 内置函数和类型
+-*/+-*/NotImplemented d 用于类方法里return语句,表示未实现
+-*/+-*/abs f abs(x),返回x的绝对值
+-*/+-*/all f all(s),如果s中所有值为真，则为真
+-*/+-*/any f any(s),如果s中任意值为真，则为真
+-*/+-*/ascii f 像repr那样创建显示形式(python3)
ascii(x)
  就像repr()那样创建对象x的一种可打印形式，但在结果中只使用ascii字符。
  非ascii字符转换为合适的转义序列。
  用于在不支持unicode的终端或shell程序中察看unicode字符串。
+-*/+-*/basestring c 所有字符串的超类(python2)
basestring
  这是一个抽象数据类型，是python2中str和unicode的超类。
  它只用于字符串的类型测试。例如isinstance(s,basestring)。
+-*/+-*/bin f bin(x)返回一个字符串，为整数x的二进制形式
+-*/+-*/bool t True和False的类型
bool([x])
  bool([x])转换x为True或False。如果不带参数，返回False。bool继承int，
  True和False可作整数，分别代表1和0。
+-*/+-*/bytearray t 可变字节数组
bytearray([source[, encoding[, errors]]])
  单个参数时，可以是范围0－255的整数序列、8位字符串、
  或者是指定数组大小的一个整数（每一项都为0）。
  bytearray即是数组，可以用a[i]或a[i]=v这样的操作，(a[i]返回的是数值)
  或insert,append,reverse等列表操作，
  又是字符串，可以用切片、find,split,replace等。
  使用字符串操作时，应在字串常量前加b，表示使用字节，
  例如a.split(b',')，而不是a.split(',')。这样操作产生新的bytearray。
  如果要把bytearray转换为字符串，可使用decode(encoding)的方法，
  'latin1'编码将直接转换，不做任何修改。
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
+-*/+-*/bytes t 不变字节字符串(python3)
bytes([source[, encoding[, errors]]])
  不变字节数组。在python2中是str的别名，是bytearray的不变版本。
  单个参数时，可以是范围0－255的整数序列、8位字符串、
  或者是指定数组大小的一个整数（每一项都为0）。
  b'sdfdf'[2]返回的是数值,而不是字节字符。
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
+-*/+-*/+-*/decode m 解码为字符串
bytes.decode(encoding="utf-8", errors="strict")
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
+-*/+-*/+-*/fromhex M 由16进制字符串生成新的字节字符串
bytes.fromhex(string)
  string里的空格将忽略，里面2个字符组成一个字节
>>> bytes.fromhex('f0 f1f2  ')
b'\xf0\xf1\xf2'
+-*/+-*/+-*/translate m 根据转换表转换生成新的字节字符串
bytes.translate(table[, delete])
  table:  256字符转换表,可以由bytes.maketrans生成,None的话将只做删除字符处理
  delete: 要删除的字符
>>> b'read this short text'.translate(None, b'aeiou')
b'rd ths shrt txt'
+-*/+-*/+-*/maketrans M  生成转换字符表(python3)
bytes.maketrans(from, to)
  from,to 必须是同长度的字节字符串
  python2里使用string模块里的maketrans
+-*/+-*/chr f 转换整数为单字符字符串
chr(x)转换整数x为单字符字符串.在python2中，x必须0<=x<=255，
在python3中，x必须是有效的unicode代码点，如x超出范围，引发ValueError异常。
+-*/+-*/classmethod f 创建类方法
classmethod(func)
   创建func的类方法。通常只在类定以内部使用，通过@classmethod方式来调用。
   与同常的方法不同的是，类方法不是用实例作为第一个参数而是用类作第一个参数。
+-*/+-*/cmp f 比较两值大小
cmp(x,y)
  比较x和y，如果x<y返回负数，如果x>y返回正数，如果x==y返回0。
+-*/+-*/compile f 编译字符串为代码对象
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
  source: 是一个包含python代码的字符串。
          如果是多行，必须用'\n'结尾，不能是windows的'\r\n'。
  filename: 是文件名字符串。如果source为空，则用filename文件的内容代替source.
  mode:            可以是exec:执行语句，eval:单独的表达式，single:单条语句。
  flags:    决定启用哪些可选功能（与__future__模块有关），可按位or定多个功能。
    如__future__.divisiong.compiler_flag，省略则为0，使用当前环境里有效的功能。
  dont_inherit: 用于flags忽略当前环境里已开启的功能。
+-*/+-*/complex t 复数类型
complex([real [,imag]])
  一种具有实部和虚部的复数。两部分为real和imag，如果忽略imag并且real是字符串，
  则解析字符串转换为其表示的复数。如果没有参数则返回0j。
+-*/+-*/delattr f 删除对象的某属性
delattr(object,attr)
  删除对象的某属性,attr是一个字符串，同del object.attr。
  只对对象的__dict__操作
  有时可以通过删除对象本身的属性让此所属类的同名属性暴露出来
+-*/+-*/dict t 字典类型
dict([m])
dict(key1=value1,key2=value2,..)
  字典类型。如没有参数，返回一个空字典。
  如果m是映像对象，返回一个具有m同键同值的新字典，相当与浅复制。
  m还可以是能产生(key,value)对的序列迭代对象。
  对key是字符串的字典初始化
  使用dict(name1=..,name2=....)要比{'name1':..,'name2':..}方便
+-*/+-*/+-*/clear m  删除所有项目
+-*/+-*/+-*/copy m  生成一个浅复制的副本
+-*/+-*/+-*/fromkeys M  以键表创建一个新字典
fromkeys(seq[, value])
  创建一个以seq里所有元素为键值的新字典，其值为value
+-*/+-*/+-*/get m  获取键值为key的值，如没有则返回默认值
get(key[, default])
  default: 默认为None
+-*/+-*/+-*/has_key m  是否有此键(python2)
has_key(key)
  python3里用key in o代替
+-*/+-*/+-*/items m  返回一个(key,value)为元素的序列
items()
  python3里返回迭代序列,python2里返回列表
+-*/+-*/+-*/keys m 返回键值序列
keys()
  python3里返回迭代序列,python2里返回列表
+-*/+-*/+-*/pop m  删除key项并返回其值
pop(key[, default])
   如key未找到则返回default,如default为设定则报错
+-*/+-*/+-*/popitem m  删除key项并返回(key,value),未找到则报错
+-*/+-*/+-*/setdefault m  查找key返回其值，未找到则将key的值设为默认值
setdefault(key[, default])
   default: 默认为None
   如果key找到，返回其值，未找到则设m[key]=default并返回default
+-*/+-*/+-*/update m  将另一个字典的所有元素添加进来
+-*/+-*/+-*/values m 返回值序列
+-*/+-*/dir f 返回对象的属性名序列
dir([object])
  返回对象的属性名序列。如果object是模块，则返回该模块中定义的符号列表。
  如果object是类型或对象，则返回属性名列表。
  通常情况下先查找对象的__dict__属性，然后查找类的__dict__.
  但也可能会有其他的数据。如果有定义__dir__()则按照该方法结果而定。
+-*/+-*/divmod f 获取商和余数
divmod(a,b)
  将商和余数打包为元组返回。对于整数，返回(a//b,a%b)。
  对于浮点数，返回(math.floor(a/b),a%b)。不能使用复数作参数。
+-*/+-*/enumerate f 给迭代对象增加一个计数器
enumerate(iter [,initial_value]) 
  由可迭代对象iter产生新的迭代对象,产生的元组包含计数和iter的元素.默认由0开始.
+-*/+-*/eval f 计算表达式的值
eval(expr [,globals [,locals]])
  计算一个表达式的值。expr是一个字符串或一个由compile()产生的代码对象。
  globals和locals分别为该操作所使用的全局和局部环境。
  如省略则在调用该函数的环境里计算表达式。
  常见情况是将globals和locals指定为字典，高级应用可使用自定义的映射对象。
+-*/+-*/exec f 执行python语句
exec(code [,globals [,locals]])
  code: 是字符串或文件或compile()构造的代码对象。
  globals和locals分别为该操作所使用的全局和局部环境。
  如省略则在调用该函数的环境里计算表达式。
  常见情况是将globals和locals指定为字典，高级应用可使用自定义的映射对象。
  python2: exec语句可以改变调用程序命名空间里的局部变量
  python3: 默认会使用locals()，而locals()的字典是只能查看不能修改的
+-*/+-*/filter f 筛选迭代器
filter(function,iterable)
  python2: 创建由iterable里应用function的值为真的对象列表。
  python3: 产生的是迭代器，不是列表。
  如果function是None，则剔除值为假的元素。iterable可以是任意支持迭代的对象。
  通常使用(x for x in iterable if function(x))要比这个快
+-*/+-*/float t 浮点数类型
float([x])
  如果x是整数则转换为浮点数。如果x是字符串，则解析为浮点数。无x返回0.0
  如x是'inf','-inf','nan'将创建浮点值+inf,-inf,nan
  对于过大过小的浮点数在作乘除运算时仍有可能会出现上溢下溢的情况
  此时最好使用log10转换为加减运算来避免这种问题
+-*/+-*/+-*/as_integer_ratio m 由浮点数生成分数，返回(分子,分母)二元组
float.as_integer_ratio()
  如浮点数是NaN等无法生成分数的数将报错
+-*/+-*/+-*/is_integer m 判断是否是整数
float.is_integer()
>>> (-2.0).is_integer()
True
>>> (3.2).is_integer()
False
+-*/+-*/+-*/hex() m 返回浮点数的十六进制表示字符串
float.hex()
  返回的字符串会包含前缀'0x'和指数'p..'
+-*/+-*/+-*/fromhex(s) M 由十六进制浮点数字符串生成浮点数
float.fromhex(s)
  s可以没有'0x'前缀
+-*/+-*/format f 按格式生成字符串
format(value [,format_spec])
  按照format_spec中的格式将value转换为字符串。该操作调用value.__format__()。
  如format(44,'=^+#10x')返回'==+0x2c==='
  基本格式[[fill]align][sign][#][0][width][.precision][type]
  fill: 单字符,对齐时填充的字符,默认是空格
  align: <左对齐 >右对齐 ^中间对齐 
  sign: +正负数都显示符号 -默认只显示负数符号 ' '空格代替+
  width: 长度
  #: 只用于b、o、x、X形式，表示前置0b,0o,0x,0X
  0: 只用于数字，表示前置0
  precision: 只用于浮点数或小数格式，小数点后长度
  |type| 说明                                            |
  |----+-------------------------------------------------|
  | b  | 二进制整数                                      |
  | d  | 十进制整数                                      |
  | o  | 八进制整数                                      |
  | x  | 小写十六进制数                                  |
  | X  | 大写十六进制数                                  |
  | e  | 小写指数格式浮点数                              |
  | E  | 大写指数格式浮点数                              |
  | f  | 小数点格式                                      |
  | F  | 小数点格式                                      |
  | g  | 小数点格式，如果指数精度小于-4自动使用e格式     |
  | G  | 小数点格式，如果指数精度小于-4自动使用E格式     |
  | n  | 同g,但用当前区域格式                            |
  | %  | 数字乘100后加%                                  |
  | c  | 单字符：如参数为整数自动使用chr()转换           |
  | s  | 字符串                                          |
  |    |    以下用于datetime类型     |   例子            |
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天）              | 32                |
  | %W | 星期（星期一）              | 32                |
+-*/+-*/frozenset t 不变集合对象类型
frozenset([items])
  items是可迭代的，其元素的值也必须是不可变的。无参数返回空集合
+-*/+-*/getattr f 返回对象的一个命名属性的值
getattr(object,name [,default])
  返回对象的一个命名属性的值.name是属性名称,如不存在该属性则返回default，
  如果没有default则引发AttributeError。同object.name
+-*/+-*/globals f globals()返回当前模块全局命名空间的字典。
+-*/+-*/hasattr f 测试是否有某属性名。
hasattr(object,name)
  如果name是object的属性名，返回True,否则返回False.
+-*/+-*/hash f 返回对象的哈希值
hash(object)
  如果有的话，返回对象的哈希值。对于任意两个相等的对象来说，哈希值是相同的。
  可变对象即使定义了__hash__()也没有哈希值。
  这个主要用于字典、集合或其他映射对象的实现中。
+-*/+-*/help f 返回对象的帮助信息
+-*/+-*/hex f hex(x)返回x的十六进制字符串
+-*/+-*/id f id(object)返回object的唯一整数标识符
+-*/+-*/input f 读入输入
input([prompt])
  python2: 打印一个提示符，读取输入行并通过eval()对其处理
  python3: 将提示符prompt打印到标准输出并读取一行输入（不做任何求值或修改）
+-*/+-*/int t 整型
int(x [,base])
  如果x是数字，取整。如字符串，则默认十进制转换为整数。
  如给出base则按base进制转换。python2里如数字大于32位范围会转为长整型。
+-*/+-*/+-*/bit_length m 位数
int.bit_length()
 不包括正负符号和前置0
  >>> n = -37
  >>> bin(n)
  '-0b100101'
  >>> n.bit_length()
  6
+-*/+-*/+-*/to_bytes m 由整数生成等价其值的字节字符串
int.to_bytes(length, byteorder, \*, signed=False)
  length: 生成的字节长度
  byteorder:  big大端序 little小端序 如需要系统字节序，可使用sys.byteorder
  signed: 是否生成有符号整数字节，如为False并且是负数则会报OverflowError

  >>> (1024).to_bytes(2, byteorder='big')
  b'\x04\x00'
  >>> (1024).to_bytes(10, byteorder='big')
  b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00'
  >>> (-1024).to_bytes(10, byteorder='big', signed=True)
  b'\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00'
  >>> x = 1000
  >>> x.to_bytes((x.bit_length() // 8) + 1, byteorder='little')
  b'\xe8\x03'
+-*/+-*/+-*/from_bytes m 由字节生成整数
int.from_bytes(bytes, byteorder, \*, signed=False)
  bytes: 字节
  byteorder:  big大端序 little小端序 如需要系统字节序，可使用sys.byteorder
  signed: 是否按有符号整数处理

  >>> int.from_bytes(b'\x00\x10', byteorder='big')
  16
  >>> int.from_bytes(b'\x00\x10', byteorder='little')
  4096
  >>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=True)
  -1024
  >>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=False)
  64512
  >>> int.from_bytes([255, 0, 0], byteorder='big')
  16711680
+-*/+-*/isinstance f 判断是否是某类型的对像实例
isinstance(object,classobj)
  如果object是classobj类的实例、子类或属于抽象基类，则返回True。
  classobj可以是多个类型的元组或列表，如isinstance(s,(list,tuple))
+-*/+-*/issubclass f 判断是否是子类或有向基类注册
issubclass(class1,class2)
  如果class1是class2的子类或class1是基于抽象基类class2注册的，则返回True.
  class2也可以是多个类的元组或列表。issubclass(A,A)总是真的。
+-*/+-*/iter f 返回一个迭代器
iter(object [,sentinel])
  如省略sentinel,则object必须提供__iter__()或__getitem__(),后者接受以0开始的参数
  如指定sentinel,则object是一个无参数的可调用函数。
  返回的迭代器将重复调用该函数，直到其返回值等于sentinel。
  如果object不支持迭代，引发TypeError。
+-*/+-*/len f 返回元素数目.
len(s)
  返回元素数目.或调用对象的__len__().s如果是生成器，会引发TypeError。
+-*/+-*/list t 列表类型
+-*/+-*/+-*/append m 追加一项到列表尾部
append(x)
+-*/+-*/+-*/remove m  删除一个元素(只删除首次出现的那一个),如不存在则报错
remove(x)
+-*/+-*/+-*/reverse m 反转倒序列表里的元素
+-*/+-*/+-*/sort m 对自身的所有元素进行重新排列
sort([key [, reverse]])
  key: 单参数函数，其返回的对象值最好自带有__le__等方法，
       可用cmp_to_key将cmp双参数比较函数转为key函数
  reverse: 是否倒序
+-*/+-*/+-*/insert m 在索引位置i插入x元素
insert(i,x)
+-*/+-*/+-*/pop m  返回一个元素，并删除,如列表为空则报错
pop([i])
  i默认为最后一个元素的位置
+-*/+-*/+-*/extend m 附加序列到列表尾部
extend(iterable)
+-*/+-*/+-*/count m 统计列表里某元素的出现次数 
count(x)
+-*/+-*/+-*/index m 返回元素在列表里的位置，未找到则报错
index(x [, start [, stop]])
  start,stop为搜索范围，返回第一次出现的位置
+-*/+-*/locals f locals()返回调用程序的局部空间对应的字典。该字典只用于检查。
+-*/+-*/memoryview c
TODO:
memoryview(obj)

Create a :class:`memoryview` that references *obj*.  *obj* must support the
buffer protocol.  Built-in objects that support the buffer protocol include
:class:`bytes` and :class:`bytearray`.

A :class:`memoryview` has the notion of an *element*, which is the
atomic memory unit handled by the originating object *obj*.  For many
simple types such as :class:`bytes` and :class:`bytearray`, an element
is a single byte, but other types such as :class:`array.array` may have
bigger elements.

``len(view)`` returns the total number of elements in the memoryview,
*view*.  The :class:`~memoryview.itemsize` attribute will give you the
number of bytes in a single element.

A :class:`memoryview` supports slicing to expose its data.  Taking a single
index will return a single element as a :class:`bytes` object.  Full
slicing will result in a subview::

>>> v = memoryview(b'abcefg')
>>> v[1]
b'b'
>>> v[-1]
b'g'
>>> v[1:4]
<memory at 0x77ab28>
>>> bytes(v[1:4])
b'bce'

If the object the memoryview is over supports changing its data, the
memoryview supports slice assignment::

>>> data = bytearray(b'abcefg')
>>> v = memoryview(data)
>>> v.readonly
False
>>> v[0] = b'z'
>>> data
bytearray(b'zbcefg')
>>> v[1:4] = b'123'
>>> data
bytearray(b'a123fg')
>>> v[2] = b'spam'
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: cannot modify size of memoryview object

Notice how the size of the memoryview object cannot be changed.


+-*/+-*/+-*/tobytes m 由memory对象生成对应的字节字符串
tobytes()
   >>> m = memoryview(b"abc")
   >>> m.tobytes()
   b'abc'
   >>> bytes(m)
   b'abc'
+-*/+-*/+-*/tolist m 由memory对象生成对应的整数列表
tolist()
   >>> memoryview(b'abc').tolist()
   [97, 98, 99]
+-*/+-*/+-*/release m
release()

Release the underlying buffer exposed by the memoryview object.  Many
objects take special actions when a view is held on them (for example,
a :class:`bytearray` would temporarily forbid resizing); therefore,
calling release() is handy to remove these restrictions (and free any
dangling resources) as soon as possible.

After this method has been called, any further operation on the view
raises a :class:`ValueError` (except :meth:`release()` itself which can
be called multiple times)::

   >>> m = memoryview(b'abc')
   >>> m.release()
   >>> m[0]
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   ValueError: operation forbidden on released memoryview object

The context management protocol can be used for a similar effect,
using the ``with`` statement::

   >>> with memoryview(b'abc') as m:
   ...     m[0]
   ...
   b'a'
   >>> m[0]
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   ValueError: operation forbidden on released memoryview object

.. versionadded:: 3.2


+-*/+-*/+-*/format d
format

A string containing the format (in :mod:`struct` module style) for each
element in the view.  This defaults to ``'B'``, a simple bytestring.

+-*/+-*/+-*/itemsize d
itemsize

The size in bytes of each element of the memoryview::

   >>> m = memoryview(array.array('H', [1,2,3]))
   >>> m.itemsize
   2
   >>> m[0]
   b'\x01\x00'
   >>> len(m[0]) == m.itemsize
   True

+-*/+-*/+-*/shape d
shape

A tuple of integers the length of :attr:`ndim` giving the shape of the
memory as a N-dimensional array.

+-*/+-*/+-*/ndim d
ndim

An integer indicating how many dimensions of a multi-dimensional array the
memory represents.

+-*/+-*/+-*/strides d
strides

A tuple of integers the length of :attr:`ndim` giving the size in bytes to
access each element for each dimension of the array.

+-*/+-*/+-*/readonly d
readonly

A bool indicating whether the memory is read only.


+-*/+-*/long t 长整数类型(python2)
long([x [,base]])
  python2里的长整数类型。如果x是数字，取整。如字符串，则默认十进制转换为整数。
  如给出base则按base进制转换。无参数，返回0L.
  对于是否是任何整数类型的检查，可使用isinstance(x,numbers.Integral)。
+-*/+-*/map f 对序列批量处理，其结果生成新的列表
map(function,items,...)
  python2: function将应用到items的每一项并返回结果列表。
  对于多个列表,结果列表长度与最长items相等，较短的items里的值将用None作填充值。
  python3: 创建的是结果迭代器。对于多列表，将只到最短的序列为止。
  通常用(function(x) for x in items)来代替本函数
+-*/+-*/max f 返回最大值
max(s [,args,...])
  如果只有一个参数s，则返回s里各项的最大值。多个参数则返回参数里的最大值。
+-*/+-*/min f 返回最小值
min(s [,args,...])
  如果只有一个参数s，则返回s里各项的最小值。多个参数则返回参数里的最小值。
+-*/+-*/next f 返回迭代器里的下一项
next(s [,default])
  返回迭代器s的下一项，如没有则看是否有default，如有返回default
+-*/+-*/object t 所有对象的基类
+-*/+-*/+-*/特殊函数 _
+-*/+-*/+-*/+-*/__new__ m
__new__(cls,*args,**argk)
  对于要给不可变对象如继承int,str的类型可使用以下方式
  return str.__new__(cls,args[0])
+-*/+-*/+-*/+-*/__init__ m
+-*/+-*/+-*/+-*/__del__  m 无法由gc管理
+-*/+-*/+-*/+-*/__format__ m format 
__format__(self,format_spec)
+-*/+-*/+-*/+-*/__repr__  m repr  
+-*/+-*/+-*/+-*/__hash__ m  应只用于不可变对象 
对于整数 self & sys.maxint
对于浮点数 int((abs(math.frexp(self)[0]) - 0.5) * (1 << 52)) >> 20
对于字符串 reduce(lambda x,char: sys.maxint & ((x & (~0 << 25)) ^ x << 6 ^ ord(char)), self, 0) 
对于列表 reduce(lambda x,obj: sys.maxint & (x + hash(obj)), self, hash(self.__class__))
+-*/+-*/+-*/+-*/比较 _
+-*/+-*/+-*/+-*/+-*/__lt__ m <
+-*/+-*/+-*/+-*/+-*/__le__ m <= 
+-*/+-*/+-*/+-*/+-*/__gt__ m >
+-*/+-*/+-*/+-*/+-*/__ge__ m >= 
+-*/+-*/+-*/+-*/+-*/__eq__ m ==
+-*/+-*/+-*/+-*/+-*/__ne__ m !=
+-*/+-*/+-*/+-*/__instancecheck__ m isinstance
__instancecheck__(cls,obj)
+-*/+-*/+-*/+-*/__subclasscheck__ m issubclass 
__subclasscheck__(cls,subobj)
+-*/+-*/+-*/+-*/__getattribute__ m x.a优先于__getattr__,针对所有属性
__getattribute__(self,name)
  自定义此方法时通常必须使用object.__getattribute__(self,xxx)来获取已设定的属性
  对于不能使用的属性名称应抛出AttributeError
  python2:只有继承object的类在创建实例对象时可有效定义此方法
+-*/+-*/+-*/+-*/__getattr__ m x.a,只针对未定义的属性
__getattr__(self,name)
  不管是__dict__内的名称或类定义的名称都属于已定义的属性
  对于不能使用的属性名称应抛出AttributeError
  python2:对于继承object的类可有效使用此方法,对于未继承object的旧类定义此方法有时会有问题
+-*/+-*/+-*/+-*/__setattr__ m x.a=y,通常只操作对象本身的属性
__setattr__(self,name,value)
  自定义此方法时通常使用self.__dict__[name]=value来作设置
  或者使用object.__setattr__(self,name,value)
  通常只对对象的__dict__操作而不影响其所属的类
+-*/+-*/+-*/+-*/__delattr__ m del x.a,通常只操作对象本身的属性
__delattr_(self,name)
  自定义此方法时通常最后必须使用object.__delattr__(self,name)来操作
  通常只对对象的__dict__操作而不影响其所属的类
+-*/+-*/+-*/+-*/__get__ m 只用于类中的属性对象
__get__(self,instance,cls)
+-*/+-*/+-*/+-*/__set__ m 只用于类中的属性对象
__set__(self,instance,value)
+-*/+-*/+-*/+-*/__delete__ m 只用于类中的属性对象
__delete__(self,instance)
+-*/+-*/+-*/+-*/__len__ m len
+-*/+-*/+-*/+-*/__getitem__ m x[a]
__getitem__(self,key)
+-*/+-*/+-*/+-*/__setitem__ m x[a]=y 
__setitem__(self,key,value)
+-*/+-*/+-*/+-*/__delitem__ m del x[a]
__delitem__(self,key)
+-*/+-*/+-*/+-*/__contains__ m y in x
__contains__(self,obj)
+-*/+-*/+-*/+-*/__iter__ m python3:迭代对象
+-*/+-*/+-*/+-*/运算 _
+-*/+-*/+-*/+-*/+-*/__add__ m self + other
+-*/+-*/+-*/+-*/+-*/__sub__ m self - other
+-*/+-*/+-*/+-*/+-*/__mul__ m self * other
+-*/+-*/+-*/+-*/+-*/__div__ m python2: self / other
+-*/+-*/+-*/+-*/+-*/__truediv__ m python3: self / other
+-*/+-*/+-*/+-*/+-*/__floordiv__ m self // other
+-*/+-*/+-*/+-*/+-*/__mod__ m self % other
+-*/+-*/+-*/+-*/+-*/__divmod__ m divmod
+-*/+-*/+-*/+-*/+-*/__pow__ m self ** other, x.pow(y,m)
__pow__(self,other[,modulo])
+-*/+-*/+-*/+-*/+-*/__lshift__ m self << other
+-*/+-*/+-*/+-*/+-*/__rshift__ m self >> other
+-*/+-*/+-*/+-*/+-*/__and__ m self &  other
+-*/+-*/+-*/+-*/+-*/__or__ m self | other
+-*/+-*/+-*/+-*/+-*/__xor__ m self ^ other
+-*/+-*/+-*/+-*/+-*/__neg__ m -x
+-*/+-*/+-*/+-*/+-*/__pos__ m +x
+-*/+-*/+-*/+-*/+-*/__abs__ m abs
+-*/+-*/+-*/+-*/+-*/__invert__ m ~x
+-*/+-*/+-*/+-*/右运算 _
对于前者不能进行正常运算的将尝试调用后者的右运算
如在1+a(即1.__add__(a))失败时调用a.__radd__(1)
+-*/+-*/+-*/+-*/+-*/__radd__ m other + self
+-*/+-*/+-*/+-*/+-*/__rsub__ m other - self
+-*/+-*/+-*/+-*/+-*/__rmul__ m other * self
+-*/+-*/+-*/+-*/+-*/__rdiv__ m python2: other / self
+-*/+-*/+-*/+-*/+-*/__rtruediv__ m python3: other / self
+-*/+-*/+-*/+-*/+-*/__rfloordiv__ m other // self
+-*/+-*/+-*/+-*/+-*/__rmod__ m other % self
+-*/+-*/+-*/+-*/+-*/__rpow__ m other ** self, x.pow(y,m)
__rpow__(self,other[,modulo])
+-*/+-*/+-*/+-*/+-*/__rlshift__ m other << self
+-*/+-*/+-*/+-*/+-*/__rrshift__ m other >> self
+-*/+-*/+-*/+-*/+-*/__rand__ m other &  self
+-*/+-*/+-*/+-*/+-*/__ror__ m other | self
+-*/+-*/+-*/+-*/+-*/__rxor__ m other ^ self
+-*/+-*/+-*/+-*/自运算 _
+-*/+-*/+-*/+-*/+-*/__iadd__ m self += other
+-*/+-*/+-*/+-*/+-*/__isub__ m self -= other
+-*/+-*/+-*/+-*/+-*/__imul__ m self *= other
+-*/+-*/+-*/+-*/+-*/__idiv__ m python2: self /= other
+-*/+-*/+-*/+-*/+-*/__itruediv__ m python3: self /= other
+-*/+-*/+-*/+-*/+-*/__ifloordiv__ m self //= other
+-*/+-*/+-*/+-*/+-*/__imod__ m self %= other
+-*/+-*/+-*/+-*/+-*/__ipow__ m self **= other
__ipow__(self,other[,modulo])
+-*/+-*/+-*/+-*/+-*/__ilshift__ m self <<= other
+-*/+-*/+-*/+-*/+-*/__irshift__ m self >>= other
+-*/+-*/+-*/+-*/+-*/__iand__ m self &= other 
+-*/+-*/+-*/+-*/+-*/__ior__ m self |= other
+-*/+-*/+-*/+-*/+-*/__ixor__ m self ^= other
+-*/+-*/+-*/+-*/__str__ m str 
+-*/+-*/+-*/+-*/__bool__  m python3: bool
+-*/+-*/+-*/+-*/__nonzero__ m python2: bool
+-*/+-*/+-*/+-*/__int__ m int
+-*/+-*/+-*/+-*/__long__ m python2:long
+-*/+-*/+-*/+-*/__float__ m float
+-*/+-*/+-*/+-*/__complex__ m complex
+-*/+-*/+-*/+-*/__oct__ m oct
+-*/+-*/+-*/+-*/__hex__ m hex
+-*/+-*/+-*/+-*/__call__ m x()
+-*/+-*/+-*/+-*/__enter__ m with x:
__enter__()的返回值作为with x as y:里的y值
+-*/+-*/+-*/+-*/__exit__ m with x:
contextmanager.__exit__(exc_type, exc_val, exc_tb)
没有发生异常时exc_*三个参数都为None.
返回值通常应为假,异常会传播到with外部,如返回值为True则只是退出with.
(无return相当于return None即如同返回False)
+-*/+-*/+-*/+-*/__copy__ m copy
+-*/+-*/+-*/+-*/__deepcopy__ m deepcopy
__deepcopy__(self,memo)
  memo:  存储已搜集的对象(用于避免循环引用)
+-*/+-*/+-*/+-*/__dir__ m dir
__dir__()
  通常用于有定义__getattr__或__getattribute__的时候
+-*/+-*/+-*/+-*/__missing__ m 用于defaultdict
__missing__(self,key)
+-*/+-*/+-*/__doc__ d  文档字符串
+-*/+-*/+-*/函数对象 _
+-*/+-*/+-*/+-*/__code__ d 字节编译的代码
+-*/+-*/+-*/+-*/__defaults__ d 包含默认参数的元组
+-*/+-*/+-*/+-*/__globals__ d 定义全局命名空间的字典
+-*/+-*/+-*/+-*/__closure__ d 包含与嵌套作用域相关数据的元组
+-*/+-*/+-*/+-*/__self__ d 与方法method相关的实例
+-*/+-*/+-*/+-*/__func__ d 实现方法method的函数对象
+-*/+-*/+-*/__dict__ d  包含属性的字典
对象的核心，对于self.xx等操作，就相当于操作self.__dict__
obj.xx一般先搜寻obj.__dict__再搜索obj.__class__.__dict__
+-*/+-*/+-*/__class__ d  实例所对应的类
+-*/+-*/+-*/__bases__ d  直接父类元组
+-*/+-*/+-*/__base__ d  直接父类(只用于异常类型)
+-*/+-*/+-*/__package__ d 包名称
如果模块是包(即带__init__.py的目录),则此值不为空,通常同__name__
+-*/+-*/+-*/__module__ d  所在模块的名称
如果是子模块，其名称含有包名称,如'xml.sax'
+-*/+-*/+-*/__file__ d  模块的文件路径
+-*/+-*/+-*/__path__ d  完全限定包名，只在模块对象引用包时定义
+-*/+-*/+-*/__name__ d  名称
如果是子模块，其名称含有包名称,如'xml.sax'
+-*/+-*/+-*/__mro__ d
TODO:
class.__mro__

This attribute is a tuple of classes that are considered when looking for
base classes during method resolution.


+-*/+-*/+-*/mro M
class.mro()

This method can be overridden by a metaclass to customize the method
resolution order for its instances.  It is called at class instantiation, and
its result is stored in :attr:`__mro__`.


+-*/+-*/+-*/__subclasses__ M
class.__subclasses__

Each new-style class keeps a list of weak references to its immediate
subclasses.  This method returns a list of all those references still alive.
Example::

>>> int.__subclasses__()
[<type 'bool'>]


+-*/+-*/oct f oct(x)将整数x转为一个八进制字符串
+-*/+-*/open f 打开文件返回文件对象,支持with操作
python2:
open(filename [,mode [,bufsize]])
  mode: r读(文件须存在) w写(打开后清空文件) +读写(须和raw联合使用)
        a添加(每次写都先指针自动移到尾部开始写)
        b二进制 t文本 U通用换行（'\n','\r','\r\n'通通变为'\n'）
  bufsize: 0不缓冲 1行缓冲 其他正数是以字节为单位的缓冲大小 负数（默认系统缓冲）
python3:
open(filename [,mode [,bufsize [,encoding [,errors [,newline [,closefd]]]]]])
  encoding: 如'utf-8'这样的编码名称
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
  newline: None,' ','\n','\r','\r\n' 控制换行模式
  closefd: 执行close()是否关闭文件描述符
+-*/+-*/+-*/readlines m 读取多行
readlines(hint=-1)
  hint如给出，将最多读取hint字节
  返回行列表
+-*/+-*/+-*/writelines m 写入行序列，不会自动加入换行符
writelines(lines)
  通常行序列里的每一项自行在尾部放置换行符
+-*/+-*/+-*/flush m 清除缓冲使写入的内容生效
+-*/+-*/+-*/close m 关闭文件
+-*/+-*/+-*/readline m  读取一行
readline(limit=-1)
  读取一行，如设置limit则单行最多limit个字节。行内容通常包括行结尾'\n'
+-*/+-*/+-*/seek m 设定操作位置
seek(offset, whence=os.SEEK_SET)
  offset:  偏移
  whence:  os.SEEK_SET或0，以文件开始位置算起
           os.SEEK_CUR或1，以当前位置算起
           os.SEEK_END或2，以文件结尾位置算起，通常此时offset用负数
  返回新位置的绝对值
+-*/+-*/+-*/tell m 返回当前操作位置
+-*/+-*/+-*/read m 读取
read(n=-1)
  最多读取n个字节。如n未设置或为-1则读取全部。如返回0个字节则说明已到尾部。
  如果对象不能读取则返回None
+-*/+-*/+-*/write m 写入
write(b)
  写入字节字符串的内容。返回写入的字节数。
+-*/+-*/+-*/truncate m 截断文件
truncate(size=None)
 将文件截断为最多size个字节。如size未设定，则截断到当前位置。(可以增大文件大小）
 返回文件的新长度。
+-*/+-*/ord f ord(x)返回字符x的整数值。
+-*/+-*/pow f 获取指数运算的结果或模
pow(x, y [, z])
  如不提供z则返回x**y，如果有z则返回(x**y)%z。
+-*/+-*/print f 打印显示
print(value, ... [, sep=separator, end=ending, file=outfile])
  sep: 分隔符，默认空格
  end: 行尾（所有的输入都打印在一行），默认'\n'
  file: 用于重定向
+-*/+-*/property f 创建类的特性属性
property([fget [,fset [,fdel [,doc]]]])
  fget: 获取值
  fset: 设置值
  fdel: 删除值
  doc: 文档
  在类定义里使用时先用
  @property
  def name(self):
      设定读取属性
      return ..
  然后再用
  @name.setter
  def name(self,name):
      ....
+-*/+-*/xrange f 创建整数序列,同range(python2)
+-*/+-*/range f 创建整数序列
range([start,] stop [,step])
  start: 默认0
  stop: 序列不包括stop的值
  step: 如是负数，则生成降序整数
+-*/+-*/raw_input f 读入一行输入(python2)
raw_input([prompt])
只在python2中使用，python3用input代替
  prompt: 提示符
+-*/+-*/repr f 获取对象的原始字符串，通常其可以用于eval来重建对象
repr(object)
  python3里可能返回Unicode字符串，如在shell里使用最好使用ascii()代替
+-*/+-*/reversed f 创建逆序序列，不能与迭代器一起使用
reversed(s)
  s: s必须有实现__len__和__getitem__，其索引还必须从0开始
+-*/+-*/round f 四舍五入
round(x [, n])
  n: 默认0，小数精度，例如2则精确到0.01
  python2: 按远离0的值四舍五入，如round(0.5)=1.0,round(-0.5)=-1.0
  python3: 以最近的偶数四舍五入，如round(0.5)=0.0,round(1.5)=2.0
+-*/+-*/set t  可变集合对象类型set([items])
+-*/+-*/+-*/isdisjoint m 比较另一个集合，如无相同元素返回True
+-*/+-*/+-*/issubset m  如果目标是自身的子集，返回True
issubset(other)
         set <= other
+-*/+-*/+-*/issuperset m 如果自身是目标的子集，返回True
issuperset(other)
         set >= other
+-*/+-*/+-*/union m  产生新的并集
union(other, ...)
         set | other | ...
+-*/+-*/+-*/intersection m  产生新的交集
intersection(other, ...)
         set & other & ...
+-*/+-*/+-*/difference m   产生新的差集
difference(other, ...)
         set - other - ...
在set里而不在other的集合
+-*/+-*/+-*/symmetric_difference m 对称差集，返回所有没有同时出现的元素集合
symmetric_difference(other)
         set ^ other
+-*/+-*/+-*/copy m  生成一个浅复制的副本
+-*/+-*/+-*/update m 将其他集合的元素加入进来
update(other, ...)
         set |= other | ...
+-*/+-*/+-*/intersection_update m  用交集替换自身
intersection_update(other, ...)
         set &= other & ...
+-*/+-*/+-*/difference_update m  用差集替换自身
difference_update(other, ...)
         set -= other | ...
+-*/+-*/+-*/symmetric_difference_update m  用对称差集替换自身
symmetric_difference_update(other)
         set ^= other
将所有没有同时出现的元素作为自己的元素
+-*/+-*/+-*/add m  添加一个元素
+-*/+-*/+-*/remove m  删除一个元素,如不存在则报错
+-*/+-*/+-*/discard m 删除一个元素，如不存在无任何影响
+-*/+-*/+-*/pop m  返回任意一个元素，并删除,如集合为空则报错
+-*/+-*/+-*/clear m  删除所有
+-*/+-*/setattr f 设置对象的一个命名属性
setattr(object,name ,value)
  设置对象属性，name是字符串，同object.name=value,只对对象的__dict__操作
+-*/+-*/slice f 返回一个整数序列的切片对象
slice([start,] stop [, step])
  start: 位置，0为第一个元素，-1为最后一个元素
  stop: 位置，0为第一个元素，-1为最后一个元素
  step: 步进可以是负数
  返回的对象通常用于[]操作，如x[slice(-1,0,-2)]相当于x[-1:0:-2]
+-*/+-*/sorted f 创建有序列表
sorted(iterable [, cmp=cmpfunc [, key=keyfunc [, reverse=reverseflag]]])
  cmp: 双参数比较函数，返回负数、0、整数
  key: 单参数函数，如getname等，其返回的对象值最好自带有__le__等方法
       可用cmp_to_key将cmp双参数比较函数转为key函数
  reverse: 是否倒序
+-*/+-*/staticmethod f 创建类的静态方法
staticmethod(func)
  通常使用@staticmethod
+-*/+-*/str t 字符串类型
python2: 这是8位字符串
python3: 是Unicode字符串
  str([object[, encoding[, errors]]])
  encoding: 如'utf-8'这样的编码名称
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
常用编码有'mbcs'(windows可用),'raw_unicode_escape','unicode_escape'
'utf-8','utf-16','utf-16-le','gb18030','big5'
+-*/+-*/+-*/capitalize m 首字符大写
+-*/+-*/+-*/center m  字符串居中
str.center(width[, fillchar])
  在长度为width的字符串内将str居中其余用fillchar填充，fillchar默认空格
+-*/+-*/+-*/count m 统计子字符串出现次数
str.count(sub[, start[, end]])
+-*/+-*/+-*/decode m 解码字符串 
str.decode(encoding="utf-8", errors="strict")
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
python2可以使用编码base64,bz2,hex,uu,zip,quopri,string_escape
python2,3都可用'mbcs'(windows可用),'raw_unicode_escape','unicode_escape'
'utf-8','utf-16','utf-16-le','gb18030','big5'
+-*/+-*/+-*/encode m 编码字符串
unicode.encode(encoding="utf-8", errors="strict")
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
对于有些已转码的乱码可使用encode('iso-8859-1')(latin1)获取原始字节字符串
python2可以使用编码base64,bz2,hex,uu,zip,quopri,string_escape
python2,3都可用'mbcs'(windows可用),'raw_unicode_escape','unicode_escape'
'utf-8','utf-16','utf-16-le','gb18030','big5'
+-*/+-*/+-*/endswith m  检查字符串是否是此结尾
str.endswith(suffix[, start[, end]])
检查字符串是否以suffix结尾
+-*/+-*/+-*/expandtabs m 用空格替代tab
str.expandtabs([tabsize=8])
+-*/+-*/+-*/find m  查找子字符串首次出现的位置，未找到返回-1
str.find(sub[, start[, end]])
如果需要检查是否包含子字符串，可以使用in操作，如
   >>> 'Py' in 'Python'
   True
+-*/+-*/+-*/format m  格式化字符串
str.format(*args, **kwargs)
  对于*args用0,1,2作键，对于**kwargs用其名称作键
  如'{0} {1} {name} {name1}'.format('args0','args1',name='a',name1='b')
  如果键值为字典或列表或对象，还可作属性操作，
  如'{0.attr}{1[1]}{name[key]}'.format(...)
  如要使用str或repr可用!s!r 如{0!r} 如果是字符串用!r会在字符串两端加'号
  如要{或}则使用'{{ }}'
  :后面是格式，如'{0:=^+#{1}x}'.format(44,10)返回'==+0x2c==='

  基本格式[[fill]align][sign][#][0][width][.precision][type]
  fill: 单字符,对齐是填充的字符,默认是空格
  align: <左对齐 >右对齐 ^中间对齐 
  sign: +正负数都显示符号 -默认只显示负数符号 ' '空格代替+
  width: 长度
  #: 只用于b、o、x、X形式，表示前置0b,0o,0x
  0: 只用于数字，表示前置0
  precision: 只用于浮点数或小数格式，小数点后长度
  |type| 说明                                            |
  |----+-------------------------------------------------|
  | b  | 二进制整数                                      |
  | d  | 十进制整数                                      |
  | o  | 八进制整数                                      |
  | x  | 小写十六进制数                                  |
  | X  | 大写十六进制数                                  |
  | e  | 小写指数格式浮点数                              |
  | E  | 大写指数格式浮点数                              |
  | f  | 小数点格式                                      |
  | F  | 小数点格式                                      |
  | g  | 小数点格式，如果指数精度小于-4自动使用e格式     |
  | G  | 小数点格式，如果指数精度小于-4自动使用E格式     |
  | n  | 同g,但用当前区域格式                            |
  | %  | 数字乘100后加%                                  |
  | c  | 单字符：如参数为整数自动使用chr()转换           |
  | s  | 字符串                                          |
  |    |    以下用于datetime类型     |   例子            |
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天）              | 32                |
  | %W | 星期（星期一）              | 32                |
+-*/+-*/+-*/format_map m
TODO:
str.format_map(mapping)

Similar to ``str.format(**mapping)``, except that ``mapping`` is
used directly and not copied to a :class:`dict` .  This is useful
if for example ``mapping`` is a dict subclass:

>>> class Default(dict):
...     def __missing__(self, key):
...         return key
...
>>> '{name} was born in {country}'.format_map(Default(name='Guido'))
'Guido was born in country'

.. versionadded:: 3.2


+-*/+-*/+-*/index m  查找子字符串首次出现的位置，未找到则报错
str.index(sub[, start[, end]])
  未找到则raise ValueError 
+-*/+-*/+-*/isalnum m  检查所有字符是否都是字母或数字
+-*/+-*/+-*/isalpha m 检查所有字符是否都是字母字符
+-*/+-*/+-*/isdecimal m 检查所有字符是否都是数字字符(只用于unicode字符串)
isdecimal()
  对于unicode字符串来说，像'٠'(阿拉伯文的零)'1'(全角)这样的也是数字字符
  范围上isdecimal<isdigit<isnumeric
+-*/+-*/+-*/isdigit m 检查所有字符是否都是数字字符
isdigit()
  对于unicode字符串来说，像²(平方)①这样的也是数字字符
  范围上isdecimal<isdigit<isnumeric
+-*/+-*/+-*/isidentifier m 检查字符是否是合法的变量名(python3)
str.isidentifier()
  这里的合法的变量名不考虑保留词,支持中文变量名('^[a-z_][a-z0-9_]*')
+-*/+-*/+-*/islower m  检查所有字符是否都是小写字母
+-*/+-*/+-*/isnumeric m 检查所有字符是否都是数字字符(包括罗马数字和中文数字)(只用于unicode字符串)
str.isnumeric()
  对于unicode字符串来说，像'⅞Ⅸ一贰廿百万'这样的也是数字字符
  范围上isdecimal<isdigit<isnumeric
+-*/+-*/+-*/isprintable m  检查所有字符是否都可打印
+-*/+-*/+-*/isspace m 检查所有字符是否都是空白
+-*/+-*/+-*/istitle m 检查字符串里单词是否都是第一个大写其他小写的形式
+-*/+-*/+-*/isupper m 检查所有字符是否都是大写字母
+-*/+-*/+-*/join m  用字符串把序列里的字符串串起来
+-*/+-*/+-*/ljust m  左对齐字符串
str.ljust(width[, fillchar])
  在长度为width的字符串内将str局左其余用fillchar填充，fillchar默认空格
+-*/+-*/+-*/lower m  转换为小写
+-*/+-*/+-*/lstrip m  去掉左边的空白
str.lstrip([chars])
  chars里的所有字符都将视为空白以供去除
+-*/+-*/+-*/maketrans M 创建translate所用的字符转换对应字典(python3)
str.maketrans(x[, y[, z]])
  如果只有一个参数,那参数必须是字典,以字符或unicode值为键值,
  以要转换的字符或代表要删除的None或unicode数值为值.
  如果两个参数，那两参数为同长的对应转换字符串
  三个参数，前两个为同长的对应转换字符串,最后一个为要删除字符的字符串
+-*/+-*/+-*/partition m  使用分隔字符划分为三份
str.partition(sep)
  用sep为分隔符划分str,返回(head,sep,tail),如未找到则返回(str,'','')
+-*/+-*/+-*/replace m  替换字符串里的子字符串
str.replace(old, new[, count])
+-*/+-*/+-*/rfind m 从尾查找子字符串首次出现的位置，未找到返回-1
str.rfind(sub[, start[, end]])
+-*/+-*/+-*/rindex m 从尾查找子字符串首次出现的位置，未找到则报错
str.rindex(sub[, start[, end]])
+-*/+-*/+-*/rjust m 右对齐字符串
str.rjust(width[, fillchar])
  在长度为width的字符串内将str局右其余用fillchar填充，fillchar默认空格
+-*/+-*/+-*/rpartition m 使用分隔字符划分为三份,从尾搜索
str.rpartition(sep)
  从尾搜索
  用sep为分隔符划分str,返回(head,sep,tail),如未找到则返回(str,'','')
+-*/+-*/+-*/rsplit m  将字符串分成列表，分隔符从后往前分割
str.rsplit([sep[, maxsplit]])
  将sep作分隔符对str从后往前进行划分，返回分割出来的列表，
  maxsplit: 最大划分次数，非列表长度
  sep: 默认空白，非单单一个空格或tab
+-*/+-*/+-*/rstrip m 去掉右边的空白
str.rstrip([chars])
  chars里的所有字符都将视为空白以供去除
+-*/+-*/+-*/split m  将字符串分成列表，分隔符从前往后分割
str.split([sep[, maxsplit]])
  将sep作分隔符对str从前往后进行划分，返回分割出来的列表，
  maxsplit: 最大划分次数，非列表长度
  sep: 默认空白，非单单一个空格或tab
+-*/+-*/+-*/splitlines m 将字符串分割为行列表
str.splitlines([keepends])
  keepends: 如为1则保留各行最后的换行符
+-*/+-*/+-*/startswith m  检查字符串是否以prefix开头
str.startswith(prefix[, start[, end]])
+-*/+-*/+-*/strip m 去掉前后的空白
str.strip([chars])
  chars里的所有字符都将视为空白以供去除
+-*/+-*/+-*/swapcase m  改变大小写
+-*/+-*/+-*/title m  将字符串里的单词变为头字符大写其余小写的形式
+-*/+-*/+-*/translate m 使用字符转换字典转换字符串(python3)
str.translate(map)
  map:  通常是由maketrans产生的字典,
        其键为unicode数值,其值或为要转换的unicode数值或为要删除的None
+-*/+-*/+-*/upper m  转换为大写
+-*/+-*/+-*/zfill m  左填充0
str.zfill(width)
+-*/+-*/sum f 合计
sum(items [,initial])
  initial: 初始值，默认0
+-*/+-*/super f 获取超类对象
super(type [, object])
  通常用于获取基类的方法，如super(B,self).__ini__()
  python3: 可以不带参数
+-*/+-*/tuple t 元组类型
+-*/+-*/type f 获取对象的类型
+-*/+-*/type t 创建类型
type(name,bases,dict)
   定义一个新类，name是类型名，bases是基类元组，dict是属性字典
+-*/+-*/unichr f 由整数值转换为Unicode字符(python2)
+-*/+-*/unicode f 将8位字符串转为Unicode字符串(python2)
unicode(string [,encoding [,errors]])
  encoding: 如'utf-8'这样的编码名称
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
常用编码有'mbcs'(windows可用),'raw_unicode_escape','unicode_escape'
'utf-8','utf-16','utf-16-le','gb18030','big5'
+-*/+-*/vars f 获取对象的符号表（__dict__）
vars([object])
  如果没有给object则相当于locals()
+-*/+-*/zip f 对多序列获取横向数据元组
zip(s1 [, s2 [,...]])
  对于单数组按个数分组,如[1,2,3,4,5,6]分成[1,2][3,4][5,6]
  可使用zip(*[iter(s)]*n)这里n用2即可分成
  python2: 对于多个列表，结果列表的长度与最短的s相等，
           其中元素n是(s1[n],s2[n],...)
  python3: 创建的是结果迭代器。
+-*/+-*/reduce f 递增运算(python2)
reduce(func ,iterable [, initial])
  func: 双参数函数,第一个参数为之前的结果，第二个参数为当前元素
  initial: 初始值
  python3里用functools.reduce
+-*/+-*/__debug__ d 优化模式(-O)下为False
+-*/+-*/__import__ f 导入模块
__import__(name, globals={}, locals={}, fromlist=[], level=0)
  name:   模块或包的名称
  globals:通常使用globals()
  locals: 通常使用locals()
  fromlist:指定获取包里的哪些模块(只用于name是包的情况)
  level:  0使用绝对导入,-1使用相对导入
  导入时还是以sys.path为搜索路径
  name为xxx1.xx.xx时通常只是导入xxx1,要导入xxx1.xx.xx需要
  def _import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]: mod = getattr(mod,comp)
    return mod
+-*/+-*/BaseException t 异常基类
+-*/+-*/+-*/args d 引发异常时提供的参数元组
+-*/+-*/+-*/with_traceback m (python3)
TODO:
with_traceback(tb)

      This method sets *tb* as the new traceback for the exception and returns
      the exception object.  It is usually used in exception handling code like
      this::

         try:
             ...
         except SomeException:
             tb = sys.exc_info()[2]
             raise OtherException(...).with_traceback(tb)


+-*/+-*/+-*/SystemExit            e    Sys.exit()引发的异常
+-*/+-*/+-*/KeyboardInterrupt     e    键盘中断异常
+-*/+-*/+-*/GeneratorExit         e    生成器.close(),用于生成器函数内部
+-*/+-*/+-*/StopIteration         e    集合元素枚举结束
+-*/+-*/+-*/Exception             e    基本异常类
+-*/+-*/+-*/+-*/message d python2使用
+-*/+-*/+-*/+-*/__cause__ d 使用显示关联异常时的前一个异常,python3
用于raise error(..) from e
+-*/+-*/+-*/+-*/__context__ d 隐式关联异常的前一个异常，python3
用于在except处理时出错的异常
+-*/+-*/+-*/+-*/__traceback__ d 异常相关的跟踪对象，python3
+-*/+-*/+-*/+-*/StandardError     e      一般异常类(python2)
+-*/+-*/+-*/+-*/+-*/ArithmeticError   e    运算异常类
+-*/+-*/+-*/+-*/+-*/+-*/OverflowError  e     溢出异常  
+-*/+-*/+-*/+-*/+-*/+-*/ZeroDivisionError e  除零异常
+-*/+-*/+-*/+-*/+-*/+-*/FloatingPointError e 浮点异常 
+-*/+-*/+-*/+-*/+-*/LookupError         e  集合异常类
+-*/+-*/+-*/+-*/+-*/+-*/IndexError      e    序列异常
+-*/+-*/+-*/+-*/+-*/+-*/KeyError        e    字典异常
+-*/+-*/+-*/+-*/+-*/NameError           e  名称异常
+-*/+-*/+-*/+-*/+-*/+-*/UnboundLocalError e  局部变量异常
+-*/+-*/+-*/+-*/+-*/AttributeError      e  属性异常
+-*/+-*/+-*/+-*/+-*/TypeError           e  类型异常
+-*/+-*/+-*/+-*/+-*/ValueError          e  值不能使用错误
+-*/+-*/+-*/+-*/+-*/+-*/UnicodeError    e    编解码异常
+-*/+-*/+-*/+-*/+-*/+-*/+-*/UnicodeEncodeError    e  Unicode编码错误
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/object d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/start d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/end d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/encoding d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/reason d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/UnicodeDecodeError    e  Unicode解码错误
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/object d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/start d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/end d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/encoding d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/reason d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/UnicodeTranslateError    e 转码错误
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/object d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/start d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/end d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/encoding d
+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/reason d
+-*/+-*/+-*/+-*/+-*/EnvironmentError    e  环境异常
+-*/+-*/+-*/+-*/+-*/+-*/filename d
+-*/+-*/+-*/+-*/+-*/+-*/errno d
+-*/+-*/+-*/+-*/+-*/+-*/strerror d
+-*/+-*/+-*/+-*/+-*/+-*/IOError         e    IO异常
+-*/+-*/+-*/+-*/+-*/+-*/OSError         e    操作系统异常
+-*/+-*/+-*/+-*/+-*/+-*/+-*/WindowsError e      Windows系统错误
+-*/+-*/+-*/+-*/+-*/+-*/VMSError        e
+-*/+-*/+-*/+-*/+-*/AssertionError      e  赋值异常
+-*/+-*/+-*/+-*/+-*/EOFError            e  文件结尾异常
+-*/+-*/+-*/+-*/+-*/ImportError         e  导入模块异常
+-*/+-*/+-*/+-*/+-*/ReferenceError      e  引用异常
+-*/+-*/+-*/+-*/+-*/MemoryError         e  内存异常
+-*/+-*/+-*/+-*/+-*/BufferError         e  
+-*/+-*/+-*/+-*/+-*/SyntaxError         e  语法错误
+-*/+-*/+-*/+-*/+-*/+-*/filename d
+-*/+-*/+-*/+-*/+-*/+-*/lineno d
+-*/+-*/+-*/+-*/+-*/+-*/offset d
+-*/+-*/+-*/+-*/+-*/+-*/msg d
+-*/+-*/+-*/+-*/+-*/+-*/text d
+-*/+-*/+-*/+-*/+-*/+-*/print_file_and_line d
+-*/+-*/+-*/+-*/+-*/+-*/IndentationError         e  缩进错误
+-*/+-*/+-*/+-*/+-*/+-*/TabError         e 不一致的tab,常在-tt选项下产生
+-*/+-*/+-*/+-*/+-*/SystemError         e  Python异常
+-*/+-*/+-*/+-*/+-*/RuntimeError        e  未知异常
+-*/+-*/+-*/+-*/+-*/NotImplementedError e  函数不可用错误
+-*/python相关 _
+-*/+-*/warnings p 警告模块
+-*/+-*/+-*/simplefilter f 
TODO:
simplefilter(action, category=Warning, lineno=0, append=False)

Insert a simple entry into the list of :ref:`warnings filter specifications
<warning-filter>`.  The meaning of the function parameters is as for
:func:`filterwarnings`, but regular expressions are not needed as the filter
inserted always matches any message in any module as long as the category and
line number match.



+-*/+-*/+-*/filterwarnings f 向警告筛选器列表添加一项
filterwarnings(action, message='', category=Warning, module='', 
               lineno=0, append=False)
  action:  'error'   将该警告转换为异常
           'ignore'  忽略该警告
       'always'  总是打印此警告信息
       'default' 针对产生警告的每个位置打印一次
       'module'  针对产生警告的每个模块打印一次
       'once'    无论哪里产生的警告都打印一次
  message:  可匹配警告消息的正则表达式字符串
  module:   可匹配模块名的正则表达式字符串
  lineno:   具体行号。0用来匹配所有行
  append:   如为真，则新项添加到列表的最后一项，否则添加到列表最前面
+-*/+-*/+-*/resetwarnings f 重置所有警告筛选器
+-*/+-*/+-*/filters d 当前活动的警告筛选器列表
+-*/+-*/+-*/catch_warnings c 
TODO:
catch_warnings(\*, record=False, module=None)

A context manager that copies and, upon exit, restores the warnings filter
and the :func:`showwarning` function.
If the *record* argument is :const:`False` (the default) the context manager
returns :class:`None` on entry. If *record* is :const:`True`, a list is
returned that is progressively populated with objects as seen by a custom
:func:`showwarning` function (which also suppresses output to ``sys.stdout``).
Each object in the list has attributes with the same names as the arguments to
:func:`showwarning`.

The *module* argument takes a module that will be used instead of the
module returned when you import :mod:`warnings` whose filter will be
protected. This argument exists primarily for testing the :mod:`warnings`
module itself.

.. note::

    The :class:`catch_warnings` manager works by replacing and
    then later restoring the module's
    :func:`showwarning` function and internal list of filter
    specifications.  This means the context manager is modifying
    global state and therefore is not thread-safe.


+-*/+-*/+-*/warn f 发出警告
warn(message, category=None, stacklevel=1)
  message: 警告信息字符串
  category: 警告类型，默认UserWarning
  stacklevel: 整数，引发警告的栈桢，默认是1
+-*/+-*/+-*/warn_explicit f 发出更为详细的警告
warn_explicit(message, category, filename, lineno, module=None, 
              registry=None, module_globals=None)
  message: 警告信息字符串
  category: 警告类型，默认UserWarning
  filename: lineno: module: 显式设置警告位置
  registry: 当前的筛选器对象，如无将不会禁止警告信息
+-*/+-*/+-*/showwarning f 警告信息写入文件
showwarning(message, category, filename, lineno, file=None, line=None)
  message: 警告信息字符串
  category: 警告类型，默认UserWarning
  filename: lineno: 显式设置警告位置
  file: 如无，警告信息输出到sys.stderr
+-*/+-*/+-*/formatwarning f 创建格式化警告信息
formatwarning(message, category, filename, lineno, line=None)

Format a warning the standard way.  This returns a string which may contain
embedded newlines and ends in a newline.  *line* is a line of source code to
be included in the warning message; if *line* is not supplied,
:func:`formatwarning` will try to read the line specified by *filename* and
*lineno*.

+-*/+-*/+-*/warning e 警告基类，父类是Exception
+-*/+-*/+-*/+-*/UserWarning e 用户定义警告
+-*/+-*/+-*/+-*/DeprecationWarning e 功能过时警告
DeprecationWarning
默认情况下此警告被忽略
+-*/+-*/+-*/+-*/PendingDeprecationWarning e 功能不久会过时警告
PendingDeprecationWarning
默认情况下此警告被忽略
+-*/+-*/+-*/+-*/SyntaxWarning e python语法警告
+-*/+-*/+-*/+-*/RuntimeWarning e 潜在运行问题警告
+-*/+-*/+-*/+-*/FutureWarning e 功能以后会有改动的警告
+-*/+-*/+-*/+-*/ImportWarning e 默认情况下此警告被忽略,导入问题警告
+-*/+-*/+-*/+-*/UnicodeWarning e 字符编码警告
+-*/+-*/+-*/+-*/BytesWarning e
BytesWarning

   Base class for warnings related to :class:`bytes` and :class:`buffer`.

+-*/+-*/+-*/+-*/ResourceWarning e
ResourceWarning

   Base class for warnings related to resource usage.

   .. versionadded:: 3.2

+-*/+-*/traceback p 追踪信息显示模块
traceback模块里的函数主要是对sys.exc_info()函数返回的第三项进行操作
+-*/+-*/+-*/extract_stack f 从栈桢环境提取栈信息列表
extract_stack(frame=None, limit=None)
  limit:        默认是全部栈项
  frame:        可设定从何处开始的栈桢
  返回的是元组列表，元组的形式是(filename,line,funcname,text)
+-*/+-*/+-*/print_exc f   输出显示当前环境的异常信息和追踪信息
print_exc(limit=None, file=None, chain=True)
  这个相当于 ``print_exception(*sys.exc_info())``.
  limit:        默认是全部栈项
  file:         sys.stderr
  chain:        为True时将同时输出异常链
+-*/+-*/+-*/format_exc f  返回当前环境异常信息和追踪信息的字符串
format_exc(limit=None, chain=True)
  相当与``print_exception(*sys.exc_info())``,不过返回的是字符串
  limit:        回朔限定次数，默认全部追踪
  chain:        为True时将同时输出异常链
+-*/+-*/+-*/format_tb f  格式化追踪信息列表
format_tb(tb, limit=None)
  同``format_list(extract_tb(tb, limit))``
+-*/+-*/+-*/print_exception f 输出显示异常信息和追踪信息
print_exception(type, value, traceback, limit=None, file=None, chain=True)
  type:         异常类型,
  value:        异常对象实例
  traceback:    如果不是None,开头输出'Traceback (most recent call last):'
  limit:        默认是全部回朔
  file:         sys.stderr
  chain:        为True时将同时输出异常链
+-*/+-*/+-*/extract_tb f  返回追踪信息列表
extract_tb(traceback, limit=None)
  返回形式为(filename,line,funcname,text)的列表
+-*/+-*/+-*/print_tb f 打印追踪信息
print_tb(traceback, limit=None, file=None)
  从traceback里打印limit限定回朔数量的追踪信息打印到file文件里
  limit默认是全部追踪，file默认是sys.stderr
+-*/+-*/+-*/format_list f 对追踪信息列表格式化
format_list(list)
  list:     是由extract_tb或extract_stack产生的
  返回格式化后的字符串列表
+-*/+-*/+-*/format_stack f 格式化栈信息列表
format_stack(f=None, limit=None)
  同``format_list(extract_stack(f, limit))``.
+-*/+-*/+-*/print_last f  输出显示最后一个异常的相关信息
print_last(limit=None, file=None, chain=True)
  相当于``print_exception(sys.last_type, sys.last_value, sys.last_traceback, 
         limit, file)``.
  limit:        回朔限定次数，默认全部
  file:         sys.stderr
  chain:        为True时将同时输出异常链
+-*/+-*/+-*/format_exception f 格式化异常信息和追踪信息
format_exception(type, value, tb, limit=None, chain=True)
  type:         异常类型,
  value:        异常对象实例
  tb:           如果不是None,开头输出'Traceback (most recent call last):'
  limit:        默认是全部回朔
  chain:        为True时将同时输出异常链
  返回字符串
+-*/+-*/+-*/print_stack f 从调用桢打印栈信息
print_stack(frame=None, limit=None, file=None)
  limit默认是全部回朔，file默认是sys.stderr,frame可设定从何处开始的栈桢
+-*/+-*/+-*/format_exception_only f 格式化异常信息
format_exception_only(type, value)
  返回字符串
+-*/+-*/gc p 控制无用数据回收的模块
数据对象被分为三级，0级包含最新的，2级包含最早的
+-*/+-*/+-*/get_referents f 返回对象所引用的对象列表
get_referents(*objs)
  返回objs里各项所引用到的对象列表
  如obj1是list，则会返回obj1里的各项
+-*/+-*/+-*/enable f 启用垃圾数据自动回收
+-*/+-*/+-*/is_tracked f 
is_tracked(obj)

Returns True if the object is currently tracked by the garbage collector,
False otherwise.  As a general rule, instances of atomic types aren't
tracked and instances of non-atomic types (containers, user-defined
objects...) are.  However, some type-specific optimizations can be present
in order to suppress the garbage collector footprint of simple instances
(e.g. dicts containing only atomic keys and values)::

   >>> gc.is_tracked(0)
   False
   >>> gc.is_tracked("a")
   False
   >>> gc.is_tracked([])
   True
   >>> gc.is_tracked({})
   False
   >>> gc.is_tracked({"a": 1})
   False
   >>> gc.is_tracked({"a": []})
   True

.. versionadded:: 3.1



+-*/+-*/+-*/set_debug f 设置垃圾数据回收调试标志
set_debug(flags)
  flags:    DEBUG_*
+-*/+-*/+-*/isenabled f 是否已启用垃圾数据自动回收
+-*/+-*/+-*/collect f   运行一次完整的数据内存回收
collect(generations=2)
  generations:      0-2的整数，用于指定回收级别
+-*/+-*/+-*/disable f  禁止垃圾数据自动回收
+-*/+-*/+-*/get_referrers f  返回对象被引用的对象列表
get_referrers(*objs)
  返回直接引用objs里各对象的所有对象列表。可能包括还没作回收处理的对象等
+-*/+-*/+-*/get_debug f 返回当前设置的调试标志
+-*/+-*/+-*/get_threshold f 返回各级别的阙值(三项元组)
+-*/+-*/+-*/get_count f 返回各级别里当前对象数量(三项元组)
+-*/+-*/+-*/set_threshold f 设置垃圾数据回收各级别的阙值
set_threshold(threshold0[, threshold1[, threshold2]])
0则表示禁用自动回收
默认700,10,10
+-*/+-*/+-*/get_objects f 返回数据回收正在跟踪的所有对象列表(不包括此返回值)
+-*/+-*/+-*/garbage d 不再使用但不能作回收处理的对象只读列表
garbage
  主要是一些有定义__del__的对象
+-*/+-*/+-*/DEBUG_UNCOLLECTABLE d 
TODO:
DEBUG_UNCOLLECTABLE

Print information of uncollectable objects found (objects which are not
reachable but cannot be freed by the collector).  These objects will be added
to the ``garbage`` list.

.. versionchanged:: 3.2
   Also print the contents of the :data:`garbage` list at interpreter
   shutdown, if it isn't empty.



+-*/+-*/+-*/DEBUG_COLLECTABLE d 
DEBUG_COLLECTABLE

Print information on collectable objects found.



+-*/+-*/+-*/DEBUG_SAVEALL d 
DEBUG_SAVEALL

When set, all unreachable objects found will be appended to *garbage* rather
than being freed.  This can be useful for debugging a leaking program.



+-*/+-*/+-*/DEBUG_STATS d 
DEBUG_STATS

Print statistics during collection.  This information can be useful when tuning
the collection frequency.



+-*/+-*/+-*/DEBUG_LEAK d  当出现内存泄漏时显示有关信息
+-*/+-*/inspect p 从活动对象中提取信息和代码
+-*/+-*/+-*/classify_class_attrs f 获取类的各成员信息列表
classify_class_attrs(cls)
  返回的列表其元素为四元命名组(name,kind,defining_class,object)
      name:   调用的名称
      kind：  'class method','static method' 'property' 'data' 'method'
      class:  定义此属性的类对象
      object: 成员其对象
+-*/+-*/+-*/formatargvalues f 格式化getargvalues参数调用返回结果为字符串
formatargvalues(args[, varargs, varkw, locals, formatarg, 
               formatvarargs, formatvarkw, formatvalue])
+-*/+-*/+-*/getinnerframes f 根据追踪获取回朔栈桢的桢记录列表
getinnerframes(traceback, context=1)
  返回结果里的记录为(frame,filename,lineno,function,code_context,index)
  filename  line        为源代码位置
  code_context          为源代码位置附近的行文本列表(由context设定其长度)
  index                 为code_context对应源代码的位置索引
+-*/+-*/+-*/getgeneratorstate f 获取生成器对象的状态
getgeneratorstate(generator)
 * GEN_CREATED: Waiting to start execution.
 * GEN_RUNNING: Currently being executed by the interpreter.
 * GEN_SUSPENDED: Currently suspended at a yield expression.
 * GEN_CLOSED: Execution has completed.
+-*/+-*/+-*/getmodulename f 由路径获取模块名称
getmodulename(path)
  如果path不是python模块，则返回None
+-*/+-*/+-*/iscode f 是否是代码对象
iscode(object)
+-*/+-*/+-*/ismemberdescriptor f 
TODO:
ismemberdescriptor(object)
+-*/+-*/+-*/getfile f 返回定义该对像的模块文件名
getfile(object)
  如果是内置或找不到相关信息的对象则会报TypeError错误
+-*/+-*/+-*/getsource f 返回定义该对像的源代码文本
getsource(object)
  如无法得到代码则报IOError错误
+-*/+-*/+-*/formatargspec f 格式化getargspec参数定义返回结果为字符串
formatargspec(args[, varargs, varkw, defaults, 
              formatarg, formatvarargs, formatvarkw, formatvalue])
+-*/+-*/+-*/getattr_static f 
TODO:
getattr_static(obj, attr, default=None)

Retrieve attributes without triggering dynamic lookup via the
descriptor protocol, `__getattr__` or `__getattribute__`.

Note: this function may not be able to retrieve all attributes
that getattr can fetch (like dynamically created attributes)
and may find attributes that getattr can't (like descriptors
that raise AttributeError). It can also return descriptors objects
instead of instance members.

If the instance `__dict__` is shadowed by another member (for example a
property) then this function will be unable to find instance members.

.. versionadded:: 3.2


+-*/+-*/+-*/getsourcelines f 返回定义该对像的源代码(行列表形式)
getsourcelines(object)
  如无法得到代码则报IOError错误
+-*/+-*/+-*/isabstract f 是否是抽象基类 
isabstract(object)
+-*/+-*/+-*/isbuiltin f 是否是系统内置函数或方法 
isbuiltin(object)
+-*/+-*/+-*/getframeinfo f 获取栈桢信息
getframeinfo(frame, context=1)
  返回结果的形式为Trackback(filename,lineno,function,code_context,index)
  filename  line        为源代码位置
  code_context          为源代码位置附近的行文本列表(由context设定其长度)
  index                 为code_context对应源代码的位置索引
+-*/+-*/+-*/isgenerator f 是否是生成器对象 
isgenerator(object)
+-*/+-*/+-*/isframe f 是否是栈桢对象
isframe(object)
+-*/+-*/+-*/getouterframes f 获取调用关系的桢记录列表
getouterframes(frame, context=1)
  返回结果里的记录为(frame,filename,lineno,function,code_context,index)
  filename  line        为源代码位置
  code_context          为源代码位置附近的行文本列表(由context设定其长度)
  index                 为code_context对应源代码的位置索引
+-*/+-*/+-*/getargvalues f 从栈桢获取函数的调用参数信息
getargvalues(frame)
  调试时可以使用inspect.getargvalues(inspect.currentframe())来获取实参
  返回ArgInfo(args, varargs, keywords, locals) 如：
  ArgInfo(args=['x','y'], varargs='args', keywords='kargs',
          locals={'x':2, 'y':1, 'args':(), 'kargs':{}})
  args      为命名参数的名称列表
  varargs   为有定以*参数的名称
  keywords  为有定义**参数的名称
  locals    为实际调用的参数值
+-*/+-*/+-*/getmembers f 获取对象的各属性和方法，类似dir()
getmembers(object[, predicate])
  返回值为列表，其元素形式是(name,value)
  predicate是过滤函数，通常使用inspect.isXXX来作测试，过滤掉不符合测试的结果
+-*/+-*/+-*/isfunction f 是否是普通函数 
isfunction(object)
+-*/+-*/+-*/getargspec f 获取函数的参数信息
getargspec(func)
  返回如ArgSpec(args=['x','y'], varargs='args', keywords='kargs', 
                defaults=(1,))
  args      为命名参数的名称列表
  varargs   为有定以*参数的名称
  keywords  为有定义**参数的名称
  defaults  为默认值列表(由于默认值只能在后面定义，所以长度和args不一样)
+-*/+-*/+-*/currentframe f 获取当前栈桢对象
currentframe()
  常用于调试时分析当前环境使用
+-*/+-*/+-*/getclasstree f 获取类的层次结构
getclasstree(classes, unique=False)
  返回的层次结构使用嵌套列表形式，每条记录的形式为(cls,bases)
  如unique为True,那每个类在列表里只出现一次
+-*/+-*/+-*/getmoduleinfo f 根据路径获取模块信息
getmoduleinfo(path)
  返回ModuleInfo(name, suffix, mode, module_type)
  name:     模块名称
  suffix:   文件名前缀
  mode:     用于打开该模块的文件模式'r'或'rb'
  module_type:  
        imp.PY_COMPILED:        python已编译对象(.pyc)
        imp.PKG_DIRECTORY:      python包目录
        imp.PY_SOURCE:          python源文件
        imp.PY_FROZEN:          冻结的模块
        imp.C_EXTENSION:        动态可加载的C扩展模块
        imp.C_BUILTIN:          内置模块
+-*/+-*/+-*/trace f 返回当前桢和引发异常的桢之间的桢记录列表
trace(context=1)
  第一个桢为调用程序，最后一个为发生异常的
  返回结果里的记录为(frame,filename,lineno,function,code_context,index)
  filename  line        为源代码位置
  code_context          为源代码位置附近的行文本列表(由context设定其长度)
  index                 为code_context对应源代码的位置索引
+-*/+-*/+-*/isclass f 是否是类对象
isclass(object)
+-*/+-*/+-*/ismethoddescriptor f 是否是没有设定只有读取的成员属性
ismethoddescriptor(object)
  定义了__get__而没有定义__set__的成员
+-*/+-*/+-*/isgeneratorfunction f 是否是生成器函数
isgeneratorfunction(object)
+-*/+-*/+-*/isroutine f 是否是可调用函数
isroutine(object)
  可用此来检查对象是否可以调用，但无法识别定义了__call__的对象
  代替的方式是使用isinstance(object,collections.Callable)
+-*/+-*/+-*/getfullargspec f 
TODO:
getfullargspec(func)

Get the names and default values of a Python function's arguments.  A
:term:`named tuple` is returned:

``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults,
annotations)``

*args* is a list of the argument names.  *varargs* and *varkw* are the names
of the ``*`` and ``**`` arguments or ``None``.  *defaults* is an n-tuple of
the default values of the last n arguments.  *kwonlyargs* is a list of
keyword-only argument names.  *kwonlydefaults* is a dictionary mapping names
from kwonlyargs to defaults.  *annotations* is a dictionary mapping argument
names to annotations.

The first four items in the tuple correspond to :func:`getargspec`.



+-*/+-*/+-*/getmro f 返回查找类属性时所使用的依序类型元组
getmro(cls)
  同cls.__mro__
+-*/+-*/+-*/stack f 返回当前的调用关系的桢记录列表
stack(context=1)
  返回结果里的记录为(frame,filename,lineno,function,code_context,index)
  filename  line        为源代码位置
  code_context          为源代码位置附近的行文本列表(由context设定其长度)
  index                 为code_context对应源代码的位置索引
+-*/+-*/+-*/getdoc f 获取对象的文档
getdoc(object)
  会自动使用inspect.cleandoc对文档作整理
+-*/+-*/+-*/getcomments f 获取对象定义之前的注释字符串
getcomments(object)
  对于模块这是返回模块开头的注释
+-*/+-*/+-*/cleandoc f 清理文档字符串
cleandoc(doc)
  将doc里的tab改为空格，并纠正每行开头的空白
+-*/+-*/+-*/ismodule f 是否是模块对象
ismodule(object)
+-*/+-*/+-*/getcallargs f 
TODO:
getcallargs(func[, *args][, **kwds])

Bind the *args* and *kwds* to the argument names of the Python function or
method *func*, as if it was called with them. For bound methods, bind also the
first argument (typically named ``self``) to the associated instance. A dict
is returned, mapping the argument names (including the names of the ``*`` and
``**`` arguments, if any) to their values from *args* and *kwds*. In case of
invoking *func* incorrectly, i.e. whenever ``func(*args, **kwds)`` would raise
an exception because of incompatible signature, an exception of the same type
and the same or similar message is raised. For example::

 >>> from inspect import getcallargs
 >>> def f(a, b=1, *pos, **named):
 ...     pass
 >>> getcallargs(f, 1, 2, 3)
 {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
 >>> getcallargs(f, a=2, x=4)
 {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
 >>> getcallargs(f)
 Traceback (most recent call last):
 ...
 TypeError: f() takes at least 1 argument (0 given)

.. versionadded:: 3.2



+-*/+-*/+-*/isdatadescriptor f 是否是成员属性对象
isdatadescriptor(object)
  定义了__get__和__set__的属性对象
+-*/+-*/+-*/getmodule f 返回定义该对象的模块对象（非字符串）
getmodule(object)
+-*/+-*/+-*/getsourcefile f 获取定义该对象的源代码文件名
getsourcefile(object)
  如果是内置或找不到相关信息的对象则会报TypeError错误
+-*/+-*/+-*/ismethod f 是否是类的绑定方法
ismethod(object)
+-*/+-*/+-*/isgetsetdescriptor f 
TODO: 
isgetsetdescriptor(object)

Return true if the object is a getset descriptor.

.. impl-detail::

   getsets are attributes defined in extension modules via
   :c:type:`PyGetSetDef` structures.  For Python implementations without such
   types, this method will always return ``False``.



+-*/+-*/+-*/istraceback f 是否是追踪对象 
istraceback(object)
+-*/+-*/weakref p 弱引用模块
TODO:
+-*/+-*/+-*/getweakrefs f 获取对象的所有弱引用和代理引用列表 
getweakrefs(object)
+-*/+-*/+-*/proxy f 使用对象的弱引用创建一个代理对象
proxy(object[, callback])
  callback: 销毁object时会被调用的函数，该函数的参数为一个弱引用对象
  返回一个代理对象，可能是ProxyType或CallableProxyType，取决原始对象是否可调用
  该代理对象可以直接方位其属性和方法，
  如原始对象被销毁，对代理对象的操作将引发weakref.ReferenceError
+-*/+-*/+-*/getweakrefcount f 返回对象的弱引用数目和代理数目 
getweakrefcount(object)
+-*/+-*/+-*/ProxyType t 代理对象类型 
+-*/+-*/+-*/ReferenceType t 弱引用对象类型 
+-*/+-*/+-*/ProxyTypes d (ProxyType,CallableProxyType) 
ProxyTypes
  通常用于isinstance(object,ProxyTypes)
+-*/+-*/+-*/CallableProxyType t 可调用对象的代理类型 
+-*/+-*/+-*/ReferenceError e 引用错误
+-*/+-*/+-*/WeakValueDictionary c 
TODO:
WeakValueDictionary([dict])

Mapping class that references values weakly.  Entries in the dictionary will be
discarded when no strong reference to the value exists any more.

.. note::

   Caution:  Because a :class:`WeakValueDictionary` is built on top of a Python
   dictionary, it must not change size when iterating over it.  This can be
   difficult to ensure for a :class:`WeakValueDictionary` because actions performed
   by the program during iteration may cause items in the dictionary to vanish "by
   magic" (as a side effect of garbage collection).


+-*/+-*/+-*/+-*/valuerefs m 
valuerefs()

Return an iterable of the weak references to the values.



+-*/+-*/+-*/WeakKeyDictionary c 
TODO:
WeakKeyDictionary([dict])

Mapping class that references keys weakly.  Entries in the dictionary will be
discarded when there is no longer a strong reference to the key.  This can be
used to associate additional data with an object owned by other parts of an
application without adding attributes to those objects.  This can be especially
useful with objects that override attribute accesses.

.. note::

   Caution: Because a :class:`WeakKeyDictionary` is built on top of a Python
   dictionary, it must not change size when iterating over it.  This can be
   difficult to ensure for a :class:`WeakKeyDictionary` because actions
   performed by the program during iteration may cause items in the
   dictionary to vanish "by magic" (as a side effect of garbage collection).


+-*/+-*/+-*/+-*/keyrefs m 
keyrefs()

Return an iterable of the weak references to the keys.



+-*/+-*/+-*/ref c 创建对象的一个弱引用
ref(object[, callback])
  callback: 销毁object时会被调用的函数，该函数的参数为一个弱引用对象
  返回的是一个类型为ReferenceType对象，使用时作为无参数函数调用可获得原始对象。
  如原始对象已删除，将返回None
+-*/+-*/+-*/WeakSet c 
TODO:
WeakSet([elements])

Set class that keeps weak references to its elements.  An element will be
discarded when no strong reference to it exists any more.



+-*/+-*/unittest p python测试框架模块
代码可以经常变动,但测试代码不应该频繁修改
+-*/+-*/+-*/installHandler f 
installHandler()

Install the control-c handler. When a :const:`signal.SIGINT` is received
(usually in response to the user pressing control-c) all registered results
have :meth:`~TestResult.stop` called.



+-*/+-*/+-*/main f 开始执行模块里已定义测试
main(module='__main__', defaultTest=None, argv=None, testRunner=None, \
                testLoader=unittest.defaultTestLoader, exit=True, verbosity=1, \
                failfast=None, catchbreak=None, buffer=None, warnings=None)
  不能保证测试的顺序
+-*/+-*/+-*/removeHandler f 
removeHandler(function=None)

When called without arguments this function removes the control-c handler
if it has been installed. This function can also be used as a test decorator
to temporarily remove the handler whilst the test is being executed::

   @unittest.removeHandler
   def test_signal_handling(self):
       ...


+-*/+-*/+-*/registerResult f 
registerResult(result)

Register a :class:`TestResult` object for control-c handling. Registering a
result stores a weak reference to it, so it doesn't prevent the result from
being garbage collected.

Registering a :class:`TestResult` object has no side-effects if control-c
handling is not enabled, so test frameworks can unconditionally register
all results they create independently of whether or not handling is enabled.



+-*/+-*/+-*/removeResult f 
removeResult(result)

Remove a registered result. Once a result has been removed then
:meth:`~TestResult.stop` will no longer be called on that result object in
response to a control-c.



+-*/+-*/+-*/defaultTestLoader d 
defaultTestLoader

Instance of the :class:`TestLoader` class intended to be shared.  If no
customization of the :class:`TestLoader` is needed, this instance can be used
instead of repeatedly creating new instances.



+-*/+-*/+-*/TextTestResult c 
TextTestResult(stream, descriptions, verbosity)

A concrete implementation of :class:`TestResult` used by the
:class:`TextTestRunner`.

.. versionadded:: 3.2
   This class was previously named ``_TextTestResult``. The old name still
   exists as an alias but is deprecated.



+-*/+-*/+-*/FunctionTestCase c 封装已有测试函数为测试用例
FunctionTestCase(testFunc, setUp=None, tearDown=None, description=None)
  testFunc:   测试函数
  setUp:      初始化函数
  tearDown:   清理函数
  description:注释文档
+-*/+-*/+-*/TestResult c 测试结果类(存放多个测试的结果)
+-*/+-*/+-*/+-*/skipped d 未执行测试列表,元素为(测试用例实例,忽略原因文本)二元组
+-*/+-*/+-*/+-*/testsRun d 执行了的测试条目数目
+-*/+-*/+-*/+-*/buffer d 为True时将暂存输出信息,如测试成功将自动丢弃
+-*/+-*/+-*/+-*/expectedFailures d 期望失败的测试列表
expectedFailures
  列表元素为(测试用例实例,错误信息文本)二元组
+-*/+-*/+-*/+-*/errors d 测试时发生异常列表
errors
  未能完成测试的列表,其元素为(测试用例实例,错误信息文本)二元组
+-*/+-*/+-*/+-*/unexpectedSuccesses d 期望失败反而成功的测试列表,元素为用例实例
+-*/+-*/+-*/+-*/failures d 测试失败列表,元素为(测试用例实例,错误信息文本)二元组
failures
  通常由TestCase.fail*或TestCase.assert*产生
+-*/+-*/+-*/+-*/shouldStop d 为True时停止后续的测试
+-*/+-*/+-*/+-*/failfast d 是否测试失败时停止后面的测试
+-*/+-*/+-*/+-*/addSuccess m 如果测试成功将自动调用此方法
addSuccess(test)
+-*/+-*/+-*/+-*/addError m 如果测试未能正常执行将自动调用此方法
addError(test, err)
  test:   往往是TestCase子类xxCase('testxx')的一个测试
  err:    (type,value,traceback)
  默认的处理方式是将(test, formatted_err)追加到errors里
+-*/+-*/+-*/+-*/addFailure m 如果测试失败将自动调用此方法
addFailure(test, err)
  test:   往往是TestCase子类xxCase('testxx')的一个测试
  err:    (type,value,traceback)
  默认的处理方式是将(test, formatted_err)追加到failures里
+-*/+-*/+-*/+-*/addUnexpectedSuccess m 如果测试期望失败反而成功将自动调用此方法
addUnexpectedSuccess(test)
+-*/+-*/+-*/+-*/addExpectedFailure m 如果测试符合期望失败的预期将自动调用此方法
addExpectedFailure(test, err)
+-*/+-*/+-*/+-*/stopTestRun m 
stopTestRun(test)

Called once after all tests are executed.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/stopTest m 
stopTest(test)

Called after the test case *test* has been executed, regardless of the
outcome.


+-*/+-*/+-*/+-*/stop m 
stop()

This method can be called to signal that the set of tests being run should
be aborted by setting the :attr:`shouldStop` attribute to ``True``.
:class:`TestRunner` objects should respect this flag and return without
running any additional tests.

For example, this feature is used by the :class:`TextTestRunner` class to
stop the test framework when the user signals an interrupt from the
keyboard.  Interactive tools which provide :class:`TestRunner`
implementations can use this in a similar manner.


+-*/+-*/+-*/+-*/addSkip m 
addSkip(test, reason)

Called when the test case *test* is skipped.  *reason* is the reason the
test gave for skipping.

The default implementation appends a tuple ``(test, reason)`` to the
instance's :attr:`skipped` attribute.



+-*/+-*/+-*/+-*/startTest m 执行测试
startTest(test)
+-*/+-*/+-*/+-*/startTestRun m 
startTestRun(test)

Called once before any tests are executed.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/wasSuccessful m 如果全部测试都成功将返回True
+-*/+-*/+-*/TestSuite c 测试套件类(用于管理执行多个测试)
TestSuite(tests=())
  tests:    多个测试的列表,元素往往是TestCase子类里的单个测试
            如XXCase('testYY')
            或者是另一个测试套件
  要执行套件里的所有测试可以使用命令行
  %python unittest.py xxx.xxxTestSuite
+-*/+-*/+-*/+-*/run m 执行测试返回TestResult实例
run(result)
  result:    TestResult类(或子类)的一个实例,用于收集测试结果
+-*/+-*/+-*/+-*/TestSuite.addTest m 添加一个测试
TestSuite.addTest(test)
  tests:    往往是TestCase子类里的单个测试如XXCase('testYY')
            或者是另一个测试套件
+-*/+-*/+-*/+-*/TestSuite.addTests m 添加多个测试
TestSuite.addTests(tests)
  tests:    多个测试的列表,元素往往是TestCase子类里的单个测试
            如XXCase('testYY')
            或者是另一个测试套件
+-*/+-*/+-*/+-*/__iter__ m 
__iter__()

Tests grouped by a :class:`TestSuite` are always accessed by iteration.
Subclasses can lazily provide tests by overriding :meth:`__iter__`. Note
that this method maybe called several times on a single suite
(for example when counting tests or comparing for equality)
so the tests returned must be the same for repeated iterations.

.. versionchanged:: 3.2
   In earlier versions the :class:`TestSuite` accessed tests directly rather
   than through iteration, so overriding :meth:`__iter__` wasn't sufficient
   for providing tests.


+-*/+-*/+-*/+-*/debug m 
debug()

Run the tests associated with this suite without collecting the
result. This allows exceptions raised by the test to be propagated to the
caller and can be used to support running tests under a debugger.



+-*/+-*/+-*/+-*/countTestCases m 
countTestCases()

Return the number of tests represented by this test object, including all
individual tests and sub-suites.



+-*/+-*/+-*/TestCase c 测试用例类
TestCase(methodName='runTest')
  自定义测试方法须以test开头,这样才能被unittest.main检测到
  通常将各种有相同初始化和清理步骤的测试放在一个用例类当中
  每个测试方法通常以self.assert*语句结尾
  执行测试往往有两种方式,一种是unittest.main自动查找TestCase子类进行测试
  或是由TestSuite进行管理,如
   def suite():
       suite = unittest.TestSuite()
       suite.addTest(WidgetTestCase('test_default_size'))
       suite.addTest(WidgetTestCase('test_resize'))
       return suite
  TestCase('test*')返回指定的一个测试
+-*/+-*/+-*/+-*/maxDiff d 
maxDiff

This attribute controls the maximum length of diffs output by assert
methods that report diffs on failure. It defaults to 80*8 characters.
Assert methods affected by this attribute are
:meth:`assertSequenceEqual` (including all the sequence comparison
methods that delegate to it), :meth:`assertDictEqual` and
:meth:`assertMultiLineEqual`.

Setting ``maxDiff`` to None means that there is no maximum length of
diffs.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/failureException d 
failureException

This class attribute gives the exception raised by the test method.  If a
test framework needs to use a specialized exception, possibly to carry
additional information, it must subclass this exception in order to "play
fair" with the framework.  The initial value of this attribute is
:exc:`AssertionError`.



+-*/+-*/+-*/+-*/longMessage d 
longMessage

If set to ``True`` then any explicit failure message you pass in to the
:ref:`assert methods <assert-methods>` will be appended to the end of the
normal failure message.  The normal messages contain useful information
about the objects involved, for example the message from assertEqual
shows you the repr of the two unequal objects. Setting this attribute
to ``True`` allows you to have a custom error message in addition to the
normal one.

This attribute defaults to ``True``. If set to False then a custom message
passed to an assert method will silence the normal message.

The class setting can be overridden in individual tests by assigning an
instance attribute to ``True`` or ``False`` before calling the assert methods.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/assertEqual m 检测a==b
assertEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  first,second为标准类型时(或是addTypeEqualityFunc注册的类型)
  测试失败时会有详细的比较信息
+-*/+-*/+-*/+-*/assertNotEqual m 检测a!=b
assertNotEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  当first==second时，此测试失败
+-*/+-*/+-*/+-*/assertGreater m 检测a>b
assertGreater(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertLess m 检测a<b
assertLess(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertGreaterEqual m 检测a>=b
assertGreaterEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
   >>> self.assertGreaterEqual(3, 4)
   AssertionError: "3" unexpectedly not greater than or equal to "4"
+-*/+-*/+-*/+-*/assertLessEqual m 检测a<=b
assertLessEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertAlmostEqual m 测试两数(通常指浮点数)是否相等
assertAlmostEqual(first, second, places=7, msg=None, delta=None)
  first,second:  通常为数值类型
  places:        精确度
  delta:         最小差异(设定此值将忽略精确度,以两值之差是否小于此值为判断标准)
  msg:           测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertNotAlmostEqual m 测试两数(通常指浮点数)是否不相等
assertNotAlmostEqual(first, second, places=7, msg=None, delta=None)
  first,second:  通常为数值类型
  places:        精确度
  delta:         最小差异(设定此值将忽略精确度,以两值之差是否小于此值为判断标准)
  msg:           测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertIs m 检测a is b
assertIs(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertIsNot m 检测a is not b
assertIsNot(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertIn m 检测a in b
assertIn(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertNotIn m 检测a not in b
assertNotIn(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertTrue m 检测bool(x)是否为True
assertTrue(expr, msg=None)
  msg:   测试失败时的消息字符串
  要检测a==b之类的不要用expr来包含然后用assertTrue来检测
  直接使用assertEqual等方法在失败时能获得更详细的错误信息
+-*/+-*/+-*/+-*/assertFalse m 检测bool(x)是否为False
assertFalse(expr, msg=None)
  msg:   测试失败时的消息字符串
  要检测a!=b之类的不要用expr来包含然后用assertTrue来检测
  直接使用assertNotEqual等方法在失败时能获得更详细的错误信息
+-*/+-*/+-*/+-*/assertIsNone m 检测值是否为None
assertIsNone(expr, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertIsNotNone m 检测值是否不为None
assertIsNotNone(expr, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertIsInstance m 检测对象是否是某类型的实例
assertIsInstance(obj, cls, msg=None)
  cls:   可以是多个类型的元组(相当于isinstance的参数)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertNotIsInstance m 检测对象是否不是某类型的实例
assertNotIsInstance(obj, cls, msg=None)
  cls:   可以是多个类型的元组(相当于isinstance的参数)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertRegex m 检测字符串是否包含匹配正则表达式的字符串
assertRegex(text, regex, msg=None)
  text:    检测的字符串
  regex:   正则表达式
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertNotRegex m 检测字符串是否不包含匹配正则表达式的字符串
assertNotRegex(text, regex, msg=None)
  text:    检测的字符串
  regex:   正则表达式
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertMultiLineEqual m 检测文本是否相同
assertMultiLineEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  通常只要使用assertEqual就可以了,除非特定要求first,second必须是字符串
+-*/+-*/+-*/+-*/assertDictEqual m 检测两个字典是否相同
assertDictEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  通常只要使用assertEqual就可以了,除非特定要求first,second必须是字典
+-*/+-*/+-*/+-*/assertSetEqual m 检测两个集合是否相同
assertSetEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  通常只要使用assertEqual就可以了,除非特定要求first,second必须是集合
+-*/+-*/+-*/+-*/assertSequenceEqual m 检测两个序列是否相同(比较顺序)
assertSequenceEqual(first, second, msg=None, seq_type=None)
  seq_type:  如指定类型,则first,second都必须是此类型的实例,否则检测失败
  msg:   测试失败时的消息字符串
  通常只要使用assertEqual就可以了,除非特定要求first,second必须是某一类型
+-*/+-*/+-*/+-*/assertTupleEqual m 检测两个元组是否相同
assertTupleEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  通常只要使用assertEqual就可以了,除非特定要求first,second必须是元组
+-*/+-*/+-*/+-*/assertListEqual m 检测两个列表是否相同(也比较顺序)
assertListEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
  通常只要使用assertEqual就可以了,除非特定要求first,second必须是列表
+-*/+-*/+-*/+-*/assertCountEqual m 检测两个序列是否相同(不检测顺序)
assertCountEqual(first, second, msg=None)
  msg:   测试失败时的消息字符串
+-*/+-*/+-*/+-*/assertRaises m 检测是否有抛出异常
assertRaises(exception, callable, *args, **kwds)
  exception:   检测的异常类型
  callable:    要检测的函数
  args,kwds:   函数所用的参数
assertRaises(exception)用于with语句
   with self.assertRaises(SomeException):
       do_something()
或者这样使用
   with self.assertRaises(SomeException) as cm:
       do_something()
   the_exception = cm.exception
   self.assertEqual(the_exception.error_code, 3)
+-*/+-*/+-*/+-*/assertRaisesRegex m 检测异常的消息是否符合所要的正则匹配
assertRaisesRegex(exception, regex, callable, *args, **kwds)
  exception:   检测的异常类型
  regex:       异常的消息文本所要匹配的正则表达式
  callable:    要检测的函数
  args,kwds:   函数所用的参数
assertRaisesRegex(exception, regex)用于with语句
   with self.assertRaisesRegex(ValueError, 'invalid literal for.*XYZ$'):
      int('XYZ')
+-*/+-*/+-*/+-*/assertWarns m 检测是否有抛出警告
assertWarns(warning, callable, *args, **kwds)
  warning:     检测的警告类型
  callable:    要检测的函数
  args,kwds:   函数所用的参数
assertWarns(warning)用于with语句
   with self.assertWarns(SomeWarning):
       do_something()
或者这样使用
   with self.assertWarns(SomeWarning) as cm:
       do_something()
   self.assertIn('myfile.py', cm.filename)
   self.assertEqual(320, cm.lineno)
+-*/+-*/+-*/+-*/assertWarnsRegex m 检测警告的消息是否符合所要的正则匹配
assertWarnsRegex(warning, regex, callable, *args, **kwds)
assertWarnsRegex(warning, regex)
  warning:     检测的警告类型
  regex:       异常的消息文本所要匹配的正则表达式
  callable:    要检测的函数
  args,kwds:   函数所用的参数
assertWarnsRegex(warning, regex)用于with语句
   with self.assertWarnsRegex(RuntimeWarning, 'unsafe frobnicating'):
       frobnicate('/etc/passwd')
+-*/+-*/+-*/+-*/fail m 
fail(msg=None)

Signals a test failure unconditionally, with *msg* or ``None`` for
the error message.



+-*/+-*/+-*/+-*/addTypeEqualityFunc m 
addTypeEqualityFunc(typeobj, function)

Registers a type-specific method called by :meth:`assertEqual` to check
if two objects of exactly the same *typeobj* (not subclasses) compare
equal.  *function* must take two positional arguments and a third msg=None
keyword argument just as :meth:`assertEqual` does.  It must raise
:data:`self.failureException(msg) <failureException>` when inequality
between the first two parameters is detected -- possibly providing useful
information and explaining the inequalities in details in the error
message.

.. versionadded:: 3.1


+-*/+-*/+-*/+-*/addCleanup m 
addCleanup(function, *args, **kwargs)

Add a function to be called after :meth:`tearDown` to cleanup resources
used during the test. Functions will be called in reverse order to the
order they are added (LIFO). They are called with any arguments and
keyword arguments passed into :meth:`addCleanup` when they are
added.

If :meth:`setUp` fails, meaning that :meth:`tearDown` is not called,
then any cleanup functions added will still be called.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/shortDescription m 
shortDescription()

Returns a description of the test, or ``None`` if no description
has been provided.  The default implementation of this method
returns the first line of the test method's docstring, if available,
or ``None``.

.. versionchanged:: 3.1
   In 3.1 this was changed to add the test name to the short description
   even in the presence of a docstring.  This caused compatibility issues
   with unittest extensions and adding the test name was moved to the
   :class:`TextTestResult` in Python 3.2.



+-*/+-*/+-*/+-*/skipTest m 
skipTest(reason)

Calling this during a test method or :meth:`setUp` skips the current
test.  See :ref:`unittest-skipping` for more information.

.. versionadded:: 3.1



+-*/+-*/+-*/+-*/id m 
id()

Return a string identifying the specific test case.  This is usually the
full name of the test method, including the module and class name.



+-*/+-*/+-*/+-*/tearDownClass m 
tearDownClass()

A class method called after tests in an individual class have run.
``tearDownClass`` is called with the class as the only argument
and must be decorated as a :meth:`classmethod`::

  @classmethod
  def tearDownClass(cls):
      ...

See `Class and Module Fixtures`_ for more details.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/doCleanups m 
doCleanups()

This method is called unconditionally after :meth:`tearDown`, or
after :meth:`setUp` if :meth:`setUp` raises an exception.

It is responsible for calling all the cleanup functions added by
:meth:`addCleanup`. If you need cleanup functions to be called
*prior* to :meth:`tearDown` then you can call :meth:`doCleanups`
yourself.

:meth:`doCleanups` pops methods off the stack of cleanup
functions one at a time, so it can be called at any time.

.. versionadded:: 3.1




+-*/+-*/+-*/+-*/run m 
run(result=None)

Run the test, collecting the result into the test result object passed as
*result*.  If *result* is omitted or ``None``, a temporary result
object is created (by calling the :meth:`defaultTestResult` method) and
used. The result object is not returned to :meth:`run`'s caller.

The same effect may be had by simply calling the :class:`TestCase`
instance.



+-*/+-*/+-*/+-*/setUp m 初始化步骤(通常子类需自定义其过程)
setUp()
  测试结果之前往往需要先准备诸如创建对象等动作
  通常不同的测试初始化动作却有很大相同
  对于测试动作这些不能放在__init__，而应放在这里
  如果测试时这个步骤出错,表现为测试未能完成,而不是测试失败
+-*/+-*/+-*/+-*/tearDown m 结束时的清理步骤(通常子类需自定义其过程)
tearDown()
  不管测试是否成功,tearDown都会执行
+-*/+-*/+-*/+-*/debug m 
debug()

Run the test without collecting the result.  This allows exceptions raised
by the test to be propagated to the caller, and can be used to support
running tests under a debugger.


+-*/+-*/+-*/+-*/countTestCases m 
countTestCases()

Return the number of tests represented by this test object.  For
:class:`TestCase` instances, this will always be ``1``.



+-*/+-*/+-*/+-*/setUpClass m 
setUpClass()

A class method called before tests in an individual class run.
``setUpClass`` is called with the class as the only argument
and must be decorated as a :func:`classmethod`::

  @classmethod
  def setUpClass(cls):
      ...

See `Class and Module Fixtures`_ for more details.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/defaultTestResult m 
defaultTestResult()

Return an instance of the test result class that should be used for this
test case class (if no other result instance is provided to the
:meth:`run` method).

For :class:`TestCase` instances, this will always be an instance of
:class:`TestResult`; subclasses of :class:`TestCase` should override this
as necessary.



+-*/+-*/+-*/TextTestRunner c 
TextTestRunner(stream=None, descriptions=True, verbosity=1, runnerclass=None, warnings=None)

A basic test runner implementation that outputs results to a stream. If *stream*
is `None`, the default, `sys.stderr` is used as the output stream. This class
has a few configurable parameters, but is essentially very simple.  Graphical
applications which run test suites should provide alternate implementations.

By default this runner shows :exc:`DeprecationWarning`,
:exc:`PendingDeprecationWarning`, and :exc:`ImportWarning` even if they are
:ref:`ignored by default <warning-ignored>`. Deprecation warnings caused by
:ref:`deprecated unittest methods <deprecated-aliases>` are also
special-cased and, when the warning filters are ``'default'`` or ``'always'``,
they will appear only once per-module, in order to avoid too many warning
messages.  This behavior can be overridden using the :option:`-Wd` or
:option:`-Wa` options and leaving *warnings* to ``None``.

.. versionchanged:: 3.2
   Added the ``warnings`` argument.

.. versionchanged:: 3.2
   The default stream is set to `sys.stderr` at instantiation time rather
   than import time.


+-*/+-*/+-*/+-*/_makeResult m 
_makeResult()

This method returns the instance of ``TestResult`` used by :meth:`run`.
It is not intended to be called directly, but can be overridden in
subclasses to provide a custom ``TestResult``.

``_makeResult()`` instantiates the class or callable passed in the
``TextTestRunner`` constructor as the ``resultclass`` argument. It
defaults to :class:`TextTestResult` if no ``resultclass`` is provided.
The result class is instantiated with the following arguments::

  stream, descriptions, verbosity




+-*/+-*/+-*/TestLoader c 
TestLoader()

The :class:`TestLoader` class is used to create test suites from classes and
modules.  Normally, there is no need to create an instance of this class; the
:mod:`unittest` module provides an instance that can be shared as
``unittest.defaultTestLoader``. Using a subclass or instance, however, allows
customization of some configurable properties.

:class:`TestLoader` objects have the following methods:



+-*/+-*/+-*/+-*/sortTestMethodsUsing d 
sortTestMethodsUsing

Function to be used to compare method names when sorting them in
:meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\*` methods.



+-*/+-*/+-*/+-*/testMethodPrefix d 
testMethodPrefix

String giving the prefix of method names which will be interpreted as test
methods.  The default value is ``'test'``.

This affects :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\*`
methods.



+-*/+-*/+-*/+-*/suiteClass d 
suiteClass

Callable object that constructs a test suite from a list of tests. No
methods on the resulting object are needed.  The default value is the
:class:`TestSuite` class.

This affects all the :meth:`loadTestsFrom\*` methods.




+-*/+-*/+-*/+-*/loadTestsFromNames m 
loadTestsFromNames(names, module=None)

Similar to :meth:`loadTestsFromName`, but takes a sequence of names rather
than a single name.  The return value is a test suite which supports all
the tests defined for each name.



+-*/+-*/+-*/+-*/loadTestsFromName m 
loadTestsFromName(name, module=None)

Return a suite of all tests cases given a string specifier.

The specifier *name* is a "dotted name" that may resolve either to a
module, a test case class, a test method within a test case class, a
:class:`TestSuite` instance, or a callable object which returns a
:class:`TestCase` or :class:`TestSuite` instance.  These checks are
applied in the order listed here; that is, a method on a possible test
case class will be picked up as "a test method within a test case class",
rather than "a callable object".

For example, if you have a module :mod:`SampleTests` containing a
:class:`TestCase`\ -derived class :class:`SampleTestCase` with three test
methods (:meth:`test_one`, :meth:`test_two`, and :meth:`test_three`), the
specifier ``'SampleTests.SampleTestCase'`` would cause this method to
return a suite which will run all three test methods. Using the specifier
``'SampleTests.SampleTestCase.test_two'`` would cause it to return a test
suite which will run only the :meth:`test_two` test method. The specifier
can refer to modules and packages which have not been imported; they will
be imported as a side-effect.

The method optionally resolves *name* relative to the given *module*.



+-*/+-*/+-*/+-*/discover m 
discover(start_dir, pattern='test*.py', top_level_dir=None)

Find and return all test modules from the specified start directory,
recursing into subdirectories to find them. Only test files that match
*pattern* will be loaded. (Using shell style pattern matching.) Only
module names that are importable (i.e. are valid Python identifiers) will
be loaded.

All test modules must be importable from the top level of the project. If
the start directory is not the top level directory then the top level
directory must be specified separately.

If importing a module fails, for example due to a syntax error, then this
will be recorded as a single error and discovery will continue.

If a test package name (directory with :file:`__init__.py`) matches the
pattern then the package will be checked for a ``load_tests``
function. If this exists then it will be called with *loader*, *tests*,
*pattern*.

If load_tests exists then discovery does *not* recurse into the package,
``load_tests`` is responsible for loading all tests in the package.

The pattern is deliberately not stored as a loader attribute so that
packages can continue discovery themselves. *top_level_dir* is stored so
``load_tests`` does not need to pass this argument in to
``loader.discover()``.

*start_dir* can be a dotted module name as well as a directory.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/loadTestsFromTestCase m 
loadTestsFromTestCase(testCaseClass)

Return a suite of all tests cases contained in the :class:`TestCase`\ -derived
:class:`testCaseClass`.



+-*/+-*/+-*/+-*/loadTestsFromModule m 
loadTestsFromModule(module)

Return a suite of all tests cases contained in the given module. This
method searches *module* for classes derived from :class:`TestCase` and
creates an instance of the class for each test method defined for the
class.

.. note::

   While using a hierarchy of :class:`TestCase`\ -derived classes can be
   convenient in sharing fixtures and helper functions, defining test
   methods on base classes that are not intended to be instantiated
   directly does not play well with this method.  Doing so, however, can
   be useful when the fixtures are different and defined in subclasses.

If a module provides a ``load_tests`` function it will be called to
load the tests. This allows modules to customize test loading.
This is the `load_tests protocol`_.

.. versionchanged:: 3.2
   Support for ``load_tests`` added.



+-*/+-*/+-*/+-*/getTestCaseNames m 
getTestCaseNames(testCaseClass)

Return a sorted sequence of method names found within *testCaseClass*;
this should be a subclass of :class:`TestCase`.



+-*/+-*/timeit p 测试运行时间的小模块
+-*/+-*/+-*/timeit f 测试运行python语句的耗时(秒数)
timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000)
  stmt:   要测试的python语句,通常为一个函数调用语句,如'xxx(n)'
  setup:  构建测试环境的语句,通常由于测试是独立的,要使用'import xx'
          或'from __main__ import xx'来构建stmt里要用到的对象
  number: 重复测试次数,默认一百万次
+-*/+-*/+-*/repeat f 多次测试运行python语句的耗时,返回秒数列表
repeat(stmt='pass', setup='pass', timer=<default timer>, 
       repeat=3, number=1000000)
  stmt:   要测试的python语句,通常为一个函数调用语句,如'xxx(n)'
  setup:  构建测试环境的语句,通常由于测试是独立的,要使用'import xx'
          或'from __main__ import xx'来构建stmt里要用到的对象
  number: 一次测试的重复次数,默认一百万次
  repeat: 测试次数(通常为了获得更准确的性能数据)
+-*/+-*/atexit p 注册python退出时操作的模块
+-*/+-*/+-*/unregister f  从解释器退出时要执行的函数列表中移除某函数
unregister(func)
+-*/+-*/+-*/register f  将函数添加到解释器退出时要执行的函数列表中
register(func, *args, **kargs)
  func将以func(*args,**kargs)的方式被调用。
  解释器退出时将按注册顺序的逆序来调用被注册的函数。
+-*/字符串 _
+-*/+-*/json p json模块
+-*/+-*/+-*/dumps f 由python数据生成json形式的字符串
dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, 
     allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)
  obj:          通常应为字典或列表对象
  skipkeys:     设为True当字典键值不是数值或字符串时自动忽略,设为False则会报错
  check_circular:  是否检测循环引用
  allow_nan:    是否处理NaN,inf之类的数值
  cls:          设定自定义编码器(JSONEncoder子类)
  indent:       设置格式化时的缩进量,默认使用紧凑形式
  separators:   数组和字典所使用的分隔符,默认为(',' , ':')
  encoding：    unicode字符串的编码,默认为'utf-8'(python2)
  default:      自定义处理非基本类型数据的函数,通常其应返回字符串
+-*/+-*/+-*/load f 由json数据文件对象生成python数据
load(fp, cls=None, object_hook=None, parse_float=None, 
     parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
  fp:            json数据文件对象(通常包含单个的大数组或大对象)
  cls:           设定自定义解码器(JSONDecoder子类)
  object_hook:   解码出json对象后的操作函数,默认为dict()
  parse_float:   解码出浮点数后的操作函数,默认为float()
  parse_int:     解码出整数后的操作函数,默认为int()
  parse_constant:解码出常数后的操作函数,默认会处理NaN,true,false
+-*/+-*/+-*/loads f 由json数据字符串生成python数据
loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, 
      parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
  s:             json数据字符串(通常为单个的大数组或大对象)
  encoding:      json字符串所使用的编码,默认为'utf-8'(python2)
  cls:           设定自定义解码器(JSONDecoder子类)
  object_hook:   解码出json对象后的操作函数,默认为dict()
  parse_float:   解码出浮点数后的操作函数,默认为float()
  parse_int:     解码出整数后的操作函数,默认为int()
  parse_constant:解码出常数后的操作函数,默认会处理NaN,true,false
  python2里最好先自行转换字符串为unicode再loads,使用参数encoding有时会有问题
+-*/+-*/+-*/dump f 将python数据以json形式存入到文件对象
dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, 
    allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)
  obj:          通常应为字典或列表对象
  fp:           文件对象
  skipkeys:     设为True当字典键值不是数值或字符串时自动忽略,设为False则会报错
  check_circular:  是否检测循环引用
  allow_nan:    是否处理NaN,inf之类的数值
  cls:          设定自定义编码器(JSONEncoder子类)
  indent:       设置格式化时的缩进量,默认使用紧凑形式
  separators:   数组和字典所使用的分隔符,默认为(',' , ':')
  encoding：    unicode字符串的编码,默认为'utf-8'(python2)
  default:      自定义处理非基本类型数据的函数,通常其应返回字符串
+-*/+-*/+-*/JSONEncoder c 编码器
JSONEncoder(skipkeys=False, ensure_ascii=True, check_circular=True, 
    allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)
  skipkeys:     设为True当字典键值不是数值或字符串时自动忽略,设为False则会报错
  check_circular:  是否检测循环引用
  allow_nan:    是否处理NaN,inf之类的数值
  indent:       设置格式化时的缩进量,默认使用紧凑形式
  separators:   数组和字典所使用的分隔符,默认为(',' , ':')
  sort_keys:    是否排序,如排序此值应为cmp_key函数
  default:      自定义处理非基本类型数据的函数,通常其应返回字符串
JSONEncoder.default内设能处理以下基本类型
+-------------------+---------------+
| Python            | JSON          |
+===================+===============+
| dict              | object        |
| list, tuple       | array         |
| str               | string        |
| int, float        | number        |
| True              | true          |
| False             | false         |
| None              | null          |
+-------------------+---------------+
+-*/+-*/+-*/+-*/default m 转换python数据为json数据(自定义子类应实现)
default(o)
  如果不能转换应抛出TypeError异常
   def default(self, o):
      try:
          iterable = iter(o)
      except TypeError:
          pass
      else:
          return list(iterable)
      return json.JSONEncoder.default(self, o)
+-*/+-*/+-*/+-*/encode m 将python数据编码为json字符串
encode(o)
+-*/+-*/+-*/+-*/iterencode m 逐步将python数据编码为json字符串
iterencode(o)
  例如:
  for chunk in json.JSONEncoder().iterencode(bigobject):
      mysocket.write(chunk)
+-*/+-*/+-*/JSONDecoder c 解码器
JSONDecoder(object_hook=None, parse_float=None, parse_int=None, 
          parse_constant=None, strict=True, object_pairs_hook=None)
  object_hook:   解码出json对象后的操作函数,默认为dict()
  parse_float:   解码出浮点数后的操作函数,默认为float()
  parse_int:     解码出整数后的操作函数,默认为int()
  parse_constant:解码出常数后的操作函数,默认会处理NaN,true,false
  strict:        字符串里是否有\t等非正规字符,默认为True没有非正规字符
JSONDecoder转换方式如下
+---------------+-------------------+
| JSON          | Python            |
+===============+===================+
| object        | dict              |
| array         | list              |
| string        | str               |
| number (int)  | int               |
| number (real) | float             |
| NaN,Infinity  | float             |
| true          | True              |
| false         | False             |
| null          | None              |
+---------------+-------------------+
+-*/+-*/+-*/+-*/decode m 解码json字符串为python对象
decode(s)
+-*/+-*/+-*/+-*/raw_decode m 
TODO:
raw_decode(s)

Decode a JSON document from *s* (a :class:`str` beginning with a
JSON document) and return a 2-tuple of the Python representation
and the index in *s* where the document ended.

This can be used to decode a JSON document from a string that may have
extraneous data at the end.




+-*/+-*/codecs p 编码解码模块
有的编码只支持'strict'错误处理方式
+-*/+-*/+-*/encode f 编码字符串(常用于python3里字节编码返回字节的场景)
encode(obj,encoding="utf-8", errors="strict")
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
  encoding: python3.2里要使用'base64','bz2','hex','quopri','uu','zlib'
            必须编码名称后加_codec,obj为字节字符串,返回也是字节字符串
+-*/+-*/+-*/decode f 解码字符串(常用于python3里字节编码返回字节的场景)
decode(obj,encoding="utf-8", errors="strict")
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
  encoding: python3.2里要使用'base64','bz2','hex','quopri','uu','zlib'
            必须编码名称后加_codec,obj为字节字符串,返回也是字节字符串
+-*/+-*/+-*/strict_errors f 
strict_errors(exception)

Implements the ``strict`` error handling: each encoding or decoding error
raises a :exc:`UnicodeError`.



+-*/+-*/+-*/open f 以指定编码方式打开文件，返回文件对象
open(filename, mode[, encoding[, errors[, buffering]]])
  mode: w清空写 
  mode: r读(文件须存在) w写(打开后清空文件) +读写(须和raw联合使用)
        a添加(每次写都先指针自动移到尾部开始写)
        U通用换行（'\n','\r','\r\n'通通变为'\n'）
  encoding: 如'utf-8'这样的编码名称
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
+-*/+-*/+-*/backslashreplace_errors f 
backslashreplace_errors(exception)

Implements the ``backslashreplace`` error handling (for encoding only): the
unencodable character is replaced by a backslashed escape sequence.


+-*/+-*/+-*/register f 
register(search_function)

Register a codec search function. Search functions are expected to take one
argument, the encoding name in all lower case letters, and return a
:class:`CodecInfo` object having the following attributes:

* ``name`` The name of the encoding;

* ``encode`` The stateless encoding function;

* ``decode`` The stateless decoding function;

* ``incrementalencoder`` An incremental encoder class or factory function;

* ``incrementaldecoder`` An incremental decoder class or factory function;

* ``streamwriter`` A stream writer class or factory function;

* ``streamreader`` A stream reader class or factory function.

The various functions or classes take the following arguments:

*encode* and *decode*: These must be functions or methods which have the same
interface as the :meth:`encode`/:meth:`decode` methods of Codec instances (see
Codec Interface). The functions/methods are expected to work in a stateless
mode.

*incrementalencoder* and *incrementaldecoder*: These have to be factory
functions providing the following interface:

   ``factory(errors='strict')``

The factory functions must return objects providing the interfaces defined by
the base classes :class:`IncrementalEncoder` and :class:`IncrementalDecoder`,
respectively. Incremental codecs can maintain state.

*streamreader* and *streamwriter*: These have to be factory functions providing
the following interface:

   ``factory(stream, errors='strict')``

The factory functions must return objects providing the interfaces defined by
the base classes :class:`StreamWriter` and :class:`StreamReader`, respectively.
Stream codecs can maintain state.

Possible values for errors are

* ``'strict'``: raise an exception in case of an encoding error
* ``'replace'``: replace malformed data with a suitable replacement marker,
  such as ``'?'`` or ``'\ufffd'``
* ``'ignore'``: ignore malformed data and continue without further notice
* ``'xmlcharrefreplace'``: replace with the appropriate XML character
  reference (for encoding only)
* ``'backslashreplace'``: replace with backslashed escape sequences (for
  encoding only)
* ``'surrogateescape'``: replace with surrogate U+DCxx, see :pep:`383`

as well as any other error handling name defined via :func:`register_error`.

In case a search function cannot find a given encoding, it should return
``None``.



+-*/+-*/+-*/lookup_error f 
lookup_error(name)

Return the error handler previously registered under the name *name*.

Raises a :exc:`LookupError` in case the handler cannot be found.



+-*/+-*/+-*/register_error f 
register_error(name, error_handler)
  例子:
  from htmlentitydefs import codepoint2name
  def htmlreplace_errors(exc):
    if isinstance(exc, (UnicodeEncodeError,UnicodeTranslateError)):
      s = exc.object[exc.start:exc.end]
      s = ['&%s;'%codepoint2name[ord(x)] for x in s]
      return ''.join(s), exc.end
    else:
      raise TypeError("htmlreplace can't do %s" % exc.__name__)
  codecs.register_error('htmlreplace',htmlreplace)
+-*/+-*/+-*/lookup f 查找并返回编码解码器
lookup(encoding)
  encoding:
      ascii
      big5               繁体
      shift_jis          日文
      euc_kr             韩文
      gb18030            中日韩
      iso2022_jp_2       中日韩西欧希腊
      latin1             iso-8859-1
      base64_codec       (字节<->字节)
      bz2_codec          (字节<->字节)
      hex_codec          (字节<->字节)
      quopri_codec       (字节<->字节)
      uu_codec           (字节<->字节)
      zlib_codec         (字节<->字节)
      base64             (字节<->字节)(python2)
      bz2                (字节<->字节)(python2)
      hex                (字节<->字节)(python2)
      quopri             (字节<->字节)(python2)
      uu                 (字节<->字节)(python2)
      zlib               (字节<->字节)(python2)
      rot_13             (字节<->字节)(字符<->字符)
      string_escape      python代码形式(python2)
      unicode_escape     python代码形式(python3)
      unicode_internal   python系统unicode编码(utf-32)
      raw_unicode_escape python系统编码
      idna               RFC3490
      mbcs               windows系统编码
      punycode           RFC3492
      utf-32 utf-32-be utf-32-le
      utf-16 utf-16-be utf-16-le
      utf_8
      palmos
+-*/+-*/+-*/+-*/encode m 编码返回(字符串,成功编码字符的长度)二元组
encode(input, errors='strict')
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
+-*/+-*/+-*/+-*/decode m 解码返回(字符串,成功解码字符的长度)二元组
decode(input, errors='strict')
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
+-*/+-*/+-*/+-*/streamreader m 创建按编码方式打开的只读文件对象
streamreader(bytestream, errors='strict')
  bytestream:  二进制模式的类文件对象
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
  返回的文件对象支持read,readline,readlines操作
+-*/+-*/+-*/+-*/streamwriter m 创建按编码方式打开的只写文件对象
streamwriter(bytestream, errors='strict')
  bytestream:  二进制模式的类文件对象
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
  返回的文件对象支持write,wrtielines操作
+-*/+-*/+-*/ignore_errors f 
ignore_errors(exception)

Implements the ``ignore`` error handling: malformed data is ignored and
encoding or decoding is continued without further notice.



+-*/+-*/+-*/xmlcharrefreplace_errors f 
xmlcharrefreplace_errors(exception)

Implements the ``xmlcharrefreplace`` error handling (for encoding only): the
unencodable character is replaced by an appropriate XML character reference.



+-*/+-*/+-*/replace_errors f 
replace_errors(exception)

Implements the ``replace`` error handling: malformed data is replaced with a
suitable replacement character such as ``'?'`` in bytestrings and
``'\ufffd'`` in Unicode strings.



+-*/+-*/+-*/EncodedFile f 创建自转码文件对象(用于不使用unicode的场景)
EncodedFile(file, data_encoding, file_encoding=None, errors='strict')
  file:   类文件对象
  data_encoding:   程序内数据的编码格式
  file_encoding:   文件类数据的编码格式,未给出时使用data_encoding
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
+-*/+-*/+-*/BOM_UTF8 d 
+-*/+-*/+-*/BOM_BE d BOM_UTF16_BE
+-*/+-*/+-*/BOM_UTF16_LE d
+-*/+-*/+-*/BOM_UTF16_BE d
+-*/+-*/+-*/BOM_UTF32_BE d 
+-*/+-*/+-*/BOM_LE d BOM_UTF16_LE
+-*/+-*/+-*/BOM_UTF32 d 本机系统
+-*/+-*/+-*/BOM d BOM_UTF16,本机系统
+-*/+-*/+-*/BOM_UTF32_LE d 
+-*/+-*/+-*/BOM_UTF16 d 本机系统
+-*/+-*/re p 正则表达式模块
  字符匹配
  .         匹配除\n以外的任何字符,如设有re.DOTALL则也会匹配\n
  \d        匹配数字字符，unicode匹配时可能会匹配欧洲数字等其它数字字符
  \D        匹配非数字字符
  \s        匹配空白字符，unicode匹配时可能会匹配非\r\n\t\f\v 的字符
  \S        匹配非空白字符
  \w        匹配字母数字字符，unicode匹配时可能不止匹配英文字母
  \W        匹配非字母数字字符
  \n\t\r\\  匹配\n,\t,\r,\
  [..]      匹配指定范围字符，需要的话]\-应使用\转义
  [^..]     匹配不在指定范围字符，需要的话]\-应使用\转义
  量词匹配
  *         匹配0-∞个，尽可能多
  +         匹配1-∞个，尽可能多
  ?         匹配0个或1个，尽可能多
  {m,n}     匹配m-n个，尽可能多，m默认0，n默认∞,如{,10}{4,}
  *?        匹配0-∞个，尽可能少
  +?        匹配1-∞个，尽可能少
  ??        匹配0个或1个，尽可能少
  {m,n}?    匹配m-n个，尽可能少，m默认0，n默认∞,如{,10}{4,}
  {m}       匹配m个
  位置匹配(零匹配)
  ^         匹配字符串开始位置,如设有re.MULTILINE还可匹配行首
  $         匹配字符串结束位置,如设有re.MULTILINE还可匹配行尾
  \A        匹配字符串开始位置
  \Z        匹配字符串结束位置
  \b        匹配单词的开头或结尾
  \B        匹配不是单词开头或结尾的位置
  (?=..)    后续限定，之后的内容要被匹配，但只测试而不实际匹配
  (?!..)    后续否定限定，之后的内容不能被匹配，但只测试而不实际匹配
  (?<=..)   前接限定，之前的内容要被匹配，但只测试而不实际匹配
  (?<!..)   前接否定限定，之前的内容不能被匹配，但只测试而不实际匹配
  组匹配
  \1-99     匹配之前第x组匹配的文本
  (..)      一般分组，将匹配的内容作为一个分组，可用于\1-99和group()
  (A|B)     一般分组，匹配A或B，可用于\1-99和group()
  (?:..)    忽略匹配，其内容匹配后被忽略，\1-99和group()将不会含有此匹配
  (?#..)    注释，不会做任何匹配
  (?P<name>.)     命名分组，可用于groupdict()
  (?P=name)       命名分组引用，匹配之前有命名为name组所匹配的内容
  (?(id|name)A|B) 分组如有存在则匹配A否则匹配B,id是第x组匹配,name是命名分组
                  如(xxx)?(?(1)aaa|bbb)
  (?aiLmsux)      必须位于re字符串开头，模式设定
  flag:   A a ASCII       \w\W\b\B\d\D\s\S只作ASCII字符匹配(python3)
          I i IGNORECASE  匹配不分大小写,包括[A-Z]也不区分大小写
          L L LOCALE      \w\W\b\B\s\S使用区域设置
          M m MULTILINE   ^$匹配行首行尾
          S s DOTALL      .匹配\n
          U u UNICODE     \wWbBdDsS使用多种可能字符(python2)(python3此为默认)
          X x VERBOSE     忽略空格和注释，re字符串可以多行带注释
            charref = re.compile(r"""
             &[#]                # 注意#要用[]形式以避免当作注释
             (
             0[0-7]+             # 八进制
               | [0-9]+          # 十进制
               | x[0-9a-fA-F]+   # 十六进制
             )
             ;                   # 尾随;
            """, re.VERBOSE)
+-*/+-*/+-*/purge f 清理正则表达式缓存
+-*/+-*/+-*/search f 在字符串里搜索第一个正则匹配的，返回匹配对象
search(pattern, string, flags=0)
  未找到返回None
  pattern:   正则表达式字符串，通常使用r'..'或ur'...',或是正则表达式对象
    \A开头 \Z结尾 (?=..)后续限定 (?!..)后续否定限定 
    (?<=..)前接限定 (?<!..)前接否定限定 (?:..)忽略匹配 
    (?P<name>..)命名分组 (?P=name)命名分组引用
    (?(id|name)A|B) 分组如有存在则匹配A否则匹配B
  flag:   A a ASCII       \w\W\b\B\d\D\s\S只作ASCII字符匹配(python3)
          I i IGNORECASE  匹配不分大小写,包括[A-Z]也不区分大小写
          L L LOCALE      \w\W\b\B\s\S使用区域设置
          M m MULTILINE   ^$匹配行首行尾
          S s DOTALL      .匹配\n
          U u UNICODE     \wWbBdDsS使用多种可能字符(python2)(python3此为默认)
          X x VERBOSE     忽略空格和注释，re字符串可以多行带注释
+-*/+-*/+-*/finditer f  搜索字符串里所有正则匹配，返回匹配对象迭代序列
finditer(pattern, string, flags=0)
  各匹配之间不会重叠
  pattern:   正则表达式字符串，通常使用r'..'或ur'...',或是正则表达式对象
    \A开头 \Z结尾 (?=..)后续限定 (?!..)后续否定限定 
    (?<=..)前接限定 (?<!..)前接否定限定 (?:..)忽略匹配 
    (?P<name>..)命名分组 (?P=name)命名分组引用
    (?(id|name)A|B) 分组如有存在则匹配A否则匹配B
  flag:  ASCII IGNORECASE LOCALE MULTILINE DOTALL UNICODE VERBOSE
+-*/+-*/+-*/sub f 使用正则表达式搜索并替换字符串，返回被替换后的字符串
sub(pattern, repl, string, count=0, flags=0)
  pattern:   正则表达式字符串，通常使用r'..'或ur'...',或是正则表达式对象
  repl:      替换字符串，里面可以使用\1或\g<1>或\g<name>来引用组内容
             \g<0>为整个匹配的内容,注意这样使用时最好使用r字符串
             或者是一个参数为匹配对象的函数,其返回内容将作为替换内容
  count:     最大替换次数
  flag:  ASCII IGNORECASE LOCALE MULTILINE DOTALL UNICODE VERBOSE
    \A开头 \Z结尾 (?=..)后续限定 (?!..)后续否定限定 
    (?<=..)前接限定 (?<!..)前接否定限定 (?:..)忽略匹配 
    (?P<name>..)命名分组 (?P=name)命名分组引用
    (?(id|name)A|B) 分组如有存在则匹配A否则匹配B
+-*/+-*/+-*/compile f 创建正则表达式对象
compile(pattern, flags=0)
  pattern:   正则表达式字符串，通常使用r'..'或ur'...'
  字符匹配
  .         匹配除\n以外的任何字符,如设有re.DOTALL则也会匹配\n
  \d        匹配数字字符，unicode匹配时可能会匹配欧洲数字等其它数字字符
  \D        匹配非数字字符
  \s        匹配空白字符，unicode匹配时可能会匹配非\r\n\t\f\v 的字符
  \S        匹配非空白字符
  \w        匹配字母数字字符，unicode匹配时可能不止匹配英文字母
  \W        匹配非字母数字字符
  \n\t\r\\  匹配\n,\t,\r,\
  [..]      匹配指定范围字符，需要的话]\-应使用\转义
  [^..]     匹配不在指定范围字符，需要的话]\-应使用\转义
  量词匹配
  *         匹配0-∞个，尽可能多
  +         匹配1-∞个，尽可能多
  ?         匹配0个或1个，尽可能多
  {m,n}     匹配m-n个，尽可能多，m默认0，n默认∞,如{,10}{4,}
  *?        匹配0-∞个，尽可能少
  +?        匹配1-∞个，尽可能少
  ??        匹配0个或1个，尽可能少
  {m,n}?    匹配m-n个，尽可能少，m默认0，n默认∞,如{,10}{4,}
  {m}       匹配m个
  位置匹配(零匹配)
  ^         匹配字符串开始位置,如设有re.MULTILINE还可匹配行首
  $         匹配字符串结束位置,如设有re.MULTILINE还可匹配行尾
  \A        匹配字符串开始位置
  \Z        匹配字符串结束位置
  \b        匹配单词的开头或结尾
  \B        匹配不是单词开头或结尾的位置
  (?=..)    后续限定，之后的内容要被匹配，但只测试而不实际匹配
  (?!..)    后续否定限定，之后的内容不能被匹配，但只测试而不实际匹配
  (?<=..)   前接限定，之前的内容要被匹配，但只测试而不实际匹配
  (?<!..)   前接否定限定，之前的内容不能被匹配，但只测试而不实际匹配
  组匹配
  \1-99     匹配之前第x组匹配的文本
  (..)      一般分组，将匹配的内容作为一个分组，可用于\1-99和group()
  (A|B)     一般分组，匹配A或B，可用于\1-99和group()
  (?:..)    忽略匹配，其内容匹配后被忽略，\1-99和group()将不会含有此匹配
  (?#..)    注释，不会做任何匹配
  (?P<name>.)     命名分组，可用于groupdict()
  (?P=name)       命名分组引用，匹配之前有命名为name组所匹配的内容
  (?(id|name)A|B) 分组如有存在则匹配A否则匹配B,id是第x组匹配,name是命名分组
                  如(xxx)?(?(1)aaa|bbb)
  (?aiLmsux)      必须位于re字符串开头，模式设定
  flag:   A a ASCII       \w\W\b\B\d\D\s\S只作ASCII字符匹配(python3)
          I i IGNORECASE  匹配不分大小写,包括[A-Z]也不区分大小写
          L L LOCALE      \w\W\b\B\s\S使用区域设置
          M m MULTILINE   ^$匹配行首行尾
          S s DOTALL      .匹配\n
          U u UNICODE     \wWbBdDsS使用多种可能字符(python2)(python3此为默认)
          X x VERBOSE     忽略空格和注释，re字符串可以多行带注释
            charref = re.compile(r"""
             &[#]                # 注意#要用[]形式以避免当作注释
             (
             0[0-7]+             # 八进制
               | [0-9]+          # 十进制
               | x[0-9a-fA-F]+   # 十六进制
             )
             ;                   # 尾随;
            """, re.VERBOSE)
+-*/+-*/+-*/+-*/groupindex d 命名组名称对应位置的字典 
+-*/+-*/+-*/+-*/flags d 正则选项
+-*/+-*/+-*/+-*/groups d 分组数目
+-*/+-*/+-*/+-*/pattern d 正则表达式字符串
+-*/+-*/+-*/+-*/search m 在字符串里搜索第一个正则匹配的，返回匹配对象
search(string[, pos[, endpos]])
  未找到返回None
  pos,endpos为搜索范围
+-*/+-*/+-*/+-*/finditer m 搜索字符串里所有正则匹配，返回匹配对象迭代序列
finditer(string[, pos[, endpos]])
  各匹配之间不会重叠
  pos,endpos为搜索范围
+-*/+-*/+-*/+-*/sub m 搜索并替换字符串，返回被替换后的字符串
sub(repl, string, count=0)
  repl:      替换字符串，里面可以使用\1或\g<1>或\g<name>来引用组内容
             \g<0>为整个匹配的内容,注意这样使用时最好使用r字符串
             或者是一个参数为匹配对象的函数,其返回内容将作为替换内容
  count:     最大替换次数
+-*/+-*/+-*/+-*/split m 用正则表达式匹配的内容分割字符串,返回列表
split(string, maxsplit=0)
  maxsplit最大分割次数
   split不会拿匹配为空字符串作分割,如设为分组，返回队列会包含分割字符串
   >>> re.split('\W+', 'Words, words, words.')
   ['Words', 'words', 'words', '']
   >>> re.split('(\W+)', 'Words, words, words.')
   ['Words', ', ', 'words', ', ', 'words', '.', '']
   >>> re.split('\W+', 'Words, words, words.', 1)
   ['Words', 'words, words.']
   >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
   ['0', '3', '9']
   >>> re.split('(\W+)', '...words, words...')
   ['', '...', 'words', ', ', 'words', '...', '']
   >>> re.split("(?m)^$", "foo\n\nbar\n")
   ['foo\n\nbar\n']
+-*/+-*/+-*/+-*/subn m 搜索并替换字符串，返回(字符串，替换次数)
subn(repl, string, count=0)
  返回一个二元组，第一项为已替换的字符串，第二项为替换次数
  repl:      替换字符串，里面可以使用\1或\g<1>或\g<name>来引用组内容
             \g<0>为整个匹配的内容,注意这样使用时最好使用r字符串
             或者是一个参数为匹配对象的函数,其返回内容将作为替换内容
  count:     最大替换次数
+-*/+-*/+-*/+-*/findall m 搜索字符串里所有正则匹配的不重叠字符串，返回列表
findall(string[, pos[, endpos]])
  如正则表达式里有一个分组被匹配，返回的该项元素就是这个分组所匹配的内容
  如有多个分组被匹配，返回的该项元素为由分组内容组成的元组
  pos,endpos为搜索范围
  正则表达式对象如有带命名组的,应使用finditer,使用findall将只能获得空列表
+-*/+-*/+-*/+-*/match m 从位置开头作正则匹配，返回匹配对象，未匹配返回None
match(string[, pos[, endpos]])
  pos 为作正则匹配开始的位置 ,endpos为结束位置
+-*/+-*/+-*/split f 用正则表达式匹配的内容分割字符串,返回列表
split(pattern, string, maxsplit=0, flags=0)
  maxsplit最大分割次数
   split不会拿匹配为空字符串作分割,如设为分组，返回队列会包含分割字符串
   >>> re.split('\W+', 'Words, words, words.')
   ['Words', 'words', 'words', '']
   >>> re.split('(\W+)', 'Words, words, words.')
   ['Words', ', ', 'words', ', ', 'words', '.', '']
   >>> re.split('\W+', 'Words, words, words.', 1)
   ['Words', 'words, words.']
   >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
   ['0', '3', '9']
   >>> re.split('(\W+)', '...words, words...')
   ['', '...', 'words', ', ', 'words', '...', '']
   >>> re.split("(?m)^$", "foo\n\nbar\n")
   ['foo\n\nbar\n']
+-*/+-*/+-*/escape f 生成所有非字母数字字符都带\的转义字符串
escape(string)
+-*/+-*/+-*/subn f 使用正则表达式搜索并替换字符串，返回(字符串，替换次数)
subn(pattern, repl, string, count=0, flags=0)
  返回一个二元组，第一项为已替换的字符串，第二项为替换次数
  pattern:   正则表达式字符串，通常使用r'..'或ur'...',或是正则表达式对象
  repl:      替换字符串，里面可以使用\1或\g<1>或\g<name>来引用组内容
             \g<0>为整个匹配的内容,注意这样使用时最好使用r字符串
             或者是一个参数为匹配对象的函数,其返回内容将作为替换内容
  count:     最大替换次数
  flag:  ASCII IGNORECASE LOCALE MULTILINE DOTALL UNICODE VERBOSE
    \A开头 \Z结尾 (?=..)后续限定 (?!..)后续否定限定 
    (?<=..)前接限定 (?<!..)前接否定限定 (?:..)忽略匹配 
    (?P<name>..)命名分组 (?P=name)命名分组引用
    (?(id|name)A|B) 分组如有存在则匹配A否则匹配B
+-*/+-*/+-*/findall f 搜索字符串里所有正则匹配的不重叠字符串，返回列表
findall(pattern, string, flags=0)
  如正则表达式里有一个分组被匹配，返回的该项元素就是这个分组所匹配的内容
  如有多个分组被匹配，返回的该项元素为由分组内容组成的元组
  不能使用带命名组的正则表达式,要使用的话应用finditer
  pattern:   正则表达式字符串，通常使用r'..'或ur'...',或是正则表达式对象
    \A开头 \Z结尾 (?=..)后续限定 (?!..)后续否定限定 
    (?<=..)前接限定 (?<!..)前接否定限定 (?:..)忽略匹配 
  flag:  ASCII IGNORECASE LOCALE MULTILINE DOTALL UNICODE VERBOSE
+-*/+-*/+-*/match f 从字符串开头作正则匹配，返回匹配对象，未匹配返回None
match(pattern, string, flags=0)
  pattern:   正则表达式字符串，通常使用r'..'或ur'...',或是正则表达式对象
    \A开头 \Z结尾 (?=..)后续限定 (?!..)后续否定限定 
    (?<=..)前接限定 (?<!..)前接否定限定 (?:..)忽略匹配 
    (?P<name>..)命名分组 (?P=name)命名分组引用
    (?(id|name)A|B) 分组如有存在则匹配A否则匹配B
  flag:   A a ASCII       \w\W\b\B\d\D\s\S只作ASCII字符匹配(python3)
          I i IGNORECASE  匹配不分大小写,包括[A-Z]也不区分大小写
          L L LOCALE      \w\W\b\B\s\S使用区域设置
          M m MULTILINE   ^$匹配行首行尾
          S s DOTALL      .匹配\n
          U u UNICODE     \wWbBdDsS使用多种可能字符(python2)(python3此为默认)
          X x VERBOSE     忽略空格和注释，re字符串可以多行带注释
+-*/+-*/+-*/A d \w\W\b\B\d\D\s\S只作ASCII字符匹配(python3)
+-*/+-*/+-*/DOTALL d .匹配\n
+-*/+-*/+-*/UNICODE d \wWbBdDsS使用多种可能字符(python2)(python3此为默认)
+-*/+-*/+-*/U d \wWbBdDsS使用多种可能字符(python2)(python3此为默认)
+-*/+-*/+-*/VERBOSE d 忽略空格和注释，re字符串可以多行带注释
   a = re.compile(r"""\d +  # the integral part
                      \.    # the decimal point
                      \d *  # some fractional digits""", re.X)
+-*/+-*/+-*/I d 匹配不分大小写,包括[A-Z]也不区分大小写
+-*/+-*/+-*/M d ^$匹配行首行尾
+-*/+-*/+-*/L d \w\W\b\B\s\S使用区域设置
+-*/+-*/+-*/IGNORECASE d 匹配不分大小写,包括[A-Z]也不区分大小写
+-*/+-*/+-*/LOCALE d \w\W\b\B\s\S使用区域设置
+-*/+-*/+-*/S d .匹配\n
+-*/+-*/+-*/MULTILINE d ^$匹配行首行尾
+-*/+-*/+-*/X d  忽略空格和注释，re字符串可以多行带注释
   a = re.compile(r"""\d +  # the integral part
                      \.    # the decimal point
                      \d *  # some fractional digits""", re.X)
+-*/+-*/+-*/ASCII d \w\W\b\B\d\D\s\S只作ASCII字符匹配(python3)
+-*/+-*/+-*/error e 正则表达式错误
+-*/+-*/+-*/match _ 匹配对象
+-*/+-*/+-*/+-*/string d 执行搜索的文本字符串
+-*/+-*/+-*/+-*/lastgroup d 相匹配的最后一个命名分组的名称
lastgroup
  对于r'(?P<a>a)b',r'(?P<a>(?P<b>a)(?P<c>b))',r'(?P<a>(?P<b>ab))',返回值为'a'
  对于r'(?P<a>a)(?P<b>b)'返回值为'b'
+-*/+-*/+-*/+-*/lastindex d 相匹配的最后一个分组的数字索引号
lastindex
  对于r'(a)b',r'((a)(b))',r'((ab))',返回值为1
  对于r'(a)(b)'返回值为2
+-*/+-*/+-*/+-*/pos d 正则表达式对象执行匹配时所给的起始位置
+-*/+-*/+-*/+-*/re d 执行匹配的正则表达式对象
+-*/+-*/+-*/+-*/endpos d 正则表达式对象执行匹配时所给的结束位置
+-*/+-*/+-*/+-*/end m  返回匹配或分组匹配所匹配的开始位置
end([group])
  如未给出group则返回整个匹配的开始位置
  group 可以是位置正整数或命名分组的名称字符串
  如未匹配则返回None
+-*/+-*/+-*/+-*/start m 返回匹配或分组匹配所匹配的开始位置
start([group])
  如未给出group则返回整个匹配的开始位置
  group 可以是位置正整数或命名分组的名称字符串
  如未匹配则返回None
+-*/+-*/+-*/+-*/groups m 返回所有分组所匹配的文本元组
groups(default=None)
  元组里的文本顺序按分组索引顺序排列
  如分组未匹配则该项为default
   >>> m = re.match(r"(\d+)\.?(\d+)?", "24")
   >>> m.groups()      # Second group defaults to None.
   ('24', None)
   >>> m.groups('0')   # Now, the second group defaults to '0'.
   ('24', '0')
+-*/+-*/+-*/+-*/span m 返回匹配或分组匹配所匹配的(开始位置,结束位置)二元组
span([group])
  如未给出group则返回整个匹配的(开始位置,结束位置)
  group 可以是位置正整数或命名分组的名称字符串
  如未匹配则返回(None,None)
+-*/+-*/+-*/+-*/groupdict m 返回所有命名分组和其匹配对应的字典
groupdict(default=None)
  default是未匹配的默认值
   >>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
   >>> m.groupdict()
   {'first_name': 'Malcolm', 'last_name': 'Reynolds'}
+-*/+-*/+-*/+-*/group m 返回指定分组匹配的文本
group([group1, ...])
  group1.. 可以是位置正整数或命名分组的名称字符串
  如为给出group1则返回整个匹配的文本
  如只给了一个指定，则返回该指定所匹配的文本字符串
  如给出多个，则依序返回元组
  未匹配的项返回None
+-*/+-*/+-*/+-*/expand m 对匹配的文本作替换操作，返回替换后的字符串
expand(template)
  template:  替换字符串，里面可以使用\1或\g<1>或\g<name>来引用组内容
             \g<0>为整个匹配的内容,注意这样使用时最好使用r字符串
+-*/+-*/string p 常用字符串相关模块
+-*/+-*/+-*/capwords f 将每个单词变成首字母大写形式，并删除多余的空格
capwords(s, sep=None)
  sep不给的话会自动去除中间重复的空白和前后多余的空白
  如给出，将严格按sep分割来划分单词
+-*/+-*/+-*/maketrans f 生成转换字符表(python2)
maketrans(from, to)
  from,to 必须是同长度的字符串
+-*/+-*/+-*/ascii_lowercase d a-z
+-*/+-*/+-*/digits d 0-9
+-*/+-*/+-*/whitespace d 所有空白字符
+-*/+-*/+-*/printable d 所有可显字符，包括空白
+-*/+-*/+-*/ascii_letters d a-zA-Z
+-*/+-*/+-*/punctuation d 所有标点符号
+-*/+-*/+-*/hexdigits d 0-9a-fA-F
+-*/+-*/+-*/ascii_uppercase d A-Z
+-*/+-*/+-*/octdigits d 0-7
+-*/+-*/+-*/Formatter c 字符串格式化类
+-*/+-*/+-*/+-*/format_field m 按格式转换对象生成字符串
format_field(value, format_spec)
  按照format_spec中的格式将value转换为字符串。该操作调用value.__format__()。
  如format(44,'=^+#10x')返回'==+0x2c==='
  基本格式[[fill]align][sign][#][0][width][.precision][type]
  fill: 单字符,对齐时填充的字符,默认是空格
  align: <左对齐 >右对齐 ^中间对齐 
  sign: +正负数都显示符号 -默认只显示负数符号 ' '空格代替+
  width: 长度
  #: 只用于b、o、x、X形式，表示前置0b,0o,0x,0X
  0: 只用于数字，表示前置0
  precision: 只用于浮点数或小数格式，小数点后长度
  |type| 说明                                            |
  |----+-------------------------------------------------|
  | b  | 二进制整数                                      |
  | d  | 十进制整数                                      |
  | o  | 八进制整数                                      |
  | x  | 小写十六进制数                                  |
  | X  | 大写十六进制数                                  |
  | e  | 小写指数格式浮点数                              |
  | E  | 大写指数格式浮点数                              |
  | f  | 小数点格式                                      |
  | F  | 小数点格式                                      |
  | g  | 小数点格式，如果指数精度小于-4自动使用e格式     |
  | G  | 小数点格式，如果指数精度小于-4自动使用E格式     |
  | n  | 同g,但用当前区域格式                            |
  | %  | 数字乘100后加%                                  |
  | c  | 单字符：如参数为整数自动使用chr()转换           |
  | s  | 字符串                                          |
  |    |    以下用于datetime类型     |   例子            |
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天）              | 32                |
  | %W | 星期（星期一）              | 32                |
+-*/+-*/+-*/+-*/format m 按格式返回字符串
format(format_string, *args, **kwargs)
  format_string:   格式字符串
  对于*args用0,1,2作键，对于**kwargs用其名称作键
  如f.format('{0} {1} {name} {name1}','args0','args1',name='a',name1='b')
  如果键值为字典或列表或对象，还可作属性操作，
  如f.format('{0.attr}{1[1]}{name[key]}',....)
  如要使用str或repr可用!s!r 如{0!r} 如果是字符串用!r会在字符串两端加'号
  如要{或}则使用'{{ }}'
  :后面是格式，如f.format('{0:=^+#{1}x}',44,10)返回'==+0x2c==='
+-*/+-*/+-*/+-*/convert_field m 转换对象为字符串，str或repr方式
convert_field(value, conversion)
  conversion   's'或'r'
+-*/+-*/+-*/+-*/get_value m 获取参数里字段指定的值
get_value(key, args, kwargs)
  args是参数元组，kwargs是参数字典
  对于args里元素用0,1,2作键，对于kwargs用其名称作键
  由此取得key所对应的对象
+-*/+-*/+-*/+-*/vformat m 按格式返回字符串
vformat(format_string, args, kwargs)
  format_string:   格式字符串
  args是参数元组，kwargs是参数字典
  对于args里元素用0,1,2作键，对于kwargs用其名称作键
  如f.vformat('{0} {1} {name} {name1}',('args0','args1'),{name:'a',name1:'b'})
  如果键值为字典或列表或对象，还可作属性操作，
  如f.vformat('{0.attr}{1[1]}{name[key]}',....)
  如要使用str或repr可用!s!r 如{0!r} 如果是字符串用!r会在字符串两端加'号
  如要{或}则使用'{{ }}'
  :后面是格式，如f.vformat('{0:=^+#{1}x}',(44,10),{})返回'==+0x2c==='
+-*/+-*/+-*/+-*/parse m 解析格式字符串，返回格式元组信息的迭代序列
parse(format_string)
  返回序列里信息形式是
  (literal_text, field_name, format_spec, conversion)
  literal_text    之前的固定部分字符串
  field_name      格式标识的字段名称，如'0','name','0.xx','name[1]'
  format_spec     :之后的格式
  conversion      如有使用!s或!r则这里会出现s或r
+-*/+-*/+-*/+-*/get_field m 获取参数里字段指定的值,返回值元组(可获取属性和键值)
get_field(field_name, args, kwargs)
  args是参数元组，kwargs是参数字典
  对于args里元素用0,1,2作键，对于kwargs用其名称作键
  由此取得field_name所对应的对象,field_name可以是'0.name'等
  返回(value,key),对于'0[1]'这样的返回的key依然是0
+-*/+-*/+-*/+-*/check_unused_args m 检查格式里未使用的参数
check_unused_args(used_args, args, kwargs)
+-*/+-*/+-*/Template c 字符串模板类
Template(template)
  template为字符串模板,默认使用$为转义字符，可使用$key或${key}，单要$则使用$$
  如自定义模板可自行设定delimiter的转义字符和idpattern的key所允许的正则表达式
+-*/+-*/+-*/+-*/template d 原始模板字符串
+-*/+-*/+-*/+-*/safe_substitute m 根据自身模板生成字符串(不会报错)
safe_substitute(mapping, **kwds)
  模板里的$key或${key}会根据mapping字典和其他参数而更改，如key未找到则保留原样
+-*/+-*/+-*/+-*/substitute m 根据自身模板生成字符串(可能会报错)
substitute(mapping, **kwds)
  模板里的$key或${key}会根据mapping字典和其他参数而更改，如key未找到则报错
+-*/+-*/struct p 二进制数据打包解包模块
  格式字符串,里面的空白会被忽略
  每个值的格式为 [字节序][重复次数]类型
  多次重复非字符串类型将按列表处理 如 struct.pack('2i',(1,2))
  字节序
    @      字节序以及类型大小和对齐方式由本地系统决定
           如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
    =      无对齐，类型大小看下表，字节序由本地系统决定
    <      小端序，无对齐，类型大小看下表
    >      大端序，无对齐，类型大小看下表
    !      网络序，无对齐，类型大小看下表
  类型          
    x   1   忽略              
    c   1   单字符
    b   1   有符号整数
    B   1   无符号整数
    ?   1   布尔值
    h   2   有符号整数
    H   2   无符号整数
    i   4   有符号整数
    I   4   无符号整数
    l   4   有符号整数
    L   4   无符号整数
    q   ?   有符号整数
    Q   ?   无符号整数
    f   4   浮点数
    d   8   浮点数
    s   1   字符串,后面空的自动补\0
    p   1   长度小于255的字符串，其长度放在头位
    P   ?   内存地址，只能用本机字节序
+-*/+-*/+-*/calcsize f 计算格式的字节长度
calcsize(fmt)
  fmt:     格式字符串(忽略里面的空白)
    每个格式为 [字节序][重复次数]类型
    类型          
       b B h H i I l L q Q  整数类型，大写为无符号
       1 1 2 2 4 4 4 4 ? ?  标准大小
       x 忽略 c 单字符 ? 布尔 s 字符串 p 头位带长度字符串
       f 4字节浮点数 d 8字节浮点数 P 内存地址
    字节序  <小端序 >大端序 !网络序(大端序) =本机字节序，标准大小无对齐
            @字节序以及类型大小和对齐方式都由本地系统决定
            如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
+-*/+-*/+-*/unpack f 解包字节字符串为元组
unpack(fmt, buffer)
  buffer长度必须和fmt设定的一致
  fmt:     格式字符串(忽略里面的空白)
    每个格式为 [字节序][重复次数]类型 多次重复非字符串类型将按元组处理
    类型          
       b B h H i I l L q Q  整数类型，大写为无符号
       1 1 2 2 4 4 4 4 ? ?  标准大小
       x 忽略 c 单字符 ? 布尔 s 字符串 p 头位带长度字符串
       f 4字节浮点数 d 8字节浮点数 P 内存地址
    字节序  <小端序 >大端序 !网络序(大端序) =本机字节序，标准大小无对齐
            @字节序以及类型大小和对齐方式都由本地系统决定
            如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
  要获取单个的数据如'i'，常使用 a,=unpack('i',s)
+-*/+-*/+-*/pack_into f 将值打包到缓冲区里
pack_into(fmt, buffer, offset, v1, v2, ...)
  buffer:   通常为ctype,array等的缓冲对象
  offset:   写入的位置
  fmt:     格式字符串(忽略里面的空白)
    每个格式为 [字节序][重复次数]类型 多次重复非字符串类型的值需是列表
    类型          
       b B h H i I l L q Q  整数类型，大写为无符号
       1 1 2 2 4 4 4 4 ? ?  标准大小
       x 忽略 c 单字符 ? 布尔 s 字符串 p 头位带长度字符串
       f 4字节浮点数 d 8字节浮点数 P 内存地址
    字节序  <小端序 >大端序 !网络序(大端序) =本机字节序，标准大小无对齐
            @字节序以及类型大小和对齐方式都由本地系统决定
            如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
+-*/+-*/+-*/unpack_from f 从缓冲区解包到元组
unpack_from(fmt, buffer, offset=0)
  buffer:   通常为ctype,array等的缓冲对象
  offset:   解包读入的位置,其后内容长度必须不小于fmt设定的长度
  fmt:     格式字符串(忽略里面的空白)
    每个格式为 [字节序][重复次数]类型 多次重复非字符串类型将按元组处理
    类型          
       b B h H i I l L q Q  整数类型，大写为无符号
       1 1 2 2 4 4 4 4 ? ?  标准大小
       x 忽略 c 单字符 ? 布尔 s 字符串 p 头位带长度字符串
       f 4字节浮点数 d 8字节浮点数 P 内存地址
    字节序  <小端序 >大端序 !网络序(大端序) =本机字节序，标准大小无对齐
            @字节序以及类型大小和对齐方式都由本地系统决定
            如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
+-*/+-*/+-*/pack f 将值打包成字节字符串
pack(fmt, v1, v2, ...)
  fmt:     格式字符串(忽略里面的空白)
    每个格式为 [字节序][重复次数]类型 多次重复非字符串类型的值需是列表
    类型          
       b B h H i I l L q Q  整数类型，大写为无符号
       1 1 2 2 4 4 4 4 ? ?  标准大小
       x 忽略 c 单字符 ? 布尔 s 字符串 p 头位带长度字符串
       f 4字节浮点数 d 8字节浮点数 P 内存地址
    字节序  <小端序 >大端序 !网络序(大端序) =本机字节序，标准大小无对齐
            @字节序以及类型大小和对齐方式都由本地系统决定
            如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
+-*/+-*/+-*/error e 二进制数据打包解包错误
+-*/+-*/+-*/Struct c 二进制数据打包解包操作对象
Struct(fmt)
  fmt:     格式字符串(忽略里面的空白)
    每个格式为 [字节序][重复次数]类型
    类型          
       b B h H i I l L q Q  整数类型，大写为无符号
       1 1 2 2 4 4 4 4 ? ?  标准大小
       x 忽略 c 单字符 ? 布尔 s 字符串 p 头位带长度字符串
       f 4字节浮点数 d 8字节浮点数 P 内存地址
    字节序  <小端序 >大端序 !网络序(大端序) =本机字节序，标准大小无对齐
            @字节序以及类型大小和对齐方式都由本地系统决定
            如要对齐一般在相应位置使用'0l','0i'之类作边界对齐
+-*/+-*/+-*/+-*/size d 本格式的字节长度
+-*/+-*/+-*/+-*/format d 格式字符串
+-*/+-*/+-*/+-*/unpack m 解包字节字符串为元组
unpack(buffer)
  buffer长度必须和格式设定的一致
+-*/+-*/+-*/+-*/pack_into m 将值打包到缓冲区里
pack_into(buffer, offset, v1, v2, ...)
  buffer:   通常为ctype,array等的缓冲对象
  offset:   写入的位置
+-*/+-*/+-*/+-*/unpack_from m  从缓冲区解包到元组
unpack_from(buffer, offset=0)
  buffer:   通常为ctype,array等的缓冲对象
  offset:   解包读入的位置,其后内容长度必须不小于格式设定的长度
+-*/+-*/+-*/+-*/pack m  将值打包成字节字符串
pack(v1, v2, ...)
+-*/+-*/textwrap p 文本分行模块
textwrap主要处理单行很长的文本,将单行长文本按给定行宽变换成多行.
这个模块基本上只能处理英文,python3里可以处理纯中文(全角)或纯英文
但对于英文中文混杂的文本就一点用都没有了
+-*/+-*/+-*/wrap f 将长文本行按给定行宽分割成多行,返回行列表
wrap(text, width=70, **kwargs)
  text:   要排版的文字
  width:  行宽
+-*/+-*/+-*/dedent f 移除文本第一行和最后一行的开头空白,返回字符串
dedent(text)
  text:   要排版的文字(通常为单行文本)
+-*/+-*/+-*/fill f 将长文本行按给定行宽分割成多行,返回字符串
fill(text, width=70, **kwargs)
  text:   要排版的文字
  width:  行宽
+-*/+-*/+-*/TextWrapper c 创建分行器
TextWrapper(**kwargs)
+-*/+-*/+-*/+-*/expand_tabs d 是否将tab替换为空格(默认:True)
+-*/+-*/+-*/+-*/drop_whitespace d 是否去除空白行(默认:True)
+-*/+-*/+-*/+-*/initial_indent d 第一行的缩进(默认:'')
+-*/+-*/+-*/+-*/break_long_words d 是否分割长单词(默认:True)
+-*/+-*/+-*/+-*/fix_sentence_endings d 
fix_sentence_endings

(default: ``False``) If true, :class:`TextWrapper` attempts to detect
sentence endings and ensure that sentences are always separated by exactly
two spaces.  This is generally desired for text in a monospaced font.
However, the sentence detection algorithm is imperfect: it assumes that a
sentence ending consists of a lowercase letter followed by one of ``'.'``,
``'!'``, or ``'?'``, possibly followed by one of ``'"'`` or ``"'"``,
followed by a space.  One problem with this is algorithm is that it is
unable to detect the difference between "Dr." in ::

   [...] Dr. Frankenstein's monster [...]

and "Spot." in ::

   [...] See Spot. See Spot run [...]

:attr:`fix_sentence_endings` is false by default.

Since the sentence detection algorithm relies on ``string.lowercase`` for
the definition of "lowercase letter," and a convention of using two spaces
after a period to separate sentences on the same line, it is specific to
English-language texts.



+-*/+-*/+-*/+-*/width d 限定行宽(默认:70)
+-*/+-*/+-*/+-*/replace_whitespace d tab之后的空白是否替换为单个空格
replace_whitespace
  如果expand_tabs设为False,replace_whitespace设为True,那只将tab替换为单个空格
+-*/+-*/+-*/+-*/break_on_hyphens d 
break_on_hyphens

(default: ``True``) If true, wrapping will occur preferably on whitespaces
and right after hyphens in compound words, as it is customary in English.
If false, only whitespaces will be considered as potentially good places
for line breaks, but you need to set :attr:`break_long_words` to false if
you want truly insecable words.  Default behaviour in previous versions
was to always allow breaking hyphenated words.



+-*/+-*/+-*/+-*/subsequent_indent d 非首行的缩进(默认:'')
+-*/+-*/+-*/+-*/wrap m 将长文本行按给定行宽分割成多行,返回行列表
wrap(text)
+-*/+-*/+-*/+-*/fill m  将长文本行按给定行宽分割成多行,返回字符串
fill(text)
+-*/+-*/zlib p deflate压缩或解压操作模块
+-*/+-*/+-*/compressobj f 创建压缩器对象(用于分次压缩)
compressobj([level])
  level: 1-9,1速度快,9压缩比大,默认6
+-*/+-*/+-*/+-*/copy m 
+-*/+-*/+-*/+-*/compress m 分次压缩
compress(data)
  返回的压缩字节字符串可能未包含所有结果，需使用flush来获取完整的结果
+-*/+-*/+-*/+-*/flush m 获取未获取的压缩结果
flush([mode])
  mode: 
    zlib.Z_FINISH     终止压缩标志
    zlib.Z_SYNC_FLUSH zlib.Z_FULL_FLUSH 还可继续分次压缩
      (主要用于部分出错时还可解压后面的)
+-*/+-*/+-*/decompressobj f 创建解压器对象(用于分次解压)
decompressobj([wbits])
+-*/+-*/+-*/+-*/unused_data d 
unused_data

A bytes object which contains any bytes past the end of the compressed data. That is,
this remains ``""`` until the last byte that contains compression data is
available.  If the whole bytestring turned out to contain compressed data, this is
``b""``, an empty bytes object.

The only way to determine where a bytestring of compressed data ends is by actually
decompressing it.  This means that when compressed data is contained part of a
larger file, you can only find the end of it by reading data and feeding it
followed by some non-empty bytestring into a decompression object's
:meth:`decompress` method until the :attr:`unused_data` attribute is no longer
empty.



+-*/+-*/+-*/+-*/unconsumed_tail d 
unconsumed_tail

A bytes object that contains any data that was not consumed by the last
:meth:`decompress` call because it exceeded the limit for the uncompressed data
buffer.  This data has not yet been seen by the zlib machinery, so you must feed
it (possibly with further data concatenated to it) back to a subsequent
:meth:`decompress` method call in order to get correct output.



+-*/+-*/+-*/+-*/copy m 
copy()

Returns a copy of the decompression object.  This can be used to save the state
of the decompressor midway through the data stream in order to speed up random
seeks into the stream at a future point.



+-*/+-*/+-*/+-*/decompress m 分次解压 
decompress(data[, max_length])
  返回的解压字节字符串可能未包含所有结果，需使用flush来获取完整的结果
  max_length: 设定最大返回数据大小，
+-*/+-*/+-*/+-*/flush m 获取所有未获取的数据
flush([length])
+-*/+-*/+-*/adler32 f Adler32校验
adler32(data[, value])
+-*/+-*/+-*/compress f 压缩
compress(data[, level])
  data: 字节字符串
  level: 1-9,1速度快,9压缩比大,默认6
  如果要使用http的deflate方式压缩应compress(data)[2:-4]
+-*/+-*/+-*/decompress f 解压
decompress(data[, wbits[, bufsize]])
  data: 字节字符串
  wbits:  窗口缓冲区大小
  bufsize:输出缓冲区大小
  如果要使用http的deflate方式解压应decompress(data,-15)
+-*/+-*/+-*/crc32 f 计算CRC校验
crc32(data[, value])
  value: 累计校验的值
  python2:  如果要用于和一般C程序产生的CRC比较时需作一下处理
    if returnvalue > 0: return "%x" % returnvalue
    else: return "%x" % (~returnvalue ^ 0xffffffff)
  python3: 无需如此
+-*/+-*/+-*/error e 解压或压缩错误 
+-*/+-*/hashlib p 哈希算法模块
+-*/+-*/+-*/md5 f 创建md5(128位16字节)计算器
+-*/+-*/+-*/sha1 f 创建SHA(160位20字节)计算器
+-*/+-*/+-*/sha224 f 创建SHA(224位28字节)计算器
+-*/+-*/+-*/sha256 f 创建SHA(256位32字节)计算器
+-*/+-*/+-*/sha384 f 创建SHA(384位48字节)计算器
+-*/+-*/+-*/sha512 f 创建SHA(512位64字节)计算器
+-*/+-*/+-*/new f 创建哈希计算器
new(name[, data])
  name:      哈希方法 'md5','sha1','sha224','sha256','sha384','sha512'
  data:      要加密(哈希计算)的字节字符串
+-*/+-*/+-*/+-*/block_size d 内部分块大小(通常为64字节)
+-*/+-*/+-*/+-*/digest_size d 哈希计算的结果长度
+-*/+-*/+-*/+-*/copy m 复制生成一个新的哈希计算器(用于有相同初始内容的数据)
+-*/+-*/+-*/+-*/update m 哈希计算(大数据可分段依序计算)
update(arg)
  arg:    要计算的数据字节字符串
+-*/+-*/+-*/+-*/digest m 获取哈希结果的字节字符串
+-*/+-*/+-*/+-*/hexdigest m 获取哈希结果的十六进制形式字符串
+-*/+-*/hmac p 签名密钥(HMAC)认证模块
HMAC常用于身份验证，通常的使用方式是:
服务端返回一随机串,客户端将此随机串作密钥用HMAC方式加密用户密码,传给服务端
服务端根据保存的用户密码和此随机串作同样的计算，比较结果是否一致来确定用户身份.
或者客户端生成随机串，
登录时将随机串和以用户密码为密钥用HMAC加密随机串的结果一起传给服务端
服务端用同方式核算来验证用户身份的合法性
+-*/+-*/+-*/new f 创建HMAC认证计算器
new(key, msg=None, digestmod=None)
  key:        密钥字节字符串
  digestmod:  哈希计算器,默认为hashlib.md5(通常有时需要时可设为hashlib.sha1)
  msg:        要加密的数据字节字符串
+-*/+-*/+-*/+-*/copy m 复制生成一个新的认证计算器(用于有相同初始内容的数据)
+-*/+-*/+-*/+-*/update m 加密数据(大数据可分段依序计算)
update(msg)
  msg:    要加密的字节字符串
+-*/+-*/+-*/+-*/digest m 获取加密结果散列值的字节字符串
+-*/+-*/+-*/+-*/hexdigest m 获取加密结果散列值的十六进制形式字符串
通常用于email等文本传输方式
+-*/+-*/base64 p base64(二进制<->文本)编码模块
+-*/+-*/+-*/b16decode f 使用base16(十六进制)对数据进行解码,返回字节字符串
b16decode(s, casefold=False)
  s:         数据字节字符串
  casefold:  默认为False只能接受大写字母，设为True则忽略大小写
+-*/+-*/+-*/standard_b64decode f 使用标准base64对数据进行解码,返回字节字符串
standard_b64decode(s)
  s:         数据字节字符串
base64编码字符串包含[a-zA-Z0-9]和'+/'以及尾部长度不足时填充'=',其长度为3的倍数
+-*/+-*/+-*/decodestring f 对base64编码的分行数据解码，返回字节字符串(python2)
decodestring(s)
  s:         分行的base64编码数据字节字符串
+-*/+-*/+-*/encodebytes f 使用base64对数据进行编码并分行,返回字节字符串(python3)
encodebytes(s)
  s:         数据字节字符串
返回的结果按76字节分块分行，结尾总是'\n'
+-*/+-*/+-*/b32decode f 使用base32对数据进行解码,返回字节字符串
b32decode(s, casefold=False, map01=None)
  s:         数据字节字符串
  casefold:  默认为False只能接受大写字母，设为True则忽略大小写
  map01:     'I'或'L'或None,非None时'0'将映射到'O','1'将映射到map01
+-*/+-*/+-*/standard_b64encode f 使用标准base64对数据进行编码,返回字节字符串
standard_b64encode(s)
  s:         数据字节字符串
base64编码字符串包含[a-zA-Z0-9]和'+/'以及尾部长度不足时填充'=',其长度为3的倍数
+-*/+-*/+-*/decodebytes f 对base64编码的分行数据解码，返回字节字符串(python3)
decodebytes(s)
  s:         分行的base64编码数据字节字符串
+-*/+-*/+-*/encode f 编码base64数据文件
encode(input, output)
  input:   源数据文件对象(read返回的须是字节字符串)(或文件名)
  output:  编码后保存结果的二进制模式文件对象(或文件名)
  编码结尾会附加一个'\n'字节
+-*/+-*/+-*/urlsafe_b64encode f 使用base64对url数据进行编码,返回字节字符串
urlsafe_b64encode(s)
  s:         数据字节字符串
此函数用'-_'替代'+/'，产生的字符包含[a-zA-Z0-9]和'+/'以及尾部长度不足时填充'='
+-*/+-*/+-*/b64encode f 使用base64对数据进行编码,返回字节字符串
b64encode(s, altchars=None)
  s:         数据字节字符串
  altchars:  两个字节的字节字符串,用于代替'+/'(常用于文件名等不能带'+/'等情况)
base64编码字符串包含[a-zA-Z0-9]和'+/'以及尾部长度不足时填充'=',其长度为3的倍数
+-*/+-*/+-*/urlsafe_b64decode f 使用base64对url数据进行解码,返回字节字符串
urlsafe_b64decode(s)
  s:         数据字节字符串
  这里'-_'将替代标准base64里的'+/'
+-*/+-*/+-*/b32encode f 使用base32对数据进行编码,返回字节字符串
b32encode(s)
  s:         数据字节字符串
base32编码字符串包含[A-Z2-7]和尾部长度不足时填充的'=',其长度为5的倍数
+-*/+-*/+-*/b16encode f 使用base16(十六进制)对数据进行编码,返回字节字符串
b16encode(s)
  s:         数据字节字符串
base16编码字符串包含[A-F0-9],其长度为2的倍数
+-*/+-*/+-*/b64decode f 使用base64对数据进行解码,返回字节字符串
b64decode(s, altchars=None, validate=False)
  s:         数据字节字符串
  altchars:  两个字节的字节字符串,用于代替'+/'
  validate:  默认为False,遇到非base64编码字符自动丢弃，
             如设为True,遇到非[a-zA-Z0-9]和'+/'则报binascii.Error
+-*/+-*/+-*/encodestring f 使用base64对数据编码并分行,返回字节字符串(python2)
encodestring(s)
  s:         数据字节字符串
返回的结果按76字节分块分行，结尾总是'\n'
+-*/+-*/+-*/decode f 解码base64数据文件
decode(input, output)
  input:   源数据文件对象(read返回的须是字节字符串)(或文件名)
  output:  解码后保存结果的二进制模式文件对象(或文件名)
+-*/+-*/binascii p ascii文本<->二进制数据转换模块
+-*/+-*/+-*/a2b_uu f 转换uuencode编码的ascii文本行还原为二进制字节字符串
a2b_uu(string)
  string:   字节字符串,一般行长61，头字节为'M'，结尾可带'\n'
            结尾行长度不定，不长于61(有时不足61会用空格填充)
+-*/+-*/+-*/a2b_hqx f 
a2b_hqx(string)

Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression.
The string should contain a complete number of binary bytes, or (in case of the
last portion of the binhex4 data) have the remaining bits zero.



+-*/+-*/+-*/unhexlify f 转换十六进制编码的ascii文本还原为二进制字节字符串
unhexlify(hexstr)
  hexstr:  字节字符串，不区分大小写
+-*/+-*/+-*/crc_hqx f 
crc_hqx(data, crc)

Compute the binhex4 crc value of *data*, starting with an initial *crc* and
returning the result.



+-*/+-*/+-*/a2b_qp f 转换qp可打印编码的字节字符串还原为二进制字节字符串
a2b_qp(string, header=False)
  string:   字节字符串
  header:   如为True则解码时将'_'解码为空格
+-*/+-*/+-*/a2b_base64 f 转换base64编码的ascii文本还原为二进制字节字符串
a2b_base64(string)
  string:   字节字符串,可以是多行的
+-*/+-*/+-*/b2a_qp f 转换二进制数据为qp可打印多行字节字符串
b2a_qp(data, quotetabs=False, istext=True, header=False)
  data:       字节字符串
  quotetabs:  是否编码空格或tab
  istext:     默认为True,不对'\r''\n'编码
  header:     是否编码下划线
+-*/+-*/+-*/rlecode_hqx f 
rlecode_hqx(data)

Perform binhex4 style RLE-compression on *data* and return the result.



+-*/+-*/+-*/b2a_uu f 转换二进制数据为uuencode编码的ascii文本行(字节字符串)
b2a_uu(data)
  data:   长度不能超过45的字节字符串
  返回的ascii文本长度为62，包括标识长度的头字节和'\n'，不足时会在'\n'前填充空格
+-*/+-*/+-*/hexlify f 转换二进制数据为十六进制编码的ascii文本(字节字符串)
hexlify(data)
  data:   数据字节字符串
  返回的是小写十六进制编码的文本
+-*/+-*/+-*/crc32 f 计算CRC校验
crc32(data[, crc])
  crc: 累计校验的值
  python2:  如果要用于和一般C程序产生的CRC比较时需作一下处理
    if returnvalue > 0: return "%x" % returnvalue
    else: return "%x" % (~returnvalue ^ 0xffffffff)
  python3: 无需如此
+-*/+-*/+-*/b2a_hex f 转换二进制数据为十六进制编码的ascii文本(字节字符串)
b2a_hex(data)
  data:   数据字节字符串
  返回的是小写十六进制编码的文本
+-*/+-*/+-*/rledecode_hqx f 
rledecode_hqx(data)

Perform RLE-decompression on the data, as per the binhex4 standard. The
algorithm uses ``0x90`` after a byte as a repeat indicator, followed by a count.
A count of ``0`` specifies a byte value of ``0x90``. The routine returns the
decompressed data, unless data input data ends in an orphaned repeat indicator,
in which case the :exc:`Incomplete` exception is raised.

.. versionchanged:: 3.2
   Accept only bytestring or bytearray objects as input.



+-*/+-*/+-*/a2b_hex f 转换十六进制编码的ascii文本还原为二进制字节字符串
a2b_hex(hexstr)
  hexstr:  字节字符串，不区分大小写
+-*/+-*/+-*/b2a_hqx f 
b2a_hqx(data)

Perform hexbin4 binary-to-ASCII translation and return the resulting string. The
argument should already be RLE-coded, and have a length divisible by 3 (except
possibly the last fragment).



+-*/+-*/+-*/b2a_base64 f 转换二进制数据为base64编码的一行ascii文本(字节字符串)
b2a_base64(data)
  data:   数据字节字符串
  返回结果尾部带'\n'
+-*/+-*/+-*/Error e 
Error

Exception raised on errors. These are usually programming errors.



+-*/+-*/+-*/Incomplete e 
Incomplete

Exception raised on incomplete data. These are usually not programming errors,
but may be handled by reading a little more data and trying again.



+-*/+-*/quopri p qp可打印字符编码模块
+-*/+-*/+-*/decode f qp解码文件
decode(input, output, header=False)
  input:      带有readline方法的字节文件对象
  output:     可写的字节文件对象
  header:     如为True则解码时将'_'解码为空格
+-*/+-*/+-*/encode f qp编码文件
encode(input, output, quotetabs, header=False)
  input:      带有readline方法的字节文件对象
  output:     可写的字节文件对象
  quotetabs:  是否编码空格或tab
  header:     是否编码下划线
+-*/+-*/+-*/decodestring f 返回qp解码的字节字符串
decodestring(s, header=False)
  header:   如为True则解码时将'_'解码为空格
+-*/+-*/+-*/encodestring f 生成qp方式编码的字节字符串
encodestring(s, quotetabs=False, header=False)
  s:          字节字符串
  quotetabs:  是否编码空格或tab
  header:     是否编码下划线
+-*/+-*/uu p uu编码(带文件权限)模块
+-*/+-*/+-*/encode f 用uu方式编码文件
encode(in_file, out_file, name=None, mode=None)
  in_file:    需编码的文件名
  out_file:   转码后生成的文件名
  name:       档案名,默认由in_file获得或'-'
  mode:       文件权限,默认由in_file获得或0o666
+-*/+-*/+-*/decode f 对uu编码的文件进行解码
decode(in_file, out_file=None, mode=None, quiet=False)
  in_file:    需解码的文件名
  out_file:   转码后生成的文件名
  mode:       文件权限,默认由in_file解码获得
  quiet:      默认为False不产生错误信息
+-*/+-*/+-*/Error e uu编码异常
+-*/类型 _ 
+-*/+-*/types p 内置类型模块
types模块定义了与函数、模块、生成器、栈桢等程序元素相关的内置类型。
该模块通常与isinstance()函数一起使用
+-*/+-*/+-*/BuiltinMethodType t 内置类方法类型
+-*/+-*/+-*/GetSetDescriptorType t getset定义的对象成员属性类型
+-*/+-*/+-*/BuiltinFunctionType t 内置函数类型
+-*/+-*/+-*/MemberDescriptorType t 经过修饰的类成员属性类型
+-*/+-*/+-*/CodeType t 代码对象类型,通常由compile产生
CodeType(argcount,nlocals,stacksize,flags,codestring,constants,names,
    varnames,filename,name,firstlineno,lnotab[,freevars[,cellvars]])
+-*/+-*/+-*/+-*/co_name d 函数名称
+-*/+-*/+-*/+-*/co_argcount d 位置参数个数（包括默认值）,不包括*和**
+-*/+-*/+-*/+-*/co_nlocals d 函数使用的局部变量个数
+-*/+-*/+-*/+-*/co_varnames d 包含局部变量名称的元组
+-*/+-*/+-*/+-*/co_cellvars d 包含嵌套函数所引用的变量名称元组
+-*/+-*/+-*/+-*/co_freevars d 包含嵌套函数所用的自由变量名称元组
+-*/+-*/+-*/+-*/co_code d 原始字节码字符串
+-*/+-*/+-*/+-*/co_consts d 包含字节码所用字面量的元组
+-*/+-*/+-*/+-*/co_names d 包含字节码所用名称元组
+-*/+-*/+-*/+-*/co_filename d 代码文件名称
+-*/+-*/+-*/+-*/co_firstlineno d 函数首行行号
+-*/+-*/+-*/+-*/co_lnotab d 字符串编码字节码相对于行号的偏移
+-*/+-*/+-*/+-*/co_stacksize d 所需的栈大小（包括局部变量）
+-*/+-*/+-*/+-*/co_flags d 解释器标志的数字
co_flags
0x4 表示有*参数
0x8 表示有**参数
0x20 是生成器函数
+-*/+-*/+-*/MethodType t  用户定义的类方法类型
MethodType(function,instance,class)
+-*/+-*/+-*/+-*/im_func d 方法里的实际函数
+-*/+-*/+-*/+-*/im_self d 方法直接绑定的对象，可能是类或实例
+-*/+-*/+-*/+-*/im_class d 方法实际实现所对应的类或实例
对于继承的方法可用此找到实际定义的类
+-*/+-*/+-*/GeneratorType t 生成器-迭代器对象类型
+-*/+-*/+-*/+-*/next m 获取下一个迭代
+-*/+-*/+-*/+-*/close m 关闭停止迭代
+-*/+-*/+-*/+-*/throw m 在生成器内部抛出一个异常
throw(type,value=None,traceback=None)
+-*/+-*/+-*/+-*/send m 传入数据并获取下一个迭代
send(value)
  next()  相当于send(None)
  对于用(yield)的生成器来说，一般第一步都要先send(None)或next()
+-*/+-*/+-*/+-*/gi_code d 生成器的code对象
+-*/+-*/+-*/+-*/gi_frame d 生成器的frame对象
+-*/+-*/+-*/+-*/gi_running d 生成器是否在执行
生成器在yield后执行下一个yield前时gi_running的值为0
+-*/+-*/+-*/LambdaType t 由lambda生成的函数类型
+-*/+-*/+-*/FunctionType t 用户定义的函数或lambda的函数 
+-*/+-*/+-*/+-*/func_code d   函数对应的code对象
+-*/+-*/+-*/+-*/func_defaults d   函数的默认参数的默认值元组
+-*/+-*/+-*/+-*/func_globals d   函数的全局命名空间
+-*/+-*/+-*/+-*/func_closure d   闭包函数所引用外包函数的变量cell元组
+-*/+-*/+-*/ModuleType t 模块类型 
ModuleType(name,[,doc])
+-*/+-*/+-*/FrameType t 栈桢对象类型
+-*/+-*/+-*/+-*/f_back  d 调用栈的前一桢
+-*/+-*/+-*/+-*/f_code d 栈桢所对应的code对象
+-*/+-*/+-*/+-*/f_locals d 栈桢的局部环境
+-*/+-*/+-*/+-*/f_globals d 栈桢的全局环境
+-*/+-*/+-*/TracebackType t 追踪对象类型(出现异常时用于回朔的对象) 
+-*/+-*/+-*/+-*/tb_next d 追踪的下一个追踪对象
+-*/+-*/+-*/+-*/tb_frame d 当前追踪对应的栈桢
+-*/+-*/+-*/+-*/tb_lineno d 当前追踪的行号
+-*/+-*/time p 时间模块(主要处理秒数浮点数和格式化)
秒数浮点数表示的是从1970开始记的秒数
      ┌-------<<-----datetime.date  datetime.datetime ->--┬-<--datetime.time
      │                            Y                      │
    ctime                      timetuple                strftime
      │                            V                      │
标准时间字符串 <--asctime--  struct_time  ---strftime--> 自定义格式字符串 
      ^           ┌──>─┘  ^     \  └--<--strptime----┘   
     │           │           |      \
     │      localtime       gmtime    mktime       
     │           │           |       │ 
     └-ctime---<-┴---------秒数----<-┘
+-*/+-*/+-*/tzset f 重置时区设置(unix)
tzset()
   >>> os.environ['TZ'] = 'US/Eastern'
   >>> time.tzset()
   >>> time.tzname
   ('EST', 'EDT')
   >>> os.environ['TZ'] = 'Egypt'
   >>> time.tzset()
   >>> time.tzname
   ('EET', 'EEST')
+-*/+-*/+-*/ctime f 将秒数浮点数装为默认格式的字符串
ctime([secs])
  secs: 如未给出则用当前的本地时间
+-*/+-*/+-*/clock f 返回当前CPU时间浮点数
+-*/+-*/+-*/time f 返回当前世界时时间秒数浮点数 
+-*/+-*/+-*/strptime f 由字符串解析时间返回struct_time时间对像
strptime(string[, format])
  format: 默认为'%a %b %d %H:%M:%S %Y'
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天为首）          | 32                |
  | %W | 星期（星期一为首）          | 32                |
+-*/+-*/+-*/gmtime f 由秒数形式的世界时时间转为struct_time时间对象
gmtime([secs])
  secs: 如未给出则用当前的世界时时间
+-*/+-*/+-*/mktime f 将struct_time时间对象转为秒数浮点数形式
mktime(t)
  t是struct_time对象,如果年份小于1970会报错
+-*/+-*/+-*/sleep f 进程睡眠一段时间
sleep(secs)
  secs: 秒数浮点数
+-*/+-*/+-*/asctime f 将struct_time时间对象装为默认格式的字符串 
asctime([t])
  t未给出则用当前的本地时间
+-*/+-*/+-*/strftime f 格式化struct_time时间对象为字符串
strftime(format[, t])
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天为首）          | 32                |
  | %W | 星期（星期一为首）          | 32                |
+-*/+-*/+-*/localtime f 由秒数形式的本地时间转为struct_time时间对象
localtime([secs])
  secs: 如未给出则用当前的本地时间
+-*/+-*/+-*/timezone d 本地时区(与世界时所差的秒数,东半球为负数)
+-*/+-*/+-*/daylight d 如果有设夏令时此值非0
+-*/+-*/+-*/altzone d 夏令时期间使用的时区(与世界时所差的秒数,东半球为负数)
+-*/+-*/+-*/accept2dyear d 是否接受两位年份 
accept2dyear
  如果为True,两位年份将映射到1969--2068这个范围
+-*/+-*/+-*/tzname d (本地时区名称,夏令时时区名称)二元组
+-*/+-*/+-*/struct_time c 不可变时间对象
+-*/+-*/+-*/+-*/tm_year d 4位年
+-*/+-*/+-*/+-*/tm_mon d 月[1, 12] 
+-*/+-*/+-*/+-*/tm_mday d 日[1, 31]
+-*/+-*/+-*/+-*/tm_hour d 小时[0, 23]
+-*/+-*/+-*/+-*/tm_min d 分钟[0, 59]
+-*/+-*/+-*/+-*/tm_sec d 秒[0, 60](60为闰秒)
+-*/+-*/+-*/+-*/tm_wday d  星期几[0, 6]星期天为0
+-*/+-*/+-*/+-*/tm_yday d 年内的第几天[1, 366]
+-*/+-*/+-*/+-*/tm_isdst d 1夏令时0非夏令时-1未知
+-*/+-*/abc p 抽象基类定义模块
+-*/+-*/+-*/abstractmethod f 定义抽象基类的抽象方法的装饰器
  抽象基类不实现只定义,继承子类必须实现才可创建实例对象
   class C(metaclass=ABCMeta):
       @abstractmethod
       def my_abstract_method(self,..):
+-*/+-*/+-*/abstractproperty f 定义抽象基类的抽象属性的装饰器
abstractproperty(fget=None, fset=None, fdel=None, doc=None)
  类似property,抽象基类不实现只定义,继承子类必须实现才可创建实例对象
   class C(metaclass=ABCMeta):
       @abstractproperty
       def my_abstract_property(self): #read only
           ...
   class C(metaclass=ABCMeta):
       def getx(self): ...
       def setx(self, value): ...
       x = abstractproperty(getx, setx)
+-*/+-*/+-*/ABCMeta t 抽象元类(辅助定义自定义抽象基类) 
ABCMeta
   python2:
     class C:
       __metaclass__=abc.ABCMeta
   python3:
     class C(metaclass=abc.ABCMeta):
+-*/+-*/+-*/+-*/__subclasshook__ M 检查是否是子类(类方法)
__subclasshook__(cls,subclass)
  返回True,False或NotImplemented
+-*/+-*/+-*/+-*/register M 注册某类型为子类
register(subclass)
  class MyABC(metaclass=ABCMeta):
      pass
  MyABC.register(tuple)
  isinstance((1,),MyABC)  #True
+-*/+-*/array p 单一类型数组模块
+-*/+-*/+-*/typecodes d python3:array所允许的类型编码
+-*/+-*/+-*/array c 单类型数组类型
array(typecode[, initializer])
  typecode:
             C类型    字节数
    'c'       char       1      python2字符
    'b'    signed char   1      
    'B'   unsigned char  1
    'u'    PY_UNICODE   2,4 
    'h'      short       2
    'H'  unsigned short  2
    'i'       int       4,8 
    'I'   unsigned int  4,8 
    'l'       long      4,8 
    'L'  unsigned long  4,8 
    'f'      float       4
    'd'      double      8
  initializer:  初始值,使用fromxxx来初始化列表里的数据
  可使用+=或*=操作
+-*/+-*/+-*/+-*/itemsize d 元素的字节大小
+-*/+-*/+-*/+-*/typecode d 类型符号
typecode
             C类型    字节数
    'c'       char       1      python2字符
    'b'    signed char   1      
    'B'   unsigned char  1
    'u'    PY_UNICODE   2,4 
    'h'      short       2
    'H'  unsigned short  2
    'i'       int       4,8 
    'I'   unsigned int  4,8 
    'l'       long      4,8 
    'L'  unsigned long  4,8 
    'f'      float       4
    'd'      double      8
+-*/+-*/+-*/+-*/frombytes m 由bytes获取数据追加到列表尾部
frombytes(s)  python3.2
+-*/+-*/+-*/+-*/insert m 在索引位置i插入x元素
insert(i, x)
+-*/+-*/+-*/+-*/fromlist m 将某列表里的元素追加到尾部
fromlist(list)
+-*/+-*/+-*/+-*/count m 统计列表里某元素的出现次数 
count(x)
+-*/+-*/+-*/+-*/reverse m 反转倒序列表里的元素
+-*/+-*/+-*/+-*/extend m 附加序列到列表尾部
extend(iterable)
+-*/+-*/+-*/+-*/index m 返回x在列表里首次出现的位置，未找到则报错
index(x)
+-*/+-*/+-*/+-*/fromstring m 从字符串里获取数据追加到尾部
+-*/+-*/+-*/+-*/byteswap m 数组里所有元素切换字节序，不支持unicode类型
+-*/+-*/+-*/+-*/buffer_info m 返回数组的内存地址和大小 
buffer_info()
  返回(address,length)
+-*/+-*/+-*/+-*/remove m 从列表里移除第一个出现的x元素,如不存在则报错
remove(x)
+-*/+-*/+-*/+-*/tolist m 转换单类型数组为列表
+-*/+-*/+-*/+-*/tofile m 导出数据到文件对象
tofile(f)
+-*/+-*/+-*/+-*/write m 导出数据到文件对象
write(f)
+-*/+-*/+-*/+-*/tostring m 导出数据为字符串 
+-*/+-*/+-*/+-*/pop m 删除位置i上的元素并将其返回
pop([i])
   i默认是最后一个,如位置i不存在就将i作为最后一项处理
+-*/+-*/+-*/+-*/tobytes m 导出数据到二进制字符串
+-*/+-*/+-*/+-*/fromfile m 从文件对象里获取数据追加到尾部
fromfile(f, n)
  f 文件对象 n 获取的元素数目
+-*/+-*/+-*/+-*/read m 从文件对象里获取数据追加到尾部
read(f, n)
  f 文件对象 n 获取的元素数目
+-*/+-*/+-*/+-*/fromunicode m 从unicode字符串获取数据，只适合unicode类型数组
fromunicode(s)
+-*/+-*/+-*/+-*/append m 追加一项到列表尾部
+-*/+-*/+-*/+-*/tounicode m 导出数据为unicode字符串，只适合unicode类型数组
+-*/+-*/calendar p 日历模块
+-*/+-*/+-*/monthrange f 返回月份的(第一天星期几0为星期天,天数)二元组
monthrange(year, month)
+-*/+-*/+-*/prmonth f 
prmonth(theyear, themonth, w=0, l=0)

Prints a month's calendar as returned by :func:`month`.



+-*/+-*/+-*/isleap f 检测是否是闰年
isleap(year)
+-*/+-*/+-*/weekheader f 
weekheader(n)

Return a header containing abbreviated weekday names. *n* specifies the width in
characters for one weekday.



+-*/+-*/+-*/monthcalendar f 
monthcalendar(year, month)

Returns a matrix representing a month's calendar.  Each row represents a week;
days outside of the month a represented by zeros. Each week begins with Monday
unless set by :func:`setfirstweekday`.



+-*/+-*/+-*/month f 
month(theyear, themonth, w=0, l=0)

Returns a month's calendar in a multi-line string using the :meth:`formatmonth`
of the :class:`TextCalendar` class.



+-*/+-*/+-*/timegm f 
timegm(tuple)

An unrelated but handy function that takes a time tuple such as returned by the
:func:`gmtime` function in the :mod:`time` module, and returns the corresponding
Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding.  In
fact, :func:`time.gmtime` and :func:`timegm` are each others' inverse.



+-*/+-*/+-*/prcal f 
prcal(year, w=0, l=0, c=6, m=3)

Prints the calendar for an entire year as returned by  :func:`calendar`.



+-*/+-*/+-*/weekday f 返回日期所对应的星期几(0为星期天)
weekday(year, month, day)
+-*/+-*/+-*/calendar f 返回年日历的字符串
calendar(year, w=2, l=1, c=6, m=3)
  year:  年份
  w:     日期的宽度
  l:     星期的行数
  c:     间隔的宽度
  m:     一排几个月份
+-*/+-*/+-*/leapdays f 返回[y1,y2)年范围内闰年的数量
leapdays(y1, y2)
+-*/+-*/+-*/firstweekday f 返回当前设置的日历行开头星期几,默认为0(星期一)
+-*/+-*/+-*/setfirstweekday f 设置日历行开头星期几[0-6],默认为0(星期一)
setfirstweekday(weekday)
+-*/+-*/+-*/day_abbr d 
day_abbr

An array that represents the abbreviated days of the week in the current locale.



+-*/+-*/+-*/month_name d 
month_name

An array that represents the months of the year in the current locale.  This
follows normal convention of January being month number 1, so it has a length of
13 and  ``month_name[0]`` is the empty string.



+-*/+-*/+-*/day_name d 
day_name

An array that represents the days of the week in the current locale.



+-*/+-*/+-*/month_abbr d 
month_abbr

An array that represents the abbreviated months of the year in the current
locale.  This follows normal convention of January being month number 1, so it
has a length of 13 and  ``month_abbr[0]`` is the empty string.



+-*/+-*/+-*/HTMLCalendar c 
HTMLCalendar(firstweekday=0)

This class can be used to generate HTML calendars.


:class:`HTMLCalendar` instances have the following methods:


+-*/+-*/+-*/+-*/formatyear m 
formatyear(theyear, width=3)

Return a year's calendar as an HTML table. *width* (defaulting to 3)
specifies the number of months per row.



+-*/+-*/+-*/+-*/formatyearpage m 
formatyearpage(theyear, width=3, css='calendar.css', encoding=None)

Return a year's calendar as a complete HTML page. *width* (defaulting to
3) specifies the number of months per row. *css* is the name for the
cascading style sheet to be used. :const:`None` can be passed if no style
sheet should be used. *encoding* specifies the encoding to be used for the
output (defaulting to the system default encoding).




+-*/+-*/+-*/+-*/formatmonth m 
formatmonth(theyear, themonth, withyear=True)

Return a month's calendar as an HTML table. If *withyear* is true the year
will be included in the header, otherwise just the month name will be
used.



+-*/+-*/+-*/Calendar c 
Calendar(firstweekday=0)

Creates a :class:`Calendar` object. *firstweekday* is an integer specifying the
first day of the week. ``0`` is Monday (the default), ``6`` is Sunday.

A :class:`Calendar` object provides several methods that can be used for
preparing the calendar data for formatting. This class doesn't do any formatting
itself. This is the job of subclasses.


:class:`Calendar` instances have the following methods:


+-*/+-*/+-*/+-*/itermonthdates m 
itermonthdates(year, month)

Return an iterator for the month *month* (1-12) in the year *year*. This
iterator will return all days (as :class:`datetime.date` objects) for the
month and all days before the start of the month or after the end of the
month that are required to get a complete week.



+-*/+-*/+-*/+-*/yeardayscalendar m 
yeardayscalendar(year, width=3)

Return the data for the specified year ready for formatting (similar to
:meth:`yeardatescalendar`). Entries in the week lists are day numbers. Day
numbers outside this month are zero.




+-*/+-*/+-*/+-*/monthdayscalendar m 
monthdayscalendar(year, month)

Return a list of the weeks in the month *month* of the *year* as full
weeks.  Weeks are lists of seven day numbers.



+-*/+-*/+-*/+-*/yeardatescalendar m 
yeardatescalendar(year, width=3)

Return the data for the specified year ready for formatting. The return
value is a list of month rows. Each month row contains up to *width*
months (defaulting to 3). Each month contains between 4 and 6 weeks and
each week contains 1--7 days. Days are :class:`datetime.date` objects.



+-*/+-*/+-*/+-*/monthdays2calendar m 
monthdays2calendar(year, month)

Return a list of the weeks in the month *month* of the *year* as full
weeks.  Weeks are lists of seven tuples of day numbers and weekday
numbers.



+-*/+-*/+-*/+-*/monthdatescalendar m 
monthdatescalendar(year, month)

Return a list of the weeks in the month *month* of the *year* as full
weeks.  Weeks are lists of seven :class:`datetime.date` objects.



+-*/+-*/+-*/+-*/yeardays2calendar m 
yeardays2calendar(year, width=3)

Return the data for the specified year ready for formatting (similar to
:meth:`yeardatescalendar`). Entries in the week lists are tuples of day
numbers and weekday numbers. Day numbers outside this month are zero.



+-*/+-*/+-*/+-*/itermonthdays2 m 
itermonthdays2(year, month)

Return an iterator for the month *month* in the year *year* similar to
:meth:`itermonthdates`. Days returned will be tuples consisting of a day
number and a week day number.



+-*/+-*/+-*/+-*/itermonthdays m 
itermonthdays(year, month)

Return an iterator for the month *month* in the year *year* similar to
:meth:`itermonthdates`. Days returned will simply be day numbers.



+-*/+-*/+-*/+-*/iterweekdays m 
iterweekdays()

Return an iterator for the week day numbers that will be used for one
week.  The first value from the iterator will be the same as the value of
the :attr:`firstweekday` property.



+-*/+-*/+-*/LocaleTextCalendar c 
LocaleTextCalendar(firstweekday=0, locale=None)

This subclass of :class:`TextCalendar` can be passed a locale name in the
constructor and will return month and weekday names in the specified locale.
If this locale includes an encoding all strings containing month and weekday
names will be returned as unicode.



+-*/+-*/+-*/LocaleHTMLCalendar c 
LocaleHTMLCalendar(firstweekday=0, locale=None)

This subclass of :class:`HTMLCalendar` can be passed a locale name in the
constructor and will return month and weekday names in the specified
locale. If this locale includes an encoding all strings containing month and
weekday names will be returned as unicode.


+-*/+-*/+-*/TextCalendar c 
TextCalendar(firstweekday=0)

This class can be used to generate plain text calendars.

:class:`TextCalendar` instances have the following methods:


+-*/+-*/+-*/+-*/formatyear m 
formatyear(theyear, w=2, l=1, c=6, m=3)

Return a *m*-column calendar for an entire year as a multi-line string.
Optional parameters *w*, *l*, and *c* are for date column width, lines per
week, and number of spaces between month columns, respectively. Depends on
the first weekday as specified in the constructor or set by the
:meth:`setfirstweekday` method.  The earliest year for which a calendar
can be generated is platform-dependent.



+-*/+-*/+-*/+-*/pryear m 
pryear(theyear, w=2, l=1, c=6, m=3)

Print the calendar for an entire year as returned by :meth:`formatyear`.




+-*/+-*/+-*/+-*/formatmonth m 
formatmonth(theyear, themonth, w=0, l=0)

Return a month's calendar in a multi-line string. If *w* is provided, it
specifies the width of the date columns, which are centered. If *l* is
given, it specifies the number of lines that each week will use. Depends
on the first weekday as specified in the constructor or set by the
:meth:`setfirstweekday` method.



+-*/+-*/+-*/+-*/prmonth m 
prmonth(theyear, themonth, w=0, l=0)

Print a month's calendar as returned by :meth:`formatmonth`.



+-*/+-*/collections p 容器模块
定义一些容器类型的基类，除了作用户自定义类型的基类，
还可用isinstance来检测对象所具有的功能
+-*/+-*/+-*/namedtuple f 创建一个命名元组类型
namedtuple(typename, field_names, verbose=False, rename=False)
  typename:   创建的命名元组类型的名称
  field_names:元组里各项元素的名称列表，不能以'_'开头
              或者是名称被空白(也可是',')分割字符串
  verbose:    如为True将显示此类型的实现代码
  point=namedtuple('point',['x','y'])
  a=point(3,4)
  print a.x,a.y
  创建的类型是tuple的子类，缺点是元组长度被固定
+-*/+-*/+-*/Hashable t 可被hash(当作键值)对象类型的基类
+-*/+-*/+-*/+-*/__hash__ m
+-*/+-*/+-*/OrderedDict c 有序字典(顺序以插入前后计)
OrderedDict([items])
  在使用in操作或keys,items等操作时，将按插入顺序进行操作
+-*/+-*/+-*/+-*/move_to_end m 移动元素到末尾或开头
move_to_end(key, last=True)
  key:  要移动的键值
  last: 为True则移动到末尾，为False则移动到开头
    >>> d = OrderedDict.fromkeys('abcde')
    >>> d.move_to_end('b')
    >>> ''.join(d.keys())
    'acdeb'
    >>> d.move_to_end('b', last=False)
    >>> ''.join(d.keys())
    'bacde'
+-*/+-*/+-*/+-*/popitem m 移除最后插入(或最先插入)的元素并返回(键,值)二元组
popitem(last=True)
  last: 为True则移除最后插入的元素，为False则移除最先插入的元素
+-*/+-*/+-*/KeysView t 
继承自MappingView和Set
TODO:
KeysView

ABCs for mapping, items, keys, and values :term:`views <view>`.



+-*/+-*/+-*/Container t 容器类型的基类
+-*/+-*/+-*/+-*/__contains__ m
+-*/+-*/+-*/Mapping t 支持键值查找的类型基类
继承自Sized,Iterable,Container
+-*/+-*/+-*/+-*/__getitem__ m
+-*/+-*/+-*/+-*/__len__ m
+-*/+-*/+-*/+-*/__iter__ m
+-*/+-*/+-*/+-*/__contains__ m 默认实现
+-*/+-*/+-*/+-*/keys m 默认实现
+-*/+-*/+-*/+-*/items m 默认实现
+-*/+-*/+-*/+-*/values m 默认实现
+-*/+-*/+-*/+-*/get m 默认实现
+-*/+-*/+-*/+-*/__eq__ m 默认实现
+-*/+-*/+-*/+-*/__ne__ m 默认实现
+-*/+-*/+-*/+-*/MutableMapping t 可变可键值查找的类型基类 
+-*/+-*/+-*/+-*/+-*/__setitem__ m
+-*/+-*/+-*/+-*/+-*/__delitem__ m
+-*/+-*/+-*/+-*/+-*/pop m 默认实现
+-*/+-*/+-*/+-*/+-*/popitem m 默认实现
+-*/+-*/+-*/+-*/+-*/clear m 默认实现
+-*/+-*/+-*/+-*/+-*/update m 默认实现
+-*/+-*/+-*/+-*/+-*/setdefault m 默认实现
+-*/+-*/+-*/Callable t 可被调用的对象类型基类
+-*/+-*/+-*/+-*/__call__ m
+-*/+-*/+-*/UserList c 
TODO:
UserList([list])

Class that simulates a list.  The instance's contents are kept in a regular
list, which is accessible via the :attr:`data` attribute of :class:`UserList`
instances.  The instance's contents are initially set to a copy of *list*,
defaulting to the empty list ``[]``.  *list* can be any iterable, for
example a real Python list or a :class:`UserList` object.

In addition to supporting the methods and operations of mutable sequences,
:class:`UserList` instances provide the following attribute:

.. attribute:: data

   A real :class:`list` object used to store the contents of the
   :class:`UserList` class.


+-*/+-*/+-*/UserString c 
TODO:
UserString([sequence])

Class that simulates a string or a Unicode string object.  The instance's
content is kept in a regular string object, which is accessible via the
:attr:`data` attribute of :class:`UserString` instances.  The instance's
contents are initially set to a copy of *sequence*.  The *sequence* can
be an instance of :class:`bytes`, :class:`str`, :class:`UserString` (or a
subclass) or an arbitrary sequence which can be converted into a string using
the built-in :func:`str` function.


+-*/+-*/+-*/MappingView t 
TODO:
MappingView

ABCs for mapping, items, keys, and values :term:`views <view>`.



+-*/+-*/+-*/defaultdict c 预设默认值的字典
defaultdict([default_factory[, ...]])
  default_factory  默认值生成函数，如list,lambda :'default value'等
  可以附加初始值，如defaultdict(list,one=[1])等
  其它操作同dict
+-*/+-*/+-*/+-*/default_factory d 默认值的生成器(自定义子类需设定)
+-*/+-*/+-*/+-*/__missing__ m defaultdict未找到key时的默认动作
__missing__(key)
+-*/+-*/+-*/deque c 双端队列(只在两端作添加或删除元素的操作)
deque([iterable, [maxlen]])
  iterable为初始化填充序列
  如设有maxlen在一端添加元素时如空间已超出maxlen会自动删除另一端的元素
+-*/+-*/+-*/+-*/maxlen d 或为限定长度或为None
+-*/+-*/+-*/+-*/count m  统计队列里某元素的出现次数 
count(x)
+-*/+-*/+-*/+-*/rotate m 向某个方向旋转n个元素(一端的元素移动到另一端)
rotate(n)
  如n为正数，则向右旋转，反之向左
  d = deque((1,2,3,4,5))
  d.rotate(2) # 4,5,1,2,3
  d.rotate(-4) # 3,4,5,1,2
+-*/+-*/+-*/+-*/reverse m  反转倒序队列里的元素
+-*/+-*/+-*/+-*/extend m 将其他序列里的元素添加到队列右端
extend(iterable)
+-*/+-*/+-*/+-*/appendleft m 将元素添加到队列左端
appendleft(x)
+-*/+-*/+-*/+-*/clear m 清除队列里所有元素
+-*/+-*/+-*/+-*/popleft m  返回并删除队列左端的元素,如对列为空则报错
+-*/+-*/+-*/+-*/pop m 返回并删除队列右端的元素,如对列为空则报错
+-*/+-*/+-*/+-*/extendleft m  将其他序列里的元素添加到队列左端
extendleft(iterable)
+-*/+-*/+-*/+-*/remove m  从队列里移除第一个出现的x元素,如不存在则报错
remove(x)
+-*/+-*/+-*/+-*/append m 将元素添加到队列右端
append(x)
+-*/+-*/+-*/ValuesView t 
继承自MappingView和Set
TODO:
ValuesView

ABCs for mapping, items, keys, and values :term:`views <view>`.



+-*/+-*/+-*/UserDict c 
TODO:
UserDict([initialdata])

Class that simulates a dictionary.  The instance's contents are kept in a
regular dictionary, which is accessible via the :attr:`data` attribute of
:class:`UserDict` instances.  If *initialdata* is provided, :attr:`data` is
initialized with its contents; note that a reference to *initialdata* will not
be kept, allowing it be used for other purposes.

In addition to supporting the methods and operations of mappings,
:class:`UserDict` instances provide the following attribute:

.. attribute:: data

   A real dictionary used to store the contents of the :class:`UserDict`
   class.




+-*/+-*/+-*/Counter c 计数器字典，键对应的值为其的数量
Counter([iterable-or-mapping])
  初始值可以是序列，将自动计算序列里各项的数量
  也可以是计数器形式的字典，如{'a':3,'b':2}
  或者是Counter(cats=4, dogs=8)形式
  提取元素时，如键值不存在将以0值返回，如c['c']为0
  a,b同为Counter时
  a + b  所有元素数量合计
  a - b  a里元素数量减去b里元素数量，如为负值或0则刨除
  a & b  元素数量取a,b里最小的，如最小为0(即不是共有元素)则刨除
  a | b  元素数量取a,b里最大的
+-*/+-*/+-*/+-*/most_common m 获取数量最大的前几项元素
most_common([n])
  n:  为前n项，如未给出则返回所有元素按计数从大到小排列
      >>> Counter('abracadabra').most_common(3)
      [('a', 5), ('r', 2), ('b', 2)]
+-*/+-*/+-*/+-*/elements m 按计数枚举元素
elements()
      >>> c = Counter(a=4, b=2, c=0, d=-2)
      >>> list(c.elements())
      ['a', 'a', 'a', 'a', 'b', 'b']
+-*/+-*/+-*/+-*/subtract m 计算差值，返回新的计数字典(可能包含有负值)
subtract([iterable-or-mapping])
      >>> c = Counter(a=4, b=2, c=0, d=-2)
      >>> d = Counter(a=1, b=2, c=3, d=4)
      >>> c.subtract(d)
      Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})
+-*/+-*/+-*/+-*/update m 累计其他的集合元素的数量
update([iterable-or-mapping])
  update操作时，计数将累加，而不是赋予新值，要赋值使用c['a']=3
+-*/+-*/+-*/Sized t 可确定容器大小的类型基类
+-*/+-*/+-*/+-*/__len__ m
+-*/+-*/+-*/Set t 集合类型基类 
继承自Container,Iterable,Sized
+-*/+-*/+-*/+-*/__len__ m
+-*/+-*/+-*/+-*/__iter__ m
+-*/+-*/+-*/+-*/__contains__ m
+-*/+-*/+-*/+-*/__le__ m 默认实现
+-*/+-*/+-*/+-*/__lt__ m 默认实现
+-*/+-*/+-*/+-*/__eq__ m 默认实现
+-*/+-*/+-*/+-*/__ne__ m 默认实现
+-*/+-*/+-*/+-*/__gt__ m 默认实现
+-*/+-*/+-*/+-*/__ge__ m 默认实现
+-*/+-*/+-*/+-*/__and__ m 默认实现
+-*/+-*/+-*/+-*/__or__ m 默认实现
+-*/+-*/+-*/+-*/__xor__ m 默认实现
+-*/+-*/+-*/+-*/__sub__ m 默认实现
+-*/+-*/+-*/+-*/isdisjoint m 默认实现
+-*/+-*/+-*/+-*/MutableSet t 可变集合类型基类 
+-*/+-*/+-*/+-*/+-*/add m 
+-*/+-*/+-*/+-*/+-*/discard m
+-*/+-*/+-*/+-*/+-*/clear m 默认实现
+-*/+-*/+-*/+-*/+-*/pop m 默认实现
+-*/+-*/+-*/+-*/+-*/remove m 默认实现
+-*/+-*/+-*/+-*/+-*/__ior__ m 默认实现
+-*/+-*/+-*/+-*/+-*/__iand__ m 默认实现
+-*/+-*/+-*/+-*/+-*/__ixor__ m 默认实现
+-*/+-*/+-*/+-*/+-*/__isub__ m 默认实现
+-*/+-*/+-*/Iterator t 可迭代生成类型的基类
+-*/+-*/+-*/+-*/next m 
+-*/+-*/+-*/+-*/__iter__ m
+-*/+-*/+-*/Sequence t 序列类型基类
+-*/+-*/+-*/+-*/__getitem__ m
+-*/+-*/+-*/+-*/__len__ m
+-*/+-*/+-*/+-*/__contains__ m 默认实现
+-*/+-*/+-*/+-*/__iter__ m 默认实现
+-*/+-*/+-*/+-*/__reversed__ m 默认实现
+-*/+-*/+-*/+-*/index m 默认实现
+-*/+-*/+-*/+-*/count m 默认实现
+-*/+-*/+-*/+-*/MutableSequence  t 可变序列类型的基类
+-*/+-*/+-*/+-*/+-*/__setitem__ m
+-*/+-*/+-*/+-*/+-*/__delitem__ m
+-*/+-*/+-*/+-*/+-*/append m 默认实现
+-*/+-*/+-*/+-*/+-*/reverse m 默认实现
+-*/+-*/+-*/+-*/+-*/extend m 默认实现
+-*/+-*/+-*/+-*/+-*/pop m 默认实现
+-*/+-*/+-*/+-*/+-*/remove m 默认实现
+-*/+-*/+-*/+-*/+-*/__iadd__ m 默认实现
+-*/+-*/+-*/ItemsView t 
继承自MappingView和Set
TODO:
ItemsView

ABCs for mapping, items, keys, and values :term:`views <view>`.



+-*/+-*/+-*/Iterable t 可迭代类型的基类 
+-*/+-*/+-*/+-*/__iter__ m
+-*/+-*/+-*/somenamedtuple _ 
TODO:
+-*/+-*/+-*/+-*/_fields d 
_fields

Tuple of strings listing the field names.  Useful for introspection
and for creating new named tuple types from existing named tuples.


+-*/+-*/+-*/+-*/_replace m 
_replace(kwargs)

Return a new instance of the named tuple replacing specified fields with new
values:


+-*/+-*/+-*/+-*/_asdict m 
_asdict()

Return a new :class:`OrderedDict` which maps field names to their corresponding
values::

   >>> p._asdict()
   OrderedDict([('x', 11), ('y', 22)])

.. versionchanged:: 3.1
   Returns an :class:`OrderedDict` instead of a regular :class:`dict`.


+-*/+-*/copy p 对象复制模块
+-*/+-*/+-*/deepcopy f 深复制
deepcopy(x)
+-*/+-*/+-*/copy f 浅复制
copy(x)
+-*/+-*/+-*/error e 
+-*/+-*/datetime p 高级日期时间时差操作模块
时间之间可以比较，时间+或-时差可以生成新的时间,时间之间相减可以生成时差
+-*/+-*/+-*/MINYEAR d 最小公元年(1)
+-*/+-*/+-*/MAXYEAR d 最大公元年(9999)
+-*/+-*/+-*/timedelta c 不可变时差对象
timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, 
          hours=0, weeks=0)
  days:     天数, [-999999999,999999999]
  secondes: 秒数  microseconds: 微秒数  milliseconds: 毫秒数
  minutes:  分钟数  hours:    小时数  weeks:    周数
  时差之间可做+或-操作以及比较，时差可以*或//整数
  时差可以作-一元操作还可以用abs操作
   >>> d = timedelta(microseconds=-1)
   >>> (d.days, d.seconds, d.microseconds)
   (-1, 86399, 999999)
+-*/+-*/+-*/+-*/max d 时差最大值
max
  通常为timedelta(days=999999999,hours=23,minutes=59,seconds=59,microseconds=999999)
+-*/+-*/+-*/+-*/resolution d 间隔，通常为timedelta(microseconds=1)
+-*/+-*/+-*/+-*/min d 通常为timedelta(-999999999)
+-*/+-*/+-*/+-*/total_seconds m 总秒数
+-*/+-*/+-*/datetime c 不可变日期时间对象(包括日期和时分秒)
datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None)
* ``MINYEAR <= year <= MAXYEAR``
* ``1 <= month <= 12``
* ``1 <= day <= number of days in the given month and year``
* ``0 <= hour < 24``
* ``0 <= minute < 60``
* ``0 <= second < 60``
* ``0 <= microsecond < 1000000``
  tzinfo: 时区信息对象
+-*/+-*/+-*/+-*/hour d 小时(0-23) 
+-*/+-*/+-*/+-*/min d 通常为datetime(1,1,1)
+-*/+-*/+-*/+-*/max d 通常为datetime(9999,12,31,23,59,59,999999)
+-*/+-*/+-*/+-*/day d 月里的几号
+-*/+-*/+-*/+-*/month d 月份
+-*/+-*/+-*/+-*/year d 公元年份
+-*/+-*/+-*/+-*/minute d 分钟(0-59)
+-*/+-*/+-*/+-*/second d 秒数(0-59) 
+-*/+-*/+-*/+-*/microsecond d 微秒(0-999999) 
+-*/+-*/+-*/+-*/tzinfo d 时区
+-*/+-*/+-*/+-*/resolution d 间隔，通常为timedelta(microseconds=1) 
+-*/+-*/+-*/+-*/timetz m 返回time对象(时分秒部分和时区)
+-*/+-*/+-*/+-*/ctime m 返回一个系统表示时间形式的字符串 
+-*/+-*/+-*/+-*/today M 返回当前日期时间对象(同now)
+-*/+-*/+-*/+-*/combine M 由日期对象和时间对象组合生成新的日期时间对象
combine(date,time)
+-*/+-*/+-*/+-*/now M 返回当前日期时间对象
now([tz])
  tz: 时区信息对象
+-*/+-*/+-*/+-*/astimezone m 转换时区生成新的日期时间对象
astimezone(tz)
  tz: 时区信息对象
+-*/+-*/+-*/+-*/isoweekday m 返回该日期是星期几(星期天为7,星期一为1)
+-*/+-*/+-*/+-*/isocalendar m 返回(年,第几周,周几)三元组
isocalendar()
  由于第一周是当年包含第一个星期四的星期，所以返回的年可能不是当年
  如datetime(2003, 12, 29).isocalendar()返回(2004, 1, 1)
  第几周的范围在1-53，周几的范围在1-7(星期日为7)
+-*/+-*/+-*/+-*/isoformat m 返回YYYY-MM-DDTHH:MM:SS形式的字符串(此为__str__默认)
isoformat(sep='T')
  sep:  间隔日期和时间的分隔符，通常设为' '
  如果微秒数不为0，则返回YYYY-MM-DDTHH:MM:SS.mmmmmmm
  如果有时区，则会在后面追加+HH:MM
   >>> class TZ(tzinfo):
   ...     def utcoffset(self, dt): return timedelta(minutes=-399)
   >>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
   '2002-12-25 00:00:00-06:39'
+-*/+-*/+-*/+-*/utctimetuple m 返回其世界时的time.struct_time对象
+-*/+-*/+-*/+-*/fromordinal M 由1-1-1开始计数的天数产生日期时间对象
fromordinal(ordinal)
  ordina:   由1-1-1开始计数(1-1-1为1)的天数
+-*/+-*/+-*/+-*/toordinal m 返回距离1-1-1的天数
toordinal()
  datetime(1,1,1).toordinal()为1
+-*/+-*/+-*/+-*/timetuple m 返回time.struct_time对象
+-*/+-*/+-*/+-*/time m 返回time对象(时分秒部分)
+-*/+-*/+-*/+-*/date m 返回date对象(年月日部分)
+-*/+-*/+-*/+-*/replace m 更改生成新的日期时间对象
replace([year[, month[, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]]]]])
 d = datetime(2002,12,2)
 d.replace(day=26) == datetime(2002, 12, 26)
+-*/+-*/+-*/+-*/dst m 返回夏令时调整对应的时差(timedelta对象),未设时返回None
+-*/+-*/+-*/+-*/utcoffset m 返回与世界时的时差(timedelta对象),未设时区返回None
+-*/+-*/+-*/+-*/tzname m 返回时区的名称，未设时区返回None
+-*/+-*/+-*/+-*/strftime m 转换时间为字符串
strftime(format)
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天为首）          | 32                |
  | %W | 星期（星期一为首）          | 32                |
+-*/+-*/+-*/+-*/weekday m  返回该日期是星期几(星期天为6,星期一为0)
+-*/+-*/+-*/date c 不可变日期对象
date(year, month, day)
* ``MINYEAR <= year <= MAXYEAR``
* ``1 <= month <= 12``
* ``1 <= day <= number of days in the given month and year``
+-*/+-*/+-*/+-*/min d 通常为date(1,1,1)
+-*/+-*/+-*/+-*/max d 通常为date(9999,12,31)
+-*/+-*/+-*/+-*/month d 月份
+-*/+-*/+-*/+-*/year d 公元年份
+-*/+-*/+-*/+-*/resolution d 间隔，通常为timedelta(days=1) 
+-*/+-*/+-*/+-*/day d 月里的几号
+-*/+-*/+-*/+-*/ctime m 返回一个系统表示时间形式的字符串 
+-*/+-*/+-*/+-*/today M 返回当前日期的日期对象 
+-*/+-*/+-*/+-*/fromordinal M 由1-1-1开始计数的天数产生日期对象
fromordinal(ordinal)
  ordina:   由1-1-1开始计数(1-1-1为1)的天数
+-*/+-*/+-*/+-*/isoweekday m 返回该日期是星期几(星期天为7,星期一为1)
+-*/+-*/+-*/+-*/isoformat m 返回YYYY-MM-DD形式的字符串(此为__str__默认)
+-*/+-*/+-*/+-*/strftime m  转换时间为字符串
strftime(format)
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天为首）          | 32                |
  | %W | 星期（星期一为首）          | 32                |
+-*/+-*/+-*/+-*/toordinal m 返回距离1-1-1的天数
toordinal()
  date(1,1,1).toordinal()为1
+-*/+-*/+-*/+-*/weekday m  返回该日期是星期几(星期天为6,星期一为0)
+-*/+-*/+-*/+-*/timetuple m 返回time.struct_time对象(时、分、秒为0)
+-*/+-*/+-*/+-*/replace m 更改日期返回新的日期对象
replace(year, month, day)
 d = date(2002,12,2)
 d.replace(day=26) == date(2002, 12, 26)
+-*/+-*/+-*/+-*/isocalendar m 返回(年,第几周,周几)三元组
isocalendar()
  由于第一周是当年包含第一个星期四的星期，所以返回的年可能不是当年
  如date(2003, 12, 29).isocalendar()返回(2004, 1, 1)
  第几周的范围在1-53，周几的范围在1-7(星期日为7)
+-*/+-*/+-*/time c 不可变时间对象(不超过一天的时间)
time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None)
* ``0 <= hour < 24``
* ``0 <= minute < 60``
* ``0 <= second < 60``
* ``0 <= microsecond < 1000000``.
  tzinfo: 时区信息对象
+-*/+-*/+-*/+-*/hour d 小时(0-23) 
+-*/+-*/+-*/+-*/min d 通常为time(0,0,0) 
+-*/+-*/+-*/+-*/max d 通常为time(23,59,59,999999) 
+-*/+-*/+-*/+-*/tzinfo d 时区
+-*/+-*/+-*/+-*/resolution d 间隔，通常为timedelta(microseconds=1) 
+-*/+-*/+-*/+-*/minute d 分钟(0-59)
+-*/+-*/+-*/+-*/second d 秒数(0-59) 
+-*/+-*/+-*/+-*/microsecond d 微秒(0-999999) 
+-*/+-*/+-*/+-*/dst m 返回夏令时调整对应的时差(timedelta对象),未设时返回None
+-*/+-*/+-*/+-*/isoformat m 返回HH:MM:SS形式的字符串(__str__同样)
isoformat()
  如果微秒数不为0，则返回HH:MM:SS.mmmmmmm
  如果有时区，则会在后面追加+HH:MM
+-*/+-*/+-*/+-*/utcoffset m 返回与世界时的时差(timedelta对象),未设时区返回None
+-*/+-*/+-*/+-*/tzname m 返回时区的名称，未设时区返回None
+-*/+-*/+-*/+-*/replace m 更改时间返回新的时间对像
replace([hour[, minute[, second[, microsecond[, tzinfo]]]]])
  t = time(3,3,2)
  t.replace(minute=5) == time(3,5,2)
+-*/+-*/+-*/+-*/strftime m  转换时间为字符串
strftime(format)
  | %a | 短星期几                    | sun               |
  | %A | 长星期几                    | Sunday            |
  | %w | 数字星期几                  | 6                 |
  | %b | 短月份                      | aug               |
  | %B | 长月份                      | August            |
  | %m | 数字月份                    | 08                |
  | %y | 短年份                      | 97                |
  | %Y | 长年份                      | 1997              |
  | %d | 天（按月计）                | 13                |
  | %j | 天（按年计）                | 225               |
  | %H | 小时（24小时）              | 13                |
  | %h | 小时（12小时）              | 1                 |
  | %p | 上下午                      | PM                |
  | %M | 分钟                        | 28                |
  | %S | 秒                          | 44                |
  | %c | 本地格式                    | 08/13/97 13:28:44 |
  | %x | 日期格式                    | 08/13/97          |
  | %X | 时间格式                    | 13:28:44          |
  | %U | 星期（星期天为首）          | 32                |
  | %W | 星期（星期一为首）          | 32                |
+-*/+-*/+-*/tzinfo t 时区对象基类 
定义时区类必须实现dst,utcoffset,tzname
class UTC(tzinfo):
  def __init__(self,offset): self.offset = offset
  def utcoffset(self,dt): return timedelta(hours=self.offset)
  def tzname(self,dt): return 'UTC%+d'%self.offset
  def dst(self,dt): return timedelta(hours=self.offset)
datetime(2000,1,1,tzinfo=UTC(8)).astimezone(UTC(11))
+-*/+-*/+-*/+-*/fromutc m 从世界时的时间生成时区所在的时间
fromutc(dt)
  tzinfo已实现此函数，定义时区类时无需再重新定义此函数
+-*/+-*/+-*/+-*/dst m 返回夏令时调整对应的时差(timedelta对象)
dst(dt)
  dt:  datetime对象或None
+-*/+-*/+-*/+-*/utcoffset m 返回与世界时的时差(timedelta对象)
utcoffset(dt)
  dt:  datetime对象或None
+-*/+-*/+-*/+-*/tzname m 返回时区的名称
tzname(dt)
  dt:  datetime对象或None
  通常的名称有"GMT","UTC","-500","-5:00","EDT","US/Eastern","America/New York"
+-*/+-*/+-*/timezone c 
TODO:
timezone(offset[, name])

The *offset* argument must be specified as a :class:`timedelta`
object representing the difference between the local time and UTC.  It must
be strictly between ``-timedelta(hours=24)`` and
``timedelta(hours=24)`` and represent a whole number of minutes,
otherwise :exc:`ValueError` is raised.

The *name* argument is optional.  If specified it must be a string that
is used as the value returned by the ``tzname(dt)`` method.  Otherwise,
``tzname(dt)`` returns a string 'UTCsHH:MM', where s is the sign of
*offset*, HH and MM are two digits of ``offset.hours`` and
``offset.minutes`` respectively.


+-*/+-*/+-*/+-*/utc d 
utc

The UTC timezone, ``timezone(timedelta(0))``.



+-*/+-*/+-*/+-*/dst m 
dst(dt)

Always returns ``None``.


+-*/+-*/+-*/+-*/tzname m 
tzname(dt)

Return the fixed value specified when the :class:`timezone` instance is
constructed or a string 'UTCsHH:MM', where s is the sign of
*offset*, HH and MM are two digits of ``offset.hours`` and
``offset.minutes`` respectively.


+-*/+-*/+-*/+-*/utcoffset m 
utcoffset(dt)

Return the fixed value specified when the :class:`timezone` instance is
constructed.  The *dt* argument is ignored.  The return value is a
:class:`timedelta` instance equal to the difference between the
local time and UTC.


+-*/+-*/+-*/+-*/fromutc m 
fromutc(dt)

Return ``dt + offset``.  The *dt* argument must be an aware
:class:`datetime` instance, with ``tzinfo`` set to ``self``.


+-*/数据处理 _
+-*/+-*/difflib p 差异比较模块
+-*/+-*/+-*/IS_CHARACTER_JUNK f 检测字符是否是空格或tab
IS_CHARACTER_JUNK(ch)
+-*/+-*/+-*/restore f 由ndiff生成的差异列表还原其中的一个列表,返回迭代序列
restore(sequence, which)
  sequence:   ndiff生成的差异列表
  which:      1或2，表示还原第一个列表还是第二个列表

   >>> diff = ndiff(a,b)
   >>> diff = list(diff) # 将迭代序列变为列表
   >>> list(restore(diff,1)) == a
   True
   >>> list(restore(diff,2)) == b
   True
+-*/+-*/+-*/ndiff f 比较两个行列表返回带标记的差异比较迭代序列
ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)
  a,b:      字符串列表(通常为行列表)
  linejunk: 忽略行检测函数,返回True表示忽略此行
  charjunk: 字符忽略检测函数,返回True表示忽略此字符(默认忽略空格和tab)

   >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(1),
   ...              'ore\ntree\nemu\n'.splitlines(1))
   >>> print(''.join(diff), end="")
   - one
   ?  ^
   + ore
   ?  ^
   - two
   - three
   ?  -
   + tree
   + emu
+-*/+-*/+-*/IS_LINE_JUNK f 检测单行是否空白行或只带一个'#'的空白行
IS_LINE_JUNK(line)
+-*/+-*/+-*/get_close_matches f 从单词列表里获取于某词最相似的单词列表
get_close_matches(word, possibilities, n=3, cutoff=0.6)
  word:   要比对的字符串(通常为单词)
  possibilities:  候选字符串列表(通常为单词列表)
  n:      取最相似的前n个
  cutoff: 最低相似度([0.0-1.0]之间的值,1.0为完全相同)
  返回相似的字符串列表(最多n个),其序按相似度从大到小排列,无相似的返回空列表

   >>> get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])
   ['apple', 'ape']
   >>> import keyword
   >>> get_close_matches('wheel', keyword.kwlist)
   ['while']
   >>> get_close_matches('apple', keyword.kwlist)
   []
   >>> get_close_matches('accept', keyword.kwlist)
   ['except']

+-*/+-*/+-*/unified_diff f 
unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\\n')

Compare *a* and *b* (lists of strings); return a delta (a :term:`generator`
generating the delta lines) in unified diff format.

Unified diffs are a compact way of showing just the lines that have changed plus
a few lines of context.  The changes are shown in a inline style (instead of
separate before/after blocks).  The number of context lines is set by *n* which
defaults to three.

By default, the diff control lines (those with ``---``, ``+++``, or ``@@``) are
created with a trailing newline.  This is helpful so that inputs created from
:func:`file.readlines` result in diffs that are suitable for use with
:func:`file.writelines` since both the inputs and outputs have trailing
newlines.

For inputs that do not have trailing newlines, set the *lineterm* argument to
``""`` so that the output will be uniformly newline free.

The context diff format normally has a header for filenames and modification
times.  Any or all of these may be specified using strings for *fromfile*,
*tofile*, *fromfiledate*, and *tofiledate*.  The modification times are normally
expressed in the ISO 8601 format. If not specified, the
strings default to blanks.


   >>> s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
   >>> s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
   >>> for line in unified_diff(s1, s2, fromfile='before.py', tofile='after.py'):
   ...     sys.stdout.write(line)   # doctest: +NORMALIZE_WHITESPACE
   --- before.py
   +++ after.py
   @@ -1,4 +1,4 @@
   -bacon
   -eggs
   -ham
   +python
   +eggy
   +hamster
    guido

See :ref:`difflib-interface` for a more detailed example.



+-*/+-*/+-*/context_diff f 
context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\\n')

Compare *a* and *b* (lists of strings); return a delta (a :term:`generator`
generating the delta lines) in context diff format.

Context diffs are a compact way of showing just the lines that have changed plus
a few lines of context.  The changes are shown in a before/after style.  The
number of context lines is set by *n* which defaults to three.

By default, the diff control lines (those with ``***`` or ``---``) are created
with a trailing newline.  This is helpful so that inputs created from
:func:`file.readlines` result in diffs that are suitable for use with
:func:`file.writelines` since both the inputs and outputs have trailing
newlines.

For inputs that do not have trailing newlines, set the *lineterm* argument to
``""`` so that the output will be uniformly newline free.

The context diff format normally has a header for filenames and modification
times.  Any or all of these may be specified using strings for *fromfile*,
*tofile*, *fromfiledate*, and *tofiledate*.  The modification times are normally
expressed in the ISO 8601 format. If not specified, the
strings default to blanks.

   >>> s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
   >>> s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
   >>> for line in context_diff(s1, s2, fromfile='before.py', tofile='after.py'):
   ...     sys.stdout.write(line)  # doctest: +NORMALIZE_WHITESPACE
   *** before.py
   --- after.py
   ***************
   *** 1,4 ****
   ! bacon
   ! eggs
   ! ham
     guido
   --- 1,4 ----
   ! python
   ! eggy
   ! hamster
     guido

See :ref:`difflib-interface` for a more detailed example.



+-*/+-*/+-*/Differ c 
Differ(linejunk=None, charjunk=None)

Optional keyword parameters *linejunk* and *charjunk* are for filter functions
(or ``None``):

*linejunk*: A function that accepts a single string argument, and returns true
if the string is junk.  The default is ``None``, meaning that no line is
considered junk.

*charjunk*: A function that accepts a single character argument (a string of
length 1), and returns true if the character is junk. The default is ``None``,
meaning that no character is considered junk.

:class:`Differ` objects are used (deltas generated) via a single method:



+-*/+-*/+-*/+-*/Differ.compare m 
Differ.compare(a, b)

Compare two sequences of lines, and generate the delta (a sequence of lines).

Each sequence must contain individual single-line strings ending with newlines.
Such sequences can be obtained from the :meth:`readlines` method of file-like
objects.  The delta generated also consists of newline-terminated strings, ready
to be printed as-is via the :meth:`writelines` method of a file-like object.




+-*/+-*/+-*/SequenceMatcher c 序列比较器
SequenceMatcher(isjunk=None, a='', b='', autojunk=True)
  isjunk:   测试函数,以单个元素为参数的函数,返回True表示此元素被忽略
  a,b:      两个作对比的序列,其元素必须能被hash

The optional argument *autojunk* can be used to disable the automatic junk
heuristic.

.. versionadded:: 3.2
   The *autojunk* parameter.

+-*/+-*/+-*/+-*/bjunk d
+-*/+-*/+-*/+-*/bpopular d
+-*/+-*/+-*/+-*/b2j d
SequenceMatcher objects get three data attributes: *bjunk* is the
set of elements of *b* for which *isjunk* is True; *bpopular* is the set of
non-junk elements considered popular by the heuristic (if it is not
disabled); *b2j* is a dict mapping the remaining elements of *b* to a list
of positions where they occur. All three are reset whenever *b* is reset
with :meth:`set_seqs` or :meth:`set_seq2`.


+-*/+-*/+-*/+-*/a d 两个比较序列的第一个(要更换须使用set_seq1)
+-*/+-*/+-*/+-*/b d 两个比较序列的第二个(要更换须使用set_seq2)
+-*/+-*/+-*/+-*/get_grouped_opcodes m 
get_grouped_opcodes(n=3)

Return a :term:`generator` of groups with up to *n* lines of context.

Starting with the groups returned by :meth:`get_opcodes`, this method
splits out smaller change clusters and eliminates intervening ranges which
have no changes.

The groups are returned in the same format as :meth:`get_opcodes`.



+-*/+-*/+-*/+-*/get_matching_blocks m 获取两者相同部分列表
get_matching_blocks()
  返回元素为Match(a,b,size)命名元组的列表,列表里最后一项无用(Match.size=0)
     size:  相同连续子序列的长度
     a:     相同连续子序列在a的起始位置 
     b:     相同连续子序列在b的起始位置 

   >>> s = SequenceMatcher(None, "abxcd", "abcd")
   >>> s.get_matching_blocks()
   [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]
+-*/+-*/+-*/+-*/get_opcodes m 获取如何将a转变b的步骤列表
get_opcodes()
  返回元素为(tag, i1, i2, j1, j2)五元组的列表。
      ('replace',i1,i2,j1,j2)  意味着a[i1:i2]=b[j1:j2]
      ('delete', i1,i2,j1,j2)  意味着del a[i1:i2]
      ('insert', i1,i2,j1,j2)  意味着a[i1:i1]=b[j1:j2]
      ('equal',  i1,i2,j1,j2)  意味着无操作,a[i1:i2]==b[j1:j2]

  >>> a = "qabxcd"
  >>> b = "abycdf"
  >>> s = SequenceMatcher(None, a, b)
  >>> for tag, i1, i2, j1, j2 in s.get_opcodes():
      print('{:7}   a[{}:{}] --> b[{}:{}] {!r:>8} --> {!r}'.format(
          tag, i1, i2, j1, j2, a[i1:i2], b[j1:j2]))


  delete    a[0:1] --> b[0:0]      'q' --> ''
  equal     a[1:3] --> b[0:2]     'ab' --> 'ab'
  replace   a[3:4] --> b[2:3]      'x' --> 'y'
  equal     a[4:6] --> b[3:5]     'cd' --> 'cd'
  insert    a[6:6] --> b[5:6]       '' --> 'f'
+-*/+-*/+-*/+-*/set_seq1 m 替换两个比较序列里的a
set_seq1(a)
+-*/+-*/+-*/+-*/set_seq2 m 替换两个比较序列里的b
set_seq2(b)
+-*/+-*/+-*/+-*/set_seqs m 替换两个比较序列里的a,b
set_seqs(a, b)
+-*/+-*/+-*/+-*/ratio m 获取两者差异的比率(速度极慢,准确性最高)
ratio()
  返回[0.0-1.0],0.0表示差异最大,1.0表示差异最小
  如果之前未调用get_matching_blocks或get_opcodes,此操作的速度将非常慢O(n^2)
+-*/+-*/+-*/+-*/quick_ratio m 获取两者差异的比率(只比较相同元素不考虑位置)
quick_ratio()
  返回[0.0-1.0],0.0表示差异最大,1.0表示差异最小
+-*/+-*/+-*/+-*/real_quick_ratio m 获取两者差异的比率(只比较长度)
real_quick_ratio()
  返回[0.0-1.0],0.0表示差异最大,1.0表示差异最小
+-*/+-*/+-*/+-*/find_longest_match m 寻找两者的最长相同连续子序列
find_longest_match(alo, ahi, blo, bhi)
  alo, ahi:   比较的范围限定a[alo:ahi]
  blo, bhi:   比较的范围限定b[blo:bhi]
  返回Match(a,b,size)命名元组
     size:  相同连续子序列的长度,未找到则为0
     a:     相同连续子序列在a的起始位置 
     b:     相同连续子序列在b的起始位置 

   >>> s = SequenceMatcher(None, " abcd", "abcd abcd")
   >>> s.find_longest_match(0, 5, 0, 9)
   Match(a=0, b=4, size=5)
+-*/+-*/+-*/HtmlDiff c 
HtmlDiff

This class can be used to create an HTML table (or a complete HTML file
containing the table) showing a side by side, line by line comparison of text
with inter-line and intra-line change highlights.  The table can be generated in
either full or contextual difference mode.

The constructor for this class is:



+-*/+-*/+-*/+-*/make_table m 
make_table(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)

Compares *fromlines* and *tolines* (lists of strings) and returns a string which
is a complete HTML table showing line by line differences with inter-line and
intra-line changes highlighted.

The arguments for this method are the same as those for the :meth:`make_file`
method.


+-*/+-*/+-*/+-*/make_file m 
make_file(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)

Compares *fromlines* and *tolines* (lists of strings) and returns a string which
is a complete HTML file containing a table showing line by line differences with
inter-line and intra-line changes highlighted.

*fromdesc* and *todesc* are optional keyword arguments to specify from/to file
column header strings (both default to an empty string).

*context* and *numlines* are both optional keyword arguments. Set *context* to
``True`` when contextual differences are to be shown, else the default is
``False`` to show the full files. *numlines* defaults to ``5``.  When *context*
is ``True`` *numlines* controls the number of context lines which surround the
difference highlights.  When *context* is ``False`` *numlines* controls the
number of lines which are shown before a difference highlight when using the
"next" hyperlinks (setting to zero would cause the "next" hyperlinks to place
the next difference highlight at the top of the browser without any leading
context).


+-*/+-*/+-*/+-*/__init__ m 
__init__(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)

Initializes instance of :class:`HtmlDiff`.

*tabsize* is an optional keyword argument to specify tab stop spacing and
defaults to ``8``.

*wrapcolumn* is an optional keyword to specify column number where lines are
broken and wrapped, defaults to ``None`` where lines are not wrapped.

*linejunk* and *charjunk* are optional keyword arguments passed into ``ndiff()``
(used by :class:`HtmlDiff` to generate the side by side HTML differences).  See
``ndiff()`` documentation for argument default values and descriptions.


+-*/+-*/heapq p 列表的小顶堆操作模块
堆结构是一个近似完全二叉树结构，i位置元素的子分支在2i和2i+1
常用于优先级任务队列
增加元素时保持顺序，获取最大(小)前n项等操作使用heapq能有很好的性能
+-*/+-*/+-*/heappop f 删除并返回堆里的最小项
heappop(heap)
+-*/+-*/+-*/heappushpop f 添加一个元素到堆里，然后再删除并返回堆里的最小项
heappushpop(heap, item)
  这个操作的速度比分别调用heappush和heappop的速度快
  先将item加入堆里，再返回最小项，返回值小于或等于item
+-*/+-*/+-*/nsmallest f 获得序列里最小的n个元素
nsmallest(n, iterable, key=None)
  key: 单参数函数，其返回的对象值最好自带有__le__等方法，
       可用cmp_to_key将cmp双参数比较函数转为key函数
+-*/+-*/+-*/heapify f 将列表里的数据按小顶堆方式排列
heapify(list)
+-*/+-*/+-*/merge f 合并多个有序序列为一个有序序列(迭代器方式)
merge(*iterables)
  iterables的各序列必须是有序序列
+-*/+-*/+-*/heappush f 添加一个元素到堆里
heappush(heap, item)
+-*/+-*/+-*/heapreplace f 删除并返回堆里的最小项,然后添加一个元素
heapreplace(heap, item)
  这个操作的速度比分别调用heappop和heappush的速度快
  先返回堆里的最小项，再添加item，返回值可能会大于item
+-*/+-*/+-*/nlargest f  获得序列里最大的n个元素
nlargest(n, iterable, key=None)
  key: 单参数函数，其返回的对象值最好自带有__le__等方法，
       可用cmp_to_key将cmp双参数比较函数转为key函数
+-*/+-*/bisect p 有序列表的二分法插入操作模块
+-*/+-*/+-*/insort_right f 向已排序列表里插入元素，如有相同新元素放置在右边
insort_right(list, item, lo=0, hi=len(a))
+-*/+-*/+-*/bisect f 计算新元素在已排序列表应处的位置
bisect(list, item, lo=0, hi=len(a))
+-*/+-*/+-*/bisect_left f 计算新元素在已排序列表应处的位置,如有相同返回左边的位置
bisect_left(list, item, lo=0, hi=len(a))
+-*/+-*/+-*/insort f  向已排序列表里插入元素，如有相同新元素放置在右边
insort(list, item, lo=0, hi=len(a))
+-*/+-*/+-*/insort_left f  向已排序列表里插入元素，如有相同新元素放置在左边
insort_left(list, item, lo=0, hi=len(a))
+-*/+-*/+-*/bisect_right f 计算新元素在已排序列表应处的位置,如有相同返回右边的位置
bisect_right(list, item, lo=0, hi=len(a))
+-*/+-*/Queue p 队列模块(多用于多线程)(python2)
+-*/+-*/+-*/Full e 试图添加队列元素时，队列满错误
+-*/+-*/+-*/Empty e 试图提取队列元素时，队列空错误
+-*/+-*/+-*/Queue c 创建FIFO先进先出队列
Queue(maxsize=0)
  maxsize:  队列的最大长度,0表示不限
+-*/+-*/+-*/+-*/qsize m 队列的长度(多线程时并不一定准确)
+-*/+-*/+-*/+-*/join m 等待队列所有元素被处理(常用于多线程等待其他线程处理数据)
join()
  只有明确调用task_done才表示为一次处理操作
  每put添加一次，未处理的数目就加一，此函数将一直等到未处理数目为0
+-*/+-*/+-*/+-*/get m 获取队列里一项的元素
get(block=True, timeout=None)
  block:     为True时，如果队列空将等待队列内有数据
  timeout:   等待的最长浮点数秒数,None为无限
  如果最终未取得数据，将报Empty错误
+-*/+-*/+-*/+-*/get_nowait m 获取队列里一项的元素(不阻塞)
get_nowait()
  如果未取得数据，将报Empty错误
+-*/+-*/+-*/+-*/full m 队列是否已满(多线程时并不一定准确)
+-*/+-*/+-*/+-*/put_nowait m 给队列添加一项元素(不阻塞)
put_nowait(item)
  如果最终未能添加数据，将报Full错误
+-*/+-*/+-*/+-*/put m 给队列添加一项元素
put(item, block=True, timeout=None)
  itme:      要添加的元素
  block:     为True时，如果队列满将等待队列内有空闲空间
  timeout:   等待的最长浮点数秒数,None为无限
  如果最终未能添加数据，将报Full错误
+-*/+-*/+-*/+-*/task_done m 明确表示一项元素数据已被处理(用于多线程)
task_done()
  通常在get提取元素后将元素数据处理过(如保存、发送)再明确此操作
  (虽然可以不get提取就task_done,但一般这样作没什么意义)
+-*/+-*/+-*/+-*/empty m 队列是否为空(多线程时并不一定准确)
+-*/+-*/+-*/+-*/LifoQueue c 创建LIFO先进后出队列(栈)
LifoQueue(maxsize=0)
  maxsize:  队列的最大长度
+-*/+-*/+-*/+-*/PriorityQueue c 创建优先级队列(元素形式为(优先级,数据)二元组)
PriorityQueue(maxsize=0)
  maxsize:  队列的最大长度
+-*/+-*/queue p 队列模块(多用于多线程)(python3)
+-*/+-*/+-*/Full e 试图添加队列元素时，队列满错误
+-*/+-*/+-*/Empty e 试图提取队列元素时，队列空错误
+-*/+-*/+-*/Queue c 创建FIFO先进先出队列
Queue(maxsize=0)
  maxsize:  队列的最大长度,0表示不限
+-*/+-*/+-*/+-*/qsize m 队列的长度(多线程时并不一定准确)
+-*/+-*/+-*/+-*/join m 等待队列所有元素被处理(常用于多线程等待其他线程处理数据)
join()
  只有明确调用task_done才表示为一次处理操作
  每put添加一次，未处理的数目就加一，此函数将一直等到未处理数目为0
+-*/+-*/+-*/+-*/get m 获取队列里一项的元素
get(block=True, timeout=None)
  block:     为True时，如果队列空将等待队列内有数据
  timeout:   等待的最长浮点数秒数,None为无限
  如果最终未取得数据，将报Empty错误
+-*/+-*/+-*/+-*/get_nowait m 获取队列里一项的元素(不阻塞)
get_nowait()
  如果未取得数据，将报Empty错误
+-*/+-*/+-*/+-*/full m 队列是否已满(多线程时并不一定准确)
+-*/+-*/+-*/+-*/put_nowait m 给队列添加一项元素(不阻塞)
put_nowait(item)
  如果最终未能添加数据，将报Full错误
+-*/+-*/+-*/+-*/put m 给队列添加一项元素
put(item, block=True, timeout=None)
  itme:      要添加的元素
  block:     为True时，如果队列满将等待队列内有空闲空间
  timeout:   等待的最长浮点数秒数,None为无限
  如果最终未能添加数据，将报Full错误
+-*/+-*/+-*/+-*/task_done m 明确表示一项元素数据已被处理(用于多线程)
task_done()
  通常在get提取元素后将元素数据处理过(如保存、发送)再明确此操作
  (虽然可以不get提取就task_done,但一般这样作没什么意义)
+-*/+-*/+-*/+-*/empty m 队列是否为空(多线程时并不一定准确)
+-*/+-*/+-*/+-*/LifoQueue c 创建LIFO先进后出队列(栈)
LifoQueue(maxsize=0)
  maxsize:  队列的最大长度
+-*/+-*/+-*/+-*/PriorityQueue c 创建优先级队列(元素形式为(优先级,数据)二元组)
PriorityQueue(maxsize=0)
  maxsize:  队列的最大长度
+-*/+-*/functools p 函数工具模块
+-*/+-*/+-*/reduce f 递增计算
reduce(function, iterable[, initializer])
  func: 双参数函数,第一个参数为之前的结果，第二个参数为当前元素
  initializer:  初始值
  reduce(lambda x, y: x+y, [1, 2, 3, 4, 5],0) 
  结果为15
+-*/+-*/+-*/partial f 预设定函数参数的装饰器
partial(func, *args, **keywords)
  生成一个函数的参数预定以版，func是要被调用的函数
  args(无默认参数值的参数)将从左到右替代原先函数里的参数
  如g(x,y,*z),partial(g,1)生成的函数使用p(2,3)调用时相当于g(1,2,3)
  keywords(有默认值的参数)将替换原先的默认值
  如func为g(x=1,y=2),partial(func,x=2)生成的函数使用方法为p()相当于g(2,2)
  返回的函数带有三个属性
  p.func        原函数
  p.args        新设的一般参数预设值元组
  p.keywords    新设的默认值参数字典
+-*/+-*/+-*/cmp_to_key f 将比较函数转换为key函数
cmp_to_key(func)
  将一个比较两个值的函数封装为一个生成可用<=操作对象的函数
  如cmp(a,b)用cmp_to_key装饰后为c(x),c(a)或c(b)产生的值可以直接用c(a)<c(b)比较
  sorted等排序函数逐步将淘汰cmp参数
  这个装饰器主要用于把以前cmp的参数变为key参数
  如：  sorted(iterable, key=cmp_to_key(locale.strcoll)) 
+-*/+-*/+-*/total_ordering f 给类型扩展><=等比较操作的类装饰器(python3)
  这个装饰器只能用于类型对象，类型对象至少要实现>,<,>=,<=里一个操作
+-*/+-*/+-*/wraps f 保留被装饰对象名称和文档等属性的辅助性装饰函数器
wraps(function, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
  assigned:     默认('__name__','__module__','__doc__')要复制的属性名称元组
  updated:      默认('__dict__')要更新合并的属性元组
  常用方式:
    def debug(func):
        @wraps(func)
        def debug_print(*args, **kwargs):
            print func.__name__
            return func(*args, **kwargs)
        return debug_print
    @debug
    def xxxx(x,y): ...
+-*/+-*/+-*/update_wrapper f 在装饰函数内部将被装饰函数的属性复制给包装函数
update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, 
    updated=WRAPPER_UPDATES)
  常使用其简化版wraps
  wrapper:      实际意义上的包装函数，即装饰器返回的闭包函数对象
  wrapped:      自定义装饰器想要装饰的函数
  assigned:     默认('__name__','__module__','__doc__')要复制的属性名称元组
  updated:      默认('__dict__')要更新合并的属性元组
+-*/+-*/operator p 基本各操作运算的函数版模块
常用于参数需要是函数的时候,比lambda x,y:x+y之类的速度快
+-*/+-*/+-*/gt f a > b
gt(a, b)
+-*/+-*/+-*/__concat__ f a + b (常用于列表)
__concat__(a, b)
+-*/+-*/+-*/imul f a *= b
imul(a, b)
+-*/+-*/+-*/ge f a >= b
ge(a, b)
+-*/+-*/+-*/__irshift__ f a >>= b
__irshift__(a, b)
+-*/+-*/+-*/__lt__ f a < b
__lt__(a, b)
+-*/+-*/+-*/__inv__ f ~obj
__inv__(obj)
+-*/+-*/+-*/__rshift__ f  a >> b
__rshift__(a, b)
+-*/+-*/+-*/le f a <= b
le(a, b)
+-*/+-*/+-*/lt f a < b
lt(a, b)
+-*/+-*/+-*/__iconcat__ f a += b (常用于列表)
__iconcat__(a, b)
+-*/+-*/+-*/rshift f a >> b
rshift(a, b)
+-*/+-*/+-*/__getitem__ f a[b]
__getitem__(a, b)
  b可以是slice切片对象
+-*/+-*/+-*/isub f a -= b
isub(a, b)
+-*/+-*/+-*/__pow__ f a ** b
__pow__(a, b)
+-*/+-*/+-*/iconcat f a += b (常用于列表)
iconcat(a, b)
+-*/+-*/+-*/__gt__ f a > b
__gt__(a, b)
+-*/+-*/+-*/mod f a % b
mod(a, b)
+-*/+-*/+-*/__delitem__ f del a[b]
__delitem__(a, b)
  b可以是slice切片对象
+-*/+-*/+-*/setitem f a[b] = c
setitem(a, b, c)
  b可以是slice切片对象
+-*/+-*/+-*/getitem f a[b]
getitem(a, b)
  b可以是slice切片对象
+-*/+-*/+-*/ixor f a ^= b
ixor(a, b)
+-*/+-*/+-*/__truediv__ f a / b (新除法，返回浮点数)
__truediv__(a, b)
+-*/+-*/+-*/__imod__ f a %= b 
__imod__(a, b)
+-*/+-*/+-*/eq f  a == b
eq(a, b)
+-*/+-*/+-*/index f 
TODO:
index(a)

Return *a* converted to an integer.  Equivalent to ``a.__index__()``.

+-*/+-*/+-*/__iand__ f a &= b
__iand__(a, b)
+-*/+-*/+-*/sub f a - b
sub(a, b)
+-*/+-*/+-*/__contains__ f  b in a
__contains__(a, b)
+-*/+-*/+-*/neg f -obj
neg(obj)
+-*/+-*/+-*/abs f abs(obj) 
abs(obj)
+-*/+-*/+-*/mul f a * b
mul(a, b)
+-*/+-*/+-*/__ne__ f a != b
__ne__(a, b)
+-*/+-*/+-*/is_ f a is b
is_(a, b)
+-*/+-*/+-*/truth f a如果为真返回True,否则返回False 
truth(obj)
+-*/+-*/+-*/__ifloordiv__ f a //= b
__ifloordiv__(a, b)
+-*/+-*/+-*/indexOf f a.index(b)
indexOf(a, b)
+-*/+-*/+-*/__setitem__ f a[b] = c
__setitem__(a, b, c)
  b可以是slice切片对象
+-*/+-*/+-*/ipow f a **= b
ipow(a, b)
+-*/+-*/+-*/__ilshift__ f a <<= b
__ilshift__(a, b)
+-*/+-*/+-*/or_ f a | b
or_(a, b)
+-*/+-*/+-*/__imul__ f a *= b
__imul__(a, b)
+-*/+-*/+-*/is_not f a is not b
is_not(a, b)
+-*/+-*/+-*/itruediv f a /= b (新除法，返回浮点数)
itruediv(a, b)
+-*/+-*/+-*/__xor__ f a ^ b
__xor__(a, b)
+-*/+-*/+-*/__ior__ f a |= b
__ior__(a, b)
+-*/+-*/+-*/__mul__ f a * b
__mul__(a, b)
+-*/+-*/+-*/__not__ f not obj
__not__(obj)
  并没有__not__，此结果受__bool__和__len__影响
+-*/+-*/+-*/__or__ f a | b
__or__(a, b)
+-*/+-*/+-*/iand f a &= b
iand(a, b)
+-*/+-*/+-*/countOf f a.count(b)
countOf(a, b)
+-*/+-*/+-*/pow f a ** b
pow(a, b)
+-*/+-*/+-*/pos f +obj
pos(obj)
+-*/+-*/+-*/and_ f a & b
and_(a, b)
+-*/+-*/+-*/lshift f a << b
lshift(a, b)
+-*/+-*/+-*/__and__ f a and b
__and__(a, b)
+-*/+-*/+-*/invert f ~obj
invert(obj)
+-*/+-*/+-*/contains f b in a
contains(a, b)
+-*/+-*/+-*/add f  a + b 
add(a, b)
+-*/+-*/+-*/__abs__ f abs(obj) 
__abs__(obj)
+-*/+-*/+-*/irshift f a >>= b 
irshift(a, b)
+-*/+-*/+-*/__ixor__ f a ^= b
__ixor__(a, b)
+-*/+-*/+-*/inv f ~obj 
inv(obj)
+-*/+-*/+-*/__itruediv__ f  a /= b (新除法，返回浮点数)
__itruediv__(a, b)
+-*/+-*/+-*/__isub__ f a -= b 
__isub__(a, b)
+-*/+-*/+-*/__invert__ f ~b
__invert__(obj)
+-*/+-*/+-*/__lshift__ f a << b
__lshift__(a, b)
+-*/+-*/+-*/__eq__ f a == b 
__eq__(a, b)
+-*/+-*/+-*/__mod__ f a % b 
__mod__(a, b)
+-*/+-*/+-*/__iadd__ f a += b 
__iadd__(a, b)
+-*/+-*/+-*/__le__ f a <= b 
__le__(a, b)
+-*/+-*/+-*/__floordiv__ f a // b 
__floordiv__(a, b)
+-*/+-*/+-*/__sub__ f a - b 
__sub__(a, b)
+-*/+-*/+-*/ilshift f a <<= b
ilshift(a, b)
+-*/+-*/+-*/__ge__ f a >= b 
__ge__(a, b)
+-*/+-*/+-*/ifloordiv f a //= b
ifloordiv(a, b)
+-*/+-*/+-*/not_ f not obj
not_(obj)
  并没有__not__，此结果受__bool__和__len__影响
+-*/+-*/+-*/iadd f a += b
iadd(a, b)
+-*/+-*/+-*/imod f a %= b
imod(a, b)
+-*/+-*/+-*/ne f a != b
ne(a, b)
+-*/+-*/+-*/__pos__ f +obj
__pos__(obj)
+-*/+-*/+-*/attrgetter f 创建一个可调用对象，此对象可获取其它对象的某些属性
attrgetter(attr[, args...])
  参数须是字符串，如果多个可调用对象调用后返回的是值元组
  f = attrgetter('name')  # f(b)将返回b.name
  f = attrgetter('name', 'date') # f(b)将返回 (b.name,b.date)
  参数可以包含'.'
  f = attrgetter('date.month') # f(b)将返回b.date.month
+-*/+-*/+-*/methodcaller f 创建调用对象，此对象可调用其它对象的方法获取返回值
methodcaller(name[, args...])
  args是方法涉及的实参
  f = methodcaller('name') # f(b)将获得b.name()的返回结果
  f = methodcaller('name', 'foo', bar=1)
  # f(b)将获得b.name('foo', bar=1)的返回结果
+-*/+-*/+-*/truediv f  a / b (新除法，返回浮点数)
truediv(a, b)
+-*/+-*/+-*/ior f a |= b
ior(a, b)
+-*/+-*/+-*/delitem f del a[b]
delitem(a, b)
  b可以是slice切片对象
+-*/+-*/+-*/__add__ f a + b
__add__(a, b)
+-*/+-*/+-*/xor f a ^ b
xor(a, b)
+-*/+-*/+-*/concat f a + b (常用于列表)
concat(a, b)
+-*/+-*/+-*/__ipow__ f  a **= b
__ipow__(a, b)
+-*/+-*/+-*/floordiv f a // b
floordiv(a, b)
+-*/+-*/+-*/__neg__ f -obj
__neg__(obj)
+-*/+-*/+-*/__index__ f 
TODO:
__index__(a)

Return *a* converted to an integer.  Equivalent to ``a.__index__()``.



+-*/+-*/+-*/itemgetter f 创建调用对象，此对象将以索引方式获取其它对象的数据
itemgetter(item[, args...])
   >>> itemgetter(1)('ABCDEFG')
   'B'
   >>> itemgetter(1,3,5)('ABCDEFG')
   ('B', 'D', 'F')
   >>> itemgetter(slice(2,None))('ABCDEFG')
   'CDEFG'
+-*/+-*/itertools p 创建迭代器的辅助模块
+-*/+-*/+-*/count f 创建有序数列迭代器
count(start=0, step=1)
  start:    开始值
  step:     步进
  可以是负数，也可以是浮点数
  如果step是浮点数，最好使用(start + step*i for i in count())
+-*/+-*/+-*/cycle f 创建循环迭代器
cycle(iterable)
  迭代至iterable的最后一个元素后，从头重新开始（内部有保存已迭代的元素）
+-*/+-*/+-*/repeat f 创建重复迭代器
repeat(object[, times])
  times:    迭代次数，如无设定则无限迭代
+-*/+-*/+-*/starmap f map的变长参数版
starmap(function, iterable)
  iterable里的每一项以(*args)形式调用function,结果依次迭代
       # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000
+-*/+-*/+-*/chain f 创建各序列依次枚举迭代器
chain(iter1,iter2,...)
   # chain('ABC', 'DEF') --> A B C D E F
+-*/+-*/+-*/+-*/from_iterable f 依次枚举序列里的序列
chain.from_iterable(iterables)
   # for it in iterables: for x in it: yield x
+-*/+-*/+-*/zip_longest f zip的以最长序列为长度版python3 
zip_longest(*iterables, fillvalue=None)
  组合各序列里同位置的元素为元组依次迭代，长度不够的序列以fillvalue为填充
       # zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-
+-*/+-*/+-*/izip_longest f zip的以最长序列为长度版python2 
izip_longest(*iterables, fillvalue=None)
  组合各序列里同位置的元素为元组依次迭代，长度不够的序列以fillvalue为填充
       # izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-
+-*/+-*/+-*/izip f zip的迭代器版python2 
izip(iter1,iter2,...)
  组合各序列里同位置的元素为元组依次迭代，长度以最短序列为准
+-*/+-*/+-*/imap f map的迭代器版python2 
+-*/+-*/+-*/compress f 用筛选表筛取迭代
compress(data, selectors)
  以selectors为表筛选data里的元素，selectors里对应元素为真才迭代出data里的元素
        # compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F
+-*/+-*/+-*/tee f 克隆其他迭代器，产生多个副本
tee(iterable, n=2)
  n为副本数量，注意产生副本以后使用副本操作，不要再使用原迭代
  返回多个副本组成的元组
+-*/+-*/+-*/ifilter f 迭代出条件为真的元素python2
ifilter(predicate, iterable)
  filter的迭代器版
+-*/+-*/+-*/filterfalse f 迭代出条件为假的元素python3
filterfalse(predicate, iterable)
  与filter相反
       # filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
+-*/+-*/+-*/ifilterfalse f 迭代出条件为假的元素python2
ifilterfalse(predicate, iterable)
  与ifilter相反
       # ifilterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
+-*/+-*/+-*/islice f  以切片方式迭代出其他迭代序列里的元素
islice(iterable, [start,] stop [, step])
  start,stop,step  同x[a:b:c]或range(a,b,c) 但不能是负数
       # islice('ABCDEFG', 0, None, 2) --> A C E G
+-*/+-*/+-*/accumulate f 依次迭代出合计数
accumulate(iterable)
        # accumulate([1,2,3,4,5]) --> 1 3 6 10 15
+-*/+-*/+-*/takewhile f  在条件为假时停止迭代
takewhile(predicate, iterable)
  对每个元素作predicate测试，一旦不满足测试就停止迭代
+-*/+-*/+-*/dropwhile f 在条件为假时开始迭代
dropwhile(predicate, iterable)
  对每个元素作predicate测试，直到不满足测试时才开始枚举其后的各元素（包括当前）
+-*/+-*/+-*/groupby f 分组迭代器
groupby(iterable, key=None)
  iterable:   一般为已排序并有重复的序列
  key:        key为分组依据函数，以其对元素计算出的值作分组
              None则直接用元素的值为分组依据
  相邻并同key的元素被合为一组，迭代出的每个结果包含一个key和合并的元组
  groupby([1,1,2,2,2,3])相当于((1,(1,1)),(2,(2,2,2)),(3,(3)))
  注意第二项的元组是迭代器，一般用list用for in方式访问其元素
+-*/+-*/+-*/product f 笛卡尔积迭代
product(*iterables, repeat=1)
  如要自身和自身作笛卡尔积，则使用repeat参数,N*M
        # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy
        # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111
+-*/+-*/+-*/permutations f 生成全排列
permutations(iterable, r=None)
  r为None时生成序列里所有元素的全排列可能（排列并不会自动去除重复的）
  r指定个数时生成r个的排列可能,n!/(n-r)!
+-*/+-*/+-*/combinations f 生成组合C(n,r)
combinations(iterable, r)
  n个元素里取r个不放回（无重复）n!/((n-r)!r!)
 # combinations('ABCD', 2) --> AB AC AD BC BD CD
 # combinations(range(4), 3) --> 012 013 023 123
+-*/+-*/+-*/combinations_with_replacement f 生成有重复元素的组合C(n+r-1,r)
combinations_with_replacement(iterable, r)
  n个元素里取r个有放回（有重复元素）(n+r-1)!/((n-1)!r!)
 # combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC
+-*/+-*/contextlib p with语段相关的辅助模块
+-*/+-*/+-*/contextmanager f 转换生成器函数为上下文管理器的装饰函数
contextmanager(func)
  func是一个生成器函数
  例子
  @contextmanager
  def foo(args):
    ...
    try:
       yield value
    except Exception as e:
       ...
    ...
  with foo(args) as value:
    ....
+-*/+-*/+-*/closing f 创建离开with语段自动执行obj.close()的上下文管理器
closing(thing)
  例子
   from contextlib import closing
   from urllib.request import urlopen
   with closing(urlopen('http://www.python.org')) as page:
       for line in page:
           print(line)
+-*/+-*/+-*/ContextDecorator c 
TODO:
ContextDecorator()

A base class that enables a context manager to also be used as a decorator.

Context managers inheriting from ``ContextDecorator`` have to implement
``__enter__`` and ``__exit__`` as normal. ``__exit__`` retains its optional
exception handling even when used as a decorator.

``ContextDecorator`` is used by :func:`contextmanager`, so you get this
functionality automatically.

Example of ``ContextDecorator``::

   from contextlib import ContextDecorator

   class mycontext(ContextDecorator):
       def __enter__(self):
           print('Starting')
           return self

       def __exit__(self, *exc):
           print('Finishing')
           return False

   >>> @mycontext()
   ... def function():
   ...     print('The bit in the middle')
   ...
   >>> function()
   Starting
   The bit in the middle
   Finishing

   >>> with mycontext():
   ...     print('The bit in the middle')
   ...
   Starting
   The bit in the middle
   Finishing

This change is just syntactic sugar for any construct of the following form::

   def f():
       with cm():
           # Do stuff

``ContextDecorator`` lets you instead write::

   @cm()
   def f():
       # Do stuff

It makes it clear that the ``cm`` applies to the whole function, rather than
just a piece of it (and saving an indentation level is nice, too).

Existing context managers that already have a base class can be extended by
using ``ContextDecorator`` as a mixin class::

   from contextlib import ContextDecorator

   class mycontext(ContextBaseClass, ContextDecorator):
       def __enter__(self):
           return self

       def __exit__(self, *exc):
           return False

.. note::
   As the decorated function must be able to be called multiple times, the
   underlying context manager must support use in multiple :keyword:`with`
   statements. If this is not the case, then the original construct with the
   explicit :keyword:`with` statement inside the function should be used.

.. versionadded:: 3.2



+-*/+-*/pickle p python单对象数据<->二进制形式
可以保存各种数据包括自引用的,如[[...]](即a=[a])
+-*/+-*/+-*/dumps f 将python数据转存为二进制字节字符串
dumps(obj, protocol=None)
  obj:      要存储的数据对象
  protocol: 0-文本形式 1-二进制1.0 2-二进制2.0 3-用于python3
+-*/+-*/+-*/load f 从文件对象里还原数据
load(file)
  file:     文件对象
+-*/+-*/+-*/loads f 从二进制字节字符串里还原数据
loads(bytes_object)
+-*/+-*/+-*/dump f 将python数据转存到二进制文件对象里
dump(obj, file, protocol=None)
  obj:      要存储的数据对象
  file:     文件对象
  protocol: 0-文本形式 1-二进制1.0 2-二进制2.0 3-用于python3
+-*/+-*/+-*/DEFAULT_PROTOCOL d 默认的编码协议(python3里为3)
+-*/+-*/+-*/HIGHEST_PROTOCOL d 最新的可用编码协议
+-*/+-*/+-*/PickleError e 
+-*/+-*/+-*/+-*/PicklingError e dump时出错
+-*/+-*/+-*/+-*/UnpicklingError e load时出错
+-*/+-*/+-*/object _ 自定义对象的相关接口
+-*/+-*/+-*/+-*/__reduce__ m 
TODO:
__reduce__()

The interface is currently defined as follows.  The :meth:`__reduce__` method
takes no argument and shall return either a string or preferably a tuple (the
returned object is often referred to as the "reduce value").

If a string is returned, the string should be interpreted as the name of a
global variable.  It should be the object's local name relative to its
module; the pickle module searches the module namespace to determine the
object's module.  This behaviour is typically useful for singletons.

When a tuple is returned, it must be between two and five items long.
Optional items can either be omitted, or ``None`` can be provided as their
value.  The semantics of each item are in order:

.. XXX Mention __newobj__ special-case?

* A callable object that will be called to create the initial version of the
  object.

* A tuple of arguments for the callable object.  An empty tuple must be given
  if the callable does not accept any argument.

* Optionally, the object's state, which will be passed to the object's
  :meth:`__setstate__` method as previously described.  If the object has no
  such method then, the value must be a dictionary and it will be added to
  the object's :attr:`__dict__` attribute.

* Optionally, an iterator (and not a sequence) yielding successive items.
  These items will be appended to the object either using
  ``obj.append(item)`` or, in batch, using ``obj.extend(list_of_items)``.
  This is primarily used for list subclasses, but may be used by other
  classes as long as they have :meth:`append` and :meth:`extend` methods with
  the appropriate signature.  (Whether :meth:`append` or :meth:`extend` is
  used depends on which pickle protocol version is used as well as the number
  of items to append, so both must be supported.)

* Optionally, an iterator (not a sequence) yielding successive key-value
  pairs.  These items will be stored to the object using ``obj[key] =
  value``.  This is primarily used for dictionary subclasses, but may be used
  by other classes as long as they implement :meth:`__setitem__`.



+-*/+-*/+-*/+-*/__reduce_ex__ m 
TODO:
__reduce_ex__(protocol)

Alternatively, a :meth:`__reduce_ex__` method may be defined.  The only
difference is this method should take a single integer argument, the protocol
version.  When defined, pickle will prefer it over the :meth:`__reduce__`
method.  In addition, :meth:`__reduce__` automatically becomes a synonym for
the extended version.  The main use for this method is to provide
backwards-compatible reduce values for older Python releases.


+-*/+-*/+-*/+-*/__getnewargs__ m 
TODO:
__getnewargs__()

In protocol 2 and newer, classes that implements the :meth:`__getnewargs__`
method can dictate the values passed to the :meth:`__new__` method upon
unpickling.  This is often needed for classes whose :meth:`__new__` method
requires arguments.



+-*/+-*/+-*/+-*/__getstate__ m 生成dump要保存的数据
__getstate__()
  通常对于对象pickle都是直接储存__dict__
  有时当某些情况无法正确保存时就需要这个方法了
  此方法的返回值可以是任意，但要确保返回值能正常被dump，能在__setstate__还原
  如果返回False则表示此对象储存时被丢弃
+-*/+-*/+-*/+-*/__setstate__ m load数据还原对象
__setstate__(state)
  state就是__getstate__返回的值
+-*/+-*/shelve p python多对象数据<->二进制形式文件
+-*/+-*/+-*/open f 打开文件,创建用于储存或读取数据的字典对象
open(filename, flag='c', protocol=None, writeback=False)
  flag:      'c'不存在则新建 'r'只读 'w'只写 'n'强制新建
  protocol:  0-文本形式 1-二进制1.0 2-二进制2.0 3-用于python3
  writeback: 如为True则只在sync或close时将数据写入文件
  返回的对象是字典对象，直接按键值索引可读写相应名称的python数据对象
  其键值必须为字符串，其对应值将自动按pickle方式存储
+-*/+-*/+-*/+-*/close m 关闭(同时保存缓冲的数据)
+-*/+-*/+-*/+-*/sync m 将缓冲的数据保存下来
+-*/+-*/+-*/Shelf c 创建用于储存或读取数据的字典对象
Shelf(dict, protocol=None, writeback=False, keyencoding='utf-8')
  protocol:  0-文本形式 1-二进制1.0 2-二进制2.0 3-用于python3
  writeback: 如为True则只在sync或close时将数据写入文件
  keyencoding:  键值的编码方式
  返回的对象是字典对象，直接按键值索引可读写相应名称的python数据对象
  其键值必须为字符串，其对应值将自动按pickle方式存储
  类似pickle.dumps不同的是一个只能存单个对象，一个可以处理多个对象
  一个用字符串保存数据，一个用字典保存数据
+-*/+-*/+-*/+-*/close m 关闭(同时保存缓冲的数据)
+-*/+-*/+-*/+-*/sync m 将缓冲的数据保存下来
+-*/+-*/+-*/DbfilenameShelf c 
DbfilenameShelf(filename, flag='c', protocol=None, writeback=False)

A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-like
object.  The underlying file will be opened using :func:`dbm.open`.  By
default, the file will be created and opened for both read and write.  The
optional *flag* parameter has the same interpretation as for the :func:`.open`
function.  The optional *protocol* and *writeback* parameters have the same
interpretation as for the :class:`Shelf` class.



+-*/+-*/+-*/BsdDbShelf c 
BsdDbShelf(dict, protocol=None, writeback=False, keyencoding='utf-8')

A subclass of :class:`Shelf` which exposes :meth:`first`, :meth:`!next`,
:meth:`previous`, :meth:`last` and :meth:`set_location` which are available
in the third-party :mod:`bsddb` module from `pybsddb
<http://www.jcea.es/programacion/pybsddb.htm>`_ but not in other database
modules.  The *dict* object passed to the constructor must support those
methods.  This is generally accomplished by calling one of
:func:`bsddb.hashopen`, :func:`bsddb.btopen` or :func:`bsddb.rnopen`.  The
optional *protocol*, *writeback*, and *keyencoding* parameters have the same
interpretation as for the :class:`Shelf` class.



+-*/+-*/pprint p 可读式打印模块
+-*/+-*/+-*/saferepr f 以id形式显示循环对象的repr
saferepr(object)
  >> a = []
  >> a.append(a)
  >> repr(a)
  '[[...]]'
  >> saferepr(a)
  '[<Recursion on list with id=...>]'
+-*/+-*/+-*/pprint f 输出显示对象内容
pprint(object, stream=None, indent=1, width=80, depth=None)
  object:   要显示的对象
  stream:   输出的对象,默认sys.stdout
  indent:   缩进格数
  width:    行宽
  depth:    最大层次数
+-*/+-*/+-*/isreadable f 检测对象是否可由其repr重建
isreadable(object)
+-*/+-*/+-*/isrecursive f 检测对象的数据是否有循环引用的情况
isrecursive(object)
+-*/+-*/+-*/pformat f 返回表示对象内容的字符串
pformat(object, indent=1, width=80, depth=None)
  object:   要显示的对象
  indent:   缩进格数
  width:    行宽
  depth:    最大层次数
+-*/+-*/+-*/PrettyPrinter c 创建用于显示对象内容的打印器
PrettyPrinter(indent=1, width=80, depth=None, stream=None)
  indent:   缩进格数
  width:    行宽
  depth:    最大层次数
  stream:   输出的对象,默认sys.stdout
+-*/+-*/+-*/+-*/pprint m  输出显示对象内容
pprint(object)
+-*/+-*/+-*/+-*/pformat m  返回表示对象内容的字符串
pformat(object)
+-*/+-*/+-*/+-*/format m 
TODO:
format(object, context, maxlevels, level)

Returns three values: the formatted version of *object* as a string, a flag
indicating whether the result is readable, and a flag indicating whether
recursion was detected.  The first argument is the object to be presented.  The
second is a dictionary which contains the :func:`id` of objects that are part of
the current presentation context (direct and indirect containers for *object*
that are affecting the presentation) as the keys; if an object needs to be
presented which is already represented in *context*, the third return value
should be ``True``.  Recursive calls to the :meth:`format` method should add
additional entries for containers to this dictionary.  The third argument,
*maxlevels*, gives the requested limit to recursion; this will be ``0`` if there
is no requested limit.  This argument should be passed unmodified to recursive
calls. The fourth argument, *level*, gives the current level; recursive calls
should be passed a value less than that of the current call.



+-*/+-*/colorsys p 色彩空间转换模块
+-*/+-*/+-*/rgb_to_yiq f RGB转为电视色彩(亮度,橙色到青色,紫色到黄绿)
rgb_to_yiq(r, g, b)
+-*/+-*/+-*/rgb_to_hls f RGB转为HSL色彩(色相,饱和度,亮度)
rgb_to_hls(r, g, b)
  HSL和HSV的不同主要在于HSL的高亮度为灰色,HSV的高明度为白色
  HSL主要常用于CSS
+-*/+-*/+-*/rgb_to_hsv f RGB转为HSV色彩(色相,饱和度,明度)
rgb_to_hsv(r, g, b)
  HSL和HSV的不同主要在于HSL的高亮度为灰色,HSV的高明度为白色
  HSV主要用于PS
+-*/+-*/+-*/yiq_to_rgb f 电视色彩(亮度,橙色到青色,紫色到黄绿)转为(R,G,B) 
yiq_to_rgb(y, i, q)
+-*/+-*/+-*/hsv_to_rgb f HSV色彩(色相,饱和度,明度)转为(R,G,B)  
hsv_to_rgb(h, s, v)
  HSL和HSV的不同主要在于HSL的高亮度为灰色,HSV的高明度为白色
  HSV主要用于PS
+-*/+-*/+-*/hls_to_rgb f HSL色彩(色相,饱和度,亮度)转为(R,G,B) 
hls_to_rgb(h, l, s)
  HSL和HSV的不同主要在于HSL的高亮度为灰色,HSV的高明度为白色
  HSL主要常用于CSS
+-*/数学 _ 
+-*/+-*/cmath p 复数运算模块
+-*/+-*/+-*/cosh f 返回x的双曲线余弦
+-*/+-*/+-*/acosh f 返回x的双曲线反余弦
+-*/+-*/+-*/tan f 返回x的正切
+-*/+-*/+-*/asin f 返回x的反正弦
+-*/+-*/+-*/isnan f x是否是NaN(非数值)
+-*/+-*/+-*/log f 获取对数
log(x[, base])
  忽略base则返回x的自然对数
+-*/+-*/+-*/atanh f 返回x的双曲线反正切 
+-*/+-*/+-*/sqrt f 返回x的平方根 
+-*/+-*/+-*/log10 f 同log(x,10) 
+-*/+-*/+-*/sin f 返回x的正弦
+-*/+-*/+-*/polar f 返回x的极坐标
+-*/+-*/+-*/asinh f 返回x的双曲线反正弦 
+-*/+-*/+-*/atan f 返回x的反正切 
+-*/+-*/+-*/isinf f x是否是无穷数 
+-*/+-*/+-*/sinh f 返回x的双曲线正弦 
+-*/+-*/+-*/phase f 返回复数x的相位，以弧度为单位
phase(x)
   >>> phase(complex(-1.0, 0.0))
   3.141592653589793
   >>> phase(complex(-1.0, -0.0))
   -3.141592653589793
+-*/+-*/+-*/rect f 由极坐标获得复数
rect(r, phi)
+-*/+-*/+-*/cos f 返回x的余弦 
+-*/+-*/+-*/tanh f 返回x的双曲线正切 
+-*/+-*/+-*/exp f 返回e**x
+-*/+-*/+-*/acos f 返回x的反余弦
+-*/+-*/+-*/isfinite f 
isfinite(x)

Return ``True`` if both the real and imaginary parts of *x* are finite, and
``False`` otherwise.

.. versionadded:: 3.2



+-*/+-*/+-*/pi d 数学常量pi
+-*/+-*/+-*/e d 数学常量e
+-*/+-*/decimal p 带小数点的数值类型模块
+-*/+-*/+-*/localcontext f 创建精度环境，默认5位精度
localcontext([c])
   from decimal import localcontext
   with localcontext() as ctx:
       ctx.prec = 42   # 设定高精度
       s = calculate_something()
   s = +s  # 用原默认精度环境对高精度数作四舍五入
+-*/+-*/+-*/setcontext f 设置当前默认的十进制精度环境
setcontext(c)
+-*/+-*/+-*/getcontext f 返回当前默认的十进制精度环境对像
+-*/+-*/+-*/Inf d Decimal('Infinity')
+-*/+-*/+-*/NaN d Decimal('NaN')
+-*/+-*/+-*/negInf d Decimal('-Infinity')
+-*/+-*/+-*/ExtendedContext c 预设的精度环境对象，不会有异常，结果会产生NaN等
+-*/+-*/+-*/Decimal c 十进制精确数值类型
Decimal(value="0", context=None)
  value:    可以是整数，也可以是'4.5','1e10'这样的字符串
            或(sign,digits,exponent)这样的元组
            sign对于正数为0,负数为1
            digits为有效数字组成的元组
            exponent为指数
            如(1,(2,3,4,5),-2)相当于'-23.45'
            还可以是'Infinity','-Infinity','Nan','sNaN'
            就是不能是float，不过可以使用Decimal.from_float来创建
  context:  所使用的精度环境对象，如忽略则使用当前默认的
+-*/+-*/+-*/+-*/adjusted m 
adjusted()

Return the adjusted exponent after shifting out the coefficient's
rightmost digits until only the lead digit remains:
``Decimal('321e+5').adjusted()`` returns seven.  Used for determining the
position of the most significant digit with respect to the decimal point.



+-*/+-*/+-*/+-*/radix m 
radix()

Return ``Decimal(10)``, the radix (base) in which the :class:`Decimal`
class does all its arithmetic.  Included for compatibility with the
specification.


+-*/+-*/+-*/+-*/from_float M 转换浮点数为十进制精确数
from_float(f)
    >>> Decimal.from_float(0.1)
    Decimal('0.1000000000000000055511151231257827021181583404541015625')
    >>> Decimal.from_float(float('nan'))
    Decimal('NaN')
    >>> Decimal.from_float(float('inf'))
    Decimal('Infinity')
    >>> Decimal.from_float(float('-inf'))
    Decimal('-Infinity')
+-*/+-*/+-*/+-*/is_subnormal m 
is_subnormal()

Return :const:`True` if the argument is subnormal, and :const:`False`
otherwise.


+-*/+-*/+-*/+-*/compare m 
compare(other[, context])

Compare the values of two Decimal instances.  :meth:`compare` returns a
Decimal instance, and if either operand is a NaN then the result is a
NaN::

   a or b is a NaN  ==> Decimal('NaN')
   a < b            ==> Decimal('-1')
   a == b           ==> Decimal('0')
   a > b            ==> Decimal('1')


+-*/+-*/+-*/+-*/logical_or m 
logical_or(other[, context])

:meth:`logical_or` is a logical operation which takes two *logical
operands* (see :ref:`logical_operands_label`).  The result is the
digit-wise ``or`` of the two operands.


+-*/+-*/+-*/+-*/compare_signal m 
compare_signal(other[, context])

This operation is identical to the :meth:`compare` method, except that all
NaNs signal.  That is, if neither operand is a signaling NaN then any
quiet NaN operand is treated as though it were a signaling NaN.


+-*/+-*/+-*/+-*/logb m 
logb([context])

For a nonzero number, return the adjusted exponent of its operand as a
:class:`Decimal` instance.  If the operand is a zero then
``Decimal('-Infinity')`` is returned and the :const:`DivisionByZero` flag
is raised.  If the operand is an infinity then ``Decimal('Infinity')`` is
returned.


+-*/+-*/+-*/+-*/sqrt m 
sqrt([context])

Return the square root of the argument to full precision.



+-*/+-*/+-*/+-*/scaleb m 
scaleb(other[, context])

Return the first operand with exponent adjusted by the second.
Equivalently, return the first operand multiplied by ``10**other``.  The
second operand must be an integer.


+-*/+-*/+-*/+-*/conjugate m 
conjugate()

Just returns self, this method is only to comply with the Decimal
Specification.


+-*/+-*/+-*/+-*/is_nan m 
is_nan()

Return :const:`True` if the argument is a (quiet or signaling) NaN and
:const:`False` otherwise.


+-*/+-*/+-*/+-*/as_tuple m 
as_tuple()

Return a :term:`named tuple` representation of the number:
``DecimalTuple(sign, digits, exponent)``.



+-*/+-*/+-*/+-*/canonical m 
canonical()

Return the canonical encoding of the argument.  Currently, the encoding of
a :class:`Decimal` instance is always canonical, so this operation returns
its argument unchanged.


+-*/+-*/+-*/+-*/logical_xor m 
logical_xor(other[, context])

:meth:`logical_xor` is a logical operation which takes two *logical
operands* (see :ref:`logical_operands_label`).  The result is the
digit-wise exclusive or of the two operands.


+-*/+-*/+-*/+-*/copy_negate m 
copy_negate()

Return the negation of the argument.  This operation is unaffected by the
context and is quiet: no flags are changed and no rounding is performed.


+-*/+-*/+-*/+-*/same_quantum m 
same_quantum(other[, context])

Test whether self and other have the same exponent or whether both are
:const:`NaN`.


+-*/+-*/+-*/+-*/min m 
min(other[, context])

Like ``min(self, other)`` except that the context rounding rule is applied
before returning and that :const:`NaN` values are either signaled or
ignored (depending on the context and whether they are signaling or
quiet).


+-*/+-*/+-*/+-*/copy_sign m 
copy_sign(other)

Return a copy of the first operand with the sign set to be the same as the
sign of the second operand.  For example:

   >>> Decimal('2.3').copy_sign(Decimal('-1.5'))
   Decimal('-2.3')

This operation is unaffected by the context and is quiet: no flags are
changed and no rounding is performed.


+-*/+-*/+-*/+-*/to_integral m 
to_integral([rounding[, context]])

Identical to the :meth:`to_integral_value` method.  The ``to_integral``
name has been kept for compatibility with older versions.


+-*/+-*/+-*/+-*/is_signed m 
is_signed()

Return :const:`True` if the argument has a negative sign and
:const:`False` otherwise.  Note that zeros and NaNs can both carry signs.


+-*/+-*/+-*/+-*/is_zero m 
is_zero()

Return :const:`True` if the argument is a (positive or negative) zero and
:const:`False` otherwise.


+-*/+-*/+-*/+-*/next_minus m 
next_minus([context])

Return the largest number representable in the given context (or in the
current thread's context if no context is given) that is smaller than the
given operand.


+-*/+-*/+-*/+-*/is_canonical m 
is_canonical()

Return :const:`True` if the argument is canonical and :const:`False`
otherwise.  Currently, a :class:`Decimal` instance is always canonical, so
this operation always returns :const:`True`.


+-*/+-*/+-*/+-*/log10 m 
log10([context])

Return the base ten logarithm of the operand.  The result is correctly
rounded using the :const:`ROUND_HALF_EVEN` rounding mode.


+-*/+-*/+-*/+-*/fma m 
fma(other, third[, context])

Fused multiply-add.  Return self*other+third with no rounding of the
intermediate product self*other.

>>> Decimal(2).fma(3, 5)
Decimal('11')


+-*/+-*/+-*/+-*/normalize m 
normalize([context])

Normalize the number by stripping the rightmost trailing zeros and
converting any result equal to :const:`Decimal('0')` to
:const:`Decimal('0e0')`. Used for producing canonical values for attributes
of an equivalence class. For example, ``Decimal('32.100')`` and
``Decimal('0.321000e+2')`` both normalize to the equivalent value
``Decimal('32.1')``.


+-*/+-*/+-*/+-*/compare_total m 
compare_total(other)

Compare two operands using their abstract representation rather than their
numerical value.  Similar to the :meth:`compare` method, but the result
gives a total ordering on :class:`Decimal` instances.  Two
:class:`Decimal` instances with the same numeric value but different
representations compare unequal in this ordering:

   >>> Decimal('12.0').compare_total(Decimal('12'))
   Decimal('-1')

Quiet and signaling NaNs are also included in the total ordering.  The
result of this function is ``Decimal('0')`` if both operands have the same
representation, ``Decimal('-1')`` if the first operand is lower in the
total order than the second, and ``Decimal('1')`` if the first operand is
higher in the total order than the second operand.  See the specification
for details of the total order.


+-*/+-*/+-*/+-*/is_infinite m 
is_infinite()

Return :const:`True` if the argument is either positive or negative
infinity and :const:`False` otherwise.


+-*/+-*/+-*/+-*/exp m 
exp([context])

Return the value of the (natural) exponential function ``e**x`` at the
given number.  The result is correctly rounded using the
:const:`ROUND_HALF_EVEN` rounding mode.

>>> Decimal(1).exp()
Decimal('2.718281828459045235360287471')
>>> Decimal(321).exp()
Decimal('2.561702493119680037517373933E+139')


+-*/+-*/+-*/+-*/max m 
max(other[, context])

Like ``max(self, other)`` except that the context rounding rule is applied
before returning and that :const:`NaN` values are either signaled or
ignored (depending on the context and whether they are signaling or
quiet).


+-*/+-*/+-*/+-*/is_finite m 
is_finite()

Return :const:`True` if the argument is a finite number, and
:const:`False` if the argument is an infinity or a NaN.


+-*/+-*/+-*/+-*/to_integral_exact m 
to_integral_exact([rounding[, context]])

Round to the nearest integer, signaling :const:`Inexact` or
:const:`Rounded` as appropriate if rounding occurs.  The rounding mode is
determined by the ``rounding`` parameter if given, else by the given
``context``.  If neither parameter is given then the rounding mode of the
current context is used.


+-*/+-*/+-*/+-*/min_mag m 
min_mag(other[, context])

Similar to the :meth:`.min` method, but the comparison is done using the
absolute values of the operands.


+-*/+-*/+-*/+-*/remainder_near m 
remainder_near(other[, context])

Compute the modulo as either a positive or negative value depending on
which is closest to zero.  For instance, ``Decimal(10).remainder_near(6)``
returns ``Decimal('-2')`` which is closer to zero than ``Decimal('4')``.

If both are equally close, the one chosen will have the same sign as
*self*.


+-*/+-*/+-*/+-*/is_qnan m 
is_qnan()

Return :const:`True` if the argument is a quiet NaN, and
:const:`False` otherwise.


+-*/+-*/+-*/+-*/max_mag m 
max_mag(other[, context])

Similar to the :meth:`.max` method, but the comparison is done using the
absolute values of the operands.


+-*/+-*/+-*/+-*/rotate m 
rotate(other[, context])

Return the result of rotating the digits of the first operand by an amount
specified by the second operand.  The second operand must be an integer in
the range -precision through precision.  The absolute value of the second
operand gives the number of places to rotate.  If the second operand is
positive then rotation is to the left; otherwise rotation is to the right.
The coefficient of the first operand is padded on the left with zeros to
length precision if necessary.  The sign and exponent of the first operand
are unchanged.


+-*/+-*/+-*/+-*/to_integral_value m 
to_integral_value([rounding[, context]])

Round to the nearest integer without signaling :const:`Inexact` or
:const:`Rounded`.  If given, applies *rounding*; otherwise, uses the
rounding method in either the supplied *context* or the current context.




+-*/+-*/+-*/+-*/quantize m 
quantize(exp[, rounding[, context[, watchexp]]])

Return a value equal to the first operand after rounding and having the
exponent of the second operand.

>>> Decimal('1.41421356').quantize(Decimal('1.000'))
Decimal('1.414')

Unlike other operations, if the length of the coefficient after the
quantize operation would be greater than precision, then an
:const:`InvalidOperation` is signaled. This guarantees that, unless there
is an error condition, the quantized exponent is always equal to that of
the right-hand operand.

Also unlike other operations, quantize never signals Underflow, even if
the result is subnormal and inexact.

If the exponent of the second operand is larger than that of the first
then rounding may be necessary.  In this case, the rounding mode is
determined by the ``rounding`` argument if given, else by the given
``context`` argument; if neither argument is given the rounding mode of
the current thread's context is used.

If *watchexp* is set (default), then an error is returned whenever the
resulting exponent is greater than :attr:`Emax` or less than
:attr:`Etiny`.


+-*/+-*/+-*/+-*/compare_total_mag m 
compare_total_mag(other)

Compare two operands using their abstract representation rather than their
value as in :meth:`compare_total`, but ignoring the sign of each operand.
``x.compare_total_mag(y)`` is equivalent to
``x.copy_abs().compare_total(y.copy_abs())``.


+-*/+-*/+-*/+-*/shift m 
shift(other[, context])

Return the result of shifting the digits of the first operand by an amount
specified by the second operand.  The second operand must be an integer in
the range -precision through precision.  The absolute value of the second
operand gives the number of places to shift.  If the second operand is
positive then the shift is to the left; otherwise the shift is to the
right.  Digits shifted into the coefficient are zeros.  The sign and
exponent of the first operand are unchanged.


+-*/+-*/+-*/+-*/to_eng_string m 
to_eng_string([context])

Convert to an engineering-type string.

Engineering notation has an exponent which is a multiple of 3, so there
are up to 3 digits left of the decimal place.  For example, converts
``Decimal('123E+1')`` to ``Decimal('1.23E+3')``


+-*/+-*/+-*/+-*/number_class m 
number_class([context])

Return a string describing the *class* of the operand.  The returned value
is one of the following ten strings.

* ``"-Infinity"``, indicating that the operand is negative infinity.
* ``"-Normal"``, indicating that the operand is a negative normal number.
* ``"-Subnormal"``, indicating that the operand is negative and subnormal.
* ``"-Zero"``, indicating that the operand is a negative zero.
* ``"+Zero"``, indicating that the operand is a positive zero.
* ``"+Subnormal"``, indicating that the operand is positive and subnormal.
* ``"+Normal"``, indicating that the operand is a positive normal number.
* ``"+Infinity"``, indicating that the operand is positive infinity.
* ``"NaN"``, indicating that the operand is a quiet NaN (Not a Number).
* ``"sNaN"``, indicating that the operand is a signaling NaN.


+-*/+-*/+-*/+-*/logical_invert m 
logical_invert([context])

:meth:`logical_invert` is a logical operation.  The
result is the digit-wise inversion of the operand.


+-*/+-*/+-*/+-*/ln m 
ln([context])

Return the natural (base e) logarithm of the operand.  The result is
correctly rounded using the :const:`ROUND_HALF_EVEN` rounding mode.


+-*/+-*/+-*/+-*/next_plus m 
next_plus([context])

Return the smallest number representable in the given context (or in the
current thread's context if no context is given) that is larger than the
given operand.


+-*/+-*/+-*/+-*/next_toward m 
next_toward(other[, context])

If the two operands are unequal, return the number closest to the first
operand in the direction of the second operand.  If both operands are
numerically equal, return a copy of the first operand with the sign set to
be the same as the sign of the second operand.


+-*/+-*/+-*/+-*/is_snan m 
is_snan()

Return :const:`True` if the argument is a signaling NaN and :const:`False`
otherwise.


+-*/+-*/+-*/+-*/logical_and m 
logical_and(other[, context])

:meth:`logical_and` is a logical operation which takes two *logical
operands* (see :ref:`logical_operands_label`).  The result is the
digit-wise ``and`` of the two operands.


+-*/+-*/+-*/+-*/copy_abs m 
copy_abs()

Return the absolute value of the argument.  This operation is unaffected
by the context and is quiet: no flags are changed and no rounding is
performed.


+-*/+-*/+-*/+-*/is_normal m 
is_normal()

Return :const:`True` if the argument is a *normal* finite number.  Return
:const:`False` if the argument is zero, subnormal, infinite or a NaN.


+-*/+-*/+-*/BasicContext c 预设的常用精度环境对象,屏蔽精度相关异常
+-*/+-*/+-*/DecimalException e  数值异常信号类型 
+-*/+-*/+-*/+-*/Inexact e 发生四舍五入错误
+-*/+-*/+-*/+-*/+-*/Overflow e 数值上溢 
+-*/+-*/+-*/+-*/+-*/Underflow e 数值下溢 
+-*/+-*/+-*/+-*/InvalidOperation e 非法操作
InvalidOperation
   Infinity - Infinity
   0 * Infinity
   Infinity / Infinity
   x % 0
   Infinity % x
   x._rescale( non-integer )
   sqrt(-x) and x > 0
   0 ** 0
   x ** (non-integer)
   x ** Infinity
+-*/+-*/+-*/+-*/DivisionByZero e 非无限数值除0 
+-*/+-*/+-*/+-*/Clamped e 对指数进行调整以适合其允许范围Emin--Emax 
+-*/+-*/+-*/+-*/Subnormal e 在四舍五入之前指数小于Emin 
+-*/+-*/+-*/+-*/+-*/Underflow e 数值下溢 
+-*/+-*/+-*/+-*/Rounded e 产生四舍五入，包括1.00四舍五入到1.0 
+-*/+-*/+-*/+-*/+-*/Overflow e 数值上溢 
+-*/+-*/+-*/+-*/+-*/Underflow e 数值下溢 
+-*/+-*/+-*/DefaultContext c 系统默认精度环境对象
+-*/+-*/+-*/Context c 精度控制的十进制环境对象
Context(prec=None, rounding=None, traps=None, flags=None, 
        Emin=None, Emax=None, capitals=None, clamp=None)
  prec:     精度位数
  rounding: 四舍五入的方式
    decimal.ROUND_CEILING     向正无穷方向舍入，2.58->2.6 -2.58->-2.5
    decimal.ROUND_DOWN        向0舍入，2.58->2.5 -2.58->2.5
    decimal.ROUND_FLOOR       向负无穷方向舍入，2.58->2.5 -2.58->-2.6
    decimal.ROUND_HALF_DOWN   向0四舍五入，2.55->2.5 -2.55->-2.5 2.58->2.6
    decimal.ROUND_HALF_EVEN   向偶数四舍五入，2.65->2.6 2.55->2.6
    decimal.ROUND_HALF_UP     向外四舍五入，2.55->2.6 -2.55->-2.6 这个较常用
    decimal.ROUND_UP          向外舍入，2.52->2.6 -2.58->2.6
    decimal.ROUND_05UP        向非五倍数舍入，2.54->2.6 2.64->2.6
  traps:    不可忽略的异常信号列表
  flags:    不作记录的异常信号列表
  Emin:     最小指数
  Emax:     最大指数
  capitals: 如为1则使用E作指数字符，否则用e
+-*/+-*/+-*/+-*/rounding d  四舍五入的方式
+-*/+-*/+-*/+-*/prec d      精度位数
+-*/+-*/+-*/+-*/traps d     可导致异常的信号字典，值为真或假
  通常c.traps[DivisionByZero]为True,c.traps[Rounded]为False
        decimal.Inexact             发生四舍五入错误
        decimal.Overflow            数值上溢
        decimal.Underflow           数值下溢
        decimal.InvalidOperation    非法操作
        decimal.DivisionByZero      非无限数值除0
        decimal.Clamped             对指数进行调整以适合其允许范围Emin--Emax
        decimal.Subnormal           在四舍五入之前指数小于Emin
        decimal.Underflow           数值下溢
        decimal.Rounded             产生四舍五入，包括1.00四舍五入到1.0
        decimal.Overflow            数值上溢
        decimal.Underflow           数值下溢
+-*/+-*/+-*/+-*/flags d     异常信号当前标志的字典,如c.flags[Rounded]为是否舍入
+-*/+-*/+-*/+-*/clear_flags m  重置flags里现存异常信号标志
+-*/+-*/+-*/+-*/Emin d      最小指数
+-*/+-*/+-*/+-*/Emax d      最大指数
+-*/+-*/+-*/+-*/capitals d  如为1则使用E作指数字符，否则用e
+-*/+-*/+-*/+-*/compare m 
compare(x, y)

Compares *x* and *y* numerically.



+-*/+-*/+-*/+-*/radix m 
radix()

Just returns 10, as this is Decimal, :)



+-*/+-*/+-*/+-*/divide m 
divide(x, y)

Return *x* divided by *y*.



+-*/+-*/+-*/+-*/is_subnormal m 
is_subnormal(x)

Returns True if *x* is subnormal; otherwise returns False.



+-*/+-*/+-*/+-*/to_eng_string m 
to_eng_string(x)

Converts a number to a string, using scientific notation.



+-*/+-*/+-*/+-*/to_sci_string m 
to_sci_string(x)

Converts a number to a string using scientific notation.



+-*/+-*/+-*/+-*/logical_or m 
logical_or(x, y)

Applies the logical operation *or* between each operand's digits.



+-*/+-*/+-*/+-*/compare_signal m 
compare_signal(x, y)

Compares the values of the two operands numerically.



+-*/+-*/+-*/+-*/logb m 
logb(x)

Returns the exponent of the magnitude of the operand's MSD.



+-*/+-*/+-*/+-*/divmod m 
divmod(x, y)

Divides two numbers and returns the integer part of the result.



+-*/+-*/+-*/+-*/is_nan m 
is_nan(x)

Returns True if *x* is a qNaN or sNaN; otherwise returns False.



+-*/+-*/+-*/+-*/copy_negate m 
copy_negate(x)

Returns a copy of *x* with the sign inverted.



+-*/+-*/+-*/+-*/canonical m 
canonical(x)

Returns the same Decimal object *x*.



+-*/+-*/+-*/+-*/logical_xor m 
logical_xor(x, y)

Applies the logical operation *xor* between each operand's digits.



+-*/+-*/+-*/+-*/same_quantum m 
same_quantum(x, y)

Returns True if the two operands have the same exponent.



+-*/+-*/+-*/+-*/min m 
min(x, y)

Compares two values numerically and returns the minimum.



+-*/+-*/+-*/+-*/copy_sign m 
copy_sign(x, y)

Copies the sign from *y* to *x*.



+-*/+-*/+-*/+-*/remainder m 
remainder(x, y)

Returns the remainder from integer division.

The sign of the result, if non-zero, is the same as that of the original
dividend.



+-*/+-*/+-*/+-*/is_signed m 
is_signed(x)

Returns True if *x* is negative; otherwise returns False.



+-*/+-*/+-*/+-*/logical_invert m 
logical_invert(x)

Invert all the digits in *x*.



+-*/+-*/+-*/+-*/add m 
add(x, y)

Return the sum of *x* and *y*.



+-*/+-*/+-*/+-*/abs m 
abs(x)

Returns the absolute value of *x*.



+-*/+-*/+-*/+-*/is_zero m 
is_zero(x)

Returns True if *x* is a zero; otherwise returns False.



+-*/+-*/+-*/+-*/next_minus m 
next_minus(x)

Returns the largest representable number smaller than *x*.



+-*/+-*/+-*/+-*/plus m 
plus(x)

Plus corresponds to the unary prefix plus operator in Python.  This
operation applies the context precision and rounding, so it is *not* an
identity operation.



+-*/+-*/+-*/+-*/is_canonical m 
is_canonical(x)

Returns True if *x* is canonical; otherwise returns False.



+-*/+-*/+-*/+-*/log10 m 
log10(x)

Returns the base 10 logarithm of *x*.



+-*/+-*/+-*/+-*/fma m 
fma(x, y, z)

Returns *x* multiplied by *y*, plus *z*.



+-*/+-*/+-*/+-*/normalize m 
normalize(x)

Reduces *x* to its simplest form.



+-*/+-*/+-*/+-*/compare_total m 
compare_total(x, y)

Compares two operands using their abstract representation.



+-*/+-*/+-*/+-*/is_infinite m 
is_infinite(x)

Returns True if *x* is infinite; otherwise returns False.



+-*/+-*/+-*/+-*/is_snan m 
is_snan(x)

Returns True if *x* is a signaling NaN; otherwise returns False.



+-*/+-*/+-*/+-*/power m 
power(x, y[, modulo])

Return ``x`` to the power of ``y``, reduced modulo ``modulo`` if given.

With two arguments, compute ``x**y``.  If ``x`` is negative then ``y``
must be integral.  The result will be inexact unless ``y`` is integral and
the result is finite and can be expressed exactly in 'precision' digits.
The result should always be correctly rounded, using the rounding mode of
the current thread's context.

With three arguments, compute ``(x**y) % modulo``.  For the three argument
form, the following restrictions on the arguments hold:

   - all three arguments must be integral
   - ``y`` must be nonnegative
   - at least one of ``x`` or ``y`` must be nonzero
   - ``modulo`` must be nonzero and have at most 'precision' digits

The value resulting from ``Context.power(x, y, modulo)`` is
equal to the value that would be obtained by computing ``(x**y)
% modulo`` with unbounded precision, but is computed more
efficiently.  The exponent of the result is zero, regardless of
the exponents of ``x``, ``y`` and ``modulo``.  The result is
always exact.



+-*/+-*/+-*/+-*/max m 
max(x, y)

Compares two values numerically and returns the maximum.



+-*/+-*/+-*/+-*/is_finite m 
is_finite(x)

Returns True if *x* is finite; otherwise returns False.



+-*/+-*/+-*/+-*/Etiny m 
Etiny()

Returns a value equal to ``Emin - prec + 1`` which is the minimum exponent
value for subnormal results.  When underflow occurs, the exponent is set
to :const:`Etiny`.


+-*/+-*/+-*/+-*/compare_total_mag m 
compare_total_mag(x, y)

Compares two operands using their abstract representation, ignoring sign.



+-*/+-*/+-*/+-*/min_mag m 
min_mag(x, y)

Compares the values numerically with their sign ignored.



+-*/+-*/+-*/+-*/multiply m 
multiply(x, y)

Return the product of *x* and *y*.



+-*/+-*/+-*/+-*/divide_int m 
divide_int(x, y)

Return *x* divided by *y*, truncated to an integer.



+-*/+-*/+-*/+-*/copy m 创建一个数值精度环境副本
+-*/+-*/+-*/+-*/subtract m 
subtract(x, y)

Return the difference between *x* and *y*.



+-*/+-*/+-*/+-*/create_decimal_from_float m 
create_decimal_from_float(f)

Creates a new Decimal instance from a float *f* but rounding using *self*
as the context.  Unlike the :meth:`Decimal.from_float` class method,
the context precision, rounding method, flags, and traps are applied to
the conversion.

.. doctest::

   >>> context = Context(prec=5, rounding=ROUND_DOWN)
   >>> context.create_decimal_from_float(math.pi)
   Decimal('3.1415')
   >>> context = Context(prec=5, traps=[Inexact])
   >>> context.create_decimal_from_float(math.pi)
   Traceback (most recent call last):
       ...
   decimal.Inexact: None

.. versionadded:: 3.1


+-*/+-*/+-*/+-*/max_mag m 
max_mag(x, y)

Compares the values numerically with their sign ignored.



+-*/+-*/+-*/+-*/rotate m 
rotate(x, y)

Returns a rotated copy of *x*, *y* times.



+-*/+-*/+-*/+-*/is_qnan m 
is_qnan(x)

Returns True if *x* is a quiet NaN; otherwise returns False.



+-*/+-*/+-*/+-*/quantize m 
quantize(x, y)

Returns a value equal to *x* (rounded), having the exponent of *y*.



+-*/+-*/+-*/+-*/remainder_near m 
remainder_near(x, y)

Returns ``x - y * n``, where *n* is the integer nearest the exact value
of ``x / y`` (if the result is 0 then its sign will be the sign of *x*).



+-*/+-*/+-*/+-*/shift m 
shift(x, y)

Returns a shifted copy of *x*, *y* times.



+-*/+-*/+-*/+-*/copy_decimal m 
copy_decimal(num)

Return a copy of the Decimal instance num.


+-*/+-*/+-*/+-*/number_class m 
number_class(x)

Returns an indication of the class of *x*.



+-*/+-*/+-*/+-*/Etop m 
Etop()

Returns a value equal to ``Emax - prec + 1``.


+-*/+-*/+-*/+-*/to_integral_exact m 
to_integral_exact(x)

Rounds to an integer.



+-*/+-*/+-*/+-*/sqrt m 
sqrt(x)

Square root of a non-negative number to context precision.



+-*/+-*/+-*/+-*/ln m 
ln(x)

Returns the natural (base e) logarithm of *x*.



+-*/+-*/+-*/+-*/next_plus m 
next_plus(x)

Returns the smallest representable number larger than *x*.



+-*/+-*/+-*/+-*/next_toward m 
next_toward(x, y)

Returns the number closest to *x*, in direction towards *y*.



+-*/+-*/+-*/+-*/create_decimal m 以自身精度设定创建一个新的数值对象
+-*/+-*/+-*/+-*/exp m 
exp(x)

Returns `e ** x`.



+-*/+-*/+-*/+-*/logical_and m 
logical_and(x, y)

Applies the logical operation *and* between each operand's digits.



+-*/+-*/+-*/+-*/minus m 
minus(x)

Minus corresponds to the unary prefix minus operator in Python.



+-*/+-*/+-*/+-*/copy_abs m 
copy_abs(x)

Returns a copy of *x* with the sign set to 0.



+-*/+-*/+-*/+-*/is_normal m 
is_normal(x)

Returns True if *x* is a normal number; otherwise returns False.



+-*/+-*/fractions p 有理数(分数)模块
+-*/+-*/+-*/gcd f 获取两整数的最大公约数
gcd(a, b)
+-*/+-*/+-*/Fraction c 分数类型
Fraction(numerator=0, denominator=1)
  numerator,denominator 为分子和分母
Fraction(string)
  string除了一般的数字，还可以是'3/7'这样的形式
  分数实例可作一般计算，要转换为整数可使用floor,round,ceil等系统函数
+-*/+-*/+-*/+-*/limit_denominator m 查找简化的相似分数
limit_denominator(max_denominator=1000000)
  max_denominator:  结果能使用的最大分母
   >>> from fractions import Fraction
   >>> Fraction('3.1415926535897932').limit_denominator(1000)
   Fraction(355, 113)
+-*/+-*/+-*/+-*/numerator d 分子
+-*/+-*/+-*/+-*/denominator d 分母
+-*/+-*/+-*/+-*/from_decimal m 由decimal创建一个分数
from_decimal(dec)
+-*/+-*/+-*/+-*/from_float m 由浮点数创建一个分数 
from_float(flt)
+-*/+-*/math p 数学运算模块
+-*/+-*/+-*/pow f 返回x**y
+-*/+-*/+-*/fsum f 比内置sum精确，尽量避免浮点问题
fsum(iterable)
     >>> sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
     0.9999999999999999
     >>> fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
     1.0
+-*/+-*/+-*/cosh f 返回x的双曲线余弦
+-*/+-*/+-*/ldexp f 返回x*(2**i)``.逆函数为frexp
+-*/+-*/+-*/hypot f 返回欧几里德距离，sqrt(x*x+y*y)
+-*/+-*/+-*/acosh f 返回x的双曲线反余弦
+-*/+-*/+-*/tan f 返回x的正切
+-*/+-*/+-*/asin f 返回x的反正弦
+-*/+-*/+-*/isnan f x是否是NaN(非数值)
+-*/+-*/+-*/log f 获取对数
log(x[, base])
  忽略base则返回x的自然对数
+-*/+-*/+-*/fabs f 返回x的绝对值
+-*/+-*/+-*/floor f 返回小于x的最大整数
floor(x) 等价 x.__floor__()
+-*/+-*/+-*/atanh f 返回x的双曲线反正切 
+-*/+-*/+-*/sqrt f 返回x的平方根 
+-*/+-*/+-*/lgamma f 
TODO:
lgamma(x)

Return the natural logarithm of the absolute value of the Gamma
function at *x*.

.. versionadded:: 3.2



+-*/+-*/+-*/frexp f 获取一个数的尾数和指数，逆函数为ldexp
frexp(x)
  返回(m,e), x==m*(2**e), 0.5<=abs(m)<1
+-*/+-*/+-*/degrees f 从弧度转换为角度 
+-*/+-*/+-*/log10 f 同log(x,10) 
+-*/+-*/+-*/sin f 返回x的正弦
+-*/+-*/+-*/asinh f 返回x的双曲线反正弦 
+-*/+-*/+-*/fmod f 返回x对y的模 
+-*/+-*/+-*/atan f 返回x的反正切 
+-*/+-*/+-*/factorial f 返回x的阶乘 
+-*/+-*/+-*/copysign f 返回与y同符号的x 
copysign(x, y)
  copysign(1.0, -0.0)返回-1.0
+-*/+-*/+-*/cos f 返回x的余弦 
+-*/+-*/+-*/ceil f 返回大于x的最小整数 
+-*/+-*/+-*/isinf f x是否是无穷数 
+-*/+-*/+-*/sinh f 返回x的双曲线正弦 
+-*/+-*/+-*/trunc f  将x截为最接近0的整数
+-*/+-*/+-*/expm1 f 
TODO:
expm1(x)

Return ``e**x - 1``.  For small floats *x*, the subtraction in ``exp(x) - 1``
can result in a `significant loss of precision
<http://en.wikipedia.org/wiki/Loss_of_significance>`_\; the :func:`expm1`
function provides a way to compute this quantity to full precision::

   >>> from math import exp, expm1
   >>> exp(1e-5) - 1  # gives result accurate to 11 places
   1.0000050000069649e-05
   >>> expm1(1e-5)    # result accurate to full precision
   1.0000050000166668e-05

.. versionadded:: 3.2



+-*/+-*/+-*/tanh f 返回x的双曲线正切 
+-*/+-*/+-*/radians f 转换角度为弧度 
+-*/+-*/+-*/atan2 f 返回y/x的反正切 
atan2(y, x)
  返回atan(y/x),不同的是
  atan(1)和atan2(1, 1)都返回pi/4
  不过atan2(-1, -1)返回-3*pi/4
+-*/+-*/+-*/erf f 
TODO:
erf(x)

Return the `error function <http://en.wikipedia.org/wiki/Error_function>`_ at
*x*.

The :func:`erf` function can be used to compute traditional statistical
functions such as the `cumulative standard normal distribution
<http://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function>`_::

  def phi(x):
      'Cumulative distribution function for the standard normal distribution'
      return (1.0 + erf(x / sqrt(2.0))) / 2.0

.. versionadded:: 3.2



+-*/+-*/+-*/erfc f 
TODO:
erfc(x)

Return the complementary error function at *x*.  The `complementary error
function <http://en.wikipedia.org/wiki/Error_function>`_ is defined as
``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction
from one would cause a `loss of significance
<http://en.wikipedia.org/wiki/Loss_of_significance>`_\.

.. versionadded:: 3.2



+-*/+-*/+-*/modf f 返回x的小数和整数(元组形式),符号都和x相同
+-*/+-*/+-*/exp f 返回e**x
+-*/+-*/+-*/acos f 返回x的反余弦
+-*/+-*/+-*/log1p f 返回1+x的自然对数
+-*/+-*/+-*/isfinite f  
TODO:
isfinite(x)

Return ``True`` if *x* is neither an infinity nor a NaN, and
``False`` otherwise.  (Note that ``0.0`` *is* considered finite.)

.. versionadded:: 3.2



+-*/+-*/+-*/gamma f 
TODO:
gamma(x)

Return the `Gamma function <http://en.wikipedia.org/wiki/Gamma_function>`_ at
*x*.

.. versionadded:: 3.2




+-*/+-*/+-*/pi d 数学常量pi
+-*/+-*/+-*/e d 数学常量e
+-*/+-*/numbers p 数值类型模块
如要实现自定义的数值类型，最好由此模块的类继承定义
+-*/+-*/+-*/Number t 数值基类(抽象类)
Number
  如果要检查是否是数值，可使用isinstance(x, Number)
+-*/+-*/+-*/+-*/Complex t 复数类型
  定义了四则运算,是否相等,abs,bool,complex等操作的数
+-*/+-*/+-*/+-*/+-*/real d 实部
+-*/+-*/+-*/+-*/+-*/imag d 虚部 
+-*/+-*/+-*/+-*/+-*/conjugate m 获取共轭
+-*/+-*/+-*/+-*/+-*/Real t 实数类型
  扩增定义了取整,取模,比较大小,float等操作
+-*/+-*/+-*/+-*/+-*/+-*/Rational t 分数类型
+-*/+-*/+-*/+-*/+-*/+-*/+-*/numerator d 分子
+-*/+-*/+-*/+-*/+-*/+-*/+-*/denominator d 分母
+-*/+-*/+-*/+-*/+-*/+-*/+-*/Integral t 整数类型
+-*/+-*/random p 随机数模块
+-*/+-*/+-*/lognormvariate f 对数分布
lognormvariate(mu, sigma)
+-*/+-*/+-*/getstate f 获取随机数生成器状态(多用于备份恢复等用途)  
+-*/+-*/+-*/shuffle f 随机打乱一个列表(不生成新列表，对原列表作操作)
shuffle(x[, random])
  random:   随机生成函数，其没有参数，返回值应在[0.0, 1.0)范围
+-*/+-*/+-*/randrange f 在range序列里随机挑选一个整数 
randrange([start,] stop[, step])
  start: 默认0
  stop: 序列不包括stop的值
  step: 如是负数，则生成降序整数
+-*/+-*/+-*/triangular f 三角分布 
triangular(low, high, mode)
+-*/+-*/+-*/randint f 在[a,b]区间内随机挑选一个整数 
randint(a, b)
  a <= 返回的随机值 <= b
+-*/+-*/+-*/betavariate f B分布 
betavariate(alpha, beta)
+-*/+-*/+-*/paretovariate f 帕累托分布 
paretovariate(alpha)
+-*/+-*/+-*/random f 返回[0.0,1.0)之间的一个随机数
+-*/+-*/+-*/gammavariate f 伽马分布 
gammavariate(alpha, beta)
+-*/+-*/+-*/gauss f 高斯分布 
gauss(mu, sigma)
+-*/+-*/+-*/choice f 从非空序列里随机挑一项 
choice(seq)
  如seq为空则报IndexError.
+-*/+-*/+-*/sample f 从非空序列里随机挑多项
sample(population, k)
+-*/+-*/+-*/seed f 初始化随机数生成器
seed([x], version=2)
  如省略x则默认使用系统时间为种子
+-*/+-*/+-*/weibullvariate f 韦伯分布 
weibullvariate(alpha, beta)
+-*/+-*/+-*/normalvariate f 正态分布 
normalvariate(mu, sigma)
+-*/+-*/+-*/vonmisesvariate f von mises分布
vonmisesvariate(mu, kappa)
+-*/+-*/+-*/uniform f 连续型均匀分布 
uniform(a, b)
+-*/+-*/+-*/expovariate f 指数分布
expovariate(lambd)
+-*/+-*/+-*/getrandbits f 创建包含k个随机位的整数 
getrandbits(k)
+-*/+-*/+-*/setstate f  设置随机数生成器状态(多用于备份恢复等用途)  
+-*/+-*/+-*/Random c 随机数生成器类型 
+-*/+-*/+-*/+-*/random m 返回[0.0,1.0)之间的一个随机数
+-*/+-*/+-*/+-*/setstate m  设置随机数生成器状态(多用于备份恢复等用途)  
+-*/+-*/+-*/+-*/getstate m 获取随机数生成器状态(多用于备份恢复等用途)  
+-*/+-*/+-*/+-*/seed m 初始化随机数生成器
seed([x], version=2)
  如省略x则默认使用系统时间为种子
+-*/+-*/+-*/+-*/SystemRandom c 使用系统随机数生成器的随机数生成器类型
SystemRandom([seed])
  使用os.urandom生成随机数
+-*/操作文件 _
+-*/+-*/filecmp p 文件目录比较模块
+-*/+-*/+-*/cmpfiles f 比较两个目录里指定的某些文件
cmpfiles(dir1, dir2, common, shallow=True)
  dir1,dir2     目录路径
  common:       要比较的文件名称列表(文件名里可带相对路径，如b/c)
  shallow: 默认为True,只比较文件大小，如为False则会进一步比较内容来确定是否相同
  返回为三个列表的元组，第一个存放相同文件的名称，第二个存放不同文件的名称
  第三个存放出错文件的名称(包括目录里缺少指定文件的文件名称等)
+-*/+-*/+-*/cmp f 检测文件是否相同
cmp(f1, f2, shallow=True)
  f1,f2  文件名
  shallow: 默认为True,只比较文件大小，如为False则会进一步比较内容来确定是否相同
+-*/+-*/+-*/dircmp c 创建目录比较对象
dircmp(a, b, ignore=None, hide=None)
  a,b     目录路径
  ignore: 要忽略的文件名称列表,默认['RCS', 'CVS', 'tags']
  hide:   要隐藏的文件名称列表，默认是['.','..']
  只比较目录下的文件和子目录，不比较子目录里的，
  如需要子目录的比较轻况可由subdirs里获得
+-*/+-*/+-*/+-*/common_dirs d 共有(同名)的目录名列表
+-*/+-*/+-*/+-*/same_files d 内容相同的同名文件列表
+-*/+-*/+-*/+-*/common_funny d 共有(同名)的不可比较列表TODO:
+-*/+-*/+-*/+-*/funny_files d 不可比较的同名文件列表TODO:
+-*/+-*/+-*/+-*/common_files d  共有(同名)的文件名列表
+-*/+-*/+-*/+-*/subdirs d 共有目录的比较对象字典
subdirs
  如 {'a':dircmp_obj1, 'b':dircmp_obj2}
+-*/+-*/+-*/+-*/common d 共有(同名)的文件目录列表
+-*/+-*/+-*/+-*/diff_files d 内容不同的同名文件列表
+-*/+-*/+-*/+-*/right_only d 只在右边里出现的文件目录列表
+-*/+-*/+-*/+-*/left_list d 左边目录里的所有文件目录列表
+-*/+-*/+-*/+-*/left_only d 只在左边里出现的文件目录列表
+-*/+-*/+-*/+-*/right_list d 右边目录里的所有文件目录列表
+-*/+-*/+-*/+-*/report m 输出显示比较两个目录(不比较子目录里的)的结果
+-*/+-*/+-*/+-*/report_full_closure m 显示比较两个目录(所有子目录)的结果
+-*/+-*/+-*/+-*/report_partial_closure m 显示只比较两个目录(含相同子目录)的结果
+-*/+-*/fnmatch p 通配符操作模块
+-*/+-*/+-*/fnmatch f 检查文件名是否符合通配符(由操作系统决定是否区分大小写)
fnmatch(filename, pattern)
  pattern:  通配符，如'*.txt'
          '*'    任意匹配
          '?'    单字符任意匹配
          [ab]   匹配a或b的单个字符
          [!ab]  不是a或b的单个字符
+-*/+-*/+-*/fnmatchcase f  检查文件名是否符合通配符(区分大小写)
fnmatchcase(filename, pattern)
  pattern:  通配符，如'*.txt'
          '*'    任意匹配
          '?'    单字符任意匹配
          [ab]   匹配a或b的单个字符
          [!ab]  不是a或b的单个字符
+-*/+-*/+-*/translate f 由通配符生成正则表达式
translate(pattern)
  pattern:  通配符，如'*.txt'
          '*'    任意匹配
          '?'    单字符任意匹配
          [ab]   匹配a或b的单个字符
          [!ab]  不是a或b的单个字符
   >>> regex = fnmatch.translate('*.txt')
   >>> regex
   '.*\\.txt$'
+-*/+-*/+-*/filter f 用通配符过滤文件名列表，返回匹配的文件名列表
filter(names, pattern)
  pattern:  通配符，如'*.txt'
          '*'    任意匹配
          '?'    单字符任意匹配
          [ab]   匹配a或b的单个字符
          [!ab]  不是a或b的单个字符
+-*/+-*/glob p 由通配符获取文件的模块
+-*/+-*/+-*/glob f 由通配符获取文件名称列表
glob(pathname)
  pathname:  通配符，可以是绝对路径或相对路径('../aa/*/*.gif'),不支持'~'和其他
          '*'    任意匹配
          '?'    单字符任意匹配
          [ab]   匹配a或b的单个字符
          [!ab]  不是a或b的单个字符
+-*/+-*/+-*/iglob f  由通配符获取文件名称迭代序列
iglob(pathname)
  pathname:  通配符，可以是绝对路径或相对路径('../aa/*/*.gif'),不支持'~'和其他
          '*'    任意匹配
          '?'    单字符任意匹配
          [ab]   匹配a或b的单个字符
          [!ab]  不是a或b的单个字符
+-*/+-*/shutil p 常用文件管理操作模块
+-*/+-*/+-*/copyfile f 复制文件(不复制文件权限位rwx)
copyfile(src, dst)
+-*/+-*/+-*/move f 移动文件或目录
move(src, dst)
+-*/+-*/+-*/copymode f 仅复制文件权限位rwx(目标文件必须存在)
copymode(src, dst)
+-*/+-*/+-*/register_archive_format f 
TODO:
register_archive_format(name, function, [extra_args, [description]])

Register an archiver for the format *name*. *function* is a callable that
will be used to invoke the archiver.

If given, *extra_args* is a sequence of ``(name, value)`` pairs that will be
used as extra keywords arguments when the archiver callable is used.

*description* is used by :func:`get_archive_formats` which returns the
list of archivers. Defaults to an empty list.

.. versionadded:: 3.2



+-*/+-*/+-*/copyfileobj f 将文件对象里的内容复制到另一个文件对象里
copyfileobj(fsrc, fdst[, length])
  lenght:   缓冲容量大小
+-*/+-*/+-*/copy2 f 复制文件(同时复制最后访问和修改时间和文件权限位rwx)
copy2(src, dst)
+-*/+-*/+-*/ignore_patterns f 创建一个文件过滤函数(主要用于copytree和os.walk)
ignore_patterns(p1,p2,...)
  p1,p2..  为各种需匹配的通配符
  返回一个函数，函数的参数是两个，一个是目录名称，一个是目录里文件目录名称列表
  此函数返回列表里匹配p1或p2..的名称列表
+-*/+-*/+-*/unregister_archive_format f 
unregister_archive_format(name)

Remove the archive format *name* from the list of supported formats.

.. versionadded:: 3.2



+-*/+-*/+-*/copystat f 仅复制文件权限位和时间标记(目标文件须存在)
copystat(src, dst)
+-*/+-*/+-*/unregister_unpack_format f 
unregister_unpack_format(name)

Unregister an unpack format. *name* is the name of the format.

.. versionadded:: 3.2



+-*/+-*/+-*/unpack_archive f 
unpack_archive(filename[, extract_dir[, format]])

Unpack an archive. *filename* is the full path of the archive.

*extract_dir* is the name of the target directory where the archive is
unpacked. If not provided, the current working directory is used.

*format* is the archive format: one of "zip", "tar", or "gztar". Or any
other format registered with :func:`register_unpack_format`. If not
provided, :func:`unpack_archive` will use the archive file name extension
and see if an unpacker was registered for that extension. In case none is
found, a :exc:`ValueError` is raised.

.. versionadded:: 3.2



+-*/+-*/+-*/register_unpack_format f 
register_unpack_format(name, extensions, function[, extra_args[, description]])

Registers an unpack format. *name* is the name of the format and
*extensions* is a list of extensions corresponding to the format, like
``.zip`` for Zip files.

*function* is the callable that will be used to unpack archives. The
callable will receive the path of the archive, followed by the directory
the archive must be extracted to.

When provided, *extra_args* is a sequence of ``(name, value)`` tuples that
will be passed as keywords arguments to the callable.

*description* can be provided to describe the format, and will be returned
by the :func:`get_unpack_formats` function.

.. versionadded:: 3.2



+-*/+-*/+-*/rmtree f 删除目录
rmtree(path, ignore_errors=False, onerror=None)
  path:             目录路径
  ignore_errors:    是否忽略错误
  onerror:          不忽略错误时处理错误的函数
          这个函数的参数是(func,path,excinfo)
            func 可能会是os.remove或os.rmdir
            path 是当时所处理的路径
            excinfo 是由sys.exc_info产生的
                          type      异常类型
                          value     raise语句提供的值
                          traceback 回朔追踪对象
+-*/+-*/+-*/copytree f 复制目录(目标目录不能已存在)
copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, 
        ignore_dangling_symlinks=False)
  symlinks:  为真则复制符号链接，为假则复制为普通文件
  ignore:    一个以目录名和该目录下文件目录名称列表为参数的过滤函数
             其返回值为要被忽略的文件目录名称列表
  copy_function:  复制方式
  如复制当中发生错误，将不会马上停止复制，处理结束完才会报错
  异常的参数为一个包含所有错误的列表，其元素形式为(srcname,dstname,exception)
+-*/+-*/+-*/make_archive f 
make_archive(base_name, format, [root_dir, [base_dir, [verbose, [dry_run, [owner, [group, [logger]]]]]]])

Create an archive file (such as zip or tar) and return its name.

*base_name* is the name of the file to create, including the path, minus
any format-specific extension. *format* is the archive format: one of
"zip", "tar", "bztar" (if the :mod:`bz2` module is available) or "gztar".

*root_dir* is a directory that will be the root directory of the
archive; for example, we typically chdir into *root_dir* before creating the
archive.

*base_dir* is the directory where we start archiving from;
i.e. *base_dir* will be the common prefix of all files and
directories in the archive.

*root_dir* and *base_dir* both default to the current directory.

*owner* and *group* are used when creating a tar archive. By default,
uses the current owner and group.

*logger* is an instance of :class:`logging.Logger`.

.. versionadded:: 3.2



+-*/+-*/+-*/copy f 复制文件(同时复制文件权限位rwx)
copy(src, dst)
+-*/+-*/+-*/get_archive_formats f 
get_archive_formats()

Return a list of supported formats for archiving.
Each element of the returned sequence is a tuple ``(name, description)``

By default :mod:`shutil` provides these formats:

- *gztar*: gzip'ed tar-file
- *bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available.)
- *tar*: uncompressed tar file
- *zip*: ZIP file

You can register new formats or provide your own archiver for any existing
formats, by using :func:`register_archive_format`.

.. versionadded:: 3.2



+-*/+-*/+-*/get_unpack_formats f 
get_unpack_formats()

Return a list of all registered formats for unpacking.
Each element of the returned sequence is a tuple
``(name, extensions, description)``.

By default :mod:`shutil` provides these formats:

- *gztar*: gzip'ed tar-file
- *bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available.)
- *tar*: uncompressed tar file
- *zip*: ZIP file

You can register new formats or provide your own unpacker for any existing
formats, by using :func:`register_unpack_format`.

.. versionadded:: 3.2




+-*/+-*/+-*/Error e 
Error

This exception collects exceptions that are raised during a multi-file
operation. For :func:`copytree`, the exception argument is a list of 3-tuples
(*srcname*, *dstname*, *exception*).



+-*/+-*/stat p 文件属性模块，用于os.stat(),os.lstat(),os.fstat().
+-*/+-*/+-*/S_ISCHR f 是否是字符设备文件(无缓冲设备)
S_ISCHR(mode)
+-*/+-*/+-*/S_IFMT f 获取文件类型数值(可用S_IS..检测)
S_IFMT(mode)
+-*/+-*/+-*/S_ISREG f 是否是一般文件
S_ISREG(mode)
+-*/+-*/+-*/S_ISBLK f 是否是块设备文件(有缓冲设备,每次读写固定大小数据)
S_ISBLK(mode)
+-*/+-*/+-*/S_ISFIFO f 是否是管道 
S_ISFIFO(mode)
+-*/+-*/+-*/S_ISDIR f 是否是目录
S_ISDIR(mode)
+-*/+-*/+-*/S_ISSOCK f 是否是套接字接口
S_ISSOCK(mode)
+-*/+-*/+-*/S_ISLNK f 是否是符号链接文件
S_ISLNK(mode)
+-*/+-*/+-*/S_IMODE f 获取文件权限数值
S_IMODE(mode)
+-*/+-*/+-*/S_IXOTH d 其他用户有执行权0o001
+-*/+-*/+-*/S_IWOTH d 其他用户有写权限0o002
+-*/+-*/+-*/S_IROTH d 其他用户有读权限0o004 
+-*/+-*/+-*/S_IRWXO d 其他用户有全部权限(权限掩码)0o007
+-*/+-*/+-*/S_IXGRP d 组用户有执行权限0o010
+-*/+-*/+-*/S_IWGRP d 组用户有写权限0o020
+-*/+-*/+-*/S_IRGRP d 组用户有读权限0o040 
+-*/+-*/+-*/S_IRWXG d 组用户有全部权限(权限掩码)0o070
+-*/+-*/+-*/S_IXUSR d 拥有者具有执行权限0o100
+-*/+-*/+-*/S_IWUSR d 拥有者具有写权限0o200 
+-*/+-*/+-*/S_IRUSR d 拥有者具有读权限0o400
+-*/+-*/+-*/S_IRWXU d 拥有者有全部权限(权限掩码)0o700
+-*/+-*/+-*/S_ISVTX d 目录里文件目录只有拥有者才可删除0o1000
+-*/+-*/+-*/S_ISGID d 执行此文件其进程有效组为文件所在组0o2000
+-*/+-*/+-*/S_ISUID d 执行此文件其进程有效用户为文件所有者0o4000
+-*/+-*/+-*/S_IFIFO d 管道
+-*/+-*/+-*/S_IFCHR d 字符设备文件
+-*/+-*/+-*/S_IFBLK d 块设备文件
+-*/+-*/+-*/S_IFDIR d 目录
+-*/+-*/+-*/S_IFREG d 一般文件
+-*/+-*/+-*/S_IFLNK d 链接文件
+-*/+-*/+-*/S_IFSOCK d 套接字
+-*/+-*/+-*/S_IREAD d windows下设只读
+-*/+-*/+-*/S_ENFMT d  
+-*/+-*/+-*/S_IEXEC d 
+-*/+-*/+-*/S_IWRITE d windows下取消只读
+-*/+-*/+-*/SF_SNAPSHOT d 快照文件(超级用户可设)
+-*/+-*/+-*/SF_NOUNLINK d 文件不可删除(超级用户可设) 
+-*/+-*/+-*/SF_IMMUTABLE d 文件是只读的(超级用户可设)
+-*/+-*/+-*/SF_APPEND d 文件只能追加内容(超级用户可设) 
+-*/+-*/+-*/SF_ARCHIVED d 可存档文件(超级用户可设) 
+-*/+-*/+-*/UF_NODUMP d 非转储文件
+-*/+-*/+-*/UF_IMMUTABLE d 文件是只读的
+-*/+-*/+-*/UF_COMPRESSED d 压缩文件(mac)
+-*/+-*/+-*/UF_NOUNLINK d  文件不可删除
+-*/+-*/+-*/UF_APPEND d  文件只能追加内容 
+-*/+-*/+-*/UF_HIDDEN d 隐藏文件(mac)
+-*/+-*/+-*/UF_OPAQUE d 
UF_OPAQUE

The directory is opaque when viewed through a union stack.


+-*/+-*/tempfile p 操作临时文件的模块
+-*/+-*/+-*/mkdtemp f 创建临时目录，返回目录的绝对路径 
mkdtemp(suffix='', prefix='tmp', dir=None)
  suffix:   可选后缀
  prefix:   可选前缀
  dir:      指定的目录
+-*/+-*/+-*/gettempdir f 获取存放临时文件的目录
+-*/+-*/+-*/gettempprefix f 获取用于生成临时文件的前缀
+-*/+-*/+-*/TemporaryDirectory f 
TODO:
TemporaryDirectory(suffix='', prefix='tmp', dir=None)

This function creates a temporary directory using :func:`mkdtemp`
(the supplied arguments are passed directly to the underlying function).
The resulting object can be used as a context manager (see
:ref:`context-managers`).  On completion of the context (or destruction
of the temporary directory object), the newly created temporary directory
and all its contents are removed from the filesystem.

The directory name can be retrieved from the :attr:`name` attribute
of the returned object.

The directory can be explicitly cleaned up by calling the
:func:`cleanup` method.

.. versionadded:: 3.2



+-*/+-*/+-*/mkstemp f 创建临时文件,返回(文件描述符,文件路径)二元组
mkstemp(suffix='', prefix='tmp', dir=None, text=False)
  suffix:   可选后缀
  prefix:   可选前缀
  dir:      指定的目录
  text:     True文本模式, False二进制模式
+-*/+-*/+-*/mktemp f 创建临时文件名(并不保证实际打开时文件是不存在的)
mktemp(suffix='', prefix='tmp', dir=None)
  suffix:   可选后缀
  prefix:   可选前缀
  dir:      指定的目录
  text:     True文本模式, False二进制模式
+-*/+-*/+-*/NamedTemporaryFile f  创建临时文件(确实存在的文件),返回该文件对象
NamedTemporaryFile(mode='w+b', buffering=None, encoding=None, 
          newline=None, suffix='', prefix='tmp', dir=None, delete=True)
  suffix:   可选后缀
  prefix:   可选前缀
  dir:      指定的目录
  buffering:0不缓冲 1行缓冲 其他正数是以字节为单位的缓冲大小 负数（默认系统缓冲）
  encoding: 如'utf-8'这样的编码名称
  newline: None,' ','\n','\r','\r\n' 控制换行模式
  delete:   关闭文件时是否删除，默认为True删除
+-*/+-*/+-*/+-*/name d 临时文件的绝对路径
+-*/+-*/+-*/SpooledTemporaryFile f
TODO:
SpooledTemporaryFile(max_size=0, mode='w+b', buffering=None, encoding=None, newline=None, suffix='', prefix='tmp', dir=None)

This function operates exactly as :func:`TemporaryFile` does, except that
data is spooled in memory until the file size exceeds *max_size*, or
until the file's :func:`fileno` method is called, at which point the
contents are written to disk and operation proceeds as with
:func:`TemporaryFile`.

The resulting file has one additional method, :func:`rollover`, which
causes the file to roll over to an on-disk file regardless of its size.

The returned object is a file-like object whose :attr:`_file` attribute
is either a :class:`StringIO` object or a true file object, depending on
whether :func:`rollover` has been called. This file-like object can be
used in a :keyword:`with` statement, just like a normal file.



+-*/+-*/+-*/TemporaryFile f 创建临时文件,返回该文件对象
TemporaryFile(mode='w+b', buffering=None, encoding=None, newline=None, 
              suffix='', prefix='tmp', dir=None)
  suffix:   可选后缀
  prefix:   可选前缀
  dir:      指定的目录
  buffering:0不缓冲 1行缓冲 其他正数是以字节为单位的缓冲大小 负数（默认系统缓冲）
  encoding: 如'utf-8'这样的编码名称
  newline: None,' ','\n','\r','\r\n' 控制换行模式
  文件关闭时会自动删除
+-*/+-*/+-*/tempdir d 默认存放临时文件的目录
+-*/各式文件 _
+-*/+-*/imghdr p 图像文件检测模块
+-*/+-*/+-*/what f 检测返回图像文件的格式,如'jpeg'
what(filename, h=None)
  filename:  当给出h时通常此参数为''
  h:    字节字符串,如给出将忽略filename参数,检测此数据是哪种图像
  可以识别bmp,gif,jpeg,pbm,pgm,png,ppm,rast,rgb,tiff,xbm,exif格式
+-*/+-*/sndhdr p 音频文件检测模块
+-*/+-*/+-*/what f 检测音频文件的基本信息
what(filename)
  如果无法识别出是哪种音频文件将返回None
  如成功识别返回元组
  (类型        如'wav',
   采样率      0表示未知,
   声道数      0表示未知,
   音轨数      -1表示未知,
   采样点位数  'U'表示U-LAW,'A'表示A-LAW)
+-*/+-*/mimetypes p mime类型后缀名模块
+-*/+-*/+-*/guess_type f 根据名称猜测mime类型,返回('type/subtype',encoding)
guess_type(url, strict=True)
  url:    文件名或url地址
  strict: 默认为True只识别官方类型
  返回(mime类型,压缩方式),未识别则为(None,None)
+-*/+-*/+-*/guess_extension f 据mime猜测文件名后缀,返回前带'.'的后缀,未识别返回None
guess_extension(type, strict=True)
  type:   'type/subtype'mime类型
  strict: 默认为True只识别官方类型
+-*/+-*/+-*/read_mime_types f 用自定义类型信息文件生成后缀名对应mime类型的字典
read_mime_types(filename)
  filename:    文件名
  返回的字典键值是以'.'开头的文件名后缀,其值对应'type/subtype'
类型信息文件格式
  image/jpeg:  jpg jpeg
  #注释行
  text/html:   htm
  text/html:   html
+-*/+-*/+-*/guess_all_extensions f 据mime猜测文件名后缀,返回所有前带'.'的后缀列表
guess_all_extensions(type, strict=True)
  type:   'type/subtype'mime类型
  strict: 默认为True只识别官方类型
+-*/+-*/+-*/add_type f 增加一个mime类型和文件名后缀的对应
add_type(type, ext, strict=True)
  type:    mime类型'type/subtype'
  ext:     '.'开头的文件名后缀
  strict: 是否是官方类型
+-*/+-*/+-*/init f 用自定义类型信息文件初始化模块
init(files=None)
  files:    文件名列表
类型信息文件格式
  image/jpeg:  jpg jpeg
  #注释行
  text/html:   htm
  text/html:   html
+-*/+-*/sqlite3 p 操作sqlite3数据库的模块
+-*/+-*/+-*/SQLITE_ALTER_TABLE d
+-*/+-*/+-*/SQLITE_ANALYZE d
+-*/+-*/+-*/SQLITE_ATTACH d
+-*/+-*/+-*/SQLITE_CREATE_INDEX d
+-*/+-*/+-*/SQLITE_CREATE_TABLE d
+-*/+-*/+-*/SQLITE_CREATE_TEMP_INDEX d
+-*/+-*/+-*/SQLITE_CREATE_TEMP_TABLE d
+-*/+-*/+-*/SQLITE_CREATE_TEMP_TRIGGER d
+-*/+-*/+-*/SQLITE_CREATE_TEMP_VIEW d
+-*/+-*/+-*/SQLITE_CREATE_TRIGGER d
+-*/+-*/+-*/SQLITE_CREATE_VIEW d
+-*/+-*/+-*/SQLITE_DELETE d
+-*/+-*/+-*/SQLITE_DENY d 权限禁止
+-*/+-*/+-*/SQLITE_DETACH d
+-*/+-*/+-*/SQLITE_DROP_INDEX d
+-*/+-*/+-*/SQLITE_DROP_TABLE d
+-*/+-*/+-*/SQLITE_DROP_TEMP_INDEX d
+-*/+-*/+-*/SQLITE_DROP_TEMP_TABLE d
+-*/+-*/+-*/SQLITE_DROP_TEMP_TRIGGER d
+-*/+-*/+-*/SQLITE_DROP_TEMP_VIEW d
+-*/+-*/+-*/SQLITE_DROP_TRIGGER d
+-*/+-*/+-*/SQLITE_DROP_VIEW d
+-*/+-*/+-*/SQLITE_IGNORE d 权限忽略
+-*/+-*/+-*/SQLITE_INSERT d
+-*/+-*/+-*/SQLITE_OK d 权限允许
+-*/+-*/+-*/SQLITE_PRAGMA d
+-*/+-*/+-*/SQLITE_READ d
+-*/+-*/+-*/SQLITE_REINDEX d
+-*/+-*/+-*/SQLITE_SELECT d
+-*/+-*/+-*/SQLITE_TRANSACTION d
+-*/+-*/+-*/SQLITE_UPDATE d
+-*/+-*/+-*/register_adapter f 注册能储存到库里的数据类型
register_adapter(type, callable)
  type:     数据类型
  callable: 一个可将此类型实例对象转换为int,float,字符串(字节或unicode)的函数
+-*/+-*/+-*/enable_callback_tracebacks f 是否输出注册函数的错误信息
enable_callback_tracebacks(flag)
  flag为True将输出异常信息，默认忽略异常
+-*/+-*/+-*/register_converter f 注册查询转换时需要用的新类型
register_converter(typename, callable)
  typename:     类型名称
  callable:     一个可以将查询结果返回的字节字符串转换为所需要值的函数
  一般要设有PARSE_COLNAMES选项
  如 register_converter('decimal',decimal.Decimal)
  就可将'select x as "x [decimal]" from table'返回的内容转换为带小数数值对象
+-*/+-*/+-*/complete_statement f 粗略检测sql语句的完整性
complete_statement(sql)
  如果sql是以;结尾的单条或多条sql查询语句则返回True
  不做任何语法检查，只做;检查和引号检查
+-*/+-*/+-*/connect f 创建到sqlite数据库的连接
connect(database[, timeout, detect_types, isolation_level, 
        check_same_thread, factory, cached_statements])
  database:         可以是文件名或':memory:'
  timeout:          等待锁释放的时间，默认5.0秒
  isolation_level:   
      'DEFERRED'    默认延迟锁
      'EXCLISIVE'   排他锁
      'IMMEDIATE'   只写锁
  detect_types:     默认为0
    sqlite3.PARSE_DECLTYPES   根据sql类型来转换数据
    sqlite3.PARSE_COLNAMES    根据sql查询时名称附带的[]类型来转换数据
            如 'select x as "x [decimal]" from table'
  cached_statements:  sql查询的缓冲数量，默认100
+-*/+-*/+-*/PARSE_DECLTYPES d 根据sql类型来转换数据的选项
+-*/+-*/+-*/PARSE_COLNAMES d 根据sql查询时名称附带的[]类型来转换数据的选项
+-*/+-*/+-*/Cursor c 数据库游标操作对象
+-*/+-*/+-*/+-*/rowcount d 
TODO:
rowcount

Although the :class:`Cursor` class of the :mod:`sqlite3` module implements this
attribute, the database engine's own support for the determination of "rows
affected"/"rows selected" is quirky.

For ``DELETE`` statements, SQLite reports :attr:`rowcount` as 0 if you make a
``DELETE FROM table`` without any condition.

For :meth:`executemany` statements, the number of modifications are summed up
into :attr:`rowcount`.

As required by the Python DB API Spec, the :attr:`rowcount` attribute "is -1 in
case no ``executeXX()`` has been performed on the cursor or the rowcount of the
last operation is not determinable by the interface".

This includes ``SELECT`` statements because we cannot determine the number of
rows a query produced until all rows were fetched.



+-*/+-*/+-*/+-*/lastrowid d 
TODO:
lastrowid

This read-only attribute provides the rowid of the last modified row. It is
only set if you issued a ``INSERT`` statement using the :meth:`execute`
method. For operations other than ``INSERT`` or when :meth:`executemany` is
called, :attr:`lastrowid` is set to :const:`None`.


+-*/+-*/+-*/+-*/description d 当前结果记录的相关信息
description
  这是一个元组序列，每个元素是一个七元组
  (name,type_code,display_size,internal_size,precision,scale,null_ok)
+-*/+-*/+-*/+-*/fetchall m 获取执行一条sql语句后的所有结果记录
+-*/+-*/+-*/+-*/execute m 执行一条sql语句
execute(sql, [parameters])
  sql:        单条sql语句字符串
  parameters: 参数
  对于sql语句里的未确定部分可使用以下方式来填充参数
  ?       c.execute('select ?,?',(u'fdf',44))
  :num    c.execute('select :0,:1',(u'fdf',44))
  :name   c.execute('select :a,:b',{'a':u'fdf','b':44})
+-*/+-*/+-*/+-*/executemany m 执行sql语句(只用于批量更新数据)
executemany(sql, seq_of_parameters)
  sql:        单条sql语句字符串
  seq_of_parameters:   批量数据参数序列
  对于sql语句里的未确定部分可使用以下方式来填充参数
  ?     c.executemany('delete from t where id=?',((44,)(55,)))
  :num  c.executemany('insert into t(x) value(:0)',((u'fdf',),(u'dd')))
  :name c.executemany('update table set x=:value where id=:id',
                      ({'id':1,'value':44},{'id':2,'value':55}))
+-*/+-*/+-*/+-*/executescript m 执行多条sql语句
executescript(sql_script)
  sql_script: 多条sql语句的字符串，每条之间用';'间隔，可使用'--'注释
+-*/+-*/+-*/+-*/fetchone m 获取执行sql语句后的结果(一次只读一条记录)
fetchone()
  结果通常为元组，不过可以通过设置connect.row_factory来自行设定
  如没有更多记录则返回None。
  如仍在处理或之前执行sql语句未产生结果都会报异常
+-*/+-*/+-*/+-*/fetchmany m 获取执行sql语句后的结果(一次读取多条记录)
fetchmany([size=cursor.arraysize])
  size:  一次要获取的记录条数，默认为系统提供的最佳值
  通常返回元素为元组记录的列表，如无更多记录返回空列表
+-*/+-*/+-*/Connection c 数据库连接对象
+-*/+-*/+-*/+-*/total_changes d 已更改的记录数目
+-*/+-*/+-*/+-*/in_transaction d 
TODO:
in_transaction

:const:`True` if a transaction is active (there are uncommitted changes),
:const:`False` otherwise.  Read-only attribute.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/isolation_level d 事务锁的方式
isolation_level
      None          默认设置
      'DEFERRED'    默认延迟锁
      'EXCLISIVE'   排他锁
      'IMMEDIATE'   只写锁
+-*/+-*/+-*/+-*/iterdump d 将整个数据库内容转储成sql语句(迭代序列)
+-*/+-*/+-*/+-*/row_factory d 获取记录结果的转换函数
row_factory
  此函数的参数是(cursor对象,原始记录的元组)
  def dict_factory(cursor, row):
    d = {}
    for idx , col in enumerate(cursor.description):
      d[col[0]] = row[idx]
    return d
  c.row_factory = dict_factory
  cur = c.cursor()
  cur.execute('select 1 as a')
  print(cur.fetchone()['a'])
+-*/+-*/+-*/+-*/text_factory d 获取文本结果的转换函数
text_factory
  此函数接受一个原始字节字符串参数,返回对字符串处理的结果.默认返回unicode字符串
  c.text_factory = lambda x: '"' + x.decode('utf-8') + '"'
  cur.execute('select ....')
+-*/+-*/+-*/+-*/create_collation m 创建sql语句里的自定义排序方式
create_collation(name, callable)
  name:     排序名称
  callable: 一个比较两个参数大小的函数，返回-1,0,1
  def mycmp(s1,s2): return cmp(s1[::-1],s2[::-1])
  c.create_collation('mysort',mycmp)
  c.execute('select * from table order by name collate mysort')
+-*/+-*/+-*/+-*/rollback m 撤销事务(取消数据更改) 
+-*/+-*/+-*/+-*/execute m 执行一条sql语句
execute(sql, [parameters])
  sql:        单条sql语句字符串
  parameters: 参数
  对于sql语句里的未确定部分可使用以下方式来填充参数
  ?       c.execute('select ?,?',(u'fdf',44))
  :num    c.execute('select :0,:1',(u'fdf',44))
  :name   c.execute('select :a,:b',{'a':u'fdf','b':44})
+-*/+-*/+-*/+-*/executemany m 执行sql语句(只用于批量更新数据)
executemany(sql, seq_of_parameters)
  sql:        单条sql语句字符串
  seq_of_parameters:   批量数据参数序列
  对于sql语句里的未确定部分可使用以下方式来填充参数
  ?     c.executemany('delete from t where id=?',((44,)(55,)))
  :num  c.executemany('insert into t(x) value(:0)',((u'fdf',),(u'dd')))
  :name c.executemany('update table set x=:value where id=:id',
                      ({'id':1,'value':44},{'id':2,'value':55}))
+-*/+-*/+-*/+-*/executescript m 执行多条sql语句
executescript(sql_script)
  sql_script: 多条sql语句的字符串，每条之间用';'间隔，可使用'--'注释
+-*/+-*/+-*/+-*/commit m 提交事务(数据变更生效)
+-*/+-*/+-*/+-*/create_aggregate m 创建sql语句里的自定义统计函数
create_aggregate(name, num_params, aggregate_class)
  name:       函数名称
  num_params: 参数数量
  aggregate_class:  一个带有step(value)和finalize()方法的类
  class sum2:
    def __init__(self): self.sum=0
    def step(self,value): self.sum += value**2
    def finalize(self): return self.sum
  c.create_aggregate('sum2',1,sum2)
  c.execute('select sum2(num) from table')
+-*/+-*/+-*/+-*/cursor m 创建一个cursor对象 
+-*/+-*/+-*/+-*/interrupt m 终止在此连接上正在执行的sql命令(多线程下使用) 
+-*/+-*/+-*/+-*/set_progress_handler m 注册sql指令执行后的回调函数 
set_progress_handler(handler, n)
  handler:  一个无参数的函数
  n:        每执行n次sql指令回调一次
  如果要清除注册，只需以None为handler再注册一次就行了
+-*/+-*/+-*/+-*/set_authorizer m 注册一个权限检验函数 
TODO:
set_authorizer(authorizer_callback)
  authorizer_callback函数有五个参数(code,arg1,arg2,dbname,innername)
  返回 SQLITE_OK允许 SQLITE_DENY禁止 SQLITE_IGNORE忽略
  dbname     数据库名称(通常为'main')
  innername  操作涉及的视图或触发器名称,没有的话为None
  code: 
      SQLITE_CREATE_(INDEX,TABLE,TRIGGER,VIEW,VTABLE)
      SQLITE_CREATE_TEMP_(INDEX,TABLE,TRIGGER,VIEW)
      SQLITE_DROP_(INDEX,TABLE,TRIGGER,VIEW,VTABLE)
      SQLITE_DROP_TEMP_(INDEX,TABLE,TRIGGER,VIEW)
      SQLITE_SELECT SQLITE_DELETE SQLITE_READ SQLITE_UPDATE
      SQLITE_ALTER_TABLE SQLITE_REINDEX SQLITE_ANALYZE
      SQLITE_PRAGMA SQLITE_TRANSACTION SQLITE_FUNCTION
      SQLITE_ATTACH SQLITE_DETACH
  arg1,arg2:  相关的表、索引、触发器、视图、字段、数据库等的名称,没有则为None
  如果要清除注册，只需以None为authorizer_callback再注册一次就行了
+-*/+-*/+-*/+-*/enable_load_extension m 
TODO:
enable_load_extension(enabled)

This routine allows/disallows the SQLite engine to load SQLite extensions
from shared libraries.  SQLite extensions can define new functions,
aggregates or whole new virtual table implementations.  One well-known
extension is the fulltext-search extension distributed with SQLite.

.. versionadded:: 3.2

.. literalinclude:: ../includes/sqlite3/load_extension.py

Loadable extensions are disabled by default. See [#f1]_.


+-*/+-*/+-*/+-*/create_function m 创建sql语句里的自定义函数 
create_function(name, num_params, func)
  name:       函数名称
  num_params: 参数数量
  func:       参数和返回值只能是int,float,str,None的函数
  def toup(s): return s.upper()
  c.create_function('toup',1,toup)
  c.execute('select toup(name) from table')
+-*/+-*/+-*/+-*/close m 关闭数据库
+-*/+-*/+-*/+-*/load_extension m 
TODO:
load_extension(path)

This routine loads a SQLite extension from a shared library.  You have to
enable extension loading with :meth:`enable_load_extension` before you can
use this routine.

.. versionadded:: 3.2

Loadable extensions are disabled by default. See [#f1]_.


+-*/+-*/configparser p ini配置操作模块
ini文件格式:
  #注释
  ;注释
  [段名称1]
  选项名称1 = 选项值
  选项名称2 = 选项值
  ;注释
  [段名称2]
  选项名称1 : 选项值
  选项名称2 : 选项值

  注意[段]和注释必须在行的开头，选项名称之前可以有空格，但不能有"\t"
  :和=最好不要混用，"\t"也不要乱加
  可以设[DEFAULT]段，其内的选项为默认值，其他段里未包含此段的选项将使用默认值
+-*/+-*/+-*/MAX_INTERPOLATION_DEPTH d 
MAX_INTERPOLATION_DEPTH

The maximum depth for recursive interpolation for :meth:`get` when the *raw*
parameter is false.  This is relevant only when the default *interpolation*
is used.



+-*/+-*/+-*/Error e ini配置错误基类
+-*/+-*/+-*/+-*/DuplicateOptionError e 重复选项错误 
+-*/+-*/+-*/+-*/InterpolationMissingOptionError e 缺少选项错误
+-*/+-*/+-*/+-*/InterpolationDepthError e 
InterpolationDepthError

Exception raised when string interpolation cannot be completed because the
number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`.  Subclass of
:exc:`InterpolationError`.



+-*/+-*/+-*/+-*/NoSectionError e 段不存在错误
+-*/+-*/+-*/+-*/MissingSectionHeaderError e 段头错误
+-*/+-*/+-*/+-*/InterpolationSyntaxError e 语法错误
+-*/+-*/+-*/+-*/ParsingError e 解析错误
+-*/+-*/+-*/+-*/InterpolationError e 
+-*/+-*/+-*/+-*/NoOptionError e 选项不存在错误
+-*/+-*/+-*/+-*/DuplicateSectionError e 重复段错误
+-*/+-*/+-*/RawConfigParser c 创建管理ini配置文件的对象(不可使用%(name)s引用)
RawConfigParser(defaults=None, dict_type=collections.OrderedDict, 
    allow_no_value=False, delimiters=('=', ':'), comment_prefixes=('#', ';'), 
    inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, 
    default_section=configaparser.DEFAULTSECT, interpolation=None)
  defaults:       选项默认值字典
  strict:         是否允许重复的选项,默认为True不允许
+-*/+-*/+-*/ExtendedInterpolation c 
TODO:
ExtendedInterpolation()

An alternative handler for interpolation which implements a more advanced
syntax, used for instance in ``zc.buildout``. Extended interpolation is
using ``${section:option}`` to denote a value from a foreign section.
Interpolation can span multiple levels. For convenience, if the ``section:``
part is omitted, interpolation defaults to the current section (and possibly
the default values from the special section).

For example, the configuration specified above with basic interpolation,
would look like this with extended interpolation:

.. code-block:: ini

   [Paths]
   home_dir: /Users
   my_dir: ${home_dir}/lumberjack
   my_pictures: ${my_dir}/Pictures

Values from other sections can be fetched as well:

.. code-block:: ini

   [Common]
   home_dir: /Users
   library_dir: /Library
   system_dir: /System
   macports_dir: /opt/local

   [Frameworks]
   Python: 3.2
   path: ${Common:system_dir}/Library/Frameworks/

   [Arthur]
   nickname: Two Sheds
   last_name: Jackson
   my_dir: ${Common:home_dir}/twosheds
   my_pictures: ${my_dir}/Pictures
   python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}


+-*/+-*/+-*/BasicInterpolation c 
TODO:
BasicInterpolation()

The default implementation used by :class:`ConfigParser`.  It enables
values to contain format strings which refer to other values in the same
section, or values in the special default section [1]_.  Additional default
values can be provided on initialization.

For example:

.. code-block:: ini

   [Paths]
   home_dir: /Users
   my_dir: %(home_dir)s/lumberjack
   my_pictures: %(my_dir)s/Pictures


In the example above, :class:`ConfigParser` with *interpolation* set to
``BasicInterpolation()`` would resolve ``%(home_dir)s`` to the value of
``home_dir`` (``/Users`` in this case).  ``%(my_dir)s`` in effect would
resolve to ``/Users/lumberjack``.  All interpolations are done on demand so
keys used in the chain of references do not have to be specified in any
specific order in the configuration file.

With ``interpolation`` set to ``None``, the parser would simply return
``%(my_dir)s/Pictures`` as the value of ``my_pictures`` and
``%(home_dir)s/lumberjack`` as the value of ``my_dir``.


+-*/+-*/+-*/ConfigParser c 创建一个管理ini配置文件的对象(可使用%(name)s引用)
ConfigParser(defaults=None, dict_type=collections.OrderedDict, 
    allow_no_value=False, delimiters=('=', ':'), comment_prefixes=('#', ';'), 
    inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, 
    default_section=configparser.DEFAULTSECT, 
    interpolation=BasicInterpolation())
  defaults:       选项默认值字典
  strict:         是否允许重复的选项,默认为True不允许
+-*/+-*/+-*/+-*/SECTCRE d 解析段名称的正则表达式
SECTCRE
  默认段名称前后的空格也包含在其内
   >>> config = """
   ... [  Section 2  ]
   ... """
   >>> typical = ConfigParser()
   >>> typical.read_string(config)
   >>> typical.sections()
   ['  Section 2  ']
   >>> custom = ConfigParser()
   >>> custom.SECTCRE = re.compile(r"\[ *(?P<header>[^]]+?) *\]")
   >>> custom.read_string(config)
   >>> custom.sections()
   ['Section 2']
+-*/+-*/+-*/+-*/BOOLEAN_STATES d 布尔值字典
BOOLEAN_STATES
  默认：
  值如果是'1','yes','true'或'on'将返回True
  值如果是'0','no','false'或'off'将返回false
  可自定义
   >>> custom.BOOLEAN_STATES = {'sure': True, 'nope': False}
   >>> custom['section1'].getboolean('funky')
   False
+-*/+-*/+-*/+-*/optionxform M 转换引用名称的函数
optionxform(option)
  默认为转换为小写字母的函数
   cfgparser = ConfigParser()
   cfgparser.optionxform = str
+-*/+-*/+-*/+-*/readfp m 读取并解析ini文件(python2)
readfp(fp, filename=None)
  fp为文件对象(需有readline方法)
  filename为文件名,未给出时使用fp.name代替
+-*/+-*/+-*/+-*/getfloat m  获取某段某项的值，返回浮点数
getfloat(section, option, raw=False, [vars, fallback])
  section:  段名称
  option:   选项名称
  raw:      是否获取原始字符串，不做引用处理
  vars:     用于值内%(name)引用形式的字典
+-*/+-*/+-*/+-*/set m 设置某选项的值
set(section, option, value)
  section:  段名称
  option:   选项名称
  value:    必须是字符串
+-*/+-*/+-*/+-*/has_option m 检测是否有某选项
has_option(section, option)
  section:  段名称
  option:   选项名称
+-*/+-*/+-*/+-*/get m 获取某段某项的值，返回字符串
TODO:
get(section, option, raw=False, [vars, fallback])
  section:  段名称
  option:   选项名称
  raw:      是否获取原始字符串，不做其他处理
  vars:     用于值内%(name)引用形式的字典
+-*/+-*/+-*/+-*/read m 读取并解析ini文件
read(filenames, encoding=None)
  filenames:  可以是单一的ini文件路径，或多个ini文件路径的列表
  encoding:   文件编码
+-*/+-*/+-*/+-*/items m 获取某段的内容，返回元素为(选项名,选项值)的列表
items(section, raw=False, vars=None)
  section:  段名称
  raw:      是否获取原始字符串，不做引用处理
  vars:     用于值内%(name)引用形式的字典
  如有[DEFAULT]段，返回的内容里将包含未设定时的默认值
+-*/+-*/+-*/+-*/getboolean m  获取某段某项的值，返回True或False
getboolean(section, option, raw=False, [vars, fallback])
  section:  段名称
  option:   选项名称
  raw:      是否获取原始字符串，不做引用处理
  vars:     用于值内%(name)引用形式的字典
  值如果是'1','yes','true'或'on'将返回True
  值如果是'0','no','false'或'off'将返回false
  可修改BOOLEAN_STATES来确定值的形式
+-*/+-*/+-*/+-*/has_section m 检测是否有某段
has_section(section)
  section:  段落的名称
+-*/+-*/+-*/+-*/write m 将ini配置写入文件
write(fileobject, space_around_delimiters=True)
  fileobject 文件对象
  space_around_delimiters 是否在'='或':'前后加空格
+-*/+-*/+-*/+-*/remove_option m 移除某个选项，如存在返回True，不存在返回False
remove_option(section, option)
  section:  段名称
  option:   选项名称
+-*/+-*/+-*/+-*/read_file m 读取并解析ini文件(python3)
read_file(f, source=None)
  f通常为文本文件对象(需可迭代生成unicode行字符串)
  source为文件名,未给出时使用f.name代替
+-*/+-*/+-*/+-*/defaults m 返回选项默认值字典(OrderedDict)
+-*/+-*/+-*/+-*/add_section m 增加一个段落
add_section(section)
  section:  段落的名称
+-*/+-*/+-*/+-*/remove_section m 移除一个段落，如段落不存在返回False，否则True
remove_section(section)
  section:  段名称
+-*/+-*/+-*/+-*/read_string m 解析ini内容的字符串
TODO:
read_string(string, source='<string>')

Parse configuration data from a string.

Optional argument *source* specifies a context-specific name of the
string passed.  If not given, ``'<string>'`` is used.  This should
commonly be a filesystem path or a URL.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/sections m 返回所有段名称列表(不包括DEFAULT段)
+-*/+-*/+-*/+-*/options m 返回某段内的选项名称列表
options(section)
  section:  段名称
+-*/+-*/+-*/+-*/read_dict m 
TODO:
read_dict(dictionary, source='<dict>')

Load configuration from any object that provides a dict-like ``items()``
method.  Keys are section names, values are dictionaries with keys and
values that should be present in the section.  If the used dictionary
type preserves order, sections and their keys will be added in order.
Values are automatically converted to strings.

Optional argument *source* specifies a context-specific name of the
dictionary passed.  If not given, ``<dict>`` is used.

This method can be used to copy state between parsers.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/getint m  获取某段某项的值，返回整数
getint(section, option, raw=False, [vars, fallback])
  section:  段名称
  option:   选项名称
  raw:      是否获取原始字符串，不做引用处理
  vars:     用于值内%(name)引用形式的字典
+-*/+-*/csv p csv文件数据模块
+-*/+-*/+-*/get_dialect f 根据已注册格式名称获取格式对象
get_dialect(name)
+-*/+-*/+-*/list_dialects f 返回所有已注册的格式名称列表
+-*/+-*/+-*/unregister_dialect f 取消某个已注册的格式
unregister_dialect(name)
+-*/+-*/+-*/register_dialect f 注册格式
register_dialect(name[, dialect], **fmtparams)
  name:    格式名称字符串(不能是字节字符串)
  dialect: 格式对象
  lineterminator: 行结尾(默认值为'\r\n')(主要用于生成csv使用)
      读的时候默认'\r'或'\n'为行结尾,忽略重复的
      写的时候以lineterminator为结尾
  skipinitialspace: 是否忽略分隔符后的空格(默认为否)
  delimiter:  单字符的字段分隔符(默认',')
  quotechar:  单字符的引号字符(默认'"')
  doublequote: 引号的转义方式，True使用两个引号，False使用转义符
  escapechar: 单字符的转义字符,只在不使用引号方式时或不使用重复引号转义时才有用
  quoting:    加引号的方式(主要用于生成csv使用)
    csv.QUOTE_ALL         都加引号
    csv.QUOTE_NONE        不加引号(字段包含分隔符时用转义字符,未设转义字符报错)
    csv.QUOTE_NONNUMERIC  非数值字段加引号(读时将未引号的字段转为float)
    csv.QUOTE_MINIMAL     只在字段包含分隔符或引号时加引号(默认)
+-*/+-*/+-*/reader f 创建读取csv数据的迭代对象(每次迭代返回字段列表)
reader(csvfile, dialect='excel', **fmtparams)
  csvfile:   文件对象或其它可迭代出每一行的对象
             文件对象一般应以newline=''方式打开
             如产生的行是字节字符串，那最后返回的字段也是字节字符串
             如产生的行是unicode字符串，那最后返回的字段也是unicode字符串
  dialect:   已注册的格式名称或csv格式对象
  skipinitialspace: 是否忽略分隔符后的空格(默认为否)
  delimiter:  单字符的字段分隔符(默认',')
  quotechar:  单字符的引号字符(默认'"')
  doublequote: 引号的转义方式，True使用两个引号，False使用转义符
  escapechar: 单字符的转义字符,只在不使用引号方式时或不使用重复引号转义时才有用
  quoting:    引号的方式
    csv.QUOTE_ALL         都有引号
    csv.QUOTE_NONE        没有引号(字段包含分隔符时须用转义字符)
    csv.QUOTE_NONNUMERIC  非数值字段有引号,未引号的字段转为float
    csv.QUOTE_MINIMAL     自动识别引号字段(默认)

   >>> import csv
   >>> spamReader = csv.reader(open('eggs.csv', newline=''), delimiter=' ', quotechar='|')
   >>> for row in spamReader:
   ...     print(', '.join(row))
   Spam, Spam, Spam, Spam, Spam, Baked Beans
   Spam, Lovely Spam, Wonderful Spam

+-*/+-*/+-*/+-*/dialect d csv读取对象所使用的格式对象(只读)
+-*/+-*/+-*/+-*/line_num d 当前行号
+-*/+-*/+-*/field_size_limit f 设置最大字段数量
field_size_limit([new_limit])
  如果new_limit则只是返回当前所设置的最大字段数量
+-*/+-*/+-*/QUOTE_ALL d 都加引号
+-*/+-*/+-*/QUOTE_NONE d 不加引号(字段包含分隔符时用转义字符,未设转义字符报错)
+-*/+-*/+-*/QUOTE_NONNUMERIC d 非数值字段加引号(读时将未引号的字段转为float)
+-*/+-*/+-*/QUOTE_MINIMAL d 只在字段包含分隔符或引号时加引号
+-*/+-*/+-*/Error e csv格式错误
+-*/+-*/+-*/Dialect c 创建自定义csv格式对象
+-*/+-*/+-*/+-*/lineterminator d 行结尾(默认值为'\r\n')(主要用于生成csv使用)
lineterminator
  读的时候默认'\r'或'\n'为行结尾,忽略重复的
  写的时候以lineterminator为结尾
+-*/+-*/+-*/+-*/skipinitialspace d 是否忽略分隔符后的空格(默认为否)
+-*/+-*/+-*/+-*/quoting d 加引号的方式(主要用于生成csv使用)
quoting
  csv.QUOTE_ALL         都加引号
  csv.QUOTE_NONE        不加引号(字段包含分隔符时用转义字符,未设转义字符报错)
  csv.QUOTE_NONNUMERIC  非数值字段加引号(读时将未引号的字段转为float)
  csv.QUOTE_MINIMAL     只在字段包含分隔符或引号时加引号(默认)
+-*/+-*/+-*/+-*/delimiter d 单字符的字段分隔符(默认',')
+-*/+-*/+-*/+-*/escapechar d 单字符的转义字符
escapechar
只有在不使用引号方式时或不使用重复引号转义时才有用
用于转义字段里出现的字段分隔符
+-*/+-*/+-*/+-*/quotechar d 单字符的引号字符(默认'"')
+-*/+-*/+-*/+-*/doublequote d 引号的转义方式，True使用两个引号，False使用转义符
+-*/+-*/+-*/excel c excel格式(','分割,引号使用'"',不忽略空格)
+-*/+-*/+-*/excel_tab c excel格式('\t'分割,引号使用'"',不忽略空格)
+-*/+-*/+-*/DictWriter c 创建生成csv数据的写入对象(数据为带字段名称的字典)
DictWriter(csvfile, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)
  csvfile:   文件对象或其它有write方法的对象(文件对象一般应以newline=''方式打开)
             如文件对象是以二进制形式打开的，写入的字段数据也只能使用字节字符串
             如文件对象是以文本形式打开的，写入的字段数据也只能使用unicode字符串
  fieldnames:  字段名称序列
  restval:     缺少的字段所使用的默认值
  extrasaction:  多出的字段出现时的处理方式 'raise' 报错 'ignore' 忽略
  dialect:   已注册的格式名称或csv格式对象
  lineterminator: 行结尾(默认值为'\r\n')写的时候以lineterminator为结尾
  skipinitialspace: 是否忽略分隔符后的空格(默认为否)
  delimiter:  单字符的字段分隔符(默认',')
  quotechar:  单字符的引号字符(默认'"')
  doublequote: 引号的转义方式，True使用两个引号，False使用转义符
  escapechar: 单字符的转义字符,只使用不加引号方式时或不使用重复引号转义时才有用
  quoting:    加引号的方式
    csv.QUOTE_ALL         都加引号
    csv.QUOTE_NONE        不加引号(字段包含分隔符时用转义字符,未设转义字符报错)
    csv.QUOTE_NONNUMERIC  非数值字段加引号
    csv.QUOTE_MINIMAL     只在字段包含分隔符或引号时加引号(默认)
+-*/+-*/+-*/+-*/writeheader m 写入字段名称行
+-*/+-*/+-*/+-*/writerows m 写入多个数据行
writerows(rows)
  rows:  多行数据的序列,每一行是以字段名称为键的字典,其值元素须为字符串或数值
  字符串需和csv写入对象创建时的所用的文件对象保持一致
+-*/+-*/+-*/+-*/writerow m 写入一个数据行
writerow(row)
  row:  以字段名称为键的字典，其值元素为字符串或数值
  字符串需和csv写入对象创建时的所用的文件对象保持一致
+-*/+-*/+-*/unix_dialect c unix格式
TODO：
unix_dialect()

The :class:`unix_dialect` class defines the usual properties of a CSV file
generated on UNIX systems, i.e. using ``'\n'`` as line terminator and quoting
all fields.  It is registered with the dialect name ``'unix'``.

.. versionadded:: 3.2



+-*/+-*/+-*/Sniffer c 创建检测csv数据格式的对象
+-*/+-*/+-*/+-*/has_header m 检测第一行是否是字段名行
has_header(sample)
  sample:   通常为多行的csv样本数据
+-*/+-*/+-*/+-*/sniff m 由样本数据推测出相应的格式对象
sniff(sample, delimiters=None)
  sample:      通常为多行的csv样本数据
  delimiters:  包含各种可能的字段分隔符的字符串
+-*/+-*/+-*/DictReader c 创建读取csv数据的迭代对象(每次迭代返回字段字典)
DictReader(csvfile, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)
  csvfile:   文件对象或其它可迭代出每一行的对象
             文件对象一般应以newline=''方式打开
             如产生的行是字节字符串，那最后返回的字段也是字节字符串
             如产生的行是unicode字符串，那最后返回的字段也是unicode字符串
  dialect:   已注册的格式名称或csv格式对象
  fieldnames:  字段名称序列，如为None将使用第一行作为字段名称行
  restkey:     多出的字段所使用的字段名称，多出的字段将以列表方式为其值
  restval:     缺少的字段所使用的默认值
  skipinitialspace: 是否忽略分隔符后的空格(默认为否)
  delimiter:  单字符的字段分隔符(默认',')
  quotechar:  单字符的引号字符(默认'"')
  doublequote: 引号的转义方式，True使用两个引号，False使用转义符
  escapechar: 单字符的转义字符,只在不使用引号方式时或不使用重复引号转义时才有用
  quoting:    引号的方式
    csv.QUOTE_ALL         都有引号
    csv.QUOTE_NONE        没有引号(字段包含分隔符时须用转义字符)
    csv.QUOTE_NONNUMERIC  非数值字段有引号,未引号的字段转为float
    csv.QUOTE_MINIMAL     自动识别引号字段(默认)
+-*/+-*/+-*/+-*/dialect d csv读取对象所使用的格式对象(只读)
+-*/+-*/+-*/+-*/fieldnames d 字段名称序列
+-*/+-*/+-*/+-*/line_num d 当前行号
+-*/+-*/+-*/writer f 创建生成csv数据的写入对象(数据为序列)
writer(csvfile, dialect='excel', **fmtparams)
  csvfile:   文件对象或其它有write方法的对象(文件对象一般应以newline=''方式打开)
             如文件对象是以二进制形式打开的，写入的字段数据也只能使用字节字符串
             如文件对象是以文本形式打开的，写入的字段数据也只能使用unicode字符串
  dialect:   已注册的格式名称或csv格式对象
  lineterminator: 行结尾(默认值为'\r\n')写的时候以lineterminator为结尾
  skipinitialspace: 是否忽略分隔符后的空格(默认为否)
  delimiter:  单字符的字段分隔符(默认',')
  quotechar:  单字符的引号字符(默认'"')
  doublequote: 引号的转义方式，True使用两个引号，False使用转义符
  escapechar: 单字符的转义字符,只使用不加引号方式时或不使用重复引号转义时才有用
  quoting:    加引号的方式
    csv.QUOTE_ALL         都加引号
    csv.QUOTE_NONE        不加引号(字段包含分隔符时用转义字符,未设转义字符报错)
    csv.QUOTE_NONNUMERIC  非数值字段加引号
    csv.QUOTE_MINIMAL     只在字段包含分隔符或引号时加引号(默认)

   >>> import csv
   >>> spamWriter = csv.writer(open('eggs.csv', 'w', newline=''), delimiter=' ',
   ...                         quotechar='|', quoting=csv.QUOTE_MINIMAL)
   >>> spamWriter.writerow(['Spam'] * 5 + ['Baked Beans'])
   >>> spamWriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])

+-*/+-*/+-*/+-*/writerows m 写入多个数据行
writerows(rows)
  rows:  多行数据的序列，每一行的元素应为字符串或数值
  字符串需和csv写入对象创建时的所用的文件对象保持一致
+-*/+-*/+-*/+-*/writerow m 写入一个数据行
writerow(row)
  row:  元素为字符串或数值的序列
  字符串需和csv写入对象创建时的所用的文件对象保持一致
+-*/+-*/bz2 p bz2压缩解压模块
+-*/+-*/+-*/compress f 用bz2方式压缩数据
compress(data, compresslevel=9)
  compresslevel: 压缩程度1-9
+-*/+-*/+-*/decompress f 用bz2方式解压数据
decompress(data)
+-*/+-*/+-*/BZ2Compressor c 创建bz2压缩器对象(用于分次操作) 
BZ2Compressor(compresslevel=9)
  compresslevel: 压缩程度1-9
+-*/+-*/+-*/+-*/compress m 压缩数据
compress(data)
  返回的数据并不是完整的
  在最后一次压缩以后应用flush获取剩余未获得的压缩数据
+-*/+-*/+-*/+-*/flush m 获取最后剩余的压缩数据
+-*/+-*/+-*/BZ2Decompressor c 创建bz2解压器对象(用于分次操作) 
+-*/+-*/+-*/+-*/decompress m 解压数据 
decompress(data)
  返回的解压数据可能不完整
  持续此操作直到全部压缩数据被解压，即可得到完整的解压数据
+-*/+-*/+-*/BZ2File c 操作.bz2的文件对象,支持with操作
BZ2File(filename, mode='r', buffering=0, compresslevel=9)
  mode: r读 w写 a添加(每次write都是写在尾部打开时指针位于尾部) 
        U通用换行（'\n','\r','\r\n'通通变为'\n'）
  buffering:  缓冲大小(字节数)
  compresslevel: 压缩程度1-9
+-*/+-*/+-*/+-*/readlines m 读取多行
readlines(hint=-1)
  hint如给出，将最多读取hint字节
  返回行列表
+-*/+-*/+-*/+-*/writelines m 写入行序列，不会自动加入换行符
writelines(lines)
  通常行序列里的每一项自行在尾部放置换行符
+-*/+-*/+-*/+-*/flush m 清除缓冲使写入的内容生效
+-*/+-*/+-*/+-*/close m 关闭文件
+-*/+-*/+-*/+-*/readline m  读取一行
readline(limit=-1)
  读取一行，如设置limit则单行最多limit个字节。行内容通常包括'\n'
+-*/+-*/+-*/+-*/seek m 设定操作位置
seek(offset, whence=os.SEEK_SET)
  offset:  偏移
  whence:  os.SEEK_SET或0，以文件开始位置算起
           os.SEEK_CUR或1，以当前位置算起
           os.SEEK_END或2，以文件结尾位置算起，通常此时offset用负数
  返回新位置的绝对值
+-*/+-*/+-*/+-*/tell m 返回当前操作位置
+-*/+-*/+-*/+-*/read m 读取
read(n=-1)
  最多读取n个字节。如n未设置或为-1则读取全部。如返回0个字节则说明已到尾部。
  如果对象不能读取则返回None
+-*/+-*/+-*/+-*/write m 写入
write(b)
  写入字节字符串的内容。返回写入的字节数。
+-*/+-*/gzip p 读写gzip文件模块
+-*/+-*/+-*/open f 打开gzip文件，返回文件对象
open(filename, mode='rb', compresslevel=9)
  mode: r读 w写 a添加 rb二进制读 wb二进制写 ab二进制添加
  compresslevel: 压缩程度1-9
+-*/+-*/+-*/GzipFile c 打开gzip文件，返回文件对象
GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)
  mode: r读 w写 a添加 rb二进制读 wb二进制写 ab二进制添加
  compresslevel: 压缩程度1-9
  fileobj:  文件对象，如给出将取代filename
  主要用于StringIO这样的非真正文件场合
+-*/+-*/+-*/+-*/peek m 
TODO:
peek([n])

Read *n* uncompressed bytes without advancing the file position.
At most one single read on the compressed stream is done to satisfy
the call.  The number of bytes returned may be more or less than
requested.

.. versionadded:: 3.2


+-*/+-*/tarfile p 读写tar文件模块
+-*/+-*/+-*/is_tarfile f 检测文件是否是tar文件
is_tarfile(filename)
  filename: 可以是路径或文件对象
+-*/+-*/+-*/open f 打开文件返回TarFile文件对象
open(name=None, mode='r', fileobj=None, bufsize=10240, \*\*kwargs)
  mode:   
        'r' 'r:*'   只读方式打开文件，如有压缩则解压
        'r:'        只读方式打开未压缩的文件
        'r:gz'      只读方式打开gzip方式压缩的文件并解压
        'r:bz2'     只读方式打开bz2方式压缩的文件并解压
        'a' 'a:'    添加方式打开文件(不压缩)
        'w' 'w:'    只写方式打开文件(不压缩)
        'w:gz'      只写方式打开文件，将以gzip方式压缩
        'w:bz2'     只写方式打开文件，将以bz2方式压缩
        'r|'        只读方式打开不能seek的文件对象
        'r|gz'      只读方式打开不能seek的文件对象,用gzip方式解压
        'r|bz2'     只读方式打开不能seek的文件对象,用bz2方式解压
        'w|'        只写方式打开不能seek的文件对象
        'w|gz'      只写方式打开不能seek的文件对象,用gzip方式压缩
        'w|bz2'     只写方式打开不能seek的文件对象,用bz2方式压缩
  name,fileobj:   如给出io对象，将替代文件名
+-*/+-*/+-*/GNU_FORMAT d 
GNU_FORMAT

GNU tar format.



+-*/+-*/+-*/USTAR_FORMAT d 
USTAR_FORMAT

POSIX.1-1988 (ustar) format.



+-*/+-*/+-*/ENCODING d 
ENCODING

The default character encoding: ``'utf-8'`` on Windows,
:func:`sys.getfilesystemencoding` otherwise.



+-*/+-*/+-*/DEFAULT_FORMAT d 
DEFAULT_FORMAT

The default format for creating archives. This is currently :const:`GNU_FORMAT`.



+-*/+-*/+-*/PAX_FORMAT d 
PAX_FORMAT

POSIX.1-2001 (pax) format.



+-*/+-*/+-*/TarError e tarfile异常基类
+-*/+-*/+-*/+-*/ExtractError e 提取文件时发生非致命性错误
+-*/+-*/+-*/+-*/StreamError e IO操作错误
+-*/+-*/+-*/+-*/HeaderError e 
HeaderError

Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid.

+-*/+-*/+-*/+-*/ReadError e 打开tar文件出错(无效文件)
+-*/+-*/+-*/+-*/CompressionError e 解压出错
+-*/+-*/+-*/TarFile c tar文件对象
TarFile(name=None, mode='r', fileobj=None, format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False, ignore_zeros=False, encoding=ENCODING, errors='surrogateescape', pax_headers=None, debug=0, errorlevel=0)
+-*/+-*/+-*/+-*/pax_headers d 
pax_headers

A dictionary containing key-value pairs of pax global headers.




+-*/+-*/+-*/+-*/addfile m 添加文件(文件对象和TarInfo自设的内容)
addfile(tarinfo, fileobj=None)
  将根据tarinfo来决定添加的内容大小
+-*/+-*/+-*/+-*/open M 打开文件返回TarFile文件对象
open(name=None, mode='r', fileobj=None, bufsize=10240, \*\*kwargs)
  mode:   
        'r' 'r:*'   只读方式打开文件，如有压缩则解压
        'r:'        只读方式打开未压缩的文件
        'r:gz'      只读方式打开gzip方式压缩的文件并解压
        'r:bz2'     只读方式打开bz2方式压缩的文件并解压
        'a' 'a:'    添加方式打开文件(不压缩)
        'w' 'w:'    只写方式打开文件(不压缩)
        'w:gz'      只写方式打开文件，将以gzip方式压缩
        'w:bz2'     只写方式打开文件，将以bz2方式压缩
        'r|'        只读方式打开不能seek的文件对象
        'r|gz'      只读方式打开不能seek的文件对象,用gzip方式解压
        'r|bz2'     只读方式打开不能seek的文件对象,用bz2方式解压
        'w|'        只写方式打开不能seek的文件对象
        'w|gz'      只写方式打开不能seek的文件对象,用gzip方式压缩
        'w|bz2'     只写方式打开不能seek的文件对象,用bz2方式压缩
  name,fileobj:   如给出io对象，将替代文件名
+-*/+-*/+-*/+-*/list m 显示输出归档里的文件列表
list(verbose=True)
  verbose:  如果为False则只显示文件名，否则像'ls -l'一样显示
+-*/+-*/+-*/+-*/add m 添加文件
TODO:
add(name, arcname=None, recursive=True, exclude=None, *, filter=None)
  name:   可以是目录、符号连接、文件、设备文件等的路径
  arcname:   要替换的文件名称
  recursive: 是否递归添加目录里的内容
+-*/+-*/+-*/+-*/next m 可使用迭代方式获取归档里的每一项信息(TarInfo)
+-*/+-*/+-*/+-*/getnames m 从归档里获取所有文件的名称列表
+-*/+-*/+-*/+-*/extractall m 解压所有文件到当前目录
extractall(path=".", members=None)
  path:  可指定解压的目录
  members:  指定要解压的文件信息(TarInfo)列表
+-*/+-*/+-*/+-*/getmember m 由名称获取信息(TarInfo)
getmember(name)
+-*/+-*/+-*/+-*/extractfile m 从归档里提取一文件返回一只读文件对象
extractfile(member)
  member:  可以是文件名称或TarInfo
+-*/+-*/+-*/+-*/getmembers m 从归档里获取所有文件的信息(TarInfo)列表
+-*/+-*/+-*/+-*/close m 如果是写模式，将会写入结尾部分并关闭
+-*/+-*/+-*/+-*/gettarinfo m 由路径或文件对象获取其信息对象(TarInfo)
gettarinfo(name=None, arcname=None, fileobj=None)
  name:   可以是目录、符号连接、文件、设备文件等的路径
  arcname:   要替换的文件名称
+-*/+-*/+-*/+-*/extract m 从归档里提取一文件并解压到当前目录
extract(member, path="", set_attrs=True)
  member:  可以是文件名称或TarInfo
  path:  可指定解压的目录
+-*/+-*/+-*/TarInfo c 文件信息对象
TarInfo(name="")
+-*/+-*/+-*/+-*/gname d 组名称
+-*/+-*/+-*/+-*/name d 文件名称
+-*/+-*/+-*/+-*/pax_headers d 
pax_headers

A dictionary containing key-value pairs of an associated pax extended header.



+-*/+-*/+-*/+-*/uname d 用户名称
+-*/+-*/+-*/+-*/gid d 组ID
+-*/+-*/+-*/+-*/mode d 文件权限位rwx
+-*/+-*/+-*/+-*/mtime d 最后修改时间
+-*/+-*/+-*/+-*/linkname d 链接的目标文件名
+-*/+-*/+-*/+-*/size d 大小(字节数)
+-*/+-*/+-*/+-*/type d 类型
TODO:
type
  REGTYPE, AREGTYPE, LNKTYPE, SYMTYPE, DIRTYPE, FIFOTYPE, CONTTYPE, 
  CHRTYPE, BLKTYPE, GNUTYPE_SPARSE. 
  如要检测可使用 is_*()
+-*/+-*/+-*/+-*/uid d 用户ID
+-*/+-*/+-*/+-*/isdev m 是否是设备文件(字符设备，块设备或FIFO)
+-*/+-*/+-*/+-*/fromtarfile m 在归档里获取该文件的下一个文件
fromtarfile(tarfile)
+-*/+-*/+-*/+-*/issym m 是否是符号连接文件
+-*/+-*/+-*/+-*/isfile m 是否是普通文件 
+-*/+-*/+-*/+-*/isblk m 是否是块设备文件 
+-*/+-*/+-*/+-*/isdir m 是否是目录 
+-*/+-*/+-*/+-*/tobuf m 
TODO:
tobuf(format=DEFAULT_FORMAT, encoding=ENCODING, errors='surrogateescape')

Create a string buffer from a :class:`TarInfo` object. For information on the
arguments see the constructor of the :class:`TarFile` class.

.. versionchanged:: 3.2
   Use ``'surrogateescape'`` as the default for the *errors* argument.



+-*/+-*/+-*/+-*/frombuf m 
frombuf(buf)

Create and return a :class:`TarInfo` object from string buffer *buf*.

Raises :exc:`HeaderError` if the buffer is invalid..



+-*/+-*/+-*/+-*/isreg m 是否是普通文件 
+-*/+-*/+-*/+-*/isfifo m 是否是FIFO文件 
+-*/+-*/+-*/+-*/islnk m 是否是硬链接文件
+-*/+-*/+-*/+-*/ischr m 是否是字符设备文件 
+-*/+-*/zipfile p 读写zip文件模块
python3里zip文件里的文件名称如果是乱码,可以用cp437编码还原成字节字符串
再根据需要用gbk或shift_jis或big5解码获取其名称(默认已支持utf-8的文件名称)
+-*/+-*/+-*/is_zipfile f 测试是否是有效的zip文件
is_zipfile(filename)
  filename: 可以是路径或文件对象
+-*/+-*/+-*/ZIP_DEFLATED d 需要zlib库的压缩方式
+-*/+-*/+-*/ZIP_STORED d 通用压缩方式
+-*/+-*/+-*/LargeZipFile e 
+-*/+-*/+-*/BadZipFile e 
+-*/+-*/+-*/error e 
+-*/+-*/+-*/ZipFile c 打开zip文件，创建zip文件对象
ZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=False)
  mode: r读 w新文件 
        a追加(如果file是zip文件，则追加文件会归档到内部，
              否则附加到文件末尾--jpg+zip是常用的种子发布方式)
  compression:  ZIP_STORED  ZIP_DEFLATED(需要有zlib库)
  allowZip64:   是否支持ZIP64扩展(可创建大于2GB的zip文件)
  要检测是否是加密zip可使用以下方式
  is_encrypted=zipfileobj.infolist()[-1].flag_bits & 0x01
+-*/+-*/+-*/+-*/comment d zip文件的注释，不得超过65535字节
+-*/+-*/+-*/+-*/debug d 调试级别，0无调试信息输出，3全部信息显示
+-*/+-*/+-*/+-*/namelist m 返回归档里所有文件名称列表 
+-*/+-*/+-*/+-*/infolist m 返回归档里所有文件ZipInfo对象列表 
+-*/+-*/+-*/+-*/getinfo m 按名称获取文件信息对象(ZipInfo) 
getinfo(name)
+-*/+-*/+-*/+-*/read m 读取归档里单文件内容,返回字符串
read(name, pwd=None)
  name: 可以是名称或ZipInfo对象
  pwd:  加密zip文件的密码
+-*/+-*/+-*/+-*/extract m 解压某个文件 
extract(member, path=None, pwd=None)
  name: 可以是名称或ZipInfo对象
  pwd:  加密zip文件的密码
  path: 解压的目标路径
  文件的名称可能会以'/'或'../'开头,解压前最好先做检验
  文件名称的编码没有统一的规定，需自行设定
+-*/+-*/+-*/+-*/printdir m 输出显示归档里的文件
printdir()
+-*/+-*/+-*/+-*/write m 将某个文件添加至归档 
write(filename, arcname=None, compress_type=None)
  filename: 要添加的文件路径
  arcname:  需要更名用于归档里的文件名称
            名称必须是字节字符串，编码方式并没有统一的要求
            如未给出，名称将由系统默认给出，其编码方式未知
  compress_type:  ZIP_STORED  ZIP_DEFLATED(需要有zlib库)
+-*/+-*/+-*/+-*/extractall m 解压所有文件
extractall(path=None, members=None, pwd=None)
  pwd:  加密zip文件的密码
  path: 解压的目标路径
  members:  指定的要解压文件列表(必须是ZipInfo列表)
  文件的名称可能会以'/'或'../'开头,解压前最好先做检验
  文件名称的编码没有统一的规定，需自行设定
+-*/+-*/+-*/+-*/setpassword m 设置zip文件的默认密码 
setpassword(pwd)
+-*/+-*/+-*/+-*/close m 关闭zip文件对象
+-*/+-*/+-*/+-*/open m  读取归档里的某个文件,返回文件对象
open(name, mode='r', pwd=None)
  name: 可以是名称或ZipInfo对象
  pwd:  加密zip文件的密码
  mode: r, rU, U通用换行（'\n','\r','\r\n'通通变为'\n'）
  返回的文件对象只支持迭代读取，或read,readline,readlines操作
+-*/+-*/+-*/+-*/writestr m 直接将文件内容写入归档
writestr(zinfo_or_arcname, bytes[, compress_type])
  zinfo_or_arcname: 可以是名称或ZipInfo对象
            名称必须是字节字符串，编码方式并没有统一的要求
  bytes:  文件内容的字节字符串
  compress_type:  ZIP_STORED  ZIP_DEFLATED(需要有zlib库)
+-*/+-*/+-*/+-*/testzip m 检验归档里所有文件
testzip()
  如有问题返回第一个损坏的文件名称,否则返回None
+-*/+-*/+-*/+-*/PyZipFile c 用于python代码打包的文件对象
PyZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=False, optimize=-1)
  mode: r读 w新文件 a追加
  compression:  ZIP_STORED  ZIP_DEFLATED(需要有zlib库)
  allowZip64:   是否支持ZIP64扩展(可创建大于2GB的zip文件)
+-*/+-*/+-*/+-*/+-*/PyZipFile.writepy m 添加py文件
PyZipFile.writepy(pathname, basename='')
  pathname: 可以是单个py文件路径，或py包目录
  添加时会自动加入pyc或pyo文件
+-*/+-*/+-*/ZipInfo c zip内部文件信息对象
ZipInfo(filename='NoName', date_time=(1980,1,1,0,0,0))
+-*/+-*/+-*/+-*/comment d 注释
+-*/+-*/+-*/+-*/date_time d 最后修改时间六元组(y,month,d,h,m,s)
+-*/+-*/+-*/+-*/reserved d 保留字段，必须为0 
+-*/+-*/+-*/+-*/extra d 扩展字段数据
+-*/+-*/+-*/+-*/create_version d 创建zip归档的版本号
+-*/+-*/+-*/+-*/extract_version d 解压所需的最低版本号
+-*/+-*/+-*/+-*/header_offset d 在归档里所处的位置(字节)
+-*/+-*/+-*/+-*/filename d 文件名称 
+-*/+-*/+-*/+-*/volume d 分卷压缩的卷号
+-*/+-*/+-*/+-*/CRC d CRC-32校验
+-*/+-*/+-*/+-*/compress_size d 压缩后的大小 
+-*/+-*/+-*/+-*/compress_type d 
compress_type
  compress_type:  ZIP_STORED  ZIP_DEFLATED(需要有zlib库)
+-*/+-*/+-*/+-*/file_size d 未压缩时的大小 
+-*/+-*/+-*/+-*/flag_bits d 如果是加密的,最低位为1
+-*/+-*/+-*/+-*/external_attr d 
+-*/+-*/+-*/+-*/create_system d 创建zip归档的操作系统 
create_system
  0 dos  3 unix  7 mac  10 windows
+-*/+-*/+-*/+-*/internal_attr d 1表示为文本文件
+-*/系统 _
+-*/+-*/sched p 时间任务调度模块
+-*/+-*/+-*/scheduler c 创建调度器
scheduler(timefunc, delayfunc)
  timefunc:    不带参数可调用的函数,其返回时间数值
               通常使用time.time,用于核对时间
  delayfunc:   一个参数的调用函数,参数为0
               通常使用time.sleep,用于空闲时的操作
+-*/+-*/+-*/+-*/queue d 调度任务队列(只读)
queue
  顺序队列,其元素为命名元组(time, priority, action, argument)
+-*/+-*/+-*/+-*/cancel m 取消某个任务
cancel(event)
  event:    由enter或enterabs返回的任务对象
+-*/+-*/+-*/+-*/run m 开始执行所有调度任务
run()
  调度执行时如果某个任务超时,后面的任务仍会执行,除非用cancel取消任务
+-*/+-*/+-*/+-*/empty m 检测任务队列是否为空
+-*/+-*/+-*/+-*/enterabs m 以绝对时间方式加入任务
enterabs(time, priority, action, argument)
  time:      任务开始的时间数值
  priority:  优先级
  action:    任务函数
  argument:  任务函数所用的参数
+-*/+-*/+-*/+-*/enter m 以延时方式加入任务
enter(delay, priority, action, argument)
  delay:     以开始时间开计的任务开始延时数值
  priority:  优先级
  action:    任务函数
  argument:  任务函数所用的参数
+-*/+-*/sys p python系统参数和相关函数模块
+-*/+-*/+-*/setrecursionlimit f 设置最大递归次数
+-*/+-*/+-*/getrefcount f 获取某对象的引用计数 
getrefcount(object)
+-*/+-*/+-*/getprofile f 获取系统性能刨视函数
+-*/+-*/+-*/intern f 
TODO:
intern(string)

Enter *string* in the table of "interned" strings and return the interned string
-- which is *string* itself or a copy. Interning strings is useful to gain a
little performance on dictionary lookup -- if the keys in a dictionary are
interned, and the lookup key is interned, the key comparisons (after hashing)
can be done by a pointer compare instead of a string compare.  Normally, the
names used in Python programs are automatically interned, and the dictionaries
used to hold module, class or instance attributes have interned keys.

Interned strings are not immortal; you must keep a reference to the return
value of :func:`intern` around to benefit from it.



+-*/+-*/+-*/getfilesystemencoding f 获取操作系统使用的编码。如'mbcs'
+-*/+-*/+-*/_clear_type_cache f 清除内部类型缓存。(通常只在跟踪复杂引用数时用)
+-*/+-*/+-*/excepthook f 发生未捕获异常时将调用此函数(可改写)
excepthook(type, value, traceback)
  type      异常类型
  value     raise语句提供的值
  traceback 回朔追踪对象
+-*/+-*/+-*/getwindowsversion f 获取windows版本信息
+-*/+-*/+-*/setdlopenflags f 设置加载扩展模块时需使用的标志参数
+-*/+-*/+-*/getdlopenflags f 获取加载扩展模块时需使用的标志参数
+-*/+-*/+-*/getrecursionlimit f 获取最大递归次数 
+-*/+-*/+-*/setswitchinterval f 设置线程切换间隔的秒数(python3.2)
+-*/+-*/+-*/_current_frames f  获取当下所用的栈桢对象表，其返回值只是快照
_current_frames()
  返回对应线程的栈桢对象字典表
+-*/+-*/+-*/exit f 退出python
exit([arg])
  通过引发SystemExit异常来退出python.arg默认为0表示正常退出
+-*/+-*/+-*/call_tracing f 
TODO:
call_tracing(func, args)

Call ``func(*args)``, while tracing is enabled.  The tracing state is saved,
and restored afterwards.  This is intended to be called from a debugger from
a checkpoint, to recursively debug some other code.



+-*/+-*/+-*/getswitchinterval f 获取线程切换间隔(python3.2)
+-*/+-*/+-*/setcheckinterval f 设置检查信号、线程和其他事件的间隔
setcheckinterval(interval)
  interval为python虚拟指令数
  默认为100,加大可以提高使用线程的性能
+-*/+-*/+-*/getdefaultencoding f 获取默认的编码，如'ascii'或'utf-8' 
+-*/+-*/+-*/setdefaultencoding f 设置默认的编码(python2)(只用于site{customize})
setdefaultencoding(codeset)
  通常此函数是不可用的,要改变python默认编码方式通常有两种方法
  1.python -S方式启动时将忽略site配置,此时可以使用此函数
    不过同时会忽略默认第三方模块搜索路径,需要自行修改sys.path
  2.添加修改sitecustomize.py来设置,在此文件可使用此函数
    sitecustomize.py的常见路径为:
      windows系统:{sys.prefix}/lib/site-packages/
      windows用户:%APPDATA%/....python{ver}/site-packages/
      debian系统:/etc/python{ver}/
      unix系统:/usr/lib/python{ver}/
      unix用户:~/.local/lib/python{ver}/site-packages/
+-*/+-*/+-*/getcheckinterval f 获取检查信号、线程和其他事件的间隔
+-*/+-*/+-*/settscdump f 
TODO:
settscdump(on_flag)

Activate dumping of VM measurements using the Pentium timestamp counter, if
*on_flag* is true. Deactivate these dumps if *on_flag* is off. The function is
available only if Python was compiled with ``--with-tsc``. To understand
the output of this dump, read :file:`Python/ceval.c` in the Python sources.

.. impl-detail::
   This function is intimately bound to CPython implementation details and
   thus not likely to be implemented elsewhere.



+-*/+-*/+-*/settrace f 设置系统跟踪函数 
+-*/+-*/+-*/setprofile f 设置系统性能刨视函数
setprofile(profilefunc)
+-*/+-*/+-*/displayhook f 解释器交互模式时的输出方式(可改写) 
displayhook(value)
  交互时默认情况会用repr(value)来显示交互时输入表达式的值
  value即builtins._
+-*/+-*/+-*/gettrace f 获取系统跟踪函数 
+-*/+-*/+-*/getsizeof f 获取对象的大小(字节数) 
getsizeof(object[, default])
  如有定义__sizeof__将调用__sizeof__作计算
  如未定义并且未给出default默认值，将报TypeError错误
+-*/+-*/+-*/_getframe f 获取调用栈里的栈桢对象
_getframe([depth])
+-*/+-*/+-*/exc_info f 返回未处理异常的三元组
sys.exc_info()
  返回(type, value, traceback)
  type      异常类型
  value     异常对象实例
  traceback 回朔追踪对象
+-*/+-*/+-*/dont_write_bytecode d 导入模块时是否生成字节码文件(.pyc,.pyo) 
+-*/+-*/+-*/stdout d 标准输出所对应的文件对象
如果python未能识别终端的字符编码
通常可使用
sys.stdout = codecs.lookup('编码').streamwriter(sys.stdout)
+-*/+-*/+-*/meta_path d 
TODO:
meta_path

A list of :term:`finder` objects that have their :meth:`find_module`
methods called to see if one of the objects can find the module to be
imported. The :meth:`find_module` method is called at least with the
absolute name of the module being imported. If the module to be imported is
contained in package then the parent package's :attr:`__path__` attribute
is passed in as a second argument. The method returns ``None`` if
the module cannot be found, else returns a :term:`loader`.

:data:`sys.meta_path` is searched before any implicit default finders or
:data:`sys.path`.

See :pep:`302` for the original specification.



+-*/+-*/+-*/_xoptions d 
TODO:
_xoptions

A dictionary of the various implementation-specific flags passed through
the :option:`-X` command-line option.  Option names are either mapped to
their values, if given explicitly, or to :const:`True`.  Example::

   $ ./python -Xa=b -Xc
   Python 3.2a3+ (py3k, Oct 16 2010, 20:14:50)
   [GCC 4.4.3] on linux2
   Type "help", "copyright", "credits" or "license" for more information.
   >>> import sys
   >>> sys._xoptions
   {'a': 'b', 'c': True}

.. impl-detail::

   This is a CPython-specific way of accessing options passed through
   :option:`-X`.  Other implementations may export them through other
   means, or not at all.

.. versionadded:: 3.2



+-*/+-*/+-*/prefix d 平台无关前缀
+-*/+-*/+-*/path_importer_cache d 
TODO:
path_importer_cache

A dictionary acting as a cache for :term:`finder` objects. The keys are
paths that have been passed to :data:`sys.path_hooks` and the values are
the finders that are found. If a path is a valid file system path but no
explicit finder is found on :data:`sys.path_hooks` then ``None`` is
stored to represent the implicit default finder should be used. If the path
is not an existing path then :class:`imp.NullImporter` is set.

Originally specified in :pep:`302`.



+-*/+-*/+-*/__stdin__ d 解释器启动时stdin所对应的文件对象
+-*/+-*/+-*/ps2 d 解释器次要提示符'...'
+-*/+-*/+-*/ps1 d 解释器主要提示符'>>>'
+-*/+-*/+-*/subversion d 
TODO:
subversion

A triple (repo, branch, version) representing the Subversion information of the
Python interpreter. *repo* is the name of the repository, ``'CPython'``.
*branch* is a string of one of the forms ``'trunk'``, ``'branches/name'`` or
``'tags/name'``. *version* is the output of ``svnversion``, if the interpreter
was built from a Subversion checkout; it contains the revision number (range)
and possibly a trailing 'M' if there were local modifications. If the tree was
exported (or svnversion was not available), it is the revision of
``Include/patchlevel.h`` if the branch is a tag. Otherwise, it is ``None``.

.. deprecated:: 3.2.1
   Python is now `developed <http://docs.python.org/devguide/>`_ using
   Mercurial.  In recent Python 3.2 bugfix releases, :data:`subversion`
   therefore contains placeholder information.  It is removed in Python
   3.3.



+-*/+-*/+-*/executable d python解释器的文件名(全路径)
+-*/+-*/+-*/float_info d 浮点数有关信息
                         float.h对应      说明     
float_info.epsilon       DBL_EPSILON      1.0与下一个最大浮点数之差
float_info.dig           DBL_DIG          可详细表示的十进制位数,一般为15
float_info.mant_dig      DBL_MANT_DIG     使用radix中指定基数所能表示的位数
float_info.max           DBL_MAX          最大值
float_info.max_exp       DBL_MAX_EXP      radix基数下最大指数
float_info.max_10_exp    DBL_MAX_10_EXP   十进制下最大指数,一般为308
float_info.min           DBL_MIN          最小值
float_info.min_exp       DBL_MIN_EXP      radix基数下最小指数
float_info.min_10_exp    DBL_MIN_10_EXP   十进制下最小指数,一般为-307
float_info.radix         FLT_RADIX        radix基数，一般为2
float_info.rounds        FLT_ROUNDS       四舍五入方式，一般为1
              -1未定，0表示朝向0，1表示最近，2表示正无限，3表示负无限
+-*/+-*/+-*/copyright d python版本信息字符串
+-*/+-*/+-*/builtin_module_names d python系统内置的模块名称列表
+-*/+-*/+-*/exec_prefix d 平台相关前缀
+-*/+-*/+-*/path_hooks d 
TODO:
path_hooks

A list of callables that take a path argument to try to create a
:term:`finder` for the path. If a finder can be created, it is to be
returned by the callable, else raise :exc:`ImportError`.

Originally specified in :pep:`302`.



+-*/+-*/+-*/__excepthook__ d excepthook的默认值
+-*/+-*/+-*/platform d 平台标识符字符串，如'linux2'
sys.platform
  常见的值可能为
Linux (2.x *and* 3.x)  'linux2'
Windows                'win32'
Windows/Cygwin         'cygwin'
Mac OS X               'darwin'
OS/2                   'os2'
OS/2 EMX               'os2emx'
+-*/+-*/+-*/maxsize d 字符串、列表、字典等类型的最大长度
+-*/+-*/+-*/maxint d int类型的最大整数值(python2)
+-*/+-*/+-*/version d  版本字符串
+-*/+-*/+-*/hash_info d 
TODO:
+-*/+-*/+-*/last_traceback d 最后一次异常时的追踪对象
+-*/+-*/+-*/flags d 运行选项 
flags.debug                 -d 
flags.division_warning      -Q 
flags.inspect               -i 
flags.interactive           -i 
flags.optimize              -O 
flags.optimize              -OO 
flags.dont_write_bytecode   -B 
flags.no_user_site          -s 
flags.no_site               -S 
flags.ignore_environment    -E 
flags.verbose               -v 
flags.bytes_warning         -b 
flags.quiet                 -q 
flags.tabcheck              -t 
flags.unicode               -U 
flags.py3k_warning          -3 
+-*/+-*/+-*/api_version d python解释器C语言API版本
+-*/+-*/+-*/version_info d 版本信息的五项元组
sys.version_info
  (major, minor, micro, releaselevel, and serial)
  如(2,7,2,'final',0)
  releaselevel的值可能是'alpha','beta','candidate','final'
+-*/+-*/+-*/maxunicode d 能表示的最大unicode码 
+-*/+-*/+-*/warnoptions d 启动时-w设置的警告选项列表
+-*/+-*/+-*/argv d 传递给程序的命令行参数列表
argv[0]是程序名称
+-*/+-*/+-*/__stdout__ d 解释器启动时stdout所对应的文件对象
+-*/+-*/+-*/winver d windows里建立注册表键的版本号 
+-*/+-*/+-*/int_info d 整数有关信息(python3)
+-*/+-*/+-*/path d 模块加载时搜索路径列表
sys.path
  第一项往往是''表示当前路径
  路径列表里不光可以添加目录，也可以添加.zip或.egg文件
  默认内容为[''当前路径,PYTHONPATH环境设定,.pth文件设定,标准库路径]
+-*/+-*/+-*/byteorder d 本机字节序方式,'big'大端序,'little'小端序
+-*/+-*/+-*/__stderr__ d  解释器启动时stderr所对应的文件对象
+-*/+-*/+-*/dllhandle d 针对python dll的句柄(windows)
+-*/+-*/+-*/tracebacklimit d 发生异常时默认输出信息里回朔追踪的最大级数
sys.tracebacklimit
  默认值为1000，设为0将禁止回朔追踪，只输出异常类型和其值
+-*/+-*/+-*/float_repr_style d 浮点数用repr输出时的形式
+-*/+-*/+-*/stdin d 标准输入所对应的文件对象
+-*/+-*/+-*/modules d 已导入模块名和模块对象对应的字典表(可修改)
+-*/+-*/+-*/last_type d 最后一个异常的类型
+-*/+-*/+-*/__displayhook__ d displayhook的默认值
+-*/+-*/+-*/stderr d 错误信息输出所对应的文件对象
+-*/+-*/+-*/abiflags d 
TODO:
abiflags

On POSIX systems where Python is build with the standard ``configure``
script, this contains the ABI flags as specified by :pep:`3149`.

.. versionadded:: 3.2


+-*/+-*/+-*/last_value d 最后一个异常的值
+-*/+-*/+-*/hexversion d 32位版本号
+-*/+-*/argparse p 命令行参数解析模块(python2.7,3.2)
选项参数-xxx必须在位置参数之前,位置参数不能以选项前缀开始
选项参数可使用一个前缀加一个字符的形式或两个前缀加多个字符的形式
如'-x','--name',选项后接参数可使用-x444,-x 444,--name xxxx形式
固定参数为'-h'和'--help'
使用方法:由ArgumentParser创建解析器对象,根据需要添加选项或命令
+-*/+-*/+-*/RawTextHelpFormatter c 不做任何处理的处理器
+-*/+-*/+-*/ArgumentDefaultsHelpFormatter c 附带缺省值信息的处理器
+-*/+-*/+-*/RawDescriptionHelpFormatter c 只做参数替换的处理器
+-*/+-*/+-*/FileType c 创建文件对象生成器
FileType(mode='r', bufsize=None)
  mode:    'r'只读 'w'只写 'a'添加 'b'字节
  bufsize: 缓冲大小
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--output', type=argparse.FileType('wb', 0))
>>> parser.parse_args(['--output', 'out'])
Namespace(output=<_io.BufferedWriter name='out'>)
位置参数使用此转换可自动识别'-'
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('infile', type=argparse.FileType('r'))
>>> parser.parse_args(['-'])
Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>)
+-*/+-*/+-*/Namespace c 储存解析出的参数的简单类型
+-*/+-*/+-*/SUPPRESS d 不产生帮助信息
+-*/+-*/+-*/REMAINDER d 包揽剩余的参数
+-*/+-*/+-*/Action c 储存参数方法基类
+-*/+-*/+-*/ArgumentError e 参数错误
+-*/+-*/+-*/ArgumentTypeError e 参数转换错误
+-*/+-*/+-*/ArgumentParser c 创建一个命令行参数解析器
ArgumentParser([description], [epilog], [prog], [usage], [add_help],  
               [argument_default], [parents], [prefix_chars], 
               [conflict_handler], [formatter_class])
  description:   帮助的开始文字,如"以下是%(prog)s各选项的说明"(在Usage:行之后)
  epilog:        帮助的结尾文字,如"有问题请向xx@xx.xx报告"  
  prog:          默认是sys.argv[0],可自定义,帮助里可使用%(prog)s获得  
  prefix_chars:  选项前缀,默认是'-',如需要也可设为windows常用的'/'
  add_help:      是否增加-h/-help选项,默认为True
  usage:         默认自动生成'PROG [-h] [--foo [FOO]] bar [bar ...]'
                 如可设为'%(prog)s [option] ...'(用于Usage:之后)
  argument_default:   所有参数的缺省值,默认为None
  formatter_class: 帮助信息的格式处理器,默认将作自动换行和消除多余空白处理
                   如设为RawDescriptionHelpFormatter则只做%参数替换
                   如设为RawTextHelpFormatter则不做任何处理
                   如设为ArgumentDefaultsHelpFormatter则自动添加缺省值信息
  parents:  是ArgumentParser列表,相当于继承该列表里已设定的参数选项
            继承以后该列表里的ArgumentParser作任何添加都不会影响当前这个
            通常parents里的由ArgumentParser(add_help=False)生成,避免出现两个-h
            例如wget先用父参数选项获取必要的参数(通常使用parse_known_args)
            再根据地址判断是使用ftp参数选项还是http参数选项,此时就可使用继承
  conflict_handler:  通常无需设置,用于处理选项名称冲突,默认方式是抛出异常
+-*/+-*/+-*/+-*/print_help m 显示完整的帮助信息
print_help(file=None)
  如给出file将会把帮助信息输出到file
+-*/+-*/+-*/+-*/get_default m 获取某个选项参数的默认值
get_default(dest)
  dest:      储存参数的名称
  >>> parser = argparse.ArgumentParser()
  >>> parser.add_argument('--foo', default='badger')
  >>> parser.get_default('foo')
  'badger'
+-*/+-*/+-*/+-*/format_help m 返回完整的帮助信息字符串
+-*/+-*/+-*/+-*/parse_known_args m 解析命令行参数,返回(名称对象,多余参数)二元组
parse_known_args(args=None, namespace=None)
  args:   参数列表,未给出则默认使用sys.argv
  namespace:   存放解析出的参数的类,默认Namespace
               可直接使用obj.destname获取相应参数的值
  未声明的选项参数'-x','--xx'或多余的位置参数都会依序放在返回元组的第二项列表里
+-*/+-*/+-*/+-*/add_mutually_exclusive_group m 添加并返回一个互斥的参数选项组
add_mutually_exclusive_group(required=False)
  required:    是否是必选选项
  返回参数选项组对象,此对象里添加的所有选项都是互斥的,只能同时出现一个
  >>> parser = argparse.ArgumentParser(prog='PROG')
  >>> group = parser.add_mutually_exclusive_group()
  >>> group.add_argument('-1', action='store_const',const='one',dest='huchi')
  >>> group.add_argument('-2', action='store_const',const='two',dest='huchi')
  >>> group.add_argument('-3', action='store_const',const='three',dest='huchi')
  >>> parser.parse_args(['-1'])
  Namespace(huchi=1)
  >>> parser.parse_args(['-1', '-2'])
  usage: PROG [-h] [-1 | -2]
  PROG: error: argument -2: not allowed with argument -1
+-*/+-*/+-*/+-*/set_defaults m 设置参数默认值
set_defaults(**kwargs)
  >>> parser = argparse.ArgumentParser()
  >>> parser.add_argument('foo', type=int)
  >>> parser.set_defaults(bar=42, baz='badger')
  >>> parser.parse_args(['736'])
  Namespace(bar=42, baz='badger', foo=736)
+-*/+-*/+-*/+-*/add_argument m 添加一个参数选项
add_argument(name or flags..., [action], [nargs], [const], [default], [type], 
                   [choices], [required], [help], [metavar], [dest],[version])
  name or flags可以是单个字符串或多个字符串
  如果表示单个位置参数就使用一个不带选项前缀的名称
  如'host'或'port',顺序以添加的顺序为准
  如果表示同一作用的选项参数可使用多个或单个字符串,字符串必带选项前缀
  dest:      储存参数的名称(多次add_argument可指向同一个dest)
             默认使用位置参数的名称或选项参数的第一个长名称或第一个短名称
  required:  是否是必选的选项参数(不可用于位置参数)
  default:   默认值(用于参数未出现的情况),默认为None
  metavar:   样本参数(用于帮助信息,默认会直接使用dest代替)
  help:      帮助信息,可使用'%(type)s','%(default)s','%(prog)s'
             如设为SUPPRESS则表示不显示此参数的任何帮助信息
  action:    
      'store':            将后接参数设为参数值，这是默认动作
            不可用属性:const
      'store_const':      将参数值设为const
            必须属性:const  不可用属性:type,nargs,choices  常用属性:dest
      'store_true':       将参数值设为True
            不可用属性:type,nargs,choices,const   常用属性:dest
      'store_false':      将参数值设为False
            不可用属性:type,nargs,choices,const   常用属性:dest
      'append':           将所有同名选项的参数组成列表(最好不要用于位置参数)
            不可用属性:const   
      'append_const':     将所有同名选项的参数组成列表(最好不要用于位置参数)
            必须属性:const,dest
      'count':            将选项值设为选项出现的次数
            不可用属性:type,nargs,choices,const   
      'help':             显示帮助信息(通常不需要,除非是要代替-h)
      自定义继承Action的子类:         
            须定义__call__(self,parser,namespace,values,option_str)
            namespace是保存已解析出的选项,values为已被type转换过的值
            option_str如是位置参数则为None,如是选项参数则为'-...'选项字符串
            通常要么用setattr(namespace,self.dest,xxx)设置参数值
            要么抛出ArgumentError
      'version':          版本参数   必须属性:version
            add_argument('--version',action='version',version='%(prog)s 2')
  nargs:    固定参数个数(>0)默认1,'?':0个或1个,'+':1个或多个,'*':任意个
            REMAINDER表示后面的所有参数(常用于位置参数)
  const:    对应的参数值(无须再设nargs)
  type:     转换字符串为相应值的函数,如int,或使用FileType实例作文件对象转换
            转换发生在存储或检验范围之前
  choices:  可用值范围,通常为列表,也可是自定义列表子类的实例
            class C(list):
                def __contains__(self,x): return 5<x<30  
                #如有设type,这里的x是已被type转换过的值
+-*/+-*/+-*/+-*/format_usage m 返回简短的帮助信息字符串
+-*/+-*/+-*/+-*/error m 命令行解析失败报错并退出运行
error(message)
  message:   失败原因文本
+-*/+-*/+-*/+-*/add_argument_group m 添加并返回一个参数选项组
add_argument_group(title=None, description=None)
  title:    分组标题(用于帮助信息)
  description:   详细说明(用于帮助信息)
  主要用于帮助信息分类显示,没其他作用
  >>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)
  >>> group1 = parser.add_argument_group('group1', 'group1 description')
  >>> group1.add_argument('foo', help='foo help')
  >>> group2 = parser.add_argument_group('group2', 'group2 description')
  >>> group2.add_argument('--bar', help='bar help')
  >>> parser.print_help()
  usage: PROG [--bar BAR] foo

  group1:
    group1 description

    foo    foo help

  group2:
    group2 description

    --bar BAR  bar help
+-*/+-*/+-*/+-*/add_subparsers m 添加并返回子命令解析器
add_subparsers([title],[description])
  title:         标题(用于帮助信息)
  description:   详细说明(用于帮助信息)
  主要用于像git那样用子命令的程序
  返回的子命令解析器可以通过add_parser来添加多个命令
  >>> parser = argparse.ArgumentParser(prog='PROG')
  >>> parser.add_argument('--foo', action='store_true', help='foo help')
  >>> subparsers = parser.add_subparsers(help='sub-command help')
  >>>
  >>> parser_a = subparsers.add_parser('a', help='a help')
  >>> parser_a.add_argument('bar', type=int, help='bar help')
  >>>
  >>> parser_b = subparsers.add_parser('b', help='b help')
  >>> parser_b.add_argument('--baz', choices='XYZ', help='baz help')
  >>>
  >>> parser.parse_args(['a', '12'])
  Namespace(bar=12, foo=False)
  >>> parser.parse_args(['--foo', 'b', '--baz', 'Z'])
  Namespace(baz='Z', foo=True)
+-*/+-*/+-*/+-*/+-*/add_parser m 添加并返回一个子命令解析器
add_parser(command,[aliases],[help])
  command:   子命令字符串
  aliases:   子命令别名列表(python3.2)
  help:      子命令帮助文本
  >>> parser = argparse.ArgumentParser()
  >>> subparsers = parser.add_subparsers()
  >>> checkout = subparsers.add_parser('checkout', aliases=['co'])
  >>> checkout.add_argument('foo')
  >>> checkout.add_argument('-x', type=int, default=1)
  >>> parser.parse_args(['co', '-x44','bar'])
  Namespace(foo='bar',x=44)
+-*/+-*/+-*/+-*/print_usage m 显示简短的帮助信息
print_usage(file=None)
  如给出file将会把帮助信息输出到file
+-*/+-*/+-*/+-*/parse_args m 解析命令行参数,返回名称对象(严格匹配)
parse_args(args=None, namespace=None)
  args:   参数列表,未给出则默认使用sys.argv
  namespace:   存放解析出的参数的类,默认Namespace
               可直接使用obj.destname获取相应参数的值
+-*/+-*/signal p 信号系统模块(unix)
作业控制信号除了SIGCHLD以外往往大多用于命令行程序
fork出的子进程会继承父进程的信号处理设置
使用信号作多进程通信最大的问题是在做长时间阻塞操作(如read,recv)时会被信号打断
此时需要在接近底层的地方判断errno是否是EINTR来做相应处理
+-*/+-*/+-*/SIGTERM d 请求终止信号(kill命令的默认信号，用来关闭进程)[默认退出]
+-*/+-*/+-*/SIGUSR1 d 用户定义信号(通常用来进程之间通信)[默认退出]
+-*/+-*/+-*/SIGUSR2 d 用户定义信号(通常用来进程之间通信)[默认退出]
+-*/+-*/+-*/SIGHUP d 挂断信号(通常由终端发给前台后台的程序)[默认退出]
SIGHUP
  通常使用此信号通知守护进程(因为守护进程没有控制终端,通常不会收到此信号)
  很多后台服务进程使用此信号来重新读取配置。
+-*/+-*/+-*/SIGSTOP d 暂停信号(不能被捕获或忽略)[默认暂停](控制信号)
+-*/+-*/+-*/SIGKILL d 终止信号(不能被捕获或忽略，用来强制终止其它进程)[默认退出]
+-*/+-*/+-*/SIGINT d 中断信号(通常由终端Ctrl-C引发)[默认退出]
+-*/+-*/+-*/SIGQUIT d 退出信号(通常由终端Ctrl-\引发)[默认异常终止]
+-*/+-*/+-*/SIGWINCH d 终端窗口大小变化(发往前台程序)[默认忽略]
+-*/+-*/+-*/SIGTSTP d 终端挂起信号(通常由Ctrl-Z引发)[默认暂停](控制信号)
SIGTSTP
  对于命令行程序收到此信号后往往用kill给自己发送SIGTSTP信号，
  此时kill会阻塞程序的运行，shell也会给出提示信息,直到shell命令继续(如fg %1)
+-*/+-*/+-*/SIGTTIN d 后台进程需从终端读取输入而暂停[默认暂停](控制信号)
SIGTTIN
  对于命令行程序不能从stdin读取数据时往往用kill给自己发送SIGTTIN信号，
  此时kill会阻塞程序的运行，shell也会给出提示信息,直到shell命令继续(如fg %1)
+-*/+-*/+-*/SIGTTOUT d 后台进程需向终端产生输出而暂停[默认暂停](控制信号)
SIGTTOUT
  对于命令行程序不能往stout写入数据时往往用kill给自己发送SIGTTIN信号，
  此时kill会阻塞程序的运行，shell也会给出提示信息,直到shell命令继续(如fg %1)
+-*/+-*/+-*/SIGCONT d 继续执行信号(用于被暂停的进程)[默认继续执行](控制信号)
+-*/+-*/+-*/SIGCHLD d 子进程暂停或终止时产生的信号[默认忽略](控制信号)
+-*/+-*/+-*/SIGCLD d 子进程状态变化信号[默认忽略](淘汰)
+-*/+-*/+-*/SIGABRT d 异常终止信号[默认异常终止]通常由os.abort产生
+-*/+-*/+-*/SIGALRM d 定时器警报信号(以系统真实时间计算)[默认退出]
+-*/+-*/+-*/SIGVTALRM d 定时器警报信号(以进程用户时间计算)[默认退出]
+-*/+-*/+-*/SIGPROF d 定时器警报信号(以进程时间计算)[默认退出]
+-*/+-*/+-*/SIGBUS d 硬件故障信号[默认异常终止]
+-*/+-*/+-*/SIGFPE d 浮点错误信号[默认异常终止]
+-*/+-*/+-*/SIGSEGV d 段错误信号[默认异常终止]
+-*/+-*/+-*/SIGILL d 非法指令信号[默认异常终止]
+-*/+-*/+-*/SIGFSZ d 超出文件大小限制[默认异常终止]
+-*/+-*/+-*/SIGPWR d 电源警告信号[默认忽略]
+-*/+-*/+-*/SIGXCPU d  超出CPU限制[默认异常终止]
+-*/+-*/+-*/SIGTRAP d 硬件故障信号[默认异常终止]
+-*/+-*/+-*/SIGIOT d 硬件错误信号[默认异常终止]
+-*/+-*/+-*/SIGPIPE d 管道错误信号(向管道写数据而无读数据进程时引发)[默认忽略]
SIGPIPE
  TCP套接字连接已断时再发送数据也会产生此信号
+-*/+-*/+-*/SIGIO d  IO异步事件信号[默认退出或忽略]
+-*/+-*/+-*/SIGPOLL d 可轮询事件[默认退出]
+-*/+-*/+-*/SIGURG d  紧急情况(网络收到带外数据)[默认忽略]
+-*/+-*/+-*/pause f 进程暂停直到有获得信号(unix)
pause()
  收到一个信号并处理(忽略,自定义处理函数)过以后结束暂停
+-*/+-*/+-*/getitimer f 获取定时器的间隔秒数
getitimer(which)
  which:
    signal.ITIMER_VIRTUAL  定时器以进程用户态时间计算,生成SIGVTALRM信号
    signal.ITIMER_REAL     定时器以系统真实时间计算，生成SIGALRM信号 
    signal.ITIMER_PROF     定时器以进程时间计算，生成SIGPROF信号
+-*/+-*/+-*/set_wakeup_fd f 
TODO:
set_wakeup_fd(fd)

Set the wakeup fd to *fd*.  When a signal is received, a ``'\0'`` byte is
written to the fd.  This can be used by a library to wakeup a poll or select
call, allowing the signal to be fully processed.

The old wakeup fd is returned.  *fd* must be non-blocking.  It is up to the
library to remove any bytes before calling poll or select again.

When threads are enabled, this function can only be called from the main thread;
attempting to call it from other threads will cause a :exc:`ValueError`
exception to be raised.



+-*/+-*/+-*/setitimer f 设置定时器(unix)
setitimer(which, seconds[, interval])
  which:
    signal.ITIMER_VIRTUAL  定时器以进程用户态时间计算,生成SIGVTALRM信号
    signal.ITIMER_REAL     定时器以系统真实时间计算，生成SIGALRM信号 
    signal.ITIMER_PROF     定时器以进程时间计算，生成SIGPROF信号
  seconds:   多少秒之后产生信号，如设为0则取消定时器
  interval:  如有设置则在第一次产生信号以后每隔这些秒产生一次信号
  seconds,interval可以使用浮点数
+-*/+-*/+-*/alarm f 设置警报定时器(unix)
alarm(time)
  time: 为0则取消定时警报，返回之前所设警报的剩余秒数
        非0则是多少秒以后发SIGALRM信号
+-*/+-*/+-*/siginterrupt f 设定系统调用在被信号中断时的操作(无用)
siginterrupt(signalnum, flag)
  signalnum:    信号
  flag:     为False时当系统调用被信号中断后会重新再次运行
            为True时则中断系统调用,errno设为EINTR
  不过对于python来说绝大多数信号默认是退出或忽略,
  而用signal注册信号处理函数时会自动将此项设为True
  即使之后再设为False也起不到作用.
+-*/+-*/+-*/getsignal f 获取信号的处理函数
getsignal(signalnum)
  signalnum:  信号码
  一般默认处理函数为SIG_DFL,忽略处理函数为SIG_IGN,未设置处理则返回None
+-*/+-*/+-*/signal f 设置信号处理方式
signal(signalnum, handler)
  handler:    信号处理函数(以信号编号和桢对象为参数的函数)
    信号收到后会中断当前程序执行信号处理函数,执行完返回中断的地方继续执行
    信号中断对于read,write,recv,send等操作影响很大要小心处理
    SIG_IGN    信号忽略处理函数
    SIG_DFL    信号默认处理函数
  signalnum:
      signal.SIGUSR1   用户定义信号(通常用来进程之间通信)
      signal.SIGUSR2   用户定义信号(通常用来进程之间通信)
      signal.SIGTERM   请求终止信号(kill命令的默认信号，用来关闭其它进程)
      signal.SIGKILL   终止信号(不能被捕获或忽略，用来强制终止其它进程)
      signal.SIGSTOP   暂停信号(不能被捕获或忽略)
      signal.SIGCONT   继续执行信号(用于被暂停的进程)
      signal.SIGHUP    常用于后台服务重新加载配置
      signal.SIGQUIT   退出信号(通常由终端Ctrl-\引发)
      signal.SIGINT    中断信号(通常由Ctrl-C引发)
+-*/+-*/+-*/ITIMER_VIRTUAL d 定时器以进程用户态时间计算,生成SIGVTALRM信号
+-*/+-*/+-*/ITIMER_REAL d 定时器以系统真实时间计算，生成SIGALRM信号 
+-*/+-*/+-*/ITIMER_PROF d 定时器以进程时间计算，生成SIGPROF信号
+-*/+-*/+-*/SIG_IGN d 信号忽略处理函数
+-*/+-*/+-*/SIG_DFL d 信号默认处理函数
+-*/+-*/+-*/NSIG d 最大信号编号+1
+-*/+-*/+-*/CTRL_C_EVENT d windows终端里的Ctrl-C事件(只用于os.kill)
+-*/+-*/+-*/CTRL_BREAK_EVENT d windows终端里的Ctrl-Break事件(只用于os.kill)
+-*/+-*/+-*/ItimerError e 
ItimerError

Raised to signal an error from the underlying :func:`setitimer` or
:func:`getitimer` implementation. Expect this error if an invalid
interval timer or a negative time is passed to :func:`setitimer`.
This error is a subtype of :exc:`IOError`.



+-*/+-*/subprocess p 运行其他程序的操作模块
+-*/+-*/+-*/check_output f 执行命令返回其输出的字节字符串
check_output(*popenargs, **kwargs)
  args:   执行的命令，可以是一个字符串如'ls -l'
          也可以是字符串列表如('ls','-l')
          一般最好用列表，以避免命令路径带空格或参数里带空格需转义的问题
  shell:  是否以shell方式执行命令
          如果为True,那args最好用整个字符串的方式
          像'ls *.xx'才能被shell自动扩展，使用列表方式有时将无法获得预期的结果
  executable:  shell为True时所指定的shell，默认为'/bin/sh'
  cwd:    执行时所使用目录，默认为当前目录
  env:    自定义环境变量字典，默认为当前进程环境
  stderr: 如要获取错误信息，应设为subprocess.STDOUT
  如执行返回的退出码不为0则会报CalledProcessError

   >>> subprocess.check_output(
   ...     ["/bin/sh", "-c", "ls non_existent_file; exit 0"],
   ...     stderr=subprocess.STDOUT)
   b'ls: non_existent_file: No such file or directory\n'
+-*/+-*/+-*/CalledProcessError e
+-*/+-*/+-*/check_call f 执行命令如发生错误或返回码不为0则报CalledProcessError
check_call(...)
  args:   执行的命令，可以是一个字符串如'ls -l'
          也可以是字符串列表如('ls','-l')
          一般最好用列表，以避免命令路径带空格或参数里带空格需转义的问题
  shell:  是否以shell方式执行命令
          如果为True,那args最好用整个字符串的方式
          像'ls *.xx'才能被shell自动扩展，使用列表方式有时将无法获得预期的结果
  executable:  shell为True时所指定的shell，默认为'/bin/sh'
  cwd:    执行时所使用目录，默认为当前目录
  env:    自定义环境变量字典，默认为当前进程环境
+-*/+-*/+-*/getstatusoutput f 获取执行命令的(返回值,输出文本)二元组 
getstatusoutput(cmd)
  返回(status, output),只用于Unix
  status是执行命令完成时的退出码
   >>> subprocess.getstatusoutput('ls /bin/ls')
   (0, '/bin/ls')
   >>> subprocess.getstatusoutput('cat /bin/junk')
   (256, 'cat: /bin/junk: No such file or directory')
   >>> subprocess.getstatusoutput('/bin/junk')
   (256, 'sh: /bin/junk: not found')
+-*/+-*/+-*/call f 执行命令返回其退出码
call(...)
  args:   执行的命令，可以是一个字符串如'ls -l'
          也可以是字符串列表如('ls','-l')
          一般最好用列表，以避免命令路径带空格或参数里带空格需转义的问题
  shell:  是否以shell方式执行命令
          如果为True,那args最好用整个字符串的方式
          像'ls *.xx'才能被shell自动扩展，使用列表方式有时将无法获得预期的结果
  executable:  shell为True时所指定的shell，默认为'/bin/sh'
  cwd:    执行时所使用目录，默认为当前目录
  env:    自定义环境变量字典，默认为当前进程环境
+-*/+-*/+-*/getoutput f 获取执行命令的输出文本字符串(unix)
getoutput(cmd)
   >>> subprocess.getoutput('ls /bin/ls')
   '/bin/ls'
+-*/+-*/+-*/STDOUT d 标准输出(主要用于stderr设置)
+-*/+-*/+-*/PIPE d 标准管道
+-*/+-*/+-*/Popen c 创建运行其他程序的子进程交互对象
Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, 
    stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, 
    env=None, universal_newlines=False, startupinfo=None, creationflags=0, 
    restore_signals=True, start_new_session=False, pass_fds=())
  args:   执行的命令，可以是一个字符串如'ls -l'
          也可以是字符串列表如('ls','-l')
          一般最好用列表，以避免命令路径带空格或参数里带空格需转义的问题
  stdin,stdout,stderr:  输入，输出，错误输出的设定
          一般如需要控制数据，可设为subprocess.PIPE
          或者可以设为文件对象或文件描述符
  shell:  是否以shell方式执行命令
          如果为True,那args最好用整个字符串的方式
          像'ls *.xx'才能被shell自动扩展，使用列表方式有时将无法获得预期的结果
  executable:  shell为True时所指定的shell，默认为'/bin/sh'
  cwd:    执行时所使用目录，默认为当前目录
  env:    自定义环境变量字典，默认为当前进程环境
  bufsize:  缓存设置，0无缓存，1行缓存，负数为系统默认，其他为缓存大小
  close_fds:  子进程结束前是否自动关闭其打开的文件
              windows下如有定义std*则此项需为False
  universal_newlines:   是否使用通用换行符('\n')
  startupinfo,creationflags:  用于windows设置子进程的外观等属性
  preexec_fn:  用于unix通常用来设定用户权限
+-*/+-*/+-*/+-*/stdout d 如创建时设为PIPE，此为文件对象可read
+-*/+-*/+-*/+-*/returncode d 最终的退出码，为None则表示子进程未结束
returncode
  如为负数，则表示子进程被相应的信号所终止
+-*/+-*/+-*/+-*/pid d 子进程的id(如创建时shell为True,此为shell的id)
+-*/+-*/+-*/+-*/stderr d 如创建时设为PIPE，此为文件对象可read
+-*/+-*/+-*/+-*/stdin d 如创建时设为PIPE，此为文件对象可write
+-*/+-*/+-*/+-*/terminate m 结束子进程(发送SIGTERM终止信号)
+-*/+-*/+-*/+-*/communicate m 与子进程交互
communicate(input=None)
  input为输入数据，如不需要则为None
  返回(输出信息字符串,错误信息字符串)二元组
  (要使用此方法一般创建Popen对象时stdin,stdout,stderr都应设为PIPE
   如忽略stderr,返回的错误信息将是None)
+-*/+-*/+-*/+-*/kill m 结束子进程(发送SIGKILL终止信号)
+-*/+-*/+-*/+-*/send_signal m 发送信号给子进程
send_signal(signal)
  signal:
      signal.SIGUSR1   用户定义信号(通常用来进程之间通信)
      signal.SIGUSR2   用户定义信号(通常用来进程之间通信)
      signal.SIGTERM   请求终止信号(kill命令的默认信号，用来关闭其它进程)
      signal.SIGKILL   终止信号(不能被捕获或忽略，用来强制终止其它进程)
      signal.SIGSTOP   暂停信号(不能被捕获或忽略)
      signal.SIGCONT   继续执行信号(用于被暂停的进程)
      signal.SIGHUP    常用于后台服务重新加载配置
      signal.SIGQUIT   退出信号(通常由终端Ctrl-\引发)
      signal.SIGINT    中断信号(通常由Ctrl-C引发)
      signal.CTRL_C_EVENT  windows终端里的Ctrl-C
      signal.CTRL_BREAK_EVENT  windows终端里的Ctrl-Break
+-*/+-*/+-*/+-*/poll m 检查子进程是否已终止，如已终止返回退出码，否则返回None
+-*/+-*/+-*/+-*/wait m 等待子进程结束，返回退出码
+-*/+-*/errno p 系统错误代码号模块
主要用于OSError和IOError异常的errno属性
os.strerror可以将错误代码转为字符串信息
+-*/+-*/+-*/EISDIR d 是个目录
+-*/+-*/+-*/EPROTONOSUPPORT d 协议不支持
+-*/+-*/+-*/ETXTBSY d 
ETXTBSY

Text file busy



+-*/+-*/+-*/ETOOMANYREFS d 引用过多
+-*/+-*/+-*/EDEADLOCK d 文件死锁
+-*/+-*/+-*/ETIME d 
ETIME

Timer expired



+-*/+-*/+-*/ESOCKTNOSUPPORT d 套接字类型不支持
+-*/+-*/+-*/ENOTTY d 不是终端 
+-*/+-*/+-*/ENAMETOOLONG d 文件名太长
+-*/+-*/+-*/EUCLEAN d 
EUCLEAN

Structure needs cleaning



+-*/+-*/+-*/EAGAIN d 再尝试
+-*/+-*/+-*/EMSGSIZE d 消息过长 
+-*/+-*/+-*/ECONNRESET d 连接被重置 
+-*/+-*/+-*/EL3HLT d 
EL3HLT

Level 3 halted



+-*/+-*/+-*/ELIBEXEC d 
ELIBEXEC

Cannot exec a shared library directly



+-*/+-*/+-*/EMLINK d 连接过多
+-*/+-*/+-*/ESTRPIPE d 管道错误
+-*/+-*/+-*/ENOTSOCK d 套接字操作用到了非套接字上
+-*/+-*/+-*/ESHUTDOWN d 不能在已关闭的端口上发数据
+-*/+-*/+-*/ENOLCK d 不能锁定
+-*/+-*/+-*/EDEADLK d 资源死锁
+-*/+-*/+-*/EFBIG d 文件过大
+-*/+-*/+-*/EBADRQC d 错误的请求码
+-*/+-*/+-*/EEXIST d 文件已存在
+-*/+-*/+-*/ENOLINK d 
ENOLINK

Link has been severed



+-*/+-*/+-*/EPROTO d 
EPROTO

Protocol error



+-*/+-*/+-*/EL3RST d 
EL3RST

Level 3 reset



+-*/+-*/+-*/EREMOTEIO d 
EREMOTEIO

Remote I/O error



+-*/+-*/+-*/ESRMNT d 
ESRMNT

Srmount error



+-*/+-*/+-*/EIDRM d 
EIDRM

Identifier removed



+-*/+-*/+-*/EADDRNOTAVAIL d 
EADDRNOTAVAIL

Cannot assign requested address



+-*/+-*/+-*/EPERM d 
EPERM

Operation not permitted



+-*/+-*/+-*/ENOTUNIQ d 
ENOTUNIQ

Name not unique on network



+-*/+-*/+-*/ELNRNG d 
ELNRNG

Link number out of range



+-*/+-*/+-*/ENOSPC d 
ENOSPC

No space left on device



+-*/+-*/+-*/ENOTNAM d 
ENOTNAM

Not a XENIX named type file



+-*/+-*/+-*/EUNATCH d 
EUNATCH

Protocol driver not attached



+-*/+-*/+-*/EISCONN d 
EISCONN

Transport endpoint is already connected



+-*/+-*/+-*/ELIBBAD d 
ELIBBAD

Accessing a corrupted shared library



+-*/+-*/+-*/ERANGE d 
ERANGE

Math result not representable



+-*/+-*/+-*/ESTALE d 
ESTALE

Stale NFS file handle



+-*/+-*/+-*/errorcode d 错误代码对应大写名称的字典
errorcode
  如errno.errorcode[errno.EPERM]为'EPERM'
+-*/+-*/+-*/ENOPROTOOPT d 
ENOPROTOOPT

Protocol not available



+-*/+-*/+-*/ELOOP d 
ELOOP

Too many symbolic links encountered



+-*/+-*/+-*/ECHILD d 
ECHILD

No child processes



+-*/+-*/+-*/EREMOTE d 
EREMOTE

Object is remote



+-*/+-*/+-*/ENOBUFS d 
ENOBUFS

No buffer space available



+-*/+-*/+-*/EDESTADDRREQ d 
EDESTADDRREQ

Destination address required



+-*/+-*/+-*/EINTR d 操作被信号打断
+-*/+-*/+-*/EADV d 
EADV

Advertise error



+-*/+-*/+-*/ETIMEDOUT d 
ETIMEDOUT

Connection timed out



+-*/+-*/+-*/ENOSYS d 
ENOSYS

Function not implemented



+-*/+-*/+-*/EUSERS d 
EUSERS

Too many users



+-*/+-*/+-*/EALREADY d 
EALREADY

Operation already in progress



+-*/+-*/+-*/ENODEV d 
ENODEV

No such device



+-*/+-*/+-*/E2BIG d 
E2BIG

Arg list too long



+-*/+-*/+-*/ENXIO d 
ENXIO

No such device or address



+-*/+-*/+-*/EPIPE d 
EPIPE

Broken pipe



+-*/+-*/+-*/EMFILE d 
EMFILE

Too many open files



+-*/+-*/+-*/EHOSTDOWN d 
EHOSTDOWN

Host is down



+-*/+-*/+-*/EBFONT d 
EBFONT

Bad font file format



+-*/+-*/+-*/EXFULL d 
EXFULL

Exchange full



+-*/+-*/+-*/EOPNOTSUPP d 
EOPNOTSUPP

Operation not supported on transport endpoint



+-*/+-*/+-*/EBUSY d 
EBUSY

Device or resource busy



+-*/+-*/+-*/EINPROGRESS d 
EINPROGRESS

Operation now in progress



+-*/+-*/+-*/ENFILE d 
ENFILE

File table overflow



+-*/+-*/+-*/EREMCHG d 
EREMCHG

Remote address changed



+-*/+-*/+-*/EADDRINUSE d 
EADDRINUSE

Address already in use



+-*/+-*/+-*/ENOPKG d 
ENOPKG

Package not installed



+-*/+-*/+-*/ENOMEM d 
ENOMEM

Out of memory



+-*/+-*/+-*/ENOSR d 
ENOSR

Out of streams resources



+-*/+-*/+-*/ECONNABORTED d 
ECONNABORTED

Software caused connection abort



+-*/+-*/+-*/EISNAM d 
EISNAM

Is a named type file



+-*/+-*/+-*/ELIBSCN d 
ELIBSCN

.lib section in a.out corrupted



+-*/+-*/+-*/ENOTCONN d 
ENOTCONN

Transport endpoint is not connected



+-*/+-*/+-*/EFAULT d 
EFAULT

Bad address



+-*/+-*/+-*/ELIBACC d 
ELIBACC

Can not access a needed shared library



+-*/+-*/+-*/ENETUNREACH d 
ENETUNREACH

Network is unreachable



+-*/+-*/+-*/EBADSLT d 
EBADSLT

Invalid slot



+-*/+-*/+-*/EDQUOT d 
EDQUOT

Quota exceeded



+-*/+-*/+-*/ENOENT d 
ENOENT

No such file or directory



+-*/+-*/+-*/EMULTIHOP d 
EMULTIHOP

Multihop attempted



+-*/+-*/+-*/ESPIPE d 
ESPIPE

Illegal seek



+-*/+-*/+-*/ECOMM d 
ECOMM

Communication error on send



+-*/+-*/+-*/EBADMSG d 
EBADMSG

Not a data message



+-*/+-*/+-*/EROFS d 
EROFS

Read-only file system



+-*/+-*/+-*/ECONNREFUSED d 
ECONNREFUSED

Connection refused



+-*/+-*/+-*/ENOTEMPTY d 
ENOTEMPTY

Directory not empty



+-*/+-*/+-*/EDOM d 
EDOM

Math argument out of domain of func



+-*/+-*/+-*/ENOSTR d 
ENOSTR

Device not a stream



+-*/+-*/+-*/ENOTDIR d 
ENOTDIR

Not a directory



+-*/+-*/+-*/EILSEQ d 
EILSEQ

Illegal byte sequence



+-*/+-*/+-*/EACCES d 
EACCES

Permission denied



+-*/+-*/+-*/EL2NSYNC d 
EL2NSYNC

Level 2 not synchronized



+-*/+-*/+-*/ENETDOWN d 
ENETDOWN

Network is down



+-*/+-*/+-*/ENOEXEC d 
ENOEXEC

Exec format error



+-*/+-*/+-*/EPFNOSUPPORT d 
EPFNOSUPPORT

Protocol family not supported



+-*/+-*/+-*/ERESTART d 
ERESTART

Interrupted system call should be restarted



+-*/+-*/+-*/EIO d 
EIO

I/O error



+-*/+-*/+-*/EBADF d 
EBADF

Bad file number



+-*/+-*/+-*/EBADE d 
EBADE

Invalid exchange



+-*/+-*/+-*/EPROTOTYPE d 
EPROTOTYPE

Protocol wrong type for socket



+-*/+-*/+-*/ECHRNG d 
ECHRNG

Channel number out of range



+-*/+-*/+-*/EDOTDOT d 
EDOTDOT

RFS specific error



+-*/+-*/+-*/EBADFD d 
EBADFD

File descriptor in bad state



+-*/+-*/+-*/EWOULDBLOCK d 
EWOULDBLOCK

Operation would block



+-*/+-*/+-*/EBADR d 
EBADR

Invalid request descriptor



+-*/+-*/+-*/EAFNOSUPPORT d 
EAFNOSUPPORT

Address family not supported by protocol



+-*/+-*/+-*/ENETRESET d 
ENETRESET

Network dropped connection because of reset



+-*/+-*/+-*/ESRCH d 
ESRCH

No such process



+-*/+-*/+-*/EHOSTUNREACH d 
EHOSTUNREACH

No route to host



+-*/+-*/+-*/EXDEV d 
EXDEV

Cross-device link



+-*/+-*/+-*/ENAVAIL d 
ENAVAIL

No XENIX semaphores available



+-*/+-*/+-*/ENONET d 
ENONET

Machine is not on the network



+-*/+-*/+-*/EINVAL d 
EINVAL

Invalid argument



+-*/+-*/+-*/ENOTBLK d 
ENOTBLK

Block device required



+-*/+-*/+-*/ENODATA d 
ENODATA

No data available



+-*/+-*/+-*/EL2HLT d 
EL2HLT

Level 2 halted



+-*/+-*/+-*/EOVERFLOW d 
EOVERFLOW

Value too large for defined data type



+-*/+-*/+-*/ENOCSI d 
ENOCSI

No CSI structure available



+-*/+-*/+-*/ENOMSG d 
ENOMSG

No message of desired type



+-*/+-*/+-*/ELIBMAX d 
ELIBMAX

Attempting to link in too many shared libraries



+-*/+-*/+-*/ENOANO d 
ENOANO

No anode



+-*/+-*/getpass p 获取系统用户名模块
+-*/+-*/+-*/getpass f 从终端获取密码(不会回显)
getpass(prompt='Password: ', stream=None)
  默认在终端显示'Password:'，然后获取用户输入
+-*/+-*/+-*/getuser f 获取当前用户名
+-*/+-*/+-*/GetPassWarning e 
+-*/+-*/io p io模块
如要使用内存文件对象，通常使用BytesIO或StringIO
+-*/+-*/+-*/open f 打开文件返回文件对象
open(filename [,mode [,bufsize [,encoding [,errors [,newline [,closefd]]]]]])
  mode: r读(文件须存在) w写(打开后清空文件) +读写(须和raw联合使用)
        a添加(每次写都先指针自动移到尾部开始写)
        b二进制 t文本 U通用换行（'\n','\r','\r\n'通通变为'\n'）
  bufsize: 0不缓冲 1行缓冲 其他正数是以字节为单位的缓冲大小 负数（默认系统缓冲）
  encoding: 如'utf-8'这样的编码名称
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
  newline: None,' ','\n','\r','\r\n' 控制换行模式
  closefd: 执行close()是否关闭文件描述符
+-*/+-*/+-*/DEFAULT_BUFFER_SIZE d 默认缓冲大小(通常使用磁盘扇区大小)
+-*/+-*/+-*/BlockingIOError e 阻塞异常
+-*/+-*/+-*/+-*/characters_written d 写入的字符数量
+-*/+-*/+-*/UnsupportedOperation e 不支持操作异常
+-*/+-*/+-*/IOBase t IO基类
+-*/+-*/+-*/+-*/closed d   是否已关闭
+-*/+-*/+-*/+-*/fileno m 返回文件描述符。如非文件对象则爆IOError
+-*/+-*/+-*/+-*/isatty m 如果对象是交互式终端则返回True
+-*/+-*/+-*/+-*/truncate m 截断文件
truncate(size=None)
 将文件截断为最多size个字节。如size未设定，则截断到当前位置。(可以增大文件大小）
 返回文件的新长度。
+-*/+-*/+-*/+-*/readable m 对象是否可读
+-*/+-*/+-*/+-*/readlines m 读取多行返回行列表
readlines(hint=-1)
  hint如给出，将最多读取hint字节。行内容通常包括'\n'
+-*/+-*/+-*/+-*/writelines m 写入行序列，不会自动加入换行符
writelines(lines)
  通常行序列里的每一项自行在尾部放置换行符
+-*/+-*/+-*/+-*/writable m 对象是否可写
+-*/+-*/+-*/+-*/flush m 清除缓冲使写入的内容生效
+-*/+-*/+-*/+-*/seekable m 对象是否可定位
+-*/+-*/+-*/+-*/close m 关闭文件
+-*/+-*/+-*/+-*/readline m  读取一行
readline(limit=-1)
  读取一行，如设置limit则单行最多limit个字节。行内容通常包括'\n'
+-*/+-*/+-*/+-*/seek m 设定操作位置
seek(offset, whence=os.SEEK_SET)
  offset:  偏移
  whence:  os.SEEK_SET或0，以文件开始位置算起
           os.SEEK_CUR或1，以当前位置算起
           os.SEEK_END或2，以文件结尾位置算起，通常此时offset用负数
  返回新位置的绝对值
+-*/+-*/+-*/+-*/tell m 返回当前操作位置
+-*/+-*/+-*/+-*/RawIOBase t 原始IO基类
+-*/+-*/+-*/+-*/+-*/read m 读取字节
read(n=-1)
  最多读取n个字节。如n未设置或为-1则读取全部。如返回0个字节则说明已到尾部。
  如果对象不能读取则返回None
+-*/+-*/+-*/+-*/+-*/write m 写入字节
write(b)
  写入字节字符串。返回写入的字节数。
+-*/+-*/+-*/+-*/+-*/readall m 读取所有字节
+-*/+-*/+-*/+-*/+-*/readinto m 读取数据存入bytearray对象
readinto(b)
  b: 一个bytearray对象
  一次读入最多len(b)个字节，返回实际读取的字节数
+-*/+-*/+-*/+-*/+-*/FileIO t 文件IO操作对象
FileIO(name, mode='r', closefd=True)
  name: 文件名
  mode: r读(文件须存在) w写(打开后清空文件) +读写(须和raw联合使用)
        a添加(每次写都先指针自动移到尾部开始写)
  closefd: 执行close()是否关闭文件描述符
+-*/+-*/+-*/+-*/+-*/+-*/mode d 文件操作模式'r','w'等
+-*/+-*/+-*/+-*/+-*/+-*/name d 文件名
+-*/+-*/+-*/+-*/+-*/BufferedIOBase t 带缓冲的IO基类
+-*/+-*/+-*/+-*/+-*/+-*/raw d 原始IO(RawIOBase实例)
+-*/+-*/+-*/+-*/+-*/+-*/read m  读取字节
read(n=-1)
  最多读取n个字节。如n未设置或为-1则读取全部。如返回0个字节则说明已到尾部。
  如果对象阻塞则报BlockingIOError
+-*/+-*/+-*/+-*/+-*/+-*/read1 m RawIOBase.read(通常用于自定义子类实现缓冲读取)
read1(n1)
+-*/+-*/+-*/+-*/+-*/+-*/readinto m  读取数据存入bytearray对象
readinto(b)
  b: 一个bytearray对象
  一次读入最多len(b)个字节，返回实际读取的字节数
  如果对象阻塞则报BlockingIOError
+-*/+-*/+-*/+-*/+-*/+-*/detach m 与原始IO脱离(BytesIO不能做此操作)
+-*/+-*/+-*/+-*/+-*/+-*/write m  写入字节
write(b)
  写入字节字符串。返回写入的字节数。
+-*/+-*/+-*/+-*/+-*/+-*/BufferedRWPair c 有缓存的管道IO
BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)
  reader:   读数据底层IO
  writer:   写数据底层IO(不能和reader相同)
  buffer_size:   缓存大小(以字节计)
+-*/+-*/+-*/+-*/+-*/+-*/BufferedRandom c 有缓存的读写IO
BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)
  raw:   底层IO
  buffer_size:   缓存大小(以字节计)
+-*/+-*/+-*/+-*/+-*/+-*/BufferedReader c 有缓存的只读IO
BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)
  raw:   底层IO
  buffer_size:   缓存大小(以字节计)
+-*/+-*/+-*/+-*/+-*/+-*/+-*/read m 读取字节
read([n])
  最多读取n个字节。如n未设置或为-1则读取全部。
+-*/+-*/+-*/+-*/+-*/+-*/+-*/peek m 以缓存机制读取数据(不移动指针)
peek([n])
  最多读取n个字节。如n未设置则只读1个字节
  返回的数据的字节数不会超过预设缓存的大小，所以返回结果的大小可能会小于n
+-*/+-*/+-*/+-*/+-*/+-*/+-*/read1 m RawIOBase.read(通常用于自定义子类实现缓冲读取)
read1(n)
+-*/+-*/+-*/+-*/+-*/+-*/BufferedWriter c 有缓存的只写IO
BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)
  raw:   底层IO
  buffer_size:   缓存大小(以字节计)
+-*/+-*/+-*/+-*/+-*/+-*/+-*/write m 写入字节
write(b)
  写入字节字符串。返回写入的字节数。
+-*/+-*/+-*/+-*/+-*/+-*/+-*/flush m 将缓存里的数据实际写入到IO 
+-*/+-*/+-*/+-*/+-*/+-*/BytesIO c 创建一个内存中的二进制文件对象
BytesIO([initial_bytes])
  initial_bytes:  文件初始内容
+-*/+-*/+-*/+-*/+-*/+-*/+-*/read1 m 
read1()

In :class:`BytesIO`, this is the same as :meth:`read`.




+-*/+-*/+-*/+-*/+-*/+-*/+-*/getbuffer m 
getbuffer()

Return a readable and writable view over the contents of the buffer
without copying them.  Also, mutating the view will transparently
update the contents of the buffer::

   >>> b = io.BytesIO(b"abcdef")
   >>> view = b.getbuffer()
   >>> view[2:4] = b"56"
   >>> b.getvalue()
   b'ab56ef'

.. note::
   As long as the view exists, the :class:`BytesIO` object cannot be
   resized.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/+-*/+-*/+-*/getvalue m 
getvalue()

Return ``bytes`` containing the entire contents of the buffer.


+-*/+-*/+-*/+-*/TextIOBase t 文本IO基类
+-*/+-*/+-*/+-*/+-*/buffer d 缓冲IO(BufferedIOBase实例)
+-*/+-*/+-*/+-*/+-*/errors d 编解码错误处理设定
+-*/+-*/+-*/+-*/+-*/newlines d  换行符
newlines
  可以是换行符'\n','\r','\r\n'这样的字符串
  也可是包含所有不同换行符编码的元组
+-*/+-*/+-*/+-*/+-*/encoding d  文件使用的编码，如无则为None
+-*/+-*/+-*/+-*/+-*/read m 读取内容
read(n)
  返回最多n个字符。如n未设置则返回所有的字符
+-*/+-*/+-*/+-*/+-*/write m 写入字符串
write(s)
  返回写入的字符数
+-*/+-*/+-*/+-*/+-*/readline m  读取一行
readline()
  如结尾则返回空字符串
+-*/+-*/+-*/+-*/+-*/detach m 与原始IO脱离(StringIO不能做此操作)
+-*/+-*/+-*/+-*/+-*/StringIO c 创建一个内存中的文本文件对象
StringIO(initial_value='', newline=None)
  initial_value:  文件初始内容
  newline:      None或字符串或元组，表示换行符
  python2里此对象只允许操作unicode字符串,如要操作str可使用BytesIO
+-*/+-*/+-*/+-*/+-*/+-*/getvalue m 获取整个文件的内容字符串
+-*/+-*/+-*/+-*/+-*/TextIOWrapper c 由带缓冲IO创建文本IO
TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False)
  buffer:    BufferedIOBase实例
  encoding:  编码
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
      'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
      'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
      'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
  newline: None,' ','\n','\r','\r\n' 控制换行模式
  line_buffering:  是否使用行缓冲
+-*/+-*/+-*/+-*/+-*/+-*/line_buffering d 是否使用行缓冲
+-*/+-*/+-*/IncrementalNewlineDecoder c 
IncrementalNewlineDecoder

A helper codec that decodes newlines for universal newlines mode.  It
inherits :class:`codecs.IncrementalDecoder`.



+-*/+-*/logging p 日志模块
日志通常由日志记录器Logger管理，由此产生日志。
日志记录器是有层次的，根日志记录器是所有其他记录器的父辈。
子记录器允许的日志记录将被所有父记录器的处理器处理。
处理器Handler一般可用handler模块里预设的处理器类创建所需的对象
然后设定(setFormatter)格式化对象(Formatter).
处理器和记录器都可设定过滤条件，
一个记录器可以登记(addHandler)多个处理器以便多种方式保存日志。
+-*/+-*/+-*/CRITICAL d 关键错误(50)
+-*/+-*/+-*/ERROR d 错误(40)
+-*/+-*/+-*/WARNING d 警告(30)
+-*/+-*/+-*/INFO d 通知(20)
+-*/+-*/+-*/DEBUG d 调试(10)
+-*/+-*/+-*/NOTSET d (0)
+-*/+-*/+-*/info f 给根日志记录器添加通知日志记录
info(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)

   FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
   logging.basicConfig(format=FORMAT)
   d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
   logging.info('Protocol problem: %s', 'connection reset', extra=d)

+-*/+-*/+-*/getLoggerClass f 
getLoggerClass()

Return either the standard :class:`Logger` class, or the last class passed to
:func:`setLoggerClass`. This function may be called from within a new class
definition, to ensure that installing a customised :class:`Logger` class will
not undo customisations already applied by other code. For example::

   class MyLogger(logging.getLoggerClass()):
       # ... override behaviour here



+-*/+-*/+-*/exception f 给根日志记录器添加异常日志记录
exception(msg, *args)
  此函数应只在except代码块里执行
  产生的日志是ERROR错误日志，会自动附带异常信息
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
   logging.exception('Protocol problem: %s', 'connection reset')
+-*/+-*/+-*/addLevelName f 增加自定义日志级别
addLevelName(lvl, levelName)
  lvl:        级别整数
  levleName:  级别名称
  通常不需要
+-*/+-*/+-*/log f 给根日志记录器添加日志记录
log(level, msg, *args, **kwargs)
  level:      日志记录级别整数
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)

   FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
   logging.basicConfig(format=FORMAT)
   d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
   logging.log(4,'Protocol problem: %s', 'connection reset', extra=d)

+-*/+-*/+-*/makeLogRecord f 
makeLogRecord(attrdict)

Creates and returns a new :class:`LogRecord` instance whose attributes are
defined by *attrdict*. This function is useful for taking a pickled
:class:`LogRecord` attribute dictionary, sent over a socket, and reconstituting
it as a :class:`LogRecord` instance at the receiving end.



+-*/+-*/+-*/setLogRecordFactory f 
setLogRecordFactory(factory)

Set a callable which is used to create a :class:`LogRecord`.

:param factory: The factory callable to be used to instantiate a log record.

.. versionadded:: 3.2
   This function has been provided, along with :func:`getLogRecordFactory`, to
   allow developers more control over how the :class:`LogRecord` representing
   a logging event is constructed.

The factory has the following signature:

``factory(name, level, fn, lno, msg, args, exc_info, func=None, sinfo=None, **kwargs)``

   :name: The logger name.
   :level: The logging level (numeric).
   :fn: The full pathname of the file where the logging call was made.
   :lno: The line number in the file where the logging call was made.
   :msg: The logging message.
   :args: The arguments for the logging message.
   :exc_info: An exception tuple, or None.
   :func: The name of the function or method which invoked the logging
          call.
   :sinfo: A stack traceback such as is provided by
           :func:`traceback.print_stack`, showing the call hierarchy.
   :kwargs: Additional keyword arguments.



+-*/+-*/+-*/getLogger f 获取或创建日志记录器
getLogger(name=None)
  name为空，则返回根日志记录器
  name中的'.'可做分层管理。'aa'是'aa.bb'的父记录器。
  name还为被getLogger过的，第一次getLogger将自动创建，一般此时都做设置处理
  以后再次getLogger同名的一般都是为了产生日志。
  只要符合记录器的日志就会被提交给所有父记录器有登记的处理器处理
+-*/+-*/+-*/captureWarnings f 是否记录warning异常
captureWarnings(capture)
  capture为True时将记录warnings模块里的那些警告异常
+-*/+-*/+-*/disable f 禁用日志记录
disable(lvl)
  所有小于lvl级别的日志记录将被忽略
+-*/+-*/+-*/critical f 给根日志记录器添加关键错误日志记录
critical(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)

   FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
   logging.basicConfig(format=FORMAT)
   d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
   logging.critical('Protocol problem: %s', 'connection reset', extra=d)

+-*/+-*/+-*/shutdown f 关闭所有日志记录器 
shutdown()
  通常在程序结束前调用，可保证在之前的所有日志都已记录
+-*/+-*/+-*/error f 给根日志记录器添加错误日志记录
error(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)

   FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
   logging.basicConfig(format=FORMAT)
   d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
   logging.error('Protocol problem: %s', 'connection reset', extra=d)
+-*/+-*/+-*/debug f 给根日志记录器添加调试日志记录
debug(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)

   FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
   logging.basicConfig(format=FORMAT)
   d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
   logging.debug('Protocol problem: %s', 'connection reset', extra=d)

+-*/+-*/+-*/basicConfig f 根日志配置
basicConfig(**kwargs)
  filename:   保存日志的文件名
  filemode:   打开日志文件的方式，默认'a'
  style:      格式字符串的形式，'%'对应%操作，'{'对应format，'$'对应Template
  format:     日志消息格式字符串
  datefmt:    日志日期时间格式字符串
  level:      级别(小于此级别值的消息将忽略)
  stream:     io对象，如有filename参数，此参数将被忽略

  format里可用的引用:
    name         str     日志记录器的名称
    levelno      str     数字形式的日志级别
    levelname    str     名称形式的日志级别('DEBUG','INFO'等)
    pathname     str     产生日志的源文件目录(可能没有)
    filename     str     产生日志的源文件名称
    funcname     str     产生日志的函数名称
    module       str     产生日志的模块名称
    lineno       int     产生日志的行号(可能没有)
    created      float   日志发生的时间，浮点数形式
    asctime      str     日志发生的时间，默认YYYY-MM-DD HH:mm:ss,sss
    msecs        int     日志发生的时间，毫秒数形式
    relativeCreated  int 从日志记录器创建到日志发生的时间差(毫秒数)
    thread       int     线程ID(可能没有)
    threadname   str     线程名称(可能没有)
    process      int     进程ID(可能没有)
    processName  str     进程名称(可能没有)
    message      str     日志消息内容
    扩展的消息字典键值也可被引用,记录时extra必须包含引用的键值,否则不会被记录

+-*/+-*/+-*/warning f 给根日志记录器添加警告日志记录
warning(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)

   FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
   logging.basicConfig(format=FORMAT)
   d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
   logging.warning('Protocol problem: %s', 'connection reset', extra=d)

+-*/+-*/+-*/setLoggerClass f 
setLoggerClass(klass)

Tells the logging system to use the class *klass* when instantiating a logger.
The class should define :meth:`__init__` such that only a name argument is
required, and the :meth:`__init__` should call :meth:`Logger.__init__`. This
function is typically called before any loggers are instantiated by applications
which need to use custom logger behavior.



+-*/+-*/+-*/getLogRecordFactory f 
getLogRecordFactory()

Return a callable which is used to create a :class:`LogRecord`.

.. versionadded:: 3.2
   This function has been provided, along with :func:`setLogRecordFactory`,
   to allow developers more control over how the :class:`LogRecord`
   representing a logging event is constructed.

See :func:`setLogRecordFactory` for more information about the how the
factory is called.


+-*/+-*/+-*/getLevelName f 获得相应级别的级别名称
getLevelName(lvl)
  如级别恰好有相应的名称，则返回名称，否则返回'Level xx'
+-*/+-*/+-*/NullHandler c 不做处理的日志处理器
+-*/+-*/+-*/+-*/createLock m 
createLock()

This method returns ``None`` for the lock, since there is no
underlying I/O to which access needs to be serialized.




+-*/+-*/+-*/+-*/handle m 
handle(record)

This method does nothing.


+-*/+-*/+-*/+-*/emit m 
emit(record)

This method does nothing.


+-*/+-*/+-*/FileHandler c 文件日志保存器
FileHandler(filename, mode='a', encoding=None, delay=False)
  filename:   文件名
  mode:       打开方式，默认'a'
  encoding:   编码方式
  delay:      是否延迟到需要时再打开文件
+-*/+-*/+-*/+-*/close m 关闭文件
+-*/+-*/+-*/+-*/emit m 保存日志记录
emit(record)
+-*/+-*/+-*/Filter t 日志过滤器类
  一般使用自定义子类创建过滤器
  class MyFilter(logging.Filter):
    def filter(self,record):
      if record.filename == 'xxx': return True
      return False
+-*/+-*/+-*/+-*/filter m 过滤检测
filter(record)
  record:   日志记录对象LogRecord
  返回True则此条日志记录将被处理，否则将被忽略
+-*/+-*/+-*/LoggerAdapter c 日志记录器扩展
LoggerAdapter(logger, extra)
  logger:   日志记录器对象logging.Logger
  extra:    附加的信息字典，其内容可在消息被格式化时引用
  返回的对象在添加日志时，无需再指定extra参数
  ext = {'aaa':'aa', 'bb':'bbb'}
  log = logging.LoggerAdapter(logging.getLogger(),ext)
  log.error('....')
+-*/+-*/+-*/+-*/process m 
process(msg, kwargs)

Modifies the message and/or keyword arguments passed to a logging call in
order to insert contextual information. This implementation takes the object
passed as *extra* to the constructor and adds it to *kwargs* using key
'extra'. The return value is a (*msg*, *kwargs*) tuple which has the
(possibly modified) versions of the arguments passed in.



+-*/+-*/+-*/StreamHandler c 终端显示日志处理器
StreamHandler(stream=None)
  stream 默认为sys.stderr
  日志记录将输出显示在终端上
+-*/+-*/+-*/+-*/emit m 
emit(record)

If a formatter is specified, it is used to format the record. The record
is then written to the stream with a terminator. If exception information
is present, it is formatted using :func:`traceback.print_exception` and
appended to the stream.



+-*/+-*/+-*/+-*/flush m 
flush()

Flushes the stream by calling its :meth:`flush` method. Note that the
:meth:`close` method is inherited from :class:`Handler` and so does
no output, so an explicit :meth:`flush` call may be needed at times.



+-*/+-*/+-*/LogRecord c 日志里的记录对象
LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)
    name             日志记录器的名称
    level            数字形式的日志级别
    pathname         产生日志的源文件的全路径
    func             产生日志的函数名称
    lineno           产生日志的行号
    msg              日志消息内容
    args             日志消息内容里引用的数据
    exc_info         异常信息三元组
    sinfo            栈桢信息文本
+-*/+-*/+-*/+-*/name         d  日志记录器的名称
+-*/+-*/+-*/+-*/levelno      d  日志级别整数
+-*/+-*/+-*/+-*/levelname    d  日志级别名称('DEBUG','INFO'等)
+-*/+-*/+-*/+-*/pathname     d  产生日志的源文件目录(可能为'')
+-*/+-*/+-*/+-*/filename     d  产生日志的源文件名称
+-*/+-*/+-*/+-*/funcname     d  产生日志的函数名称
+-*/+-*/+-*/+-*/module       d  产生日志的模块名称
+-*/+-*/+-*/+-*/lineno       d  产生日志的行号(可能为0)
+-*/+-*/+-*/+-*/created      d  日志发生的时间(时间浮点数)
+-*/+-*/+-*/+-*/msecs        d  日志发生的时间(毫秒数)
+-*/+-*/+-*/+-*/relativeCreated  d 从日志记录器创建到日志发生的时间差(毫秒数)
+-*/+-*/+-*/+-*/thread       d    线程ID
+-*/+-*/+-*/+-*/threadname   d    线程名称
+-*/+-*/+-*/+-*/process      d    进程ID
+-*/+-*/+-*/+-*/processName  d    进程名称
+-*/+-*/+-*/+-*/getMessage m 返回日志记录的消息内容
+-*/+-*/+-*/Logger c 日志记录器对象
一般由getLoggerClass自定义类或使用getLogger创建对象
+-*/+-*/+-*/+-*/propagate d 日志记录是否使用父辈记录器的处理器处理，默认为True 
+-*/+-*/+-*/+-*/info m 添加通知日志记录
info(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/exception m 添加异常日志记录
exception(msg, *args)
  此函数应只在except代码块里执行
  产生的日志是ERROR错误日志，会自动附带异常信息
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/handle m 
handle(record)

Handles a record by passing it to all handlers associated with this logger and
its ancestors (until a false value of *propagate* is found). This method is used
for unpickled records received from a socket, as well as those created locally.
Logger-level filtering is applied using :meth:`~Logger.filter`.



+-*/+-*/+-*/+-*/log m 添加日志记录 
log(lvl, msg, *args, **kwargs)
  lvl:        日志消息级别
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/addFilter m 给日志记录器增加过滤器
addFilter(filt)
  filt:   logging.Filter对象
+-*/+-*/+-*/+-*/debug m 添加调试日志记录
debug(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/setLevel m 设置有效级别
setLevel(lvl)
    lvl 小于此级别的日志记录将被忽略，
+-*/+-*/+-*/+-*/addHandler m 增加一个日志处理器
addHandler(hdlr)
  hdlr: 日志处理器对象
+-*/+-*/+-*/+-*/filter m 
filter(record)

Applies this logger's filters to the record and returns a true value if the
record is to be processed.



+-*/+-*/+-*/+-*/removeHandler m 移除一个日志处理器
removeHandler(hdlr)
  hdlr: 日志处理器对象
+-*/+-*/+-*/+-*/removeFilter m 移除过滤器 
removeFilter(filt)
  filt:   logging.Filter对象
+-*/+-*/+-*/+-*/warning m 添加警告日志记录
warning(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/findCaller m 返回(源文件名,行号,函数名称)三元组
findCaller(stack_info=False)
  stack_info为True时将返回四元组，其最后一项为栈桢信息
+-*/+-*/+-*/+-*/critical m 添加关键错误日志记录 
critical(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/getChild m 
getChild(suffix)

Returns a logger which is a descendant to this logger, as determined by the suffix.
Thus, ``logging.getLogger('abc').getChild('def.ghi')`` would return the same
logger as would be returned by ``logging.getLogger('abc.def.ghi')``. This is a
convenience method, useful when the parent logger is named using e.g. ``__name__``
rather than a literal string.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/error m 添加错误日志记录 
error(msg, *args, **kwargs)
  exc_info:   如为True则会将sys.exc_info()的信息添加到日志
  extra:      附加的信息字典，其内容可在消息被格式化时引用
              注意，如果消息格式引用的数据未在extra内，此记录将因错误而没有记录
  msg:        日志消息内容
    (如果是%格式化字符串，其后的参数为引用的数据，
     目的是在级别忽略时减少求解参数带来的不必要性能浪费)
+-*/+-*/+-*/+-*/isEnabledFor m 判断某级别日志记录是否会被处理
isEnabledFor(lvl)
  先检测级别lvl是否小于全局设定(Logging.disable里设定的)
  再检测记录器的最低级别(需要时会判断父辈记录器是否会处理lvl级别)
+-*/+-*/+-*/+-*/getEffectiveLevel m 获取有效级别
getEffectiveLevel()
  如本日志记录器未设定有效级别
  将返回父辈记录器所设定的有效级别
+-*/+-*/+-*/+-*/hasHandlers m 是否有配置处理器
hasHandlers()
  检查自身或父辈是否有配置处理器
+-*/+-*/+-*/+-*/makeRecord m 
makeRecord(name, lvl, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)

This is a factory method which can be overridden in subclasses to create
specialized :class:`LogRecord` instances.


+-*/+-*/+-*/Formatter c 日志格式对象
Formatter(fmt=None, datefmt=None, style='%')
  fmt:        日志消息格式字符串
  datefmt:    日志日期时间格式字符串
  style:      格式字符串的形式，'%'对应%操作，'{'对应format，'$'对应Template
    name         str     日志记录器的名称
    levelno      str     数字形式的日志级别
    levelname    str     名称形式的日志级别('DEBUG','INFO'等)
    pathname     str     产生日志的源文件目录(可能没有)
    filename     str     产生日志的源文件名称
    funcname     str     产生日志的函数名称
    module       str     产生日志的模块名称
    lineno       int     产生日志的行号(可能没有)
    created      float   日志发生的时间，浮点数形式
    asctime      str     日志发生的时间，默认YYYY-MM-DD HH:mm:ss,sss
    msecs        int     日志发生的时间，毫秒数形式
    relativeCreated  int 从日志记录器创建到日志发生的时间差(毫秒数)
    thread       int     线程ID(可能没有)
    threadname   str     线程名称(可能没有)
    process      int     进程ID(可能没有)
    processName  str     进程名称(可能没有)
    message      str     日志消息内容
+-*/+-*/+-*/+-*/formatStack m 
formatStack(stack_info)

Formats the specified stack information (a string as returned by
:func:`traceback.print_stack`, but with the last newline removed) as a
string. This default implementation just returns the input value.



+-*/+-*/+-*/+-*/formatException m 
formatException(exc_info)

Formats the specified exception information (a standard exception tuple as
returned by :func:`sys.exc_info`) as a string. This default implementation
just uses :func:`traceback.print_exception`. The resulting string is
returned.


+-*/+-*/+-*/+-*/formatTime m 
formatTime(record, datefmt=None)

This method should be called from :meth:`format` by a formatter which
wants to make use of a formatted time. This method can be overridden in
formatters to provide for any specific requirement, but the basic behavior
is as follows: if *datefmt* (a string) is specified, it is used with
:func:`time.strftime` to format the creation time of the
record. Otherwise, the ISO8601 format is used.  The resulting string is
returned.

This function uses a user-configurable function to convert the creation
time to a tuple. By default, :func:`time.localtime` is used; to change
this for a particular formatter instance, set the ``converter`` attribute
to a function with the same signature as :func:`time.localtime` or
:func:`time.gmtime`. To change it for all formatters, for example if you
want all logging times to be shown in GMT, set the ``converter``
attribute in the ``Formatter`` class.


+-*/+-*/+-*/+-*/format m 
format(record)

The record's attribute dictionary is used as the operand to a string
formatting operation. Returns the resulting string. Before formatting the
dictionary, a couple of preparatory steps are carried out. The *message*
attribute of the record is computed using *msg* % *args*. If the
formatting string contains ``'(asctime)'``, :meth:`formatTime` is called
to format the event time. If there is exception information, it is
formatted using :meth:`formatException` and appended to the message. Note
that the formatted exception information is cached in attribute
*exc_text*. This is useful because the exception information can be
pickled and sent across the wire, but you should be careful if you have
more than one :class:`Formatter` subclass which customizes the formatting
of exception information. In this case, you will have to clear the cached
value after a formatter has done its formatting, so that the next
formatter to handle the event doesn't use the cached value but
recalculates it afresh.

If stack information is available, it's appended after the exception
information, using :meth:`formatStack` to transform it if necessary.



+-*/+-*/+-*/Handler t 日志处理器基类
+-*/+-*/+-*/+-*/acquire m 
acquire()

Acquires the thread lock created with :meth:`createLock`.



+-*/+-*/+-*/+-*/handle m 
handle(record)

Conditionally emits the specified logging record, depending on filters which may
have been added to the handler. Wraps the actual emission of the record with
acquisition/release of the I/O thread lock.



+-*/+-*/+-*/+-*/addFilter m 增加过滤器
addFilter(filt)
  filt:   logging.Filter对象
+-*/+-*/+-*/+-*/format m 
format(record)

Do formatting for a record - if a formatter is set, use it. Otherwise, use the
default formatter for the module.



+-*/+-*/+-*/+-*/setLevel m 设定最低级别
setLevel(lvl)
    lvl 小于此级别的日志记录将被忽略
+-*/+-*/+-*/+-*/handleError m 
handleError(record)

This method should be called from handlers when an exception is encountered
during an :meth:`emit` call. By default it does nothing, which means that
exceptions get silently ignored. This is what is mostly wanted for a logging
system - most users will not care about errors in the logging system, they are
more interested in application errors. You could, however, replace this with a
custom handler if you wish. The specified record is the one which was being
processed when the exception occurred.



+-*/+-*/+-*/+-*/filter m 
filter(record)

Applies this handler's filters to the record and returns a true value if the
record is to be processed.



+-*/+-*/+-*/+-*/removeFilter m 移除过滤器
removeFilter(filt)
  filt:   logging.Filter对象
+-*/+-*/+-*/+-*/createLock m 
createLock()

Initializes a thread lock which can be used to serialize access to underlying
I/O functionality which may not be threadsafe.



+-*/+-*/+-*/+-*/setFormatter m 设置日志格式
setFormatter(form)
  form:   日志格式对象loggin.Formatter
+-*/+-*/+-*/+-*/flush m 确保记录的日志记录都已保存
+-*/+-*/+-*/+-*/release m 
release()

Releases the thread lock acquired with :meth:`acquire`.



+-*/+-*/+-*/+-*/close m 关闭处理器
+-*/+-*/+-*/+-*/emit m 处理日志记录
emit(record)
+-*/+-*/+-*/+-*/__init__ m 
__init__(level=NOTSET)

Initializes the :class:`Handler` instance by setting its level, setting the list
of filters to the empty list and creating a lock (using :meth:`createLock`) for
serializing access to an I/O mechanism.



+-*/+-*/+-*/config p 日志配置模块
+-*/+-*/+-*/+-*/dictConfig f 
dictConfig(config)

 Takes the logging configuration from a dictionary.  The contents of
 this dictionary are described in :ref:`logging-config-dictschema`
 below.

 If an error is encountered during configuration, this function will
 raise a :exc:`ValueError`, :exc:`TypeError`, :exc:`AttributeError`
 or :exc:`ImportError` with a suitably descriptive message.  The
 following is a (possibly incomplete) list of conditions which will
 raise an error:

 * A ``level`` which is not a string or which is a string not
   corresponding to an actual logging level.
 * A ``propagate`` value which is not a boolean.
 * An id which does not have a corresponding destination.
 * A non-existent handler id found during an incremental call.
 * An invalid logger name.
 * Inability to resolve to an internal or external object.

 Parsing is performed by the :class:`DictConfigurator` class, whose
 constructor is passed the dictionary used for configuration, and
 has a :meth:`configure` method.  The :mod:`logging.config` module
 has a callable attribute :attr:`dictConfigClass`
 which is initially set to :class:`DictConfigurator`.
 You can replace the value of :attr:`dictConfigClass` with a
 suitable implementation of your own.

 :func:`dictConfig` calls :attr:`dictConfigClass` passing
 the specified dictionary, and then calls the :meth:`configure` method on
 the returned object to put the configuration into effect::

       def dictConfig(config):
           dictConfigClass(config).configure()

 For example, a subclass of :class:`DictConfigurator` could call
 ``DictConfigurator.__init__()`` in its own :meth:`__init__()`, then
 set up custom prefixes which would be usable in the subsequent
 :meth:`configure` call. :attr:`dictConfigClass` would be bound to
 this new subclass, and then :func:`dictConfig` could be called exactly as
 in the default, uncustomized state.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/fileConfig f 由ini文件设定日志方式
fileConfig(fname, defaults=None, disable_existing_loggers=True)
  fname:  文件名
  disable_existing_loggers:  是否屏蔽已存在的日志记录器

ini文件示例：

#记录器声明
[loggers]
keys=root,log01,log02
#后面需定义logger_...对应的记录器

#处理器声明
[handlers]
keys=han01,han02
#后面需定义handler_...对应的记录器

#格式器声明
[formatters]
keys=form01,form02
#后面需定义formatter_...对应的记录器

#根记录器
[logger_root]
#级别设定
level=NOTSET
#处理器设定，可多个，使用声明的名称
handlers=han01,han02

#其他记录器
[logger_log01]
level=...
handlers=...
#日志记录是否传播给父记录器，默认为True 
propagate=1
#父记录器
parent=(root)
#全名
qualname=log01
#短名
channel=log01

#其他记录器
[logger_log02]
level=...
handlers=...
propagate=1
#父记录器
parent=log01
#全名
qualname=log01.log02
#短名
channel=log02

#处理器定义
[handler_han01]
class=FileHandler
level=...
#格式
formatter=form01
#创建对象所需的参数
args=('ddd.log','a')

#处理器定义
[handler_han01]
class=handlers.SysLogHandler
level=...
formatter=...
#创建对象所需的参数
args=(('localhost',handlers.SYSLOG_UDP_PORT),handlers.SysLogHandler.LOG_KERN)

#格式器定义
[formatter_form01]
format=%(asctime)s %(levelname)s:%(message)s
datefmt=

+-*/+-*/+-*/+-*/stopListening f 
stopListening()

Stops the listening server which was created with a call to :func:`listen`.
This is typically called before calling :meth:`join` on the return value from
:func:`listen`.



+-*/+-*/+-*/+-*/listen f 
listen(port=DEFAULT_LOGGING_CONFIG_PORT)

Starts up a socket server on the specified port, and listens for new
configurations. If no port is specified, the module's default
:const:`DEFAULT_LOGGING_CONFIG_PORT` is used. Logging configurations will be
sent as a file suitable for processing by :func:`fileConfig`. Returns a
:class:`Thread` instance on which you can call :meth:`start` to start the
server, and which you can :meth:`join` when appropriate. To stop the server,
call :func:`stopListening`.

To send a configuration to the socket, read in the configuration file and
send it to the socket as a string of bytes preceded by a four-byte length
string packed in binary using ``struct.pack('>L', n)``.



+-*/+-*/+-*/handlers p 日志处理器模块
+-*/+-*/+-*/+-*/NTEventLogHandler c windows系统日志保存器
NTEventLogHandler(appname, dllname=None, logtype='Application')
  appname:  事件日志里使用的名称
  dllname:  默认为win32service.pyd
  logtype:  Application应用程序日志 或 System系统日志 或 Security安全日志
+-*/+-*/+-*/+-*/+-*/getEventType m 
getEventType(record)

Returns the event type for the record. Override this if you want to
specify your own types. This version does a mapping using the handler's
typemap attribute, which is set up in :meth:`__init__` to a dictionary
which contains mappings for :const:`DEBUG`, :const:`INFO`,
:const:`WARNING`, :const:`ERROR` and :const:`CRITICAL`. If you are using
your own levels, you will either need to override this method or place a
suitable dictionary in the handler's *typemap* attribute.



+-*/+-*/+-*/+-*/+-*/close m 
close()

At this point, you can remove the application name from the registry as a
source of event log entries. However, if you do this, you will not be able
to see the events as you intended in the Event Log Viewer - it needs to be
able to access the registry to get the .dll name. The current version does
not do this.



+-*/+-*/+-*/+-*/+-*/getEventCategory m 
getEventCategory(record)

Returns the event category for the record. Override this if you want to
specify your own categories. This version returns 0.



+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Determines the message ID, event category and event type, and then logs
the message in the NT event log.



+-*/+-*/+-*/+-*/+-*/getMessageID m 
getMessageID(record)

Returns the message ID for the record. If you are using your own messages,
you could do this by having the *msg* passed to the logger being an ID
rather than a format string. Then, in here, you could use a dictionary
lookup to get the message ID. This version returns 1, which is the base
message ID in :file:`win32service.pyd`.



+-*/+-*/+-*/+-*/RotatingFileHandler c 指定大小的文件日志保存期
RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=0)
  filename:   文件名
  mode:       打开方式，默认'a'
  encoding:   编码方式
  delay:      是否延迟到需要时再打开文件
  maxBytes:   日志文件的最大长度
  backupCount:备份日志的数量,0为不限数量
  日志文件如超过长度将生成新的，备份的日志文件名为filename.xx
  filename.1为最新的备份
+-*/+-*/+-*/+-*/+-*/doRollover m 
doRollover()

Does a rollover, as described above.



+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Outputs the record to the file, catering for rollover as described
previously.



+-*/+-*/+-*/+-*/SysLogHandler c unix系统日志保存器
SysLogHandler(address=('localhost', SYSLOG_UDP_PORT), facility=LOG_USER, socktype=socket.SOCK_DGRAM)
  address:    (地址,端口)二元组，默认为('localhost',514)
  socktype:   socket.SOCK_DGRAM 或 socket.SOCK_STREAM
+-*/+-*/+-*/+-*/+-*/close m 
close()

Closes the socket to the remote host.



+-*/+-*/+-*/+-*/+-*/encodePriority m 
encodePriority(facility, priority)

Encodes the facility and priority into an integer. You can pass in strings
or integers - if strings are passed, internal mapping dictionaries are
used to convert them to integers.

The symbolic ``LOG_`` values are defined in :class:`SysLogHandler` and
mirror the values defined in the ``sys/syslog.h`` header file.

**Priorities**

+--------------------------+---------------+
| Name (string)            | Symbolic value|
+==========================+===============+
| ``alert``                | LOG_ALERT     |
+--------------------------+---------------+
| ``crit`` or ``critical`` | LOG_CRIT      |
+--------------------------+---------------+
| ``debug``                | LOG_DEBUG     |
+--------------------------+---------------+
| ``emerg`` or ``panic``   | LOG_EMERG     |
+--------------------------+---------------+
| ``err`` or ``error``     | LOG_ERR       |
+--------------------------+---------------+
| ``info``                 | LOG_INFO      |
+--------------------------+---------------+
| ``notice``               | LOG_NOTICE    |
+--------------------------+---------------+
| ``warn`` or ``warning``  | LOG_WARNING   |
+--------------------------+---------------+

**Facilities**

+---------------+---------------+
| Name (string) | Symbolic value|
+===============+===============+
| ``auth``      | LOG_AUTH      |
+---------------+---------------+
| ``authpriv``  | LOG_AUTHPRIV  |
+---------------+---------------+
| ``cron``      | LOG_CRON      |
+---------------+---------------+
| ``daemon``    | LOG_DAEMON    |
+---------------+---------------+
| ``ftp``       | LOG_FTP       |
+---------------+---------------+
| ``kern``      | LOG_KERN      |
+---------------+---------------+
| ``lpr``       | LOG_LPR       |
+---------------+---------------+
| ``mail``      | LOG_MAIL      |
+---------------+---------------+
| ``news``      | LOG_NEWS      |
+---------------+---------------+
| ``syslog``    | LOG_SYSLOG    |
+---------------+---------------+
| ``user``      | LOG_USER      |
+---------------+---------------+
| ``uucp``      | LOG_UUCP      |
+---------------+---------------+
| ``local0``    | LOG_LOCAL0    |
+---------------+---------------+
| ``local1``    | LOG_LOCAL1    |
+---------------+---------------+
| ``local2``    | LOG_LOCAL2    |
+---------------+---------------+
| ``local3``    | LOG_LOCAL3    |
+---------------+---------------+
| ``local4``    | LOG_LOCAL4    |
+---------------+---------------+
| ``local5``    | LOG_LOCAL5    |
+---------------+---------------+
| ``local6``    | LOG_LOCAL6    |
+---------------+---------------+
| ``local7``    | LOG_LOCAL7    |
+---------------+---------------+


+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

The record is formatted, and then sent to the syslog server. If exception
information is present, it is *not* sent to the server.

.. versionchanged:: 3.2.1
   (See: :issue:`12168`.) In earlier versions, the message sent to the
   syslog daemons was always terminated with a NUL byte, because early
   versions of these daemons expected a NUL terminated message - even
   though it's not in the relevant specification (RF 5424). More recent
   versions of these daemons don't expect the NUL byte but strip it off
   if it's there, and even more recent daemons (which adhere more closely
   to RFC 5424) pass the NUL byte on as part of the message.

   To enable easier handling of syslog messages in the face of all these
   differing daemon behaviours, the appending of the NUL byte has been
   made configurable, through the use of a class-level attribute,
   ``append_nul``. This defaults to ``True`` (preserving the existing
   behaviour) but can be set to ``False`` on a ``SysLogHandler`` instance
   in order for that instance to *not* append the NUL terminator.


+-*/+-*/+-*/+-*/+-*/mapPriority m 
mapPriority(levelname)

Maps a logging level name to a syslog priority name.
You may need to override this if you are using custom levels, or
if the default algorithm is not suitable for your needs. The
default algorithm maps ``DEBUG``, ``INFO``, ``WARNING``, ``ERROR`` and
``CRITICAL`` to the equivalent syslog names, and all other level
names to 'warning'.



+-*/+-*/+-*/+-*/BufferingHandler t 
BufferingHandler(capacity)

Initializes the handler with a buffer of the specified capacity.



+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Appends the record to the buffer. If :meth:`shouldFlush` returns true,
calls :meth:`flush` to process the buffer.



+-*/+-*/+-*/+-*/+-*/shouldFlush m 
shouldFlush(record)

Returns true if the buffer is up to capacity. This method can be
overridden to implement custom flushing strategies.




+-*/+-*/+-*/+-*/+-*/flush m 
flush()

You can override this to implement custom flushing behavior. This version
just zaps the buffer to empty.



+-*/+-*/+-*/+-*/+-*/MemoryHandler c 缓存日志处理器
TODO:
MemoryHandler(capacity, flushLevel=ERROR, target=None)
  capacity:   内存缓存的大小
  target:     目标处理器(必须设定后本处理器才可用)
  

Returns a new instance of the :class:`MemoryHandler` class. The instance is
initialized with a buffer size of *capacity*. If *flushLevel* is not specified,
:const:`ERROR` is used. If no *target* is specified, the target will need to be
set using :meth:`setTarget` before this handler does anything useful.



+-*/+-*/+-*/+-*/+-*/+-*/close m 
close()

Calls :meth:`flush`, sets the target to :const:`None` and clears the
buffer.



+-*/+-*/+-*/+-*/+-*/+-*/setTarget m 
setTarget(target)

Sets the target handler for this handler.



+-*/+-*/+-*/+-*/+-*/+-*/shouldFlush m 
shouldFlush(record)

Checks for buffer full or a record at the *flushLevel* or higher.




+-*/+-*/+-*/+-*/+-*/+-*/flush m 
flush()

For a :class:`MemoryHandler`, flushing means just sending the buffered
records to the target, if there is one. The buffer is also cleared when
this happens. Override if you want different behavior.



+-*/+-*/+-*/+-*/QueueHandler c 
QueueHandler(queue)

Returns a new instance of the :class:`QueueHandler` class. The instance is
initialized with the queue to send messages to. The queue can be any queue-
like object; it's used as-is by the :meth:`enqueue` method, which needs
to know how to send messages to it.



+-*/+-*/+-*/+-*/+-*/enqueue m 
enqueue(record)

Enqueues the record on the queue using ``put_nowait()``; you may
want to override this if you want to use blocking behaviour, or a
timeout, or a customised queue implementation.





+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Enqueues the result of preparing the LogRecord.


+-*/+-*/+-*/+-*/+-*/prepare m 
prepare(record)

Prepares a record for queuing. The object returned by this
method is enqueued.

The base implementation formats the record to merge the message
and arguments, and removes unpickleable items from the record
in-place.

You might want to override this method if you want to convert
the record to a dict or JSON string, or send a modified copy
of the record while leaving the original intact.


+-*/+-*/+-*/+-*/QueueListener c 
QueueListener(queue, *handlers)

Returns a new instance of the :class:`QueueListener` class. The instance is
initialized with the queue to send messages to and a list of handlers which
will handle entries placed on the queue. The queue can be any queue-
like object; it's passed as-is to the :meth:`dequeue` method, which needs
to know how to get messages from it.


+-*/+-*/+-*/+-*/+-*/stop m 
stop()

Stops the listener.

This asks the thread to terminate, and then waits for it to do so.
Note that if you don't call this before your application exits, there
may be some records still left on the queue, which won't be processed.




+-*/+-*/+-*/+-*/+-*/dequeue m 
dequeue(block)

Dequeues a record and return it, optionally blocking.

The base implementation uses ``get()``. You may want to override this
method if you want to use timeouts or work with custom queue
implementations.


+-*/+-*/+-*/+-*/+-*/handle m 
handle(record)

Handle a record.

This just loops through the handlers offering them the record
to handle. The actual object passed to the handlers is that which
is returned from :meth:`prepare`.


+-*/+-*/+-*/+-*/+-*/prepare m 
prepare(record)

Prepare a record for handling.

This implementation just returns the passed-in record. You may want to
override this method if you need to do any custom marshalling or
manipulation of the record before passing it to the handlers.


+-*/+-*/+-*/+-*/+-*/start m 
start()

Starts the listener.

This starts up a background thread to monitor the queue for
LogRecords to process.


+-*/+-*/+-*/+-*/WatchedFileHandler c 可变文件日志保存器
WatchedFileHandler(filename[,mode[, encoding[, delay]]])
  filename:   文件名
  mode:       打开方式，默认'a'
  encoding:   编码方式
  delay:      是否延迟到需要时再打开文件
  如文件被其他程序改动将会重新再一次打开文件以避免冲突
+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Outputs the record to the file, but first checks to see if the file has
changed.  If it has, the existing stream is flushed and closed and the
file opened again, before outputting the record to the file.



+-*/+-*/+-*/+-*/SMTPHandler c 邮件日志处理器
SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)
  mailhost:  smtp服务器地址
  fromaddr:  发信人地址
  toaddrs:   收信人地址
  subject:   邮件标题
+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Formats the record and sends it to the specified addressees.



+-*/+-*/+-*/+-*/+-*/getSubject m 
getSubject(record)

If you want to specify a subject line which is record-dependent, override
this method.



+-*/+-*/+-*/+-*/SocketHandler c TCP远程日志处理器
SocketHandler(host, port)
  host,port   目的地址和端口
+-*/+-*/+-*/+-*/+-*/handleError m 
handleError()

Handles an error which has occurred during :meth:`emit`. The most likely
cause is a lost connection. Closes the socket so that we can retry on the
next event.



+-*/+-*/+-*/+-*/+-*/makePickle m 
makePickle(record)

Pickles the record's attribute dictionary in binary format with a length
prefix, and returns it ready for transmission across the socket.

Note that pickles aren't completely secure. If you are concerned about
security, you may want to override this method to implement a more secure
mechanism. For example, you can sign pickles using HMAC and then verify
them on the receiving end, or alternatively you can disable unpickling of
global objects on the receiving end.



+-*/+-*/+-*/+-*/+-*/createSocket m 
createSocket()

Tries to create a socket; on failure, uses an exponential back-off
algorithm.  On intial failure, the handler will drop the message it was
trying to send.  When subsequent messages are handled by the same
instance, it will not try connecting until some time has passed.  The
default parameters are such that the initial delay is one second, and if
after that delay the connection still can't be made, the handler will
double the delay each time up to a maximum of 30 seconds.

This behaviour is controlled by the following handler attributes:

* ``retryStart`` (initial delay, defaulting to 1.0 seconds).
* ``retryFactor`` (multiplier, defaulting to 2.0).
* ``retryMax`` (maximum delay, defaulting to 30.0 seconds).

This means that if the remote listener starts up *after* the handler has
been used, you could lose messages (since the handler won't even attempt
a connection until the delay has elapsed, but just silently drop messages
during the delay period).




+-*/+-*/+-*/+-*/+-*/send m 
send(packet)

Send a pickled string *packet* to the socket. This function allows for
partial sends which can happen when the network is busy.



+-*/+-*/+-*/+-*/+-*/close m 
close()

Closes the socket.



+-*/+-*/+-*/+-*/+-*/makeSocket m 
makeSocket()

This is a factory method which allows subclasses to define the precise
type of socket they want. The default implementation creates a TCP socket
(:const:`socket.SOCK_STREAM`).



+-*/+-*/+-*/+-*/+-*/emit m 
emit()

Pickles the record's attribute dictionary and writes it to the socket in
binary format. If there is an error with the socket, silently drops the
packet. If the connection was previously lost, re-establishes the
connection. To unpickle the record at the receiving end into a
:class:`LogRecord`, use the :func:`makeLogRecord` function.



+-*/+-*/+-*/+-*/+-*/DatagramHandler c UDP远程日志处理器 
DatagramHandler(host, port)
  host,port   目的地址和端口
+-*/+-*/+-*/+-*/+-*/+-*/makeSocket m 
makeSocket()

The factory method of :class:`SocketHandler` is here overridden to create
a UDP socket (:const:`socket.SOCK_DGRAM`).



+-*/+-*/+-*/+-*/+-*/+-*/emit m 
emit()

Pickles the record's attribute dictionary and writes it to the socket in
binary format. If there is an error with the socket, silently drops the
packet. To unpickle the record at the receiving end into a
:class:`LogRecord`, use the :func:`makeLogRecord` function.



+-*/+-*/+-*/+-*/+-*/+-*/send m 
send(s)

Send a pickled string to a socket.




+-*/+-*/+-*/+-*/TimedRotatingFileHandler c 定时备份文件日志保存器
TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False)
  filename:   文件名
  encoding:   编码方式
  delay:      是否延迟到需要时再打开文件
  backupCount:备份日志的数量,0为不限数量
  when:       'S'秒 'M'分 'H'小时 'D'天 'W'周 时间单位
  interval:   周期的长度
  默认一小时备份一次日志，备份的日志文件名为filename.xx
  filename.1为最新的备份
+-*/+-*/+-*/+-*/+-*/doRollover m 
doRollover()

Does a rollover, as described above.



+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Outputs the record to the file, catering for rollover as described above.




+-*/+-*/+-*/+-*/HTTPHandler c HTTP远程日志处理器
HTTPHandler(host, url, method='GET', secure=False, credentials=None)
  host  目的地址
  url   http地址
  method GET或POST
+-*/+-*/+-*/+-*/+-*/emit m 
emit(record)

Sends the record to the Web server as a percent-encoded dictionary.




+-*/+-*/mmap p 内存映射模块
+-*/+-*/+-*/MAP_SHARED d 进程共享映射
+-*/+-*/+-*/MAP_PRIVATE d 进程私有映射
+-*/+-*/+-*/PROT_READ d 可读
+-*/+-*/+-*/PROT_WRITE d 可写
+-*/+-*/+-*/ALLOCATIONGRANULARITY d 通常为4096
+-*/+-*/+-*/ACCESS_READ d 只读
+-*/+-*/+-*/ACCESS_WRITE d 读写访问(影响文件)
+-*/+-*/+-*/ACCESS_COPY d 复制映射，可读写(不影响文件)
+-*/+-*/+-*/mmap c 内存映射对象(可用于with)
mmap(fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ, access=ACCESS_DEFAULT[, offset])
  fileno:     文件描述符，如为-1则会映射匿名的内存
  length:     使用内存的长度(字节数),如为0则使用文件的长度代替
  flags:      MAP_SHARED进程共享映射 或 MAP_PRIVATE进程私有映射
  prot:       PROT_WRITE可写 PROT_READ可读 PROT_READ|PROT_WRITE可读写
  access:     flags和prot的替代参数
              ACCESS_READ  只读
              ACCESS_WRITE 读写访问(影响文件)
              ACCESS_COPY  复制映射，可读写(不影响文件)
  offset:     文件里开始映射的位置(字节数),默认为开头,
              须是ALLOCATIONGRANULARITY的倍数
进程共享映射的例子
   map = mmap.mmap(-1, 13)
   pid = os.fork()
   if pid == 0: # In a child process
       map.seek(0)
       print(map.readline())
+-*/+-*/+-*/+-*/closed d 是否已关闭
+-*/+-*/+-*/+-*/write m 当前位置写入字节字符串 
write(bytes)
+-*/+-*/+-*/+-*/read m 读取内容，返回字节字符串 
read(num)
+-*/+-*/+-*/+-*/move m 内存映射内复制数据
move(dest, src, count)
  dest  目标位置
  src   源位置
  count 复制的字节数
+-*/+-*/+-*/+-*/rfind m  从右查找内容，返回其位置，未找到返回-1 
rfind(sub[, start[, end]])
  sub   字节字符串
  start 开始查找的位置
  end   结束查找的位置
+-*/+-*/+-*/+-*/tell m 返回当前位置
+-*/+-*/+-*/+-*/read_byte m 读取一个字节 
+-*/+-*/+-*/+-*/write_byte m 写入一个字节 
write_byte(byte)
+-*/+-*/+-*/+-*/flush m 清除映射，并将修改写入文件 
flush([offset[, size]])
  offset,size 可指定修改的范围
+-*/+-*/+-*/+-*/close m 关闭文件 
+-*/+-*/+-*/+-*/readline m  读取一行
+-*/+-*/+-*/+-*/seek m 设定位置
seek(offset, whence=os.SEEK_SET)
  offset:  偏移
  whence:  os.SEEK_SET或0，以文件开始位置算起
           os.SEEK_CUR或1，以当前位置算起
           os.SEEK_END或2，以文件结尾位置算起，通常此时offset用负数
  返回新位置的绝对值
+-*/+-*/+-*/+-*/find m 从左查找内容，返回其位置，未找到返回-1 
find(sub[, start[, end]])
  sub   字节字符串
  start 开始查找的位置
  end   结束查找的位置
+-*/+-*/+-*/+-*/resize m 调整内存映射的大小
resize(newsize)
+-*/+-*/+-*/+-*/size m 返回文件大小(可能会大于内存映射区域的大小)
+-*/+-*/multiprocessing p 多进程模块
主要用于unix
+-*/+-*/+-*/cpu_count f 返回系统的CPU数量
+-*/+-*/+-*/SUBDEBUG d 多进程的日志调试级别(5)
+-*/+-*/+-*/SUBWARNING d 多进程的日志警告级别(25)
+-*/+-*/+-*/log_to_stderr f 设置错误日志输出到strerr
log_to_stderr(level=None)
  其格式为'[%(levelname)s/%(processName)s] %(message)s'
+-*/+-*/+-*/get_logger f 返回多进程使用的日志记录对象
get_logger()
  返回的日志记录对象不会和根日志产生联系,其级别为NOTSET(记录所有级别日志)
  并且所有日志将输出到标准错误上。
+-*/+-*/+-*/active_children f 返回所有活动的子进程Process对象列表
active_children()
  通常用于结束时join等待子进程结束
+-*/+-*/+-*/set_executable f 设置子进程的程序名称(windows)
set_executable()

   setExecutable(os.path.join(sys.exec_prefix, 'pythonw.exe'))
+-*/+-*/+-*/current_process f 返回当前进程对应的子进程Process对象
+-*/+-*/+-*/freeze_support f 对于打包产生的程序应最先执行此操作
freeze_support()
  主要用于py2exe, PyInstaller 和 cx_Freeze

   from multiprocessing import Process, freeze_support
   def f():
       print('hello world!')
   if __name__ == '__main__':
       freeze_support()
       Process(target=f).start()
+-*/+-*/+-*/Event f 创建事件(简易同步机制,没有使用任何锁)
+-*/+-*/+-*/+-*/clear m 清除事件标志(恢复到未发生状态)
+-*/+-*/+-*/+-*/set m 设置事件发生了的标志
+-*/+-*/+-*/+-*/wait m 等待事件发生
wait(timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限
  如果超时返回False
+-*/+-*/+-*/+-*/is_set m 检查事件是否已发生
+-*/+-*/+-*/Condition f 创建条件变量(常用于进程同步)
Condition(lock=None)
  lock:  Lock或RLock对象(一般无需设置)
  通常要先acquire(进入同步状态)才能作其他操作
  用于多个进程时常是生产和消费的模式
  多个生产进程负责生产，生产完后通知唤醒消费进程，然后进入等待状态
  多个消费进程负责消费，消费完后通知唤醒生产进程，然后进入等待状态
  往往唤醒后会检查库存的实际的情况再决定是否生产或消费或等待,故因此叫条件变量
+-*/+-*/+-*/+-*/acquire m 获取锁(进入同步状态)
acquire(*args)
  blocking: 如果为True,无法立即获得锁时将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获得锁
+-*/+-*/+-*/+-*/release m 释放锁(退出同步状态)
+-*/+-*/+-*/+-*/notify m 唤醒一个正在等待(同步)的进程
notify()
  须已获得锁定，此操作并不释放锁定
  通常其后操作为wait或release
+-*/+-*/+-*/+-*/wait m 等待被唤醒(等待其它进程同步操作完成)
wait(timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限
  如果超时返回False
+-*/+-*/+-*/+-*/notify_all m 唤醒所有在等待(同步)的进程
+-*/+-*/+-*/+-*/wait_for m 等待被唤醒(常用于多个进程同时等待)
wait_for(predicate, timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限
  predicate:返回真假值的测试函数(返回False则继续等待)
            通常为检查某个条件,避免被唤醒时已被其他进程处理过了
  如果超时返回False
+-*/+-*/+-*/Lock f 创建互斥锁
创建的对象可使用with语句
  l=Lock()
  with l:
    ...
+-*/+-*/+-*/+-*/release m 释放锁(不要在未获得锁的情况下作此操作)
+-*/+-*/+-*/+-*/acquire m 尝试获取锁并锁定
acquire(blocking=True, timeout=-1)
  blocking: 如果为True,无法立即获得锁时将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获得锁
+-*/+-*/+-*/RLock f 创建可重入锁(带计数器的同进程可重入互斥锁)
RLock()
  同一进程可多次锁定，解锁同样需要相同的次数
  创建的对象可使用with语句
  l=RLock()
  with l:
    ...
+-*/+-*/+-*/+-*/release m 释放锁(不要在未获得锁的情况下作此操作)
release()
  如被多次锁定，此操作只将计数器-1，直到计数器为0才会真正释放
+-*/+-*/+-*/+-*/acquire m 尝试获取锁并锁定
acquire(blocking=True, timeout=-1)
  blocking: 如果为True,无法立即获得锁时将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获得锁
  如同一进程已获取这个锁，再次获取将使计数器+1
+-*/+-*/+-*/Semaphore f 创建信号量(数量有限资源的管理计数器)
Semaphore(value=1)
  value:  计数器的初始值(可用资源数量)(不能为负数)
+-*/+-*/+-*/+-*/release m 释放(计数器+1)
+-*/+-*/+-*/+-*/acquire m 获取(计数器-1)
acquire(blocking=True, timeout=None)
  blocking: 如果为True,无法立即获取时(即计数器为0)将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获取
+-*/+-*/+-*/BoundedSemaphore f 创建有上限的信号量(数量有限资源的管理计数器)
BoundedSemaphore(value=1)
  value:  计数器的初始值(可用资源的最大数量)(须为正数)
+-*/+-*/+-*/+-*/release m 释放(计数器+1,如超过初始值将报错)
+-*/+-*/+-*/+-*/acquire m 获取(计数器-1)
acquire(blocking=True, timeout=None)
  blocking: 如果为True,无法立即获取时(即计数器为0)将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获取
+-*/+-*/+-*/Array f 在共享内存中创建单类型数组(可用于多进程共享)
Array(typecode_or_type, size_or_initializer, *, lock=True)
  typecode_or_type:  或者是以下字符或者是ctypes.c_*类型
             C类型    字节数
    'c'       char       1      python2字符
    'b'    signed char   1      
    'B'   unsigned char  1
    'u'    PY_UNICODE   2,4 
    'h'      short       2
    'H'  unsigned short  2
    'i'       int       4,8 
    'I'   unsigned int  4,8 
    'l'       long      4,8 
    'L'  unsigned long  4,8 
    'f'      float       4
    'd'      double      8
  size_or_initializer,* :  或许是数组大小，或许是初始化数组
  lock:      默认为True创建自带锁，任何操作都会由锁控制防止脏读脏写
             也可自设定其他Lock或RLock对象来控制
  如果类型为ctypes.c_char可直接使用.value或.raw来操作字符串或字节字符串
+-*/+-*/+-*/Value f 在共享内存中创建C类型共享数据(可用于多进程共享)
Value(typecode_or_type, *args[, lock])
  typecode_or_type:  或者是以下字符或者是ctypes.c_*类型
             C类型    字节数
    'c'       char       1      python2字符
    'b'    signed char   1      
    'B'   unsigned char  1
    'u'    PY_UNICODE   2,4 
    'h'      short       2
    'H'  unsigned short  2
    'i'       int       4,8 
    'I'   unsigned int  4,8 
    'l'       long      4,8 
    'L'  unsigned long  4,8 
    'f'      float       4
    'd'      double      8
  *args:     初始化参数
  lock:      默认为True创建自带锁，任何操作都会由锁控制防止脏读脏写
             也可自设定其他Lock或RLock对象来控制
  可使用.value来操作数据
+-*/+-*/+-*/BufferTooShort e 
BufferTooShort

Exception raised by :meth:`Connection.recv_bytes_into()` when the supplied
buffer object is too small for the message read.

If ``e`` is an instance of :exc:`BufferTooShort` then ``e.args[0]`` will give
the message as a byte string.



+-*/+-*/+-*/TimeoutError e 
+-*/+-*/+-*/Pool c pool.Pool
Pool([processes[, initializer[, initargs[, maxtasksperchild]]]])
  processes:   进程池的最大进程数量，未给出将默认使用cpu数量
  initializer: 每次创建进程后，进程将执行的初始化函数
  initargs:    初始化函数的参数
+-*/+-*/+-*/Process c 创建子进程对象
Process([group[, target[, name[, args[, kwargs]]]]])
  target: 子进程所执行的函数
  name:   子进程的名称
  args,kwargs:  为target函数所使用的参数
          一般不要使用全局变量，应该把需要的用参数形式传到进程
  group:  无用
  自定义子类时须有Process.__init__(self)
+-*/+-*/+-*/+-*/is_alive m 进程是否有在运行
+-*/+-*/+-*/+-*/authkey d 随机产生的32字节字符串(可修改，常用于身份验证)
+-*/+-*/+-*/+-*/daemon d 是否是后台进程(父进程终止将随着自动终止)的标志
daemon
  在进程开始前设置才有效,后台进程禁止生成子进程,也不能被join
+-*/+-*/+-*/+-*/pid d 进程的id号(在开始运行前为None)
+-*/+-*/+-*/+-*/name d 进程的名称
+-*/+-*/+-*/+-*/exitcode d 最终的退出码，为None则表示子进程未结束,负数表示进程被相应的信号所终止
+-*/+-*/+-*/+-*/join m 等待进程执行
join([timeout])
  timeout:  如果为None将一直等到进程结束或中断
            可以设浮点数形式的秒数时间以确定等待时间
+-*/+-*/+-*/+-*/start m 启动子进程
+-*/+-*/+-*/+-*/run m 进程所包含的执行程序(通常用于子类继承重定义)
+-*/+-*/+-*/+-*/terminate m 终止进程
terminate()

Terminate the process.  On Unix this is done using the ``SIGTERM`` signal;
on Windows :c:func:`TerminateProcess` is used.  Note that exit handlers and
finally clauses, etc., will not be executed.

Note that descendant processes of the process will *not* be terminated --
they will simply become orphaned.

.. warning::

   If this method is used when the associated process is using a pipe or
   queue then the pipe or queue is liable to become corrupted and may
   become unusable by other process.  Similarly, if the process has
   acquired a lock or semaphore etc. then terminating it is liable to
   cause other processes to deadlock.


+-*/+-*/+-*/Queue c 创建用于进程之间共享的FIFO先进先出队列
Queue([maxsize])
  maxsize:  队列的最大长度,0表示不限
  通常在子进程创建前创建
+-*/+-*/+-*/+-*/qsize m 队列的长度(由于多进程所以不一定准确)
+-*/+-*/+-*/+-*/get_nowait m 获取队列里一项的元素(不阻塞)
get_nowait()
  如果未取得数据，将报queue.Empty错误
+-*/+-*/+-*/+-*/get m 获取队列里一项的元素
get([block[, timeout]])
  block:     为True时，如果队列空将等待队列内有数据
  timeout:   等待的最长浮点数秒数,None为无限
  如果未取得数据，将报queue.Empty错误
+-*/+-*/+-*/+-*/join_thread m 放入后台(只能在close后使用)
join_thread()
  该操作主要防止数据丢失.进程结束时会等待数据处理。(可能会引发死锁)
+-*/+-*/+-*/+-*/cancel_join_thread m 进程结束时不处理(可能会丢数据,但不易死锁)
+-*/+-*/+-*/+-*/full m 队列是否已满(由于多进程所以不一定准确)
+-*/+-*/+-*/+-*/put_nowait m 给队列添加一项元素(不阻塞) 
put_nowait(item)
  itme:      要添加的元素(必须能被pickle)
  如果未能添加数据，将报queue.Full错误
+-*/+-*/+-*/+-*/put m 给队列添加一项元素
put(item[, block[, timeout]])
  itme:      要添加的元素(必须能被pickle)
  block:     为True时，如果队列满将等待队列内有空闲空间
  timeout:   等待的最长浮点数秒数,None为无限
  如果最终未能添加数据，将报queue.Full错误
+-*/+-*/+-*/+-*/close m 关闭队列(主要防止队列里加入更多数据)
+-*/+-*/+-*/+-*/empty m 队列是否为空(由于多进程所以不一定准确)
+-*/+-*/+-*/+-*/JoinableQueue c 创建可以等待数据被其他进程处理的共享FIFO队列
JoinableQueue([maxsize])
  maxsize:  队列的最大长度,0表示不限
+-*/+-*/+-*/+-*/+-*/task_done m 明确表示一项元素数据已被处理
task_done()
  通常在get提取元素后将元素数据处理过(如保存、发送)再明确此操作
  (虽然可以不get提取就task_done,但一般这样作没什么意义)
+-*/+-*/+-*/+-*/+-*/join m 等待队列所有元素被其他进程处理
join()
  只有明确调用task_done才表示为一次处理操作
  每put添加一次，未处理的数目就加一，此函数将一直等到未处理数目为0
+-*/+-*/+-*/Pipe f 创建管道,返回管道的两端(c1,c2)二元组
Pipe([duplex])
  duplex:  默认为True创建双向管道，为False时创建单向管道，c1收,c2发
  通常在子进程创建前创建
+-*/+-*/+-*/+-*/fileno m 返回管道文件描述符
+-*/+-*/+-*/+-*/recv_bytes m 接收字节数据(单条数据)
recv_bytes([maxlength])
  maxlength:    接收的最大长度，默认无限
  如管道已关闭，无法接收数据，将报EOFError错误
  如果数据量大于maxlength将报IOError错误
+-*/+-*/+-*/+-*/send m 发送对象数据
send(obj)
  obj需可pickle,也不能太大(通常不能超过32MB)
+-*/+-*/+-*/+-*/recv_bytes_into m 接收字节数据存入缓冲(单条数据)
recv_bytes_into(buffer[, offset])
  buffer:   通常为ctype,array等的缓冲对象
  offset:   起始偏移量  
  如管道已关闭，无法接收数据，将报EOFError错误
+-*/+-*/+-*/+-*/send_bytes m 发送字节数据(单条数据) 
send_bytes(buffer[, offset[, size]])
  buffer:   通常为字节字符串，也可是ctype,array等的缓冲对象
  offset:   起始偏移量  
  size:     发送的字节数
  发送的数据通常不能大于32MB
+-*/+-*/+-*/+-*/close m 关闭管道
+-*/+-*/+-*/+-*/poll m 等待或检测是否有数据需要接收
poll([timeout])
  timeout:   如未给出，将作检测，返回True表示有数据需接收
             可为浮点秒数，将等待有数据进入，如为None将无限等待
+-*/+-*/+-*/+-*/recv m 接受对象数据
recv()
  如管道已关闭，无法接收数据，将报EOFError错误
+-*/+-*/+-*/connection p API for dealing with sockets.
TODO:
+-*/+-*/+-*/+-*/deliver_challenge f 
deliver_challenge(connection, authkey)

Send a randomly generated message to the other end of the connection and wait
for a reply.

If the reply matches the digest of the message using *authkey* as the key
then a welcome message is sent to the other end of the connection.  Otherwise
:exc:`AuthenticationError` is raised.


+-*/+-*/+-*/+-*/Client f 
Client(address[, family[, authenticate[, authkey]]])

Attempt to set up a connection to the listener which is using address
*address*, returning a :class:`~multiprocessing.Connection`.

The type of the connection is determined by *family* argument, but this can
generally be omitted since it can usually be inferred from the format of
*address*. (See :ref:`multiprocessing-address-formats`)

If *authenticate* is ``True`` or *authkey* is a string then digest
authentication is used.  The key used for authentication will be either
*authkey* or ``current_process().authkey)`` if *authkey* is ``None``.
If authentication fails then :exc:`AuthenticationError` is raised.  See
:ref:`multiprocessing-auth-keys`.


+-*/+-*/+-*/+-*/answerChallenge f 
answerChallenge(connection, authkey)

Receive a message, calculate the digest of the message using *authkey* as the
key, and then send the digest back.

If a welcome message is not received, then :exc:`AuthenticationError` is
raised.


+-*/+-*/+-*/+-*/AuthenticationError e 
AuthenticationError

Exception raised when there is an authentication error.



+-*/+-*/+-*/+-*/Listener c 
Listener([address[, family[, backlog[, authenticate[, authkey]]]]])

A wrapper for a bound socket or Windows named pipe which is 'listening' for
connections.

*address* is the address to be used by the bound socket or named pipe of the
listener object.

.. note::

   If an address of '0.0.0.0' is used, the address will not be a connectable
   end point on Windows. If you require a connectable end-point,
   you should use '127.0.0.1'.

*family* is the type of socket (or named pipe) to use.  This can be one of
the strings ``'AF_INET'`` (for a TCP socket), ``'AF_UNIX'`` (for a Unix
domain socket) or ``'AF_PIPE'`` (for a Windows named pipe).  Of these only
the first is guaranteed to be available.  If *family* is ``None`` then the
family is inferred from the format of *address*.  If *address* is also
``None`` then a default is chosen.  This default is the family which is
assumed to be the fastest available.  See
:ref:`multiprocessing-address-formats`.  Note that if *family* is
``'AF_UNIX'`` and address is ``None`` then the socket will be created in a
private temporary directory created using :func:`tempfile.mkstemp`.

If the listener object uses a socket then *backlog* (1 by default) is passed
to the :meth:`listen` method of the socket once it has been bound.

If *authenticate* is ``True`` (``False`` by default) or *authkey* is not
``None`` then digest authentication is used.

If *authkey* is a string then it will be used as the authentication key;
otherwise it must be *None*.

If *authkey* is ``None`` and *authenticate* is ``True`` then
``current_process().authkey`` is used as the authentication key.  If
*authkey* is ``None`` and *authenticate* is ``False`` then no
authentication is done.  If authentication fails then
:exc:`AuthenticationError` is raised.  See :ref:`multiprocessing-auth-keys`.


+-*/+-*/+-*/+-*/+-*/last_accepted d 
last_accepted

The address from which the last accepted connection came.  If this is
unavailable then it is ``None``.




+-*/+-*/+-*/+-*/+-*/address d 
address

The address which is being used by the Listener object.


+-*/+-*/+-*/+-*/+-*/close m 
close()

Close the bound socket or named pipe of the listener object.  This is
called automatically when the listener is garbage collected.  However it
is advisable to call it explicitly.


+-*/+-*/+-*/+-*/+-*/accept m 
accept()

Accept a connection on the bound socket or named pipe of the listener
object and return a :class:`Connection` object.  If authentication is
attempted and fails, then :exc:`AuthenticationError` is raised.



+-*/+-*/+-*/managers p Share data between process with shared objects.
TODO:
+-*/+-*/+-*/+-*/BaseProxy c 
BaseProxy

Proxy objects are instances of subclasses of :class:`BaseProxy`.


+-*/+-*/+-*/+-*/+-*/_getvalue m 
_getvalue()

Return a copy of the referent.

If the referent is unpicklable then this will raise an exception.


+-*/+-*/+-*/+-*/+-*/_callmethod m 
_callmethod(methodname[, args[, kwds]])

Call and return the result of a method of the proxy's referent.

If ``proxy`` is a proxy whose referent is ``obj`` then the expression ::

   proxy._callmethod(methodname, args, kwds)

will evaluate the expression ::

   getattr(obj, methodname)(*args, **kwds)

in the manager's process.

The returned value will be a copy of the result of the call or a proxy to
a new shared object -- see documentation for the *method_to_typeid*
argument of :meth:`BaseManager.register`.

If an exception is raised by the call, then then is re-raised by
:meth:`_callmethod`.  If some other exception is raised in the manager's
process then this is converted into a :exc:`RemoteError` exception and is
raised by :meth:`_callmethod`.

Note in particular that an exception will be raised if *methodname* has
not been *exposed*

An example of the usage of :meth:`_callmethod`:

.. doctest::

   >>> l = manager.list(range(10))
   >>> l._callmethod('__len__')
   10
   >>> l._callmethod('__getslice__', (2, 7))   # equiv to `l[2:7]`
   [2, 3, 4, 5, 6]
   >>> l._callmethod('__getitem__', (20,))     # equiv to `l[20]`
   Traceback (most recent call last):
   ...
   IndexError: list index out of range


+-*/+-*/+-*/+-*/SyncManager c 
SyncManager

A subclass of :class:`BaseManager` which can be used for the synchronization
of processes.  Objects of this type are returned by
:func:`multiprocessing.Manager`.

It also supports creation of shared lists and dictionaries.


+-*/+-*/+-*/+-*/+-*/Namespace m 
Namespace()

Create a shared :class:`Namespace` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/BoundedSemaphore m 
BoundedSemaphore([value])

Create a shared :class:`threading.BoundedSemaphore` object and return a
proxy for it.


+-*/+-*/+-*/+-*/+-*/Lock m 
Lock()

Create a shared :class:`threading.Lock` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/list m 
list()
list(sequence)

Create a shared ``list`` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/RLock m 
RLock()

Create a shared :class:`threading.RLock` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/Queue m 
Queue([maxsize])

Create a shared :class:`queue.Queue` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/dict m 
dict()
dict(mapping)
dict(sequence)

Create a shared ``dict`` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/Value m 
Value(typecode, value)

Create an object with a writable ``value`` attribute and return a proxy
for it.


+-*/+-*/+-*/+-*/+-*/Semaphore m 
Semaphore([value])

Create a shared :class:`threading.Semaphore` object and return a proxy for
it.


+-*/+-*/+-*/+-*/+-*/Array m 
Array(typecode, sequence)

Create an array and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/Event m 
Event()

Create a shared :class:`threading.Event` object and return a proxy for it.


+-*/+-*/+-*/+-*/+-*/Condition m 
Condition([lock])

Create a shared :class:`threading.Condition` object and return a proxy for
it.

If *lock* is supplied then it should be a proxy for a
:class:`threading.Lock` or :class:`threading.RLock` object.


+-*/+-*/+-*/+-*/BaseManager c 
BaseManager([address[, authkey]])

Create a BaseManager object.

Once created one should call :meth:`start` or ``get_server().serve_forever()`` to ensure
that the manager object refers to a started manager process.

*address* is the address on which the manager process listens for new
connections.  If *address* is ``None`` then an arbitrary one is chosen.

*authkey* is the authentication key which will be used to check the validity
of incoming connections to the server process.  If *authkey* is ``None`` then
``current_process().authkey``.  Otherwise *authkey* is used and it
must be a string.


+-*/+-*/+-*/+-*/+-*/address d 
address

The address used by the manager.




+-*/+-*/+-*/+-*/+-*/get_server m 
get_server()

Returns a :class:`Server` object which represents the actual server under
the control of the Manager. The :class:`Server` object supports the
:meth:`serve_forever` method::

>>> from multiprocessing.managers import BaseManager
>>> manager = BaseManager(address=('', 50000), authkey='abc')
>>> server = manager.get_server()
>>> server.serve_forever()

:class:`Server` additionally has an :attr:`address` attribute.


+-*/+-*/+-*/+-*/+-*/start m 
start([initializer[, initargs]])

Start a subprocess to start the manager.  If *initializer* is not ``None``
then the subprocess will call ``initializer(*initargs)`` when it starts.


+-*/+-*/+-*/+-*/+-*/register m 
register(typeid[, callable[, proxytype[, exposed[, method_to_typeid[, create_method]]]]])

A classmethod which can be used for registering a type or callable with
the manager class.

*typeid* is a "type identifier" which is used to identify a particular
type of shared object.  This must be a string.

*callable* is a callable used for creating objects for this type
identifier.  If a manager instance will be created using the
:meth:`from_address` classmethod or if the *create_method* argument is
``False`` then this can be left as ``None``.

*proxytype* is a subclass of :class:`BaseProxy` which is used to create
proxies for shared objects with this *typeid*.  If ``None`` then a proxy
class is created automatically.

*exposed* is used to specify a sequence of method names which proxies for
this typeid should be allowed to access using
:meth:`BaseProxy._callMethod`.  (If *exposed* is ``None`` then
:attr:`proxytype._exposed_` is used instead if it exists.)  In the case
where no exposed list is specified, all "public methods" of the shared
object will be accessible.  (Here a "public method" means any attribute
which has a :meth:`__call__` method and whose name does not begin with
``'_'``.)

*method_to_typeid* is a mapping used to specify the return type of those
exposed methods which should return a proxy.  It maps method names to
typeid strings.  (If *method_to_typeid* is ``None`` then
:attr:`proxytype._method_to_typeid_` is used instead if it exists.)  If a
method's name is not a key of this mapping or if the mapping is ``None``
then the object returned by the method will be copied by value.

*create_method* determines whether a method should be created with name
*typeid* which can be used to tell the server process to create a new
shared object and return a proxy for it.  By default it is ``True``.


+-*/+-*/+-*/+-*/+-*/connect m 
connect()

Connect a local manager object to a remote manager process::

>>> from multiprocessing.managers import BaseManager
>>> m = BaseManager(address=('127.0.0.1', 5000), authkey='abc')
>>> m.connect()


+-*/+-*/+-*/+-*/+-*/shutdown m 
shutdown()

Stop the process used by the manager.  This is only available if
:meth:`start` has been used to start the server process.

This can be called multiple times.


+-*/+-*/+-*/pool p 进程池模块
+-*/+-*/+-*/+-*/AsyncResult c 异步结果对象
AsyncResult
  是Pool.apply_async和Pool.map_async的返回结果对象
+-*/+-*/+-*/+-*/+-*/ready m 是否已执行完毕
+-*/+-*/+-*/+-*/+-*/successful m 是否成功执行完毕
+-*/+-*/+-*/+-*/+-*/wait m 等待执行
wait([timeout])
  timeout:   等待的最长浮点数秒数,None为无限
             如果有设超时,在时间内未完成将报multiprocessing.TimeoutError
+-*/+-*/+-*/+-*/+-*/get m 等待执行完毕，返回结果
get([timeout])
  timeout:   等待的最长浮点数秒数,None为无限
             如果有设超时,在时间内未完成将报multiprocessing.TimeoutError
+-*/+-*/+-*/+-*/Pool c 创建进程池
Pool([processes[, initializer[, initargs[, maxtasksperchild]]]])
  processes:   进程池的最大进程数量，未给出将默认使用cpu数量
  initializer: 每次创建进程后，进程将执行的初始化函数
  initargs:    初始化函数的参数
+-*/+-*/+-*/+-*/+-*/map m 并行处理批量数据，等待处理并返回其列表结果
map(func, iterable[, chunksize])
  func:         处理函数
  iterable:     数据迭代序列
  chunksize:    默认为1，如数据序列较长的话此值应设大些
+-*/+-*/+-*/+-*/+-*/apply m 一般不用，等同单进程里的apply
apply(func[, args[, kwds]])
+-*/+-*/+-*/+-*/+-*/apply_async m 添加一个执行任务,返回异步结果对象
apply_async(func[, args[, kwds[, callback[, error_callback]]]])
  func:         需执行的函数
  args,kwds:    函数的参数 func(*args,**kwds)
                一般函数内不要使用全局变量，应该使用显式的参数形式
  callback:     回调函数，操作执行完毕时执行的函数，其参数为操作执行返回的结果.
                不能有阻塞操作
  error_callback:  回调函数，操作执行失败时执行的函数，
                   其参数为操作失败产生的异常实例.不能有阻塞操作
  返回AsyncResult对象
+-*/+-*/+-*/+-*/+-*/join m 等待进程池里进程全部退出，只在close或terminate后可用
+-*/+-*/+-*/+-*/+-*/map_async m 并行批量处理多个数据,返回异步结果对象
map_async(func, iterable[, chunksize[, callback[, error_callback]]])
  func:         处理函数
  iterable:     数据迭代序列
  chunksize:    默认为1，如数据序列较长的话此值应设大些
  callback:     回调函数，处理完毕时执行的函数，其参数为处理操作返回的结果.
                不能有阻塞操作
  error_callback:  回调函数，处理失败时执行的函数，
                   其参数为处理失败产生的异常实例.不能有阻塞操作
  返回AsyncResult对象,其get对应的结果是列表
+-*/+-*/+-*/+-*/+-*/terminate m 中止所有的任务
+-*/+-*/+-*/+-*/+-*/imap_unordered m 并行处理批量数据，返回迭代序列结果(无序)
imap_unordered(func, iterable[, chunksize])
  func:         处理函数
  iterable:     数据迭代序列
  chunksize:    默认为1，如数据序列较长的话此值应设大些
  返回的迭代序列并未按iterable顺序排列
+-*/+-*/+-*/+-*/+-*/close m 禁止再添加执行任务
+-*/+-*/+-*/+-*/+-*/imap m 并行处理批量数据，返回迭代序列结果
imap(func, iterable[, chunksize])
  func:         处理函数
  iterable:     数据迭代序列
  chunksize:    默认为1，如数据序列较长的话此值应设大些
                如果为1，在对结果作next操作时可使用next(timeout)操作
                timeout为等待处理完毕的最长浮点数秒数,None为无限
                如果有设超时,在时间内未完成将报multiprocessing.TimeoutError
+-*/+-*/+-*/sharedctypes p Allocate ctypes objects from shared memory.

+-*/+-*/+-*/+-*/RawValue f 
RawValue(typecode_or_type, *args)

Return a ctypes object allocated from shared memory.

*typecode_or_type* determines the type of the returned object: it is either a
ctypes type or a one character typecode of the kind used by the :mod:`array`
module.  *\*args* is passed on to the constructor for the type.

Note that setting and getting the value is potentially non-atomic -- use
:func:`Value` instead to make sure that access is automatically synchronized
using a lock.

Note that an array of :data:`ctypes.c_char` has ``value`` and ``raw``
attributes which allow one to use it to store and retrieve strings -- see
documentation for :mod:`ctypes`.


+-*/+-*/+-*/+-*/synchronized f 
synchronized(obj[, lock])

Return a process-safe wrapper object for a ctypes object which uses *lock* to
synchronize access.  If *lock* is ``None`` (the default) then a
:class:`multiprocessing.RLock` object is created automatically.

A synchronized wrapper will have two methods in addition to those of the
object it wraps: :meth:`get_obj` returns the wrapped object and
:meth:`get_lock` returns the lock object used for synchronization.

Note that accessing the ctypes object through the wrapper can be a lot slower
than accessing the raw ctypes object.



+-*/+-*/+-*/+-*/Value f 
Value(typecode_or_type, *args[, lock])

The same as :func:`RawValue` except that depending on the value of *lock* a
process-safe synchronization wrapper may be returned instead of a raw ctypes
object.

If *lock* is ``True`` (the default) then a new lock object is created to
synchronize access to the value.  If *lock* is a :class:`Lock` or
:class:`RLock` object then that will be used to synchronize access to the
value.  If *lock* is ``False`` then access to the returned object will not be
automatically protected by a lock, so it will not necessarily be
"process-safe".

Note that *lock* is a keyword-only argument.


+-*/+-*/+-*/+-*/Array f 
Array(typecode_or_type, size_or_initializer, *args[, lock])

The same as :func:`RawArray` except that depending on the value of *lock* a
process-safe synchronization wrapper may be returned instead of a raw ctypes
array.

If *lock* is ``True`` (the default) then a new lock object is created to
synchronize access to the value.  If *lock* is a :class:`Lock` or
:class:`RLock` object then that will be used to synchronize access to the
value.  If *lock* is ``False`` then access to the returned object will not be
automatically protected by a lock, so it will not necessarily be
"process-safe".

Note that *lock* is a keyword-only argument.


+-*/+-*/+-*/+-*/copy f 
copy(obj)

Return a ctypes object allocated from shared memory which is a copy of the
ctypes object *obj*.


+-*/+-*/+-*/+-*/RawArray f 
RawArray(typecode_or_type, size_or_initializer)

Return a ctypes array allocated from shared memory.

*typecode_or_type* determines the type of the elements of the returned array:
it is either a ctypes type or a one character typecode of the kind used by
the :mod:`array` module.  If *size_or_initializer* is an integer then it
determines the length of the array, and the array will be initially zeroed.
Otherwise *size_or_initializer* is a sequence which is used to initialize the
array and whose length determines the length of the array.

Note that setting and getting an element is potentially non-atomic -- use
:func:`Array` instead to make sure that access is automatically synchronized
using a lock.


+-*/+-*/optparse p 命令行选项解析模块
使用方法:通常先用OptionParser创建解析器对象,
         然后.add_option设置各选项,最后.parse_args获取解析结果
官方建议使用argparse代替optparse
+-*/+-*/+-*/OptParseError e 命令行解析错误
+-*/+-*/+-*/SUPPRESS_HELP d 没有选项帮助
+-*/+-*/+-*/SUPPRESS_USAGE d 没有命令用法帮助
+-*/+-*/+-*/OptionGroup c 命令行分类选项组对象
OptionGroup(parser, title, description=None)
  parser: 解析器对象
  title:  分类选项组在帮助里显示的名称
  description: 详细说明文字(自动换行)
  创建分类选项组，在add_option添加相应选项设定后
  再parser.add_option_group添加到解析器里
+-*/+-*/+-*/OptionParser c 命令行选项解析器对象
OptionParser(...)
  usage     用法说明，如'%prog [-vncaeol]',默认"%prog [options]",
            不要'USAGE:'行的话，应设为optparse.SUPPRESS_USAGE
  version   版本,如'%prog 1.1(2000-1-1)',用于--version
  description  详细说明文字(自动换行)
  prog      以上%prog所引用的字符串，默认是os.path.basename(sys.argv[0])
  add_help_option  是否自动增加-h和--help选项,默认为True
  epilog    帮助辅助说明文字，用于--help
  option_list 选项(Option)列表，通常用add_option操作
+-*/+-*/+-*/+-*/parse_args m 解析命令行参数列表
parse_args(args=None)
  args   默认为sys.argv[1:]
  返回(选项集--用.xx访问,常规参数)二元组
  对于需要参数的选项，在短名称后紧接参数等同长命称后跟参数
  '-axxxx' 等同 '--ape','xxxx'
  遇到单独的'--'将中止解析,随后的参数都将视为常规参数处理
+-*/+-*/+-*/+-*/get_option m 由选项名获取选项对象实例
get_option(opt_str)
  opt_str    '-....'或'--...'
+-*/+-*/+-*/+-*/has_option m 检测是否有某选项
has_option(opt_str)
  opt_str    '-....'或'--...'
+-*/+-*/+-*/+-*/disable_interspersed_args m 禁止常规参数和选项无序排列
disable_interspersed_args()
  无参数的选项必须出现在常规参数之前，
  如'prog -x -y arg1 arg2'
+-*/+-*/+-*/+-*/remove_option m 移除选项
remove_option(opt_str)
  opt_str    '-....'或'--...'
+-*/+-*/+-*/+-*/set_defaults m 设定默认值
set_defaults(dest=value, ...)
  dest 目的选项名
  value 默认值
+-*/+-*/+-*/+-*/error m 显示选项错误提示，并退出程序
error(str)
+-*/+-*/+-*/+-*/get_version m 获取版本说明文本
+-*/+-*/+-*/+-*/get_usage m 获取命令用法说明文本(包括USAGE:)
+-*/+-*/+-*/+-*/print_version m 显示版本说明
print_version(file=None)
  file: 默认为stdout
+-*/+-*/+-*/+-*/get_option_group m 获取选项所在的分类组
get_option_group(opt_str)
  opt_str    '-....'或'--...'
+-*/+-*/+-*/+-*/add_option_group m 添加分类选项组
add_option_group(group)
  group:    分类选项组对象(OptionGroup)
+-*/+-*/+-*/+-*/add_option m 添加选项
add_option(opt_str[, ...], attr=value, ...)
  opt_str   (多个)选项名称,需前缀'-'(短名称)或'--'(长名称)
  attr      选项的属性
  根据选项的属性来确定其需要的参数数量
  add_option('-f','--file',action='store',type='string',dest='filename',
      help='指定的文件')
  add_option('-t',action='store_true',dest='test')
  add_option('-T',action='store_false',dest='test')
  add_option('-p','--point',type='float',nargs=3,dest='point')
+-*/+-*/+-*/+-*/enable_interspersed_args m 允许常规参数和选项乱序排列(默认)
enable_interspersed_args()
  无参数的选项可以出现在常规参数之后，
  如'prog -x arg1 arg2 -y arg3'
+-*/+-*/+-*/+-*/set_usage m 设定命令用法说明文本
set_usage(usage)
  不要'USAGE:'行的话，usage应设为optparse.SUPPRESS_USAGE
  内容里的%prog将更换为程序名
+-*/+-*/+-*/+-*/print_usage m 显示命令用法说明
print_usage(file=None)
  file: 默认为stdout
+-*/+-*/+-*/Option c 命令行单个选项对象
Option(*opts, **attrs)
  opts       (多个)选项名称,需前缀'-'(短名称)或'--'(长名称)
  attrs      选项的属性
+-*/+-*/+-*/+-*/const d 选项的常量值
+-*/+-*/+-*/+-*/help d 选项的帮助说明文本，不用的话应设为SUPPRESS_HELP
help
  如包含%default则会用default默认值代替，常用于说明其默认值，如
  'xxxxx [default: %default]'
+-*/+-*/+-*/+-*/callback_args d 动作函数的附加参数
+-*/+-*/+-*/+-*/callback d 动作函数
callback
  func(option,opt_str,value,parser,*args,**kwargs)
  option:     Option选项实例
  opt_str:    选项的长命称(带前缀'--')
  value:      选项的参数(可能是None,也可能是多参数的元组)
  parser:     OptionParser实例
              parser.largs  已获取的常规目标参数列表(即不是选项的参数)
              parser.rargs  还未处理的参数列表
              parser.values 已获取的选项参数字典(包括默认值)
  通常自定义动作函数根据parser获取有关选项的值作判断再设定某些选项的值
  如有问题应抛出OptionValueError异常
  def check(optione,opt_str,value,parser):
    if parser.values.b:
      raise OptionValueError("-b选项必须在-x之前设定")
    parser.values.x = 1
+-*/+-*/+-*/+-*/default d 默认值
+-*/+-*/+-*/+-*/nargs d 选项所需参数的数量，如>1选项的值将为参数的元组
+-*/+-*/+-*/+-*/choices d 选项的参数的所有可用值字符串列表
+-*/+-*/+-*/+-*/dest d 选项的目标名称，如不设将取长选项名(没有则为短选项名) 
+-*/+-*/+-*/+-*/action d 解析选项时的动作
action
  'store':            将参数设为选项值，这是默认动作
        相关属性:type,dest,nargs,choices
  'store_const':      将选项值设为self.const
        必须属性:const 相关属性:dest
  'store_true':       将选项值设为True
        相关属性:dest
  'store_false':      将选项值设为False
        相关属性:dest
  'append':           将所有同名选项的参数组成列表
        相关属性:type,dest,nargs,choices
  'count':            将选项值设为选项出现的次数
        相关属性:dest
  'callback':         调用函数作处理
        必须属性:callback 相关属性:type,nargs,callback_args,callback_kwargs
+-*/+-*/+-*/+-*/callback_kwargs d 动作函数的附加字典参数
+-*/+-*/+-*/+-*/type d 选项的值类型,默认为字符串
type
  'string' , 'int' , 'choice' , 'float' , 'complex'
+-*/+-*/+-*/+-*/metavar d 显示帮助时选项所使用的名称文本
+-*/+-*/os p 操作系统模块
操作路径最好使用字节字符串,这样可以操作乱码名称的文件
对于某些乱码如果系统是utf-8编码的则可使用
filename.decode('utf-8').encode('latin-1').decode('gbk' 'shift_jis' 'big5')解码
如果系统是gbk的则
filename.decode('gbk').encode('latin-1').decode('utf-8' 'shift_jis' 'big5')解码
要获得当前用户系统编码使用locale.getpreferredencoding()
+-*/+-*/+-*/进程的用户和组 _
+-*/+-*/+-*/+-*/getpgrp f 获取当前进程的组id(unix)
+-*/+-*/+-*/+-*/setpgrp f 设置当前进程的组id(unix)
+-*/+-*/+-*/+-*/getpid f 返回当前进程的id号
+-*/+-*/+-*/+-*/getppid f 返回当前进程的父进程id 
+-*/+-*/+-*/+-*/getgid f 返回进程的组id(unix) 
+-*/+-*/+-*/+-*/setgid f 设置当前进程的组id(unix)
setgid(gid)
+-*/+-*/+-*/+-*/getpgid f 获取指定进程的组id(unix) 
getpgid(pid)
  pid 进程id,如为0返回当前进程的组id
+-*/+-*/+-*/+-*/setpgid f 设置指定进程的组id(unix)
setpgid(pid, pgrp)
  pid为0则表示为当前进程
+-*/+-*/+-*/+-*/geteuid f 返回进程的有效用户id(unix)
+-*/+-*/+-*/+-*/seteuid f 设置当前进程的有效用户id(unix) 
seteuid(euid)
+-*/+-*/+-*/+-*/getgroups f 获取进程所有者id所属的组id列表(unix)
+-*/+-*/+-*/+-*/setgroups f 设置当前进程所在的组id列表(unix)
setgroups(groups)
+-*/+-*/+-*/+-*/getuid f 获取进程的用户id(unix)
+-*/+-*/+-*/+-*/setuid f 设置当前进程的用户id(unix)
setuid(uid)
+-*/+-*/+-*/+-*/getegid f 返回进程的有效组id(unix)
+-*/+-*/+-*/+-*/setegid f 设置当前进程的有效组id(unix)
setegid(egid)
+-*/+-*/+-*/+-*/getsid f 返回进程所在的会话进程id(unix)
getsid(pid)
  pid 进程的id号
  对于终端程序通常为bash进程的id,对于gui程序通常为session(gnome或kde)的进程
+-*/+-*/+-*/+-*/setsid f 设置当前进程与原会话进程脱离，成为单独的会话进程(unix)
+-*/+-*/+-*/+-*/setregid f 设置当前进程的组id和有效组id
setregid(rgid, egid)
+-*/+-*/+-*/+-*/setreuid f 设置当前进程的用户id和有效用户id(unix)
setreuid(ruid, euid)
  ruid  真实id
  euid  有效用户id
+-*/+-*/+-*/+-*/setresgid f 
setresgid(rgid, egid, sgid)

Set the current process's real, effective, and saved group ids.

Availability: Unix.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/getresuid f 
getresuid()

Return a tuple (ruid, euid, suid) denoting the current process's
real, effective, and saved user ids.

Availability: Unix.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/setresuid f 
setresuid(ruid, euid, suid)

Set the current process's real, effective, and saved user ids.

Availability: Unix.

.. versionadded:: 3.2



+-*/+-*/+-*/文件描述符操作 _
时间都是以time模块所用的秒数形式
+-*/+-*/+-*/+-*/fchmod f 修改文件描述符相关的文件权限(unix)
fchmod(fd, mode)
  fd: 文件描述符
  mode: 文件权限，可用以下参数按位或操作产生
    文件权限以用户id->组id->其它顺序检验,最先匹配的允许或禁止权限被应用。
      stat.S_IXOTH    其他用户有执行权0o001
      stat.S_IWOTH    其他用户有写权限0o002
      stat.S_IROTH    其他用户有读权限0o004 
      stat.S_IRWXO    其他用户有全部权限(权限掩码)0o007
      stat.S_IXGRP    组用户有执行权限0o010
      stat.S_IWGRP    组用户有写权限0o020
      stat.S_IRGRP    组用户有读权限0o040 
      stat.S_IRWXG    组用户有全部权限(权限掩码)0o070
      stat.S_IXUSR    拥有者具有执行权限0o100
      stat.S_IWUSR    拥有者具有写权限0o200 
      stat.S_IRUSR    拥有者具有读权限0o400
      stat.S_IRWXU    拥有者有全部权限(权限掩码)0o700
      stat.S_ISVTX    目录里文件目录只有拥有者才可删除更改0o1000
      stat.S_ISGID    执行此文件其进程有效组为文件所在组0o2000
      stat.S_ISUID    执行此文件其进程有效用户为文件所有者0o4000
+-*/+-*/+-*/+-*/lseek f 操作文件描述符里的当前位置
lseek(fd, pos, how)
  fd: 文件描述符
  pos:  偏移
  how:  os.SEEK_SET或0，以文件开始位置算起
        os.SEEK_CUR或1，以当前位置算起
        os.SEEK_END或2，以文件结尾位置算起，通常此时pos用负数
  返回新位置的绝对值
+-*/+-*/+-*/+-*/dup2 f 复制文件描述符给另一个(新旧共享其状态)(常用于同步)
dup2(fd, fd2)
  如果fd2等于fd则返回fd,如fd2已打开则关闭fd2再复制
+-*/+-*/+-*/+-*/read f 从文件描述符里读数据,返回读取的字节字符串
read(fd, n)
  fd: 文件描述符
  n:  最多读取的长度
  返回0往往意味着到文件尾部
+-*/+-*/+-*/+-*/fchown f 修改文件描述符的所有者id和组id(unix)
fchown(fd, uid, gid)
  uid,gid:  为-1时表示保持不变
  只有超级用户才可修改文件所有者id
+-*/+-*/+-*/+-*/fsync f 强制数据写入(更新文件属性如时间等属性)
fsync(fd)
  fd: 文件描述符
  如果是带缓冲的文件对象应先flush再fsync (f.flush()后再os.fsync(f.fileno())
+-*/+-*/+-*/+-*/tcsetpgrp f 设定文件描述符关联的终端进程(unix) 
tcsetpgrp(fd, pg)
  fd: 文件描述符
  pg: 终端进程id
+-*/+-*/+-*/+-*/ttyname f 返回文件描述符相关联的终端文件名称(如/dev/pts/1)
ttyname(fd)
  fd: 文件描述符
+-*/+-*/+-*/+-*/close f 关闭文件描述符,通常用于关闭管道或硬件IO
close(fd)
  fd: 文件描述符
+-*/+-*/+-*/+-*/fchdir f 更改当前工作目录(unix)
fchdir(fd)
  fd 为目标目录的文件描述符
+-*/+-*/+-*/+-*/fdopen f 打开文件描述符，返回文件对象
fdopen(fd[, mode[, bufsize]])
  fd: 文件描述符
  mode: r读(文件须存在) w写(打开后清空文件) +读写(须和raw联合使用)
        a添加(每次写都先指针自动移到尾部开始写)
        b二进制 t文本 U通用换行（'\n','\r','\r\n'通通变为'\n'）
  bufsize: 0不缓冲 1行缓冲 其他正数是以字节为单位的缓冲大小 负数（默认系统缓冲）
+-*/+-*/+-*/+-*/O_NOATIME d 不更新访问时间 
+-*/+-*/+-*/+-*/O_RSYNC d 同步读取(unix) 
+-*/+-*/+-*/+-*/O_DSYNC d 同步写入(unix)
+-*/+-*/+-*/+-*/O_SEQUENTIAL d 按序访问(windows) 
+-*/+-*/+-*/+-*/O_NOFOLLOW d 不获取符号链接 
+-*/+-*/+-*/+-*/O_APPEND d 附加到文件结尾
+-*/+-*/+-*/+-*/O_EXLOCK d 排他锁
+-*/+-*/+-*/+-*/O_SHLOCK d 共享锁(unix) 
+-*/+-*/+-*/+-*/O_NOCTTY d 没有终端(unix) 
+-*/+-*/+-*/+-*/O_NONBLOCK d 不阻塞(unix)
+-*/+-*/+-*/+-*/O_WRONLY d 只写
+-*/+-*/+-*/+-*/O_RDWR d 读写
+-*/+-*/+-*/+-*/O_NOINHERIT d 子进程不继承(windows)
+-*/+-*/+-*/+-*/O_CREAT d 不存在则创建
+-*/+-*/+-*/+-*/O_TEMPORARY d 关闭时删除文件(临时文件)(windows) 
+-*/+-*/+-*/+-*/O_DIRECT d 无缓存，直接读写 
+-*/+-*/+-*/+-*/O_SHORT_LIVED d 短期保存(windows) 
+-*/+-*/+-*/+-*/O_RDONLY d 只读
+-*/+-*/+-*/+-*/O_RANDOM d 随机保存(windows) 
+-*/+-*/+-*/+-*/O_ASYNC d 异步(mac)
+-*/+-*/+-*/+-*/O_TRUNC d 如文件存在,则清除为0长度 
+-*/+-*/+-*/+-*/O_BINARY d 字节模式(windows) 
+-*/+-*/+-*/+-*/O_TEXT d 文本模式(windows) 
+-*/+-*/+-*/+-*/O_DIRECTORY d 打开目录(如不是目录则报错) 
+-*/+-*/+-*/+-*/O_SYNC d 同步更新(unix) 
+-*/+-*/+-*/+-*/O_NDELAY d 不阻塞(unix) 
+-*/+-*/+-*/+-*/O_EXCL d 文件已存在的话则报错
+-*/+-*/+-*/+-*/open f 打开文件,返回文件描述符
open(file, flags[, mode])
  flags: 按位OR
      O_RDONLY       只读(O_RDONLY,O_WRONLY,O_RDWR必须有一个且只能有一个)
      O_WRONLY       只写(O_RDONLY,O_WRONLY,O_RDWR必须有一个且只能有一个)
      O_RDWR         读写(O_RDONLY,O_WRONLY,O_RDWR必须有一个且只能有一个)
      O_NOATIME      不更新访问时间 
      O_SEQUENTIAL   按序访问(windows) 
      O_NOFOLLOW     不获取符号链接 
      O_APPEND       附加到文件结尾
              (打开时指针位于文件结尾,每次写操作都会先把指针移到文件尾部)
      O_CREAT        不存在则创建
      O_EXCL         文件已存在的话则报错
      O_TRUNC        如文件存在,则清除为0长度(常和O_CREAT同时使用) 
      O_NOCTTY       没有终端(unix)(file为终端设备时) 
      O_NONBLOCK     不阻塞(unix)(file为fifo或字符或块文件)
      O_RSYNC        同步读取(unix) 
      O_DSYNC        同步写入(unix)
      O_SYNC         同步更新(unix)(每次更改都会更新文件时间) 
      O_EXLOCK       排他锁
      O_SHLOCK       共享锁(unix) 
      O_NOINHERIT    子进程不继承(windows)
      O_TEMPORARY    关闭时删除文件(临时文件)(windows) 
      O_DIRECT       无缓存，直接读写 
      O_SHORT_LIVED  短期保存(windows) 
      O_RANDOM       随机保存(windows) 
      O_ASYNC        异步(mac)
      O_BINARY       字节模式(windows) 
      O_TEXT         文本模式(windows) 
      O_DIRECTORY    打开目录(如不是目录则报错) 
  mode: 文件权限，通常用八进制表示，默认是0777 & ~umask
        可用stat.S_I...按位或产生
        只有在创建新文件时需要此参数
+-*/+-*/+-*/+-*/dup f 复制文件描述符,返回一个新的(新旧共享其状态)(常用于同步)
dup(fd)
+-*/+-*/+-*/+-*/fdatasync f 强制将缓冲数据写入(unix)(不更新文件时间属性)
fdatasync(fd)
  fd: 文件描述符
  如果是带缓冲的文件对象应先flush再fdatasync
+-*/+-*/+-*/+-*/isatty f 文件描述符是否是tty(unix)
isatty(fd)
  fd: 文件描述符
+-*/+-*/+-*/+-*/closerange f 关闭[low,high)范围内的所有文件描述符(忽略错误)
closerange(fd_low, fd_high)
+-*/+-*/+-*/+-*/ftruncate f 截断文件(unix)
ftruncate(fd, length)
  fd: 文件描述符
  length: 截断后的最大长度
+-*/+-*/+-*/+-*/pipe f 创建一个管道，返回一对(读,写)文件描述符 
pipe()
  如用于父子进程通信，通常在fork之前调用，fork之后通过read,write传送数据
+-*/+-*/+-*/+-*/write f 往文件描述符里写数据(返回写入的长度)
write(fd, str)
  fd: 文件描述符
  str: 字节字符串
+-*/+-*/+-*/+-*/tcgetpgrp f 获取文件描述符指定的终端进程id(unix)
tcgetpgrp(fd)
  fd: 文件描述符
+-*/+-*/+-*/+-*/fpathconf f 获取文件描述符的相关系统配置信息,返回其数值(unix)
fpathconf(fd, name)
  fd: 文件描述符
  name:  os.pathconf_names里的名称
    "PC_ASYNC_IO"          是否可异步输入
    "PC_CHOWN_RESTRICTED"  是否可使用chown函数
    "PC_FILESIZEBITS"      文件最大长度的位数
    "PC_LINK_MAX"          最大链接数量
    "PC_MAX_CANON"         格式化输入的最大长度(终端)
    "PC_MAX_INPUT"         输入行的最大长度(终端)
    "PC_NAME_MAX"          文件名称的最大长度
    "PC_PATH_MAX"          相对路径名称的最大长度
    "PC_NO_TRUNC"          新文件名过长时是否会失败报错(不自动缩短)
    "PC_PIPE_BUF"          管道缓冲大小
    "PC_PRIO_IO"           是否能执行优先IO
    "PC_SYNC_IO"           是否能执行同步IO
    "PC_VDISABLE"          是否禁用特殊字符处理(终端)
+-*/+-*/+-*/+-*/fstatvfs f 由文件描述符获取所在文件系统的相关信息(unix)
fstatvfs(fd)
  fd: 文件描述符
  返回系统信息对象
    .f_bsize    数据块大小
    .f_frsize   基本簇块大小
    .f_blocks   数据块的总数
    .f_bfree    空闲块的总数
    .f_bavail   可用空闲块的数量
    .f_files    inode的总数
    .f_ffree    空闲inode的总数
    .f_favail   可用空闲inode的数量
    .f_namemax  文件名的最大长度
    .f_flag     标志位
                如os.ST_RDONLY有设置则表示只读
                如os.ST_NOSUID有设置则表示不支持unix文件权限
+-*/+-*/+-*/+-*/fstat f 由文件描述符获取文件的有关信息
fstat(fd)
  fd: 文件描述符
  返回文件信息对象
    .st_mode    文件属性和权限
    .st_ino     inode号
    .st_dev     所在设备号
    .st_nlink   硬链接的数量
    .st_uid     所有者id
    .st_gid     组id
    .st_size    文件大小
    .st_atime   最后访问时间(read操作或执行时会更改,写入数据不会更改)
    .st_mtime   最后修改时间(write操作会更改,同时大多都会更改st_ctime)
    .st_ctime   最后一次状态修改的时间(写操作会更改,改权限改名称时也会更改)
    .st_blocks  占用的页面数量
    .st_blksize 所在系统的单页面的大小(常为缓冲大小的设置依据)
+-*/+-*/+-*/+-*/openpty f 打开伪终端，返回(主,副)文件描述符二元组(unix)
+-*/+-*/+-*/文件目录操作 _
时间都是以time模块所用的秒数形式
+-*/+-*/+-*/+-*/mkfifo f 创建管道文件(unix)
mkfifo(path[, mode])
  mode: 默认为0666
  管道文件通常由一个服务进程读(通常会打开写权限,是为了避免出现文件结尾情况)
  有多个客户进程写数据来作通信
  管道文件通常使用os.open打开
+-*/+-*/+-*/+-*/curdir d 代表当前目录的'.'(mac为':')
+-*/+-*/+-*/+-*/pardir d 代表上级目录的'..'(mac为'::')
+-*/+-*/+-*/+-*/pathsep d PATH搜索路径中的分隔符,unix为':',windows为';' 
+-*/+-*/+-*/+-*/sep d 路径中的分隔符'/'(mac为':')(windows为'\\')
+-*/+-*/+-*/+-*/symlink f 创建符号链接
symlink(source, link_name, target_is_directory=False)
  target_is_directory 只用于windows
+-*/+-*/+-*/+-*/altsep d windows下的'/'，其他系统为None
+-*/+-*/+-*/+-*/extsep d 后缀名前的'.'
+-*/+-*/+-*/+-*/utime f 修改路径的访问时间和修改时间
utime(path, times)
  times:   如为None则表示使用当前时间，否则应给出(atime,mtime)时间二元组
  进程有效用户id必须为该文件或目录的拥有者id(或root)才能做此操作.
  ctime状态时间不能制定,做此操作的时候会更改为当前时间。
+-*/+-*/+-*/+-*/lchmod f 修改符号链接其本身(而非其引用)的权限(unix)
lchmod(path, mode)
  path:   文件名路径或目录路径
  mode:   可用以下选项按位或操作生成
    目录的读权限表示可以获取目录里文件名列表
          执行权限表示可以把工作目录切换到此目录
          删除添加目录里的文件必须同时有写和执行权限
    文件权限以用户id->组id->其它顺序检验,最先匹配的允许或禁止权限被应用。
      stat.S_IXOTH    其他用户有执行权0o001
      stat.S_IWOTH    其他用户有写权限0o002
      stat.S_IROTH    其他用户有读权限0o004 
      stat.S_IRWXO    其他用户有全部权限(权限掩码)0o007
      stat.S_IXGRP    组用户有执行权限0o010
      stat.S_IWGRP    组用户有写权限0o020
      stat.S_IRGRP    组用户有读权限0o040 
      stat.S_IRWXG    组用户有全部权限(权限掩码)0o070
      stat.S_IXUSR    拥有者具有执行权限0o100
      stat.S_IWUSR    拥有者具有写权限0o200 
      stat.S_IRUSR    拥有者具有读权限0o400
      stat.S_IRWXU    拥有者有全部权限(权限掩码)0o700
      stat.S_ISVTX    目录里文件目录只有拥有者才可删除更改0o1000
      stat.S_ISGID    执行此文件其进程有效组为文件所在组0o2000
      stat.S_ISUID    执行此文件其进程有效用户为文件所有者0o4000
+-*/+-*/+-*/+-*/renames f 更改文件或目录的名字(包括中间目录)
renames(old, new)
  如renames('b/c','d/e')
  如果b目录下有其他文件则会保留，如为空则会删除b
+-*/+-*/+-*/+-*/ST_RDONLY d 文件系统只读标志位
+-*/+-*/+-*/+-*/ST_NOSUID d 文件系统不支持unix文件权限标志位
+-*/+-*/+-*/+-*/statvfs f 获取路径所在文件系统的相关信息(unix)
statvfs(path)
  返回系统信息对象
    .f_bsize    数据块大小
    .f_frsize   基本簇块大小
    .f_blocks   数据块的总数
    .f_bfree    空闲块的总数
    .f_bavail   可用空闲块的数量
    .f_files    inode的总数
    .f_ffree    空闲inode的总数
    .f_favail   可用空闲inode的数量
    .f_namemax  文件名的最大长度
    .f_flag     标志位
                如os.ST_RDONLY有设置则表示只读
                如os.ST_NOSUID有设置则表示不支持unix文件权限
+-*/+-*/+-*/+-*/+-*/f_bsize   d 数据块大小
+-*/+-*/+-*/+-*/+-*/f_frsize  d 基本簇块大小
+-*/+-*/+-*/+-*/+-*/f_blocks  d 数据块的总数
+-*/+-*/+-*/+-*/+-*/f_bfree   d 空闲块的总数
+-*/+-*/+-*/+-*/+-*/f_bavail  d 可用空闲块的数量
+-*/+-*/+-*/+-*/+-*/f_files   d inode的总数
+-*/+-*/+-*/+-*/+-*/f_ffree   d 空闲inode的总数
+-*/+-*/+-*/+-*/+-*/f_favail  d 可用空闲inode的数量
+-*/+-*/+-*/+-*/+-*/f_namemax d 文件名的最大长度
+-*/+-*/+-*/+-*/+-*/f_flag    d 标志位
如os.ST_RDONLY有设置则表示只读
如os.ST_NOSUID有设置则表示不支持unix文件权限
+-*/+-*/+-*/+-*/remove f 删除文件或空目录
remove(path)
  path如为符号链接,只会删除符号链接不会删除其指向的文件
+-*/+-*/+-*/+-*/stat f 获取文件的有关信息
stat(path)
  返回文件信息对象
    .st_mode    文件属性和权限
    .st_ino     inode号
    .st_dev     所在设备号
    .st_nlink   硬链接的数量
    .st_uid     所有者id
    .st_gid     组id
    .st_size    文件大小(一般文件)
    .st_atime   最后访问时间(read操作或执行时会更改,写入数据不会更改)
    .st_mtime   最后修改时间(write操作会更改,同时大多都会更改st_ctime)
    .st_ctime   最后一次状态修改的时间(写操作会更改,改权限改名称时也会更改)
    .st_blocks  占用的页面数量
    .st_blksize 所在系统的单页面的大小(常为缓冲大小的设置依据)
+-*/+-*/+-*/+-*/+-*/st_mode d 文件属性和权限
+-*/+-*/+-*/+-*/+-*/st_ino d inode号
+-*/+-*/+-*/+-*/+-*/st_dev d 所在设备号
+-*/+-*/+-*/+-*/+-*/st_nlink d 硬链接的数量
+-*/+-*/+-*/+-*/+-*/st_uid d 所有者id
+-*/+-*/+-*/+-*/+-*/st_gid d 组id
+-*/+-*/+-*/+-*/+-*/st_size d 文件大小
+-*/+-*/+-*/+-*/+-*/st_atime d 最后访问时间
st_atime   
  对于文件,read操作或列取目录内容时会更改,写入数据不会更改
  对于目录,通常只有在列取其内容时才会更改
+-*/+-*/+-*/+-*/+-*/st_mtime d 最后修改时间
st_mtime   
  对于文件,write操作会更改,同时大多都会更改st_ctime
  对于目录,删除添加文件目录时会更改，同时也大多会更改st_ctime
+-*/+-*/+-*/+-*/+-*/st_ctime d 最后一次状态修改的时间
st_ctime   
  写操作会更改,改权限改名称时也会更改
+-*/+-*/+-*/+-*/+-*/st_blocks d 占用的页面数量
+-*/+-*/+-*/+-*/+-*/st_blksize d 所在系统的单页面的大小(常为缓冲大小的设置依据)
+-*/+-*/+-*/+-*/chflags f 检查文件的附加属性(unix)
chflags(path, flags)
  path:   文件名路径或目录路径
  flags:  以下各项可用或方式组合
      stat.SF_SNAPSHOT      快照文件(超级用户可设)
      stat.SF_NOUNLINK      文件不可删除(超级用户可设) 
      stat.SF_IMMUTABLE     文件是只读的(超级用户可设)
      stat.SF_APPEND        文件只能追加内容(超级用户可设) 
      stat.SF_ARCHIVED      可存档文件(超级用户可设) 
      stat.UF_NODUMP        非转储文件
      stat.UF_IMMUTABLE     文件是只读的
      stat.UF_COMPRESSED    压缩文件(mac)
      stat.UF_NOUNLINK      文件不可删除
      stat.UF_APPEND        文件只能追加内容 
      stat.UF_HIDDEN        隐藏文件(mac)
      stat.UF_OPAQUE        
+-*/+-*/+-*/+-*/lchflags f 检查符号链接其本身(而非其引用)的附加属性(unix)
lchflags(path, flags)
  path:   文件名路径或目录路径
  flags:  以下各项可用或方式组合
      stat.SF_SNAPSHOT      快照文件(超级用户可设)
      stat.SF_NOUNLINK      文件不可删除(超级用户可设) 
      stat.SF_IMMUTABLE     文件是只读的(超级用户可设)
      stat.SF_APPEND        文件只能追加内容(超级用户可设) 
      stat.SF_ARCHIVED      可存档文件(超级用户可设) 
      stat.UF_NODUMP        非转储文件
      stat.UF_IMMUTABLE     文件是只读的
      stat.UF_COMPRESSED    压缩文件(mac)
      stat.UF_NOUNLINK      文件不可删除
      stat.UF_APPEND        文件只能追加内容 
      stat.UF_HIDDEN        隐藏文件(mac)
      stat.UF_OPAQUE        
+-*/+-*/+-*/+-*/makedirs f 创建(多级)目录
makedirs(path, mode=0o777, exist_ok=False)
  path:   要创建的目录路径
  mode:   目录的权限，默认0777(unix)
  exist_ok: 默认为False如果已存在则会报OSError错误
+-*/+-*/+-*/+-*/lstat f 获取链接其本身(非其引用)的有关信息
lstat(path)
  返回文件信息对象
    .st_mode    文件属性和权限
    .st_ino     inode号
    .st_dev     所在设备号
    .st_nlink   硬链接的数量
    .st_uid     所有者id
    .st_gid     组id
    .st_size    符号链接其链接的路径文件名长度
    .st_atime   最后访问时间(read操作或执行时会更改,写入数据不会更改)
    .st_mtime   最后修改时间(write操作会更改,同时大多都会更改st_ctime)
    .st_ctime   最后一次状态修改的时间(写操作会更改,改权限改名称时也会更改)
    .st_blocks  占用的页面数量
    .st_blksize 所在系统的单页面的大小
+-*/+-*/+-*/+-*/F_OK d 测试是否存在(用于access)
+-*/+-*/+-*/+-*/W_OK d  测试是否可写(用于access)
+-*/+-*/+-*/+-*/X_OK d  测试是否可执行(用于access)
+-*/+-*/+-*/+-*/R_OK d  测试是否可读(用于access)
+-*/+-*/+-*/+-*/access f 检查当前登录用户对文件路径的读写权限
access(path, mode)
  path:   文件名路径或目录路径
  mode:   以下各项可用或方式组合
        F_OK  是否存在
        W_OK  是否可写
        X_OK  是否可执行
        R_OK  是否可读
  使用登录用户id检验能否访问文件,而不是用进程的用户id
  (有时进程用户id不是登录id,特别是执行文件被赋有设置进程用户id的情况)
+-*/+-*/+-*/+-*/removedirs f 删除(多级)目录
removedirs(path)
  path:   要删除的目录(必须为空)
          目录删除后上一级目录为空则继续递归删除，如不为空则保留
  要删除整个目录(包括其中的文件和子目录)可使用shutil.rmtree
+-*/+-*/+-*/+-*/readlink f 获取符号链接的指向路径
readlink(path)
  path:   如果是字节字符串，返回的是字节字符串列表
          如果是unicode，返回的是unicode字符串列表(将忽略无法编码的名称)
  返回的可能是绝对路径或相对路径
+-*/+-*/+-*/+-*/rename f 更改文件或目录的名字
rename(src, dst)
  dst如已存在,须和src一样都是文件,则删除dst,将src更名为dst
  dst如已存在,须和src一样都是目录(须是空目录),则删除dst,将src更名为dst
  对于src是符号链接的情况,按符号链接本身处理,不处理其指向的文件或目录
+-*/+-*/+-*/+-*/chmod f 更改文件的权限
chmod(path, mode)
  path:   文件名路径或目录路径
  mode:   可用以下选项按位或操作生成
    目录的读权限表示可以获取目录里文件名列表
          执行权限表示可以把工作目录切换到此目录
          删除添加目录里的文件必须同时有写和执行权限
    文件权限以用户id->组id->其它顺序检验,最先匹配的允许或禁止权限被应用。
      stat.S_IXOTH    其他用户有执行权0o001
      stat.S_IWOTH    其他用户有写权限0o002
      stat.S_IROTH    其他用户有读权限0o004 
      stat.S_IRWXO    其他用户有全部权限(权限掩码)0o007
      stat.S_IXGRP    组用户有执行权限0o010
      stat.S_IWGRP    组用户有写权限0o020
      stat.S_IRGRP    组用户有读权限0o040 
      stat.S_IRWXG    组用户有全部权限(权限掩码)0o070
      stat.S_IXUSR    拥有者具有执行权限0o100
      stat.S_IWUSR    拥有者具有写权限0o200 
      stat.S_IRUSR    拥有者具有读权限0o400
      stat.S_IRWXU    拥有者有全部权限(权限掩码)0o700
      stat.S_ISVTX    目录里文件目录只有拥有者才可删除更改0o1000
      stat.S_ISGID    执行此文件其进程有效组为文件所在组0o2000
      stat.S_ISUID    执行此文件其进程有效用户为文件所有者0o4000
      stat.S_IREAD    windows下设为只读
      stat.S_IWRITE   windows下取消只读
+-*/+-*/+-*/+-*/walk f 获取一个遍历目录的迭代生成器
walk(top, topdown=True, onerror=None, followlinks=False)
  top:    需要遍历的目录(使用绝对路径会比较方便)
          如果是字节字符串，返回的结果将使用字节字符串
          如果是unicode，返回的结果将使用unicode(将忽略无法编码的名称)
  topdown:为True则先处理当前目录再处理子目录
          为False则先遍历子目录再由下向上枚举
  onerror:以异常实例为参数的错误处理函数
          (异常实例有errno,strerr,filename三个属性)
  followlinks: 默认不会获取符号链接
  返回的生成器其元素为(dirpath,dirnames,filenames)
  dirpath为路径名
  dirnames和filenames都只是名称列表(不包含其上级路径)
  生成器可能是实时的，如期间有改动文件或目录会影响后面产生的结果
  (如topdown为False则可能不会有影响)

   import os
   from os.path import join, getsize
   for root, dirs, files in os.walk('python/Lib/email'):
       print(root, "consumes", end=" ")
       print(sum(getsize(join(root, name)) for name in files), end=" ")
       print("bytes in", len(files), "non-directory files")
       if 'CVS' in dirs:
           dirs.remove('CVS')  # don't visit CVS directories

+-*/+-*/+-*/+-*/getcwdb f 返回当前工作目录(字节字符串)(python3)
+-*/+-*/+-*/+-*/getcwd f 返回当前工作目录(字符串)
+-*/+-*/+-*/+-*/getcwdu f 返回当前工作目录(unicode字符串)(python2)
+-*/+-*/+-*/+-*/chown f 修改文件的所有者id和组id(unix)
chown(path, uid, gid)
  uid,gid:  为-1时表示保持不变
  只有超级用户才可修改文件所有者id
+-*/+-*/+-*/+-*/link f 创建硬链接(unix)
link(source, link_name)
  source须是文件不能是目录
+-*/+-*/+-*/+-*/unlink f 删除文件(硬链接减1)
unlink(path)
  path如为符号链接,只会删除符号链接不会删除其指向的文件
+-*/+-*/+-*/+-*/chdir f 更改当前工作目录
chdir(path)
+-*/+-*/+-*/+-*/listdir f 获取目录里各项的名称列表
listdir(path='.')
  path:   如果是字节字符串，返回的是字节字符串列表
          如果是unicode，返回的是unicode字符串列表(将忽略无法编码的名称)
+-*/+-*/+-*/+-*/pathconf f 获取文件的相关系统配置信息,返回其数值(unix)
pathconf(path, name)
  name:  
    "PC_ASYNC_IO"          是否可异步输入
    "PC_CHOWN_RESTRICTED"  是否可使用chown函数
    "PC_FILESIZEBITS"      文件最大长度的位数
    "PC_LINK_MAX"          最大链接数量
    "PC_MAX_CANON"         格式化输入的最大长度(终端)
    "PC_MAX_INPUT"         输入行的最大长度(终端)
    "PC_NAME_MAX"          文件名称的最大长度
    "PC_PATH_MAX"          相对路径名称的最大长度
    "PC_NO_TRUNC"          新文件名过长时是否会失败报错(不自动缩短)
    "PC_PIPE_BUF"          管道缓冲大小
    "PC_PRIO_IO"           是否能执行优先IO
    "PC_SYNC_IO"           是否能执行同步IO
    "PC_VDISABLE"          是否禁用特殊字符处理(终端)
+-*/+-*/+-*/+-*/lchown f 修改符号链接其本身(非其引用)的所有者id和组id(unix)
lchown(path, uid, gid)
  uid,gid:  为-1时表示保持不变
  只有超级用户才可修改文件所有者id
+-*/+-*/+-*/+-*/mkdir f 创建目录
mkdir(path[, mode])
  path:   要创建的目录路径
  mode:   目录的权限，默认0777(unix)
  如目录已存在会报OSError错误
+-*/+-*/+-*/+-*/rmdir f 删除已空的目录
rmdir(path)
  要删除整个目录(包括其中的文件和子目录)可使用shutil.rmtree
+-*/+-*/+-*/进程管理 _
对于需要调用其他程序的操作使用subprocess模块处理较为方便
通常使用multiprocess模块操作子进程也比使用os模块里的fork等方便
+-*/+-*/+-*/+-*/WIFSTOPPED f 检测进程是否已停止(unix)
WIFSTOPPED(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
+-*/+-*/+-*/+-*/WTERMSIG f 获取导致进程退出的信号(unix)
WTERMSIG(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
+-*/+-*/+-*/+-*/WIFSIGNALED f 检测子进程是否异常终止(unix)
WIFSIGNALED(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
  子进程调用os.abort或收到某些信号退出为异常终止
  通常会用WTERMSIG获取导致退出的信号(os.abort产生SIGABRT信号)
  子进程调用sys.exit或os._exit退出或完全执行完毕都为正常终止
  子进程因抛出python异常而退出也为正常终止(返回码不为0 os.EX_OK)
+-*/+-*/+-*/+-*/WIFCONTINUED f 检测进程是否从暂停中恢复运行(unix)
WIFCONTINUED(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
+-*/+-*/+-*/+-*/WCOREDUMP f 检测异常终止的子进程是否已转储核心(unix)
WCOREDUMP(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
+-*/+-*/+-*/+-*/WIFEXITED f 检测子进程是否正常终止(unix) 
WIFEXITED(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
  子进程调用sys.exit或os._exit退出或完全执行完毕都为正常终止
  子进程因抛出python异常而退出也为正常终止(返回码不为0 os.EX_OK)
  对于正常终止的可用WEXITSTATUS(status)获取其返回码
  子进程调用os.abort或其它等方式退出为异常终止
+-*/+-*/+-*/+-*/WSTOPSIG f 获取导致进程暂停的信号(unix)
WSTOPSIG(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
+-*/+-*/+-*/+-*/WEXITSTATUS f 获取正常终止的子进程返回码(unix) 
WEXITSTATUS(status)
  status:  wait,waitpid,wait3,wait4返回的进程的状态
  通常返回码为0 os.EX_OK表示无异常发生
+-*/+-*/+-*/+-*/ctermid f 返回进程所在终端的文件名称(unix,通常为/dev/tty)
+-*/+-*/+-*/+-*/popen f 由命令创建管道
popen(command [,mode [,bufsize]])
+-*/+-*/+-*/+-*/times f 获取进程运行时间,返回浮点数秒数的累计时间五元组
times()
  unix: 返回(用户时间,系统时间,子进程的用户时间,子进程的系统时间,实际用时)
  windows: 返回(用户时间,系统时间,0,0,0)
+-*/+-*/+-*/+-*/wait f 等待(阻塞)任意一个子进程结束(unix)
wait()
  返回(pid,status)
  pid为结束的子进程id, status可用WIFEXITED,WIFSIGNALED检测子进程是否正常终止
  只要有任何一个子进程结束该函数就会停止等待返回其状态
  通常父进程接受到SIGCHLD信号后应调用此函数
  子进程终止后变成僵尸进程，只有在父进程wait得到其终止数据后才会消失
+-*/+-*/+-*/+-*/waitpid f 等待(检测)指定子进程的状态
waitpid(pid, options)
  pid:  为进程id时则只检查该子进程的状态
        为-1则监控任何一个子进程
        为0则只监控同一进程组的子进程
        <-1则pid为进程组id负数,只监控其进程组的子进程
  options: 0即等待子进程结束，WNOHANG则只检测状态不作任何等待
  返回(pid,status) status可用W*函数作检测来确定进程的状态
+-*/+-*/+-*/+-*/wait4 f 等待(检测)指定子进程的状态(unix)
wait4(pid, options)
  pid:  为进程id时则只检查该子进程的状态
        为-1则监控任何一个子进程
        为0则只监控同一进程组的子进程
        <-1则pid为进程组id,只监控其进程组的子进程
  options: 通常用0即等待子进程结束，使用WNOHANG则只检测状态而不会作任何等待
  返回(pid,status,rusage)三元组
  status可用W*函数作检测来确定进程的状态
  rusage为资源使用信息
+-*/+-*/+-*/+-*/wait3 f 等待子进程结束(unix)
wait3([options])
  options: 通常用0即等待子进程结束
  返回(pid,status,rusage)三元组
  status可用W*函数作检测来确定进程的状态
  rusage为资源使用信息
  只要有任何一个子进程结束该函数就会停止等待返回其状态
+-*/+-*/+-*/+-*/startfile f 使用系统默认方式打开文件(直接返回不等待)(windows)
startfile(path[, operation])
  path: 路径
  operation:  操作方式,默认'open',可以是'print','edit','find','explore'
+-*/+-*/+-*/+-*/kill f 向进程发信号
kill(pid, sig)
  pid:  >0进程id <0指定进程组 0所在进程组 -1所有进程
  sig:
      signal.SIGALRM   定时器警报信号(以系统真实时间计算)
      signal.SIGVTALRM 定时器警报信号(以进程用户时间计算)[默认退出]
      signal.SIGPROF   定时器警报信号(以进程时间计算)[默认退出]
      signal.SIGUSR1   用户定义信号(通常用来进程之间通信)
      signal.SIGUSR2   用户定义信号(通常用来进程之间通信)
      signal.SIGHUP    挂断信号(通常用来通知守护进程)
      signal.SIGTERM   请求终止信号(kill命令的默认信号，用来关闭其它进程)
      signal.SIGKILL   终止信号(不能被捕获或忽略，用来强制终止其它进程)
      signal.SIGSTOP   暂停信号(不能被捕获或忽略)
      signal.SIGCONT   继续执行信号(用于被暂停的进程)
      signal.SIGTSTP   命令行程序可以给自身发此信号来中断运行
      signal.SIGTTIN   命令行程序无法读取stdin时应给自身发此信号
      signal.SIGTTOUT  命令行程序无法读取stdin时应给自身发此信号
      signal.SIGQUIT   退出信号(通常由终端Ctrl-\引发)
      signal.SIGINT    中断信号(通常由Ctrl-C引发)
      signal.CTRL_C_EVENT  windows终端里的Ctrl-C
      signal.CTRL_BREAK_EVENT  windows终端里的Ctrl-Break
+-*/+-*/+-*/+-*/killpg f 向进程组发信号(unix)
killpg(pgid, sig)
  pgid:  进程组id
  sig:
      signal.SIGALRM   定时器警报信号(以系统真实时间计算)
      signal.SIGVTALRM 定时器警报信号(以进程用户时间计算)[默认退出]
      signal.SIGPROF   定时器警报信号(以进程时间计算)[默认退出]
      signal.SIGUSR1   用户定义信号(通常用来进程之间通信)
      signal.SIGUSR2   用户定义信号(通常用来进程之间通信)
      signal.SIGHUP    挂断信号(通常用来通知守护进程)
      signal.SIGTERM   请求终止信号(kill命令的默认信号，用来关闭其它进程)
      signal.SIGKILL   终止信号(不能被捕获或忽略，用来强制终止其它进程)
      signal.SIGSTOP   暂停信号(不能被捕获或忽略)
      signal.SIGCONT   继续执行信号(用于被暂停的进程)
      signal.SIGTSTP   命令行程序可以给自身发此信号来中断运行
      signal.SIGTTIN   命令行程序无法读取stdin时应给自身发此信号
      signal.SIGTTOUT  命令行程序无法读取stdin时应给自身发此信号
      signal.SIGQUIT   退出信号(通常由终端Ctrl-\引发)
      signal.SIGINT    中断信号(通常由Ctrl-C引发)
+-*/+-*/+-*/+-*/execle f 执行外部程序(自定义环境)代替当前进程，参数直接传入
execle(path, arg0, arg1, ..., env)
  path: 外部程序的路径
  arg0: (必须)程序名称
  arg*: 所需的参数
  env:  环境参数字典
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execlp f 执行外部程序(PATH可用)代替当前进程，参数直接传入
execlp(file, arg0, arg1, ...)
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  arg0: (必须)程序名称
  arg*: 所需的参数
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execl f 执行外部程序代替当前进程，参数用直接方式传入
execl(path, arg0, arg1, ...)
  path: 外部程序的路径
  arg0: (必须)程序名称
  arg*: 所需的参数
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execv f 执行外部程序代替当前进程，参数用列表方式传入
execv(path, args)
  path: 外部程序的路径
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execve f 执行外部程序(自定义环境)代替当前进程，参数用列表传入
execve(path, args, env)
  path: 外部程序的路径
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
  env:  环境参数字典
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execvp f 执行外部程序(PATH可用)代替当前进程，参数用列表传入
execvp(file, args)
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execvpe f 执行程序(PATH可用,自定义环境)代替当前进程，参数用列表
execvpe(file, args, env)
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
  env:  环境参数字典
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/execlpe f 执行程序(PATH可用,自定义环境)代替当前进程,参数直接传入
execlpe(file, arg0, arg1, ..., env)
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  arg0: (必须)程序名称
  arg*: 所需的参数
  env:  环境参数字典
  常用于fork子进程后由子进程调用
+-*/+-*/+-*/+-*/system f 同步执行shell命令，返回其退出码(0正常)
system(command)
  command:  shell命令，可以多行
+-*/+-*/+-*/+-*/abort f 中止当前进程(通常用于子进程)
+-*/+-*/+-*/+-*/fork f 创建子进程(资源共享)(unix)
fork()
  父进程里返回子进程id,子进程里返回0
  子进程会继承父进程的所有资源(除了文件锁)
  如果不想子进程由父进程管理可以通过2次fork将子进程交由init进程管理
  def subprocess():  ..... os._exit(0)
  def generate_subprocess():
    first = os.fork()
    if first == 0:
      second = os.fork()
      if second == 0: subprocess()
      else: os._exit(0)
    else: os.wait()
+-*/+-*/+-*/+-*/forkpty f 创建有伪终端的子进程(资源共享)(unix)
forkpty()
  返回(pid,fd)
  fd为伪终端的文件描述符
  pid父进程里为子进程id,子进程里为0
+-*/+-*/+-*/+-*/nice f 调整当前进程的优先级(unix)
nice(increment)
  通常只能降低进程的优先级，只有root权限才能提高优先级
+-*/+-*/+-*/+-*/unsetenv f 删除环境变量
unsetenv(key)
  修改会影响system,popen,fork,exec*,spawn*等函数。
  unsetenv不会更新os.environ
+-*/+-*/+-*/+-*/spawnv f 创建子进程执行外部程序,参数用列表方式 
spawnv(mode, path, args)
  mode: 创建子进程的方式
      os.P_DETACH     直接创建分离的进程(windows)
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id(unix)或句柄(windows)
      os.P_OVERLAY    代替原进程(相当于exec*)(windows)
      os.P_NOWAITO    异步执行外部程序，返回子进程id(unix)或句柄(windows)
  path: 外部程序的路径
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
+-*/+-*/+-*/+-*/spawnvpe f 创建子进程执行外部程序(PATH可用,自定义环境),参数用列表
spawnvpe(mode, file, args, env)
  mode: 创建子进程的方式
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id
      os.P_NOWAITO    异步执行外部程序，返回子进程id
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
  env:  环境参数字典
  windows下不可用
+-*/+-*/+-*/+-*/spawnve f 创建子进程执行外部程序(自定义环境),参数用列表
spawnve(mode, path, args, env)
  mode: 创建子进程的方式
      os.P_DETACH     直接创建分离的进程(windows)
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id(unix)或句柄(windows)
      os.P_OVERLAY    代替原进程(相当于exec*)(windows)
      os.P_NOWAITO    异步执行外部程序，返回子进程id(unix)或句柄(windows)
  path: 外部程序的路径
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
  env:  环境参数字典
+-*/+-*/+-*/+-*/spawnlpe f 创建子进程执行外部程序(PATH可用,自定义环境)(unix)
spawnlpe(mode, file, arg0, arg1..., env)
  mode: 创建子进程的方式
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id
      os.P_NOWAITO    异步执行外部程序，返回子进程id
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  arg0: (必须)程序名称
  arg*: 所需的参数
  env:  环境参数字典
+-*/+-*/+-*/+-*/spawnle f  创建子进程执行外部程序(自定义环境)
spawnle(mode, path, arg0, arg1..., env)
  mode: 创建子进程的方式
      os.P_DETACH     直接创建分离的进程(windows)
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id(unix)或句柄(windows)
      os.P_OVERLAY    代替原进程(相当于exec*)(windows)
      os.P_NOWAITO    异步执行外部程序，返回子进程id(unix)或句柄(windows)
  path: 外部程序的路径
  arg0: (必须)程序名称
  arg*: 所需的参数
  env:  环境参数字典
+-*/+-*/+-*/+-*/spawnlp f  创建子进程执行外部程序(PATH可用)(unix)
spawnlp(mode, file, arg0, arg1...)
  mode: 创建子进程的方式
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id
      os.P_NOWAITO    异步执行外部程序，返回子进程id
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  arg0: (必须)程序名称
  arg*: 所需的参数
+-*/+-*/+-*/+-*/spawnl f  创建子进程执行外部程序
spawnl(mode, path, ...)
  mode: 创建子进程的方式
      os.P_DETACH     直接创建分离的进程(windows)
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id(unix)或句柄(windows)
      os.P_OVERLAY    代替原进程(相当于exec*)(windows)
      os.P_NOWAITO    异步执行外部程序，返回子进程id(unix)或句柄(windows)
  path: 外部程序的路径
  arg0: (必须)程序名称
  arg*: 所需的参数
+-*/+-*/+-*/+-*/spawnvp f 创建子进程执行外部程序(PATH可用)(unix),参数用列表
spawnvp(mode, file, args)
  mode: 创建子进程的方式
      os.P_WAIT       等待外部程序结束，返回其退出码(0为正常退出)
      os.P_NOWAIT     异步执行外部程序，返回子进程id
      os.P_NOWAITO    异步执行外部程序，返回子进程id
  file: 外部程序的路径或使用PATH环境可搜索到的程序名称
  args: 调用外部程序所使用的参数列表
        (最少要有一个元素，第一个元素是程序名称而非参数)
+-*/+-*/+-*/+-*/P_DETACH d 直接创建分离的进程(windows)
+-*/+-*/+-*/+-*/P_WAIT d 等待外部程序结束，返回其退出码
+-*/+-*/+-*/+-*/P_NOWAIT d 异步执行外部程序，返回子进程id或句柄
+-*/+-*/+-*/+-*/P_OVERLAY d 代替原进程(相当于exec*)(windows)
+-*/+-*/+-*/+-*/P_NOWAITO d 异步执行外部程序，返回子进程id或句柄
+-*/+-*/+-*/+-*/EX_DATAERR d 错误的输入数据 
+-*/+-*/+-*/+-*/EX_IOERR d IO错误 
+-*/+-*/+-*/+-*/EX_NOHOST d 主机不存在 
+-*/+-*/+-*/+-*/EX_TEMPFAIL d 临时故障 
+-*/+-*/+-*/+-*/EX_OK d 没有错误
+-*/+-*/+-*/+-*/EX_UNAVAILABLE d 服务不可用 
+-*/+-*/+-*/+-*/EX_CONFIG d 配置错误 
+-*/+-*/+-*/+-*/EX_OSFILE d 文件系统错误
+-*/+-*/+-*/+-*/EX_NOUSER d 用户不存在 
+-*/+-*/+-*/+-*/EX_NOPERM d 权限不足 
+-*/+-*/+-*/+-*/EX_SOFTWARE d 内部软件错误 
+-*/+-*/+-*/+-*/EX_NOINPUT d 缺少输入 
+-*/+-*/+-*/+-*/EX_NOTFOUND d 未找到 
+-*/+-*/+-*/+-*/EX_CANTCREAT d  无法创建输出
+-*/+-*/+-*/+-*/EX_PROTOCOL d 协议不可用 
+-*/+-*/+-*/+-*/EX_USAGE d 错误的命令
+-*/+-*/+-*/+-*/EX_OSERR d 操作系统错误 
+-*/+-*/+-*/+-*/WCONTINUED d 
+-*/+-*/+-*/+-*/WNOHANG d 
+-*/+-*/+-*/+-*/WUNTRACED d 
+-*/+-*/+-*/+-*/_exit f 退出当前进程(通常用于子进程)(不做任何清理工作)
_exit(n)
  n:    返回码
      os.EX_OK          (0)没有错误
      os.EX_IOERR       IO错误 
      os.EX_NOHOST      主机不存在 
      os.EX_TEMPFAIL    临时故障 
      os.EX_UNAVAILABLE 服务不可用 
      os.EX_CONFIG      配置错误 
      os.EX_OSFILE      文件系统错误
      os.EX_NOUSER      用户不存在 
      os.EX_NOPERM      权限不足 
      os.EX_SOFTWARE    内部软件错误 
      os.EX_NOTFOUND    未找到 
      os.EX_NOINPUT     缺少输入 
      os.EX_DATAERR     错误的输入数据 
      os.EX_CANTCREAT   无法创建输出
      os.EX_PROTOCOL    协议不可用 
      os.EX_USAGE       错误的命令
      os.EX_OSERR       操作系统错误 
+-*/+-*/+-*/+-*/putenv f 设置环境变量
putenv(key, value)
  修改会影响system,popen,fork,execv等函数开启的子进程。
  putenv不会更新os.environ
+-*/+-*/+-*/+-*/getloadavg f 返回(1,5,15)分钟内的运行进程数量三元组(unix)
+-*/+-*/+-*/uname f 返回系统平台类型版本有关信息的五元组(unix)
uname()
  返回(sysname, nodename, release, version, machine)
+-*/+-*/+-*/fsencode f 
fsencode(filename)

Encode *filename* to the filesystem encoding with ``'surrogateescape'``
error handler, or ``'strict'`` on Windows; return :class:`bytes` unchanged.

:func:`fsdecode` is the reverse function.

.. versionadded:: 3.2



+-*/+-*/+-*/chroot f 设定当前进程的根目录(unix)
chroot(path)
  必须由超级用户执行此操作，作用例如ftp用以防止进程访问其它文件
+-*/+-*/+-*/urandom f 返回系统生成的随机字节字符串(常用于加密)
urandom(n)
  n:  需要的随机字节字符串的长度
+-*/+-*/+-*/getresgid f 
getresgid()

Return a tuple (rgid, egid, sgid) denoting the current process's
real, effective, and saved group ids.

Availability: Unix.

.. versionadded:: 3.2



+-*/+-*/+-*/umask f 设置新文件权限的掩码,返回之前设定的掩码
umask(mask)
  通常为0o022(八进制)即18(十进制)
+-*/+-*/+-*/makedev f 
TODO:
makedev(major, minor)

Compose a raw device number from the major and minor device numbers.



+-*/+-*/+-*/plock f 
plock(op)

Lock program segments into memory.  The value of *op* (defined in
``<sys/lock.h>``) determines which segments are locked.

Availability: Unix.



+-*/+-*/+-*/mknod f 
TODO:
mknod(filename[, mode=0o600[, device]])

Create a filesystem node (file, device special file or named pipe) named
*filename*. *mode* specifies both the permissions to use and the type of node
to be created, being combined (bitwise OR) with one of ``stat.S_IFREG``,
``stat.S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those constants are
available in :mod:`stat`).  For ``stat.S_IFCHR`` and ``stat.S_IFBLK``,
*device* defines the newly created device special file (probably using
:func:`os.makedev`), otherwise it is ignored.



+-*/+-*/+-*/fsdecode f 
fsdecode(filename)

Decode *filename* from the filesystem encoding with ``'surrogateescape'``
error handler, or ``'strict'`` on Windows; return :class:`str` unchanged.

:func:`fsencode` is the reverse function.

.. versionadded:: 3.2



+-*/+-*/+-*/initgroups f 
initgroups(username, gid)

Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.

Availability: Unix.

.. versionadded:: 3.2



+-*/+-*/+-*/device_encoding f 
device_encoding(fd)

Return a string describing the encoding of the device associated with *fd*
if it is connected to a terminal; else return :const:`None`.



+-*/+-*/+-*/sysconf f 获取操作系统配置信息(unix)
sysconf(name)
  name:
  'SC_ARG_MAX'        命令参数的最大长度
  'SC_CHILD_MAX'      用户的可用进程数量
  'SC_CLK_TCK'        每秒的周期次数
  'SC_NGROUPS_MAX'    同步组的最大数量
  'SC_TZNAME_MAX'     时区名称的最大长度
  'SC_OPEN_MAX'       进程一次能打开的最大文件数量
  'SC_JOB_CONTROL'    是否支持任务控制
  'SC_LINE_MAX'       命令行最大长度
  'SC_LOGIN_NAME_MAX' 登录名最大长度
  'SC_PAGESIZE'       系统存储页大小
  'SC_PAGE_SIZE'      系统存储页大小
  'SC_STREAM_MAX'     进程的最大标准io数量
  'SC_TTY_NAME_MAX'   终端设备名最大长度
+-*/+-*/+-*/confstr f 获取编译环境信息(unix)
confstr(name)
+-*/+-*/+-*/getlogin f 获取当前登录用户名称
getlogin()
  受环境变量LOGNAME,USERNAME影响
+-*/+-*/+-*/major f 
TODO:
major(device)

Extract the device major number from a raw device number (usually the
:attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`).



+-*/+-*/+-*/stat_float_times f 
stat_float_times([newvalue])

Determine whether :class:`stat_result` represents time stamps as float objects.
If *newvalue* is ``True``, future calls to :func:`~os.stat` return floats, if it is
``False``, future calls return ints. If *newvalue* is omitted, return the
current setting.

For compatibility with older Python versions, accessing :class:`stat_result` as
a tuple always returns integers.

Python now returns float values by default. Applications which do not work
correctly with floating point time stamps can use this function to restore the
old behaviour.

The resolution of the timestamps (that is the smallest possible fraction)
depends on the system. Some systems only support second resolution; on these
systems, the fraction will always be zero.

It is recommended that this setting is only changed at program startup time in
the *__main__* module; libraries should never change this setting. If an
application uses a library that works incorrectly if floating point time stamps
are processed, this application should turn the feature off until the library
has been corrected.



+-*/+-*/+-*/minor f 
TODO:
minor(device)

Extract the device minor number from a raw device number (usually the
:attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`).



+-*/+-*/+-*/getenv f  获取某个环境变量,返回字符串,未找到返回默认值
getenv(key, default=None)
+-*/+-*/+-*/getenvb f 获取某个环境变量,返回字节字符串(python3)
getenvb(key, default=None)
+-*/+-*/+-*/strerror f 返回错误代码所代表的错误信息文本(如未找到会报错)
strerror(code)
  code: 错误代码整数
+-*/+-*/+-*/get_exec_path f 
get_exec_path(env=None)

Returns the list of directories that will be searched for a named
executable, similar to a shell, when launching a process.
*env*, when specified, should be an environment variable dictionary
to lookup the PATH in.
By default, when *env* is None, :data:`environ` is used.

.. versionadded:: 3.2



+-*/+-*/+-*/supports_bytes_environ d 
supports_bytes_environ

True if the native OS type of the environment is bytes (eg. False on
Windows).

.. versionadded:: 3.2



+-*/+-*/+-*/defpath d 默认搜索路径
+-*/+-*/+-*/sysconf_names d 操作系统信息的可用名称列表(unix)
+-*/+-*/+-*/pathconf_names d 文件系统配置信息的可用名称列表
+-*/+-*/+-*/linesep d 行分割符
linesep
  windows里为'\r\n',一般为'\n'
+-*/+-*/+-*/SEEK_CUR d 文件当前位置 
+-*/+-*/+-*/SEEK_SET d 文件开始位置
+-*/+-*/+-*/SEEK_END d 文件结尾位置
+-*/+-*/+-*/devnull d unix为'/dev/null',windows为'nul'
+-*/+-*/+-*/name d 系统平台名称
name
  'posix', 'nt', 'mac', 'os2', 'ce', 'java'.
+-*/+-*/+-*/confstr_names d 编译环境信息的可用名称列表(unix)
+-*/+-*/+-*/environb d 存放当前环境变量的字典,字符类型为字节(python3)
+-*/+-*/+-*/environ d 存放当前环境变量的字典
environ
  如environ['HOME']
  常见环境名:
     HOME      用户目录
     LANG      语言
     LOGNAME   登录名
     PATH      搜索路径
     PWD       当前目录的绝对路径
     SHELL     用户首选shell
     TERM      终端类型
     TMPDIR    临时文件目录
+-*/+-*/+-*/error e os模块异常
error
     os异常实例通常有errno,strerr,filename三个属性
+-*/+-*/+-*/path p os.path路径模块
时间都是以time模块所用的秒数形式
windows下需注意'c:xxx'往往指的是'c:\当前目录\xxx'
+-*/+-*/+-*/+-*/sameopenfile f 比较两个文件描述符是否打开的是同一个文件
+-*/+-*/+-*/+-*/exists f 检测路径是否存在(损坏的符号链接将返回False) 
exists(path)
+-*/+-*/+-*/+-*/splitext f 将路径分为(其他部分,后缀)二元组
splitext(path)
  对于'.xxx'文件，'xxx'将不会被视为后缀
+-*/+-*/+-*/+-*/basename f 返回路径的基本名称(文件名称)
basename(path)
  注意'/foo/bar/'将返回''而不是'bar'
+-*/+-*/+-*/+-*/expandvars f 按环境变量扩展路径
expandvars(path)
  对于'$name','${name}','%name%'将用实际环境变量替换掉
+-*/+-*/+-*/+-*/expanduser f 扩展带用户目录的路径 
expanduser(path)
  '~'将扩展为用户主目录
  '~user'将扩张为该用户的主目录
+-*/+-*/+-*/+-*/getmtime f  获取路径的最后一次修改的时间
getmtime(path)
+-*/+-*/+-*/+-*/dirname f 返回路径的目录部分
dirname(path)
+-*/+-*/+-*/+-*/isfile f 是否是文件路径(包括指向文件的有效符号链接)
isfile(path)
+-*/+-*/+-*/+-*/getsize f 获取文件的大小
getsize(path)
+-*/+-*/+-*/+-*/samestat f 比较两个路径状态信息是否是同一个路径的(unix)
samestat(stat1, stat2)
  stat1,stat2 为os.fstat,os.stat,os.lstat返回的结果
+-*/+-*/+-*/+-*/split f 将路径分为(目录,文件)二元组
split(path)
  等同(dirname(path),basename(path))
+-*/+-*/+-*/+-*/islink f 是否是符号链接
islink(path)
+-*/+-*/+-*/+-*/relpath f 获取相对路径
relpath(path, start=None)
  返回path相对start的相对路径，start未给出则默认为当前路径
+-*/+-*/+-*/+-*/samefile f 比较两个路径是否是同一个(比较符号链接的目标)
samefile(path1, path2)
+-*/+-*/+-*/+-*/realpath f 获取真实路径(不含符号链接的路径)(unix)
realpath(path)
+-*/+-*/+-*/+-*/commonprefix f 获取多个字符串的公有最长前缀
commonprefix(list)
  list: 字符串列表
+-*/+-*/+-*/+-*/abspath f 返回路径的绝对路径 
abspath(path)
+-*/+-*/+-*/+-*/normcase f 小写化路径
normcase(path)
  对于不区分大小写的文件系统将把路径转换为小写
  windows下将把'/'转为'\'
+-*/+-*/+-*/+-*/getatime f 获取路径的最后一次访问时间
getatime(path)
+-*/+-*/+-*/+-*/lexists f 检测路径是否存在(损坏的符号链接将返回True)
lexists(path)
+-*/+-*/+-*/+-*/isdir f 是否是目录
isdir(path)
+-*/+-*/+-*/+-*/join f 组合路径的各部分为一个完整路径
join(path1[, path2[, ...]])
  windows下join('c:','xx')返回的是'c:xx'而不是'c:\\xx'
  join('/xx/','yy','zz/w')返回'/xx/yy/zz/w'
  join('/xx/','/yy/','zz/w')返回'/yy/zz/w'
+-*/+-*/+-*/+-*/getctime f 获取路径的创建时间 
getctime(path)
+-*/+-*/+-*/+-*/walk f 遍历子目录
walk(top,func,arg)
  top:    需要遍历的目录(使用绝对路径会比较方便)
  func:   参数为(arg,目录名,该目录下文件和目录名列表)的回调函数
  arg:    用于回调函数的参数,通常为None
+-*/+-*/+-*/+-*/isabs f 是否是绝对路径
isabs(path)
+-*/+-*/+-*/+-*/normpath f 标准化路径
normpath(path)
  对于像 'A//B', 'A/B/', 'A/./B', 'A/foo/../B'这样的路径都会转化精简为'A/B'
  windows下将把'/'转为'\'
+-*/+-*/+-*/+-*/ismount f 是否是挂载点目录
ismount(path)
+-*/+-*/+-*/+-*/splitdrive f 将路径分为(盘符,路径)二元组
splitdrive(path)
  在unix下将返回('',path)
  在windows下将返回如('c:','/xx/yy') ('//host/computer','/dir')
+-*/+-*/+-*/+-*/supports_unicode_filenames d 系统是否支持unicode文件名
+-*/+-*/platform p 系统平台信息模块
所有返回值里元素都是字符串,没有整数类型
+-*/+-*/+-*/dist f 返回(发行版名称,版本号,代号)三元组(unix)
dist(distname='', version='', id='', supported_dists=('SuSE','debian','redhat','mandrake',...))
+-*/+-*/+-*/python_version f 返回python版本号,如'2.6.5'
+-*/+-*/+-*/python_implementation f 返回python的实现,如'CPython'
python_implementation()
  返回的可能值有'CPython', 'IronPython', 'Jython', 'PyPy'.
+-*/+-*/+-*/python_build f 返回(buildno,builddate)二元组
+-*/+-*/+-*/uname f 用uname方式获取系统平台信息
uname()
  返回(system,node,release,version,machine,processor)
  system:系统平台名称,如'Linux'
  node:主机名称,如'localhost'
  release:发行版本,如'NT','2.6.0'
  version:版本信息,如'#94-ubuntu...'
  machine:机器架构,如'x86_64'
  processor:处理器架构,如'i386'
+-*/+-*/+-*/win32_ver f 
win32_ver(release='', version='', csd='', ptype='')

Get additional version information from the Windows Registry and return a tuple
``(version, csd, ptype)`` referring to version number, CSD level and OS type
(multi/single processor).

As a hint: *ptype* is ``'Uniprocessor Free'`` on single processor NT machines
and ``'Multiprocessor Free'`` on multi processor machines. The *'Free'* refers
to the OS version being free of debugging code. It could also state *'Checked'*
which means the OS version uses debugging code, i.e. code that checks arguments,
ranges, etc.

.. note::

   This function works best with Mark Hammond's
   :mod:`win32all` package installed, but also on Python 2.3 and
   later (support for this was added in Python 2.6). It obviously
   only runs on Win32 compatible platforms.



+-*/+-*/+-*/python_revision f 返回python的修订版本号字符串
+-*/+-*/+-*/system f 返回系统平台名称,如'Windows'
+-*/+-*/+-*/node f 返回主机名称,如'localhost'
+-*/+-*/+-*/release f 发行版本,如'NT','2.6.0'
+-*/+-*/+-*/version f 版本信息,如'#94-ubuntu...'
+-*/+-*/+-*/machine f 返回机器架构,如'i386'
+-*/+-*/+-*/processor f 返回处理器架构(有时同machine)
+-*/+-*/+-*/platform f 返回系统平台版本信息的单个长字符串
platform(aliased=0, terse=0)
+-*/+-*/+-*/python_compiler f 返回python是由哪款编译器编译的
python_compiler()
  如'GCC 4.4.4'
+-*/+-*/+-*/python_branch f 
python_branch()

Returns a string identifying the Python implementation SCM branch.



+-*/+-*/+-*/linux_distribution f 返回(发行版名称,版本号,代号)三元组(unix)
linux_distribution(distname='', version='', id='', 
    supported_dists=('SuSE','debian','redhat','mandrake',...), 
    full_distribution_name=1)
+-*/+-*/+-*/libc_ver f 识别可执行文件所使用libc版本(只适用gcc生成的)
libc_ver(executable=sys.executable, lib='', version='', chunksize=2048)
  executable:   文件名,默认python解释器文件
  返回(lib,version)二元组
     lib:     如'glibc'   
     version: 如'2.4'
+-*/+-*/+-*/mac_ver f 
mac_ver(release='', versioninfo=('','',''), machine='')

Get Mac OS version information and return it as tuple ``(release, versioninfo,
machine)`` with *versioninfo* being a tuple ``(version, dev_stage,
non_release_version)``.

Entries which cannot be determined are set to ``''``.  All tuple entries are
strings.



+-*/+-*/+-*/popen f 
popen(cmd, mode='r', bufsize=-1)

Portable :func:`popen` interface.  Find a working popen implementation
preferring :func:`win32pipe.popen`.  On Windows NT, :func:`win32pipe.popen`
should work; on Windows 9x it hangs due to bugs in the MS C library.



+-*/+-*/+-*/system_alias f 
system_alias(system, release, version)

Returns ``(system, release, version)`` aliased to common marketing names used
for some systems.  It also does some reordering of the information in some cases
where it would otherwise cause confusion.



+-*/+-*/+-*/python_version_tuple f 返回python版本元组,如('2','6','5')
+-*/+-*/+-*/architecture f 识别可执行文件的文件格式
architecture(executable=sys.executable, bits='', linkage='')
  executable:   文件名,默认python解释器文件
  返回(bits, linkage)二元组(对windows文件可能不准确)
     bits:     如'32bit'
     linkage:  如'ELF','WindowsPE'
+-*/+-*/+-*/java_ver f (jpython)
java_ver(release='', vendor='', vminfo=('','',''), osinfo=('','',''))

Version interface for Jython.

Returns a tuple ``(release, vendor, vminfo, osinfo)`` with *vminfo* being a
tuple ``(vm_name, vm_release, vm_vendor)`` and *osinfo* being a tuple
``(os_name, os_version, os_arch)``. Values which cannot be determined are set to
the defaults given as parameters (which all default to ``''``).



+-*/+-*/select p 异步IO等待模块
利用select和协程可以很方便的编写异步程序
+-*/+-*/+-*/select f 轮询等待可用IO
select(rlist, wlist, xlist[, timeout])
  rlist:    等待输入(接收)的文件描述符(或带有fileno方法的对象)列表
  wlist:    等待输出(发送)的文件描述符(或带有fileno方法的对象)列表
  xlist:    等待错误(失败)的文件描述符(或带有fileno方法的对象)列表
  timeout:  超时秒数浮点数，忽略将一直等待到有状态就绪的文件描述符产生
            为0相当于检查一次就返回
  返回元素为列表的三元组，分别对应输入,输出,错误
  返回的文件描述符如未处理再次select时仍会认为是状态就绪的
  通常*list可直接使用文件对象或套接字对象列表(对象往往需是非阻塞的)
  也可使用以文件描述符为键值的字典，其键值往往对应的是相关自定义对象
+-*/+-*/+-*/error e 错误(errno,data)
+-*/+-*/+-*/POLLIN d   可读
+-*/+-*/+-*/POLLPRI d  可读(常用于带外数据OOB)
+-*/+-*/+-*/POLLOUT d  可写
+-*/+-*/+-*/POLLERR d  发生错误
+-*/+-*/+-*/POLLHUP d  挂起
+-*/+-*/+-*/POLLNVAL d 无效
+-*/+-*/+-*/EPOLLIN d   可读
+-*/+-*/+-*/EPOLLPRI d  可读(常用于带外数据OOB)
+-*/+-*/+-*/EPOLLOUT d  可写
+-*/+-*/+-*/EPOLLERR d  发生错误
+-*/+-*/+-*/EPOLLHUP d  挂起
+-*/+-*/+-*/EPOLLET d  边沿触发(不管是否处理,同事件只发生一次不会重复)
通常要加入循环发送或接受所有的数据
+-*/+-*/+-*/poll f 创建poll监控对象(unix)
+-*/+-*/+-*/+-*/unregister m 移除被监控的文件描述符(或带有fileno方法的对象) 
unregister(fd)
  fd:  文件描述符(或带有fileno方法的对象)
+-*/+-*/+-*/+-*/register m 注册监控的文件描述符(或带有fileno方法的对象)
register(fd[, eventmask])
  fd:  文件描述符(或带有fileno方法的对象)
  eventmask:   默认为POLLIN | POLLPRI | POLLOUT
        select.POLLIN    可读
        select.POLLPRI   可读(常用于带外数据OOB)
        select.POLLOUT   可写
        select.POLLERR   发生错误
        select.POLLHUP   挂起
        select.POLLNVAL  无效
+-*/+-*/+-*/+-*/modify m 修改对象的被监控事件
modify(fd, eventmask)
  fd:  文件描述符(或带有fileno方法的对象)
  eventmask:   可按位或生成
        select.POLLIN    可读
        select.POLLPRI   可读(常用于带外数据OOB)
        select.POLLOUT   可写
        select.POLLERR   发生错误
        select.POLLHUP   挂起
        select.POLLNVAL  无效
+-*/+-*/+-*/+-*/poll m 开始监控
poll([timeout])
  timeout:   超时毫秒数
  返回状态就绪的列表，其元素为(fd,event)
  fd为文件描述符,event通常用于和select.POLL*作&操作来检测其状态
+-*/+-*/+-*/epoll f 创建epoll监控对象(linux)
epoll(sizehint=-1)
  sizehint:  用于优化数据(基本无用)
+-*/+-*/+-*/+-*/fileno m epoll对象对应的句柄
+-*/+-*/+-*/+-*/unregister m 移除被监控的文件描述符
unregister(fd)
  fd:  文件描述符
+-*/+-*/+-*/+-*/register m 注册监控的文件描述符
register(fd[, eventmask])
  fd:  文件描述符
  eventmask:   默认为EPOLLIN | EPOLLPRI | EPOLLOUT
        select.EPOLLIN    可读
        select.EPOLLPRI   可读(常用于带外数据OOB)
        select.EPOLLOUT   可写
        select.EPOLLERR   发生错误
        select.EPOLLHUP   挂起
        select.EPOLLET    有事件发生(不管是否处理同事件只发生一次，不会重复)
+-*/+-*/+-*/+-*/modify m 修改对象的被监控事件
modify(fd, eventmask)
  fd:  文件描述符
  eventmask:   可按位或生成
        select.EPOLLIN    可读
        select.EPOLLPRI   可读(常用于带外数据OOB)
        select.EPOLLOUT   可写
        select.EPOLLERR   发生错误
        select.EPOLLHUP   挂起
        select.EPOLLET    有事件发生(不管是否处理同事件只发生一次，不会重复)
+-*/+-*/+-*/+-*/fromfd M 由epoll句柄创建epoll对象
fromfd(fd)
+-*/+-*/+-*/+-*/close m 关闭
+-*/+-*/+-*/+-*/poll m 开始监控
poll([timeout=-1[, maxevents=-1]])
  timeout:   毫秒数
  返回状态就绪的列表，其元素为(fd,event)
  fd为文件描述符,event通常用于和select.EPOLL*作&操作来检测其状态
+-*/+-*/threading p 线程模块
有时使用协程比使用线程更简单方便实用
+-*/+-*/+-*/current_thread f 返回当前线程对应的线程对象
+-*/+-*/+-*/settrace f 设置线程的跟踪函数
settrace(func)
+-*/+-*/+-*/setprofile f 设置线程的性能刨视函数
setprofile(func)
+-*/+-*/+-*/active_count f 当前活动的线程对象数量
+-*/+-*/+-*/stack_size f 设置线程的栈大小
stack_size([size])
+-*/+-*/+-*/enumerate f 列出当前活动的线程对象
+-*/+-*/+-*/TIMEOUT_MAX d 全局设置锁的最大等待时间
+-*/+-*/+-*/BrokenBarrierError e 障碍同步失败错误
+-*/+-*/+-*/Barrier c 创建障碍同步器(多线程同步到同一起跑线)(python3)
Barrier(parties, action=None, timeout=None)
  parties:   需要同步的线程数量
  timeout:   默认等待的最长浮点数秒数,None为无限
  action:    TODO:
+-*/+-*/+-*/+-*/broken d 未能在设定时间内同步时此值为True(有线程偷跑)
+-*/+-*/+-*/+-*/n_waiting d 当前已在等待的线程数量(已到达起跑线)
+-*/+-*/+-*/+-*/parties d 需要同步的线程数量
+-*/+-*/+-*/+-*/reset m 重新设置同步器(正在等待的线程会报BrokenBarrierError)
+-*/+-*/+-*/+-*/abort m 取消同步(正在等待的线程会报BrokenBarrierError)
+-*/+-*/+-*/+-*/wait m 等待同步的线程数量达到要求(站到起跑线等其它线程到起跑线)
wait(timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限,未给出则使用默认
  如果超时，则会设置broken为True，其他在等待的线程将报BrokenBarrierError
  如达成同步，返回值为[0,线程数量-1]之间的值，不同的线程获得不同的数值
+-*/+-*/+-*/Thread c 创建线程对象
Thread(group=None, target=None, name=None, args=(), kwargs={})
  target: 线程所执行的函数
  name:   线程的名称，默认为'Thread-??'
  args,kwargs:  为target函数所使用的参数
  group:  无用
  自定义子类时须有Thread.__init__(self)
+-*/+-*/+-*/+-*/daemon d 守护线程标志
daemon
  默认为False,如设为True则主线程退出时会马上结束此线程,而不做任何等待
  必须在线程启动前设置
+-*/+-*/+-*/+-*/ident d 线程标识符(唯一)(只有在线程启动后才有效) 
+-*/+-*/+-*/+-*/name d 线程的名称 
+-*/+-*/+-*/+-*/run m 线程所包含的执行程序(通常用于子类继承重定义)
+-*/+-*/+-*/+-*/start m 启动线程(只能调用一次)
+-*/+-*/+-*/+-*/join m 等待线程执行
join(timeout=None)
  timeout:  如果为None将一直等到线程结束或中断
            可以设浮点数形式的秒数时间以确定等待时间
+-*/+-*/+-*/+-*/is_alive m 检测线程是否是活动的 
+-*/+-*/+-*/Timer c 创建定时器对象
Timer(interval, function, args=[], kwargs={})
  interval:   秒数，定时器多久后开始执行
  function:   定时器到时时所执行的函数
  args,kwargs:  为函数所使用的参数
+-*/+-*/+-*/+-*/cancel m 取消定时器(只有在时间未到前执行才有效)
+-*/+-*/+-*/Semaphore f 创建信号量(数量有限资源的管理计数器)
Semaphore(value=1)
  value:  计数器的初始值(可用资源数量)(不能为负数)
+-*/+-*/+-*/+-*/release m 释放(计数器+1)
+-*/+-*/+-*/+-*/acquire m 获取(计数器-1)
acquire(blocking=True, timeout=None)
  blocking: 如果为True,无法立即获取时(即计数器为0)将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获取
+-*/+-*/+-*/BoundedSemaphore f 创建有上限的信号量(数量有限资源的管理计数器)
BoundedSemaphore(value=1)
  value:  计数器的初始值(可用资源的最大数量)(须为正数)
+-*/+-*/+-*/+-*/release m 释放(计数器+1,如超过初始值将报错)
+-*/+-*/+-*/+-*/acquire m 获取(计数器-1)
acquire(blocking=True, timeout=None)
  blocking: 如果为True,无法立即获取时(即计数器为0)将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获取
+-*/+-*/+-*/local c 返回当前线程的局部数据字典对象 
local()
   mydata = threading.local()
   mydata.x = 1
+-*/+-*/+-*/Event f 创建事件(简易同步机制,没有使用任何锁)
+-*/+-*/+-*/+-*/clear m 清除事件标志(恢复到未发生状态)
+-*/+-*/+-*/+-*/set m 设置事件发生了的标志
+-*/+-*/+-*/+-*/wait m 等待事件发生
wait(timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限
  如果超时返回False
+-*/+-*/+-*/+-*/is_set m 检查事件是否已发生
+-*/+-*/+-*/Condition f 创建条件变量(常用于线程同步)
Condition(lock=None)
  lock:  Lock或RLock对象(一般无需设置)
  通常要先acquire(进入同步状态)才能作其他操作
  用于多个线程时常是生产和消费的模式
  多个生产线程负责生产，生产完后通知唤醒消费线程，然后进入等待状态
  多个消费线程负责消费，消费完后通知唤醒生产线程，然后进入等待状态
  往往唤醒后会检查库存的实际的情况再决定是否生产或消费或等待,故因此叫条件变量
+-*/+-*/+-*/+-*/acquire m 获取锁(进入同步状态)
acquire(*args)
  blocking: 如果为True,无法立即获得锁时将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获得锁
+-*/+-*/+-*/+-*/release m 释放锁(退出同步状态)
+-*/+-*/+-*/+-*/notify m 唤醒一个正在等待(同步)的线程
notify()
  须已获得锁定，此操作并不释放锁定
  通常其后操作为wait或release
+-*/+-*/+-*/+-*/wait m 等待被唤醒(等待其它线程同步操作完成)
wait(timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限
  如果超时返回False
+-*/+-*/+-*/+-*/notify_all m 唤醒所有在等待(同步)的线程
+-*/+-*/+-*/+-*/wait_for m 等待被唤醒(常用于多个线程同时等待)
wait_for(predicate, timeout=None)
  timeout:  等待的最长浮点数秒数,None为无限
  predicate:返回真假值的测试函数(返回False则继续等待)
            通常为检查某个条件,避免被唤醒时已被其他线程处理过了
  如果超时返回False
+-*/+-*/+-*/Lock f 创建互斥锁
创建的对象可使用with语句
  l=Lock()
  with l:
    ...
+-*/+-*/+-*/+-*/release m 释放锁(不要在未获得锁的情况下作此操作)
+-*/+-*/+-*/+-*/acquire m 尝试获取锁并锁定
acquire(blocking=True, timeout=-1)
  blocking: 如果为True,无法立即获得锁时将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获得锁
+-*/+-*/+-*/RLock f 创建可重入锁(带计数器的同线程可重入互斥锁)
RLock()
  同一线程可多次锁定，解锁同样需要相同的次数
  创建的对象可使用with语句
  l=RLock()
  with l:
    ...
+-*/+-*/+-*/+-*/release m 释放锁(不要在未获得锁的情况下作此操作)
release()
  如被多次锁定，此操作只将计数器-1，直到计数器为0才会真正释放
+-*/+-*/+-*/+-*/acquire m 尝试获取锁并锁定
acquire(blocking=True, timeout=-1)
  blocking: 如果为True,无法立即获得锁时将等待
  timeout:  等待的最长浮点数秒数,-1为无限
  返回True表示成功获得锁
  如同一线程已获取这个锁，再次获取将使计数器+1
+-*/网络 _
+-*/+-*/socket p 套接字模块
+-*/+-*/+-*/htonl f 将32位整数从本机字节序转换为网络字节序(大端序)
htonl(x)
+-*/+-*/+-*/htons f 将16位整数从本机字节序转换为网络字节序(大端序)
htons(x)
+-*/+-*/+-*/ntohs f 将16位整数从网络字节序(大端序)转换为本机字节序
ntohs(x)
+-*/+-*/+-*/ntohl f 将32位整数从网络字节序(大端序)转换为本机字节序
ntohl(x)
+-*/+-*/+-*/create_connection f 创建TCP连接,返回套接字socket对象
create_connection(address[, timeout[, source_address]])
  address:  (host,port) host可以是域名或ip字符串，port是端口整数
  timeout:  超时期限
  source_address:  (host,port) host如为''则使用默认地址,port如为0则使用默认端口
+-*/+-*/+-*/socketpair f 创建一对连接的套接字对象(unix)
socketpair([family[, type[, proto]]])
  family:   默认为socket.AF_UNIX
  type:     默认使用socket.SOCK_STREAM(将创建数据流管道)
  proto:    默认为0
  通常用于父子进程通信，父进程在os.fork前用此函数创建通信管道的两端，
  fork后父子进程就可各使用一端send,recv数据了
+-*/+-*/+-*/setdefaulttimeout f 设置新建套接字socket对象操作超时时长秒数浮点数
setdefaulttimeout(timeout)
  timeout:  None表示阻塞模式,0或其它数字表示非阻塞模式
  如设有超时时长，超时时会产生socket.timeout错误
  使用此操作需小心，有时某些模块需要使用阻塞模式的套接字
+-*/+-*/+-*/getdefaulttimeout f 获取新建套接字对象操作超时时长秒数，默认None
+-*/+-*/+-*/getaddrinfo f 获取地址信息(ipv4,ipv6)
getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)
  host:   可以是名称或地址字符串
  port:   可以是端口整数或字符串('http','ftp'等等)或None
  family: 地址簇
      socket.AF_INET   ipv4
      socket.AF_INET6  ipv6
      socket.AF_UNSPEC 查询所有类型地址
  type:  
      socket.SOCK_DGRAM   数据报类型(UDP)(一般无需再指定proto)
      socket.SOCK_STREAM  数据流类型(TCP)(一般无需再指定proto)
  flags:   可用或操作组合
      socket.AI_ADDRCONFIG    查询配置的地址类型
      socket.AI_ALL           查找ipv4和ipv6地址(和AI_V4MAPPED连用)
      socket.AI_CANONNAME     获取规范名(不是别名)
      socket.AI_NUMERICHOST   地址用带点数字字符串表示
      socket.AI_NUMERICSERV   端口用数字字符串表示
      socket.AI_PASSIVE       地址用于监听
      socket.AI_V4MAPPED      如未找到ipv6地址则使用ipv4地址
  family, type, proto主要用来限定结果的范围
  返回信息列表，列表里信息元素的形式是
  (family, type, proto, canonname, sockaddr)
  canonname为该地址的正式名称，sockaddr对于ipv4来说一般为(host,port)形式

   >>> socket.getaddrinfo("www.python.org", 80, proto=socket.SOL_TCP)
   [(2, 1, 6, '', ('82.94.164.162', 80)),
    (10, 1, 6, '', ('2001:888:2000:d::a2', 80, 0, 0))]
+-*/+-*/+-*/getnameinfo f 获取地址信息二元组 
getnameinfo(sockaddr, flags)
  sockaddr:  (host,port)
  flags:     通常为0,或用以下数值按位或设置
    socket.NI_NOFQDN           使用完全限定名
    socket.NI_NUMERICHOST      地址用带点数字字符串表示
    socket.NI_NUMERICSERV      端口用数字字符串表示
    socket.NI_NAMEREQD         请求主机名，如没有任何DNS名称则报错
    socket.NI_DGRAM            查询UDP服务而不是TCP服务
  返回(host,port),里面的两项都为字符串
+-*/+-*/+-*/gethostname f 返回本机的名称
  如要获得本机ip地址，可使用gethostbyname(gethostname())
+-*/+-*/+-*/getfqdn f 获取完整的域名
getfqdn([name])
  name如果未给出则返回本机的完整域名
+-*/+-*/+-*/gethostbyname_ex f 将域名转换为可读地址字符串(ipv4)返回三元组
gethostbyname_ex(hostname)
  返回(hostname, aliaslist, ipaddrlist)
  hostname: 主机名 
  aliaslist: 可选主机名列表
  ipaddrlist: 可用ip地址字符串列表
+-*/+-*/+-*/gethostbyname f 将域名转换为可读地址字符串(ipv4)
gethostbyname(hostname)
+-*/+-*/+-*/gethostbyaddr f  将ip地址字符串转换为域名返回三元组(ipv4,ipv6)
gethostbyaddr(ip_address)
  ip_address:  支持'xxx:xxx:xx::xx'ipv6地址
  返回(hostname, aliaslist, ipaddrlist)
  hostname: 主机名 
  aliaslist: 可选主机名列表
  ipaddrlist: 可用ip地址字符串列表
+-*/+-*/+-*/getservbyname f 将服务端口名称转为服务端口号
getservbyname(servicename[, protocolname])
  servicename:  像'ftp'这样的服务名称
  protocolname: 通常应该是'tcp'或'udp'
+-*/+-*/+-*/getprotobyname f 将协议名称转为协议编号
getprotobyname(protocolname)
  protocolname:  像'icmp'这样的协议名称
+-*/+-*/+-*/getservbyport f 将服务端口号转为服务端口名称
getservbyport(port[, protocolname])
  port: 端口号整数
  protocolname: 通常应该是'tcp'或'udp'
  如getservbyport(21,'tcp')返回'ftp'
+-*/+-*/+-*/inet_pton f 将ip地址字符串转为二进制数据格式(ipv4,ipv6)
inet_pton(address_family, ip_string)
  address_family:  只能是AF_INET或AF_INET6
  ip_string:   支持'xxx:xxx:xx::xx'ipv6地址
+-*/+-*/+-*/inet_aton f 将ip地址字符串转为二进制数据格式(ipv4)
inet_aton(ip_string)
  ip_string:  'xx.xx.xx.xx'ipv4地址
+-*/+-*/+-*/inet_ntop f 将二进制数据格式的ip地址转为可读的字符串(ipv4,ipv6)
inet_ntop(address_family, packed_ip)
  address_family:  只能是AF_INET或AF_INET6
  返回'xx.xx.xx.xx'ipv4地址或'xx:xx:xx..'ipv6地址
+-*/+-*/+-*/inet_ntoa f 将二进制数据格式的ip地址转为可读的字符串(ipv4)
inet_ntoa(packed_ip)
  返回'xx.xx.xx.xx'ipv4地址
+-*/+-*/+-*/NI_NOFQDN d         使用完全限定名
+-*/+-*/+-*/NI_NUMERICHOST d    地址用带点数字字符串表示
+-*/+-*/+-*/NI_NUMERICSERV d    端口用数字字符串表示
+-*/+-*/+-*/NI_NAMEREQD d       请求主机名，如没有任何DNS名称则报错
+-*/+-*/+-*/NI_DGRAM d          查询UDP服务而不是TCP服务
+-*/+-*/+-*/AI_ADDRCONFIG d  查询配置的地址类型
+-*/+-*/+-*/AI_ALL d         查找ipv4和ipv6地址(和AI_V4MAPPED连用)
+-*/+-*/+-*/AI_CANONNAME d   获取规范名(不是别名)
+-*/+-*/+-*/AI_NUMERICHOST d 地址用带点数字字符串表示
+-*/+-*/+-*/AI_NUMERICSERV d 端口用数字字符串表示
+-*/+-*/+-*/AI_PASSIVE d     地址用于监听
+-*/+-*/+-*/AI_V4MAPPED d    如未找到ipv6地址则使用ipv4地址
+-*/+-*/+-*/AF_INET6 d ipv6
+-*/+-*/+-*/AF_UNIX d unix域
+-*/+-*/+-*/AF_INET d ipv4
+-*/+-*/+-*/SOCK_RAW d 原始类型(对原始协议的最底层数据处理)
+-*/+-*/+-*/SOCK_DGRAM d 数据报类型(UDP)
+-*/+-*/+-*/SOCK_STREAM d 数据流类型(TCP)
+-*/+-*/+-*/IPPROTO_AH d ipv6验证报头
+-*/+-*/+-*/IPPROTO_DSTOPTS d ipv6目标选项
+-*/+-*/+-*/IPPROTO_EGP d 外部网关协议
+-*/+-*/+-*/IPPROTO_ESP d 封装安全负载的ipv6
+-*/+-*/+-*/IPPROTO_FRAGMENT d ipv6报头片段
+-*/+-*/+-*/IPPROTO_GRE d 通用路由封装
+-*/+-*/+-*/IPPROTO_HOPOPTS d ipv6逐跳选项
+-*/+-*/+-*/IPPROTO_ICMP d ipv4 ICMP
+-*/+-*/+-*/IPPROTO_ICMPV6 d ipv6 ICMP
+-*/+-*/+-*/IPPROTO_IDP d XNS IDP
+-*/+-*/+-*/IPPROTO_IGMP d 组管理协议
+-*/+-*/+-*/IPPROTO_IP d ipv4
+-*/+-*/+-*/IPPROTO_IPIP d ip内部ip
+-*/+-*/+-*/IPPROTO_IPV6 d ipv6
+-*/+-*/+-*/IPPROTO_NONE d ipv6没有下一个报头
+-*/+-*/+-*/IPPROTO_PIM d 多播
+-*/+-*/+-*/IPPROTO_PUP d
+-*/+-*/+-*/IPPROTO_RAW d 原始ip数据包
+-*/+-*/+-*/IPPROTO_TCP d TCP
+-*/+-*/+-*/IPPROTO_UDP d UDP
+-*/+-*/+-*/IPPROTO_ROUTING d ipv6路由报头
+-*/+-*/+-*/SHUT_RD d   关闭读(无法再接收数据)
+-*/+-*/+-*/SHUT_WR d   关闭写(无法再发送数据)
+-*/+-*/+-*/SHUT_RDWR d 关闭读写(不再发送接收数据)
+-*/+-*/+-*/SOL_SOCKET d    套接字有关的选项
+-*/+-*/+-*/SO_ACCEPTCONN d 是否能监听(0,1)(只读)
+-*/+-*/+-*/SO_BROADCAST d 是否允许发送广播(0,1)
+-*/+-*/+-*/SO_DEBUG d 是否记录调试信息(0,1)
+-*/+-*/+-*/SO_DONTROUTE d 是否绕过路由表(0,1)
+-*/+-*/+-*/SO_ERROR d 错误状态(整数)(只读)
+-*/+-*/+-*/SO_KEEPALIVE d 是否保持连接(0,1)
+-*/+-*/+-*/SO_LINGER d 未发送完时将延迟关闭
struct.pack('ii') 第一个i为(0,1)是否延迟 第二个i为延迟秒数
+-*/+-*/+-*/SO_OOBINLINE d 是否使用带外OOB数据(0,1)
+-*/+-*/+-*/SO_RCVBUF d 接收缓冲区的大小(整数)
+-*/+-*/+-*/SO_RCVLOWAT d 接收数据操作时获取的最小数据量(整数)
SO_RCVLOWAT
  select,poll判断为可读的最小数据量,默认为1
+-*/+-*/+-*/SO_RCVTIMEO d 接收超时设置
struct.pack('ii') 第一个i为秒数 第二个i为毫秒数 二者都为0时禁止超时
+-*/+-*/+-*/SO_REUSEADDR d 是否可重用(0,1)(通常用于服务端端口)
+-*/+-*/+-*/SO_SNDBUF d 发送缓冲区的大小(整数)
+-*/+-*/+-*/SO_SNDLOWAT d 发送数据操作时获取的最小数据量(整数)
SO_SNDLOWAT
  select,poll判断为可写的最小数据量,默认为2048
+-*/+-*/+-*/SO_SNDTIMEO d 发送超时设置
struct.pack('ii') 第一个i为秒数 第二个i为毫秒数 二者都为0时禁止超时
+-*/+-*/+-*/SO_TYPE d 套接字类型(整数)(只读)
+-*/+-*/+-*/SO_USELOOPBACK d 是否接收其发送的数据(仅用于AF_ROUTE)(0,1)(个别系统可用)
+-*/+-*/+-*/IP_ADD_MEMBERSHIP d 加入多播组(接收方)
struct.pack('ii') 第一个i为多播32位ip地址 第二个i为INADDR_ANY
通常由两个inet_aton产生的字节字符串相连组成
多播地址有效范围 224.0.0.0 -- 239.255.255.255
+-*/+-*/+-*/IP_DEFAULT_MULTICAST_LOOP d 默认是否回路(0,1)
+-*/+-*/+-*/IP_DEFAULT_MULTICAST_TTL d 默认存活周期TTL(小于256的4的幂整数)
+-*/+-*/+-*/INADDR_ANY d 0.0.0.0的ipv4数值地址
+-*/+-*/+-*/INADDR_BROADCASE d 广播地址的ipv4数值地址
+-*/+-*/+-*/INADDR_LOOPBACK d 127.0.0.1的ipv4数值地址
+-*/+-*/+-*/IP_DROP_MEMBERSHIP d 离开多播组
struct.pack('ii') 第一个i为多播32位ip地址 第二个i为本地32位ip地址 
通常由两个inet_aton产生的字节字符串相连组成
多播地址有效范围 224.0.0.0 -- 239.255.255.255
+-*/+-*/+-*/IP_HDRINCL d 自定义ip报头(整数)
+-*/+-*/+-*/IP_MAX_MEMBERSHIPS d 多播组的最大成员数(整数)
+-*/+-*/+-*/IP_MULTICAST_IF d 外出接口地址(4字节字符串,通常由inet_aton产生)
+-*/+-*/+-*/IP_MULTICAST_LOOP d 是否回路(0,1)
+-*/+-*/+-*/IP_MULTICAST_TTL d 存活周期TTL(小于256的4的幂整数)
+-*/+-*/+-*/IP_OPTIONS d ip报头选项(不超过44字节)
+-*/+-*/+-*/IP_RECVDSTADDR d 是否接收数据报的ip目标地址(0,1)(个别系统可用)
+-*/+-*/+-*/IP_RECVOPTS d 是否接收数据报的所有ip选项(0,1)
+-*/+-*/+-*/IP_RECVRETOPTS d 是否接收响应的所有ip选项(0,1)
+-*/+-*/+-*/IP_RETOPTS d 是否接收数据报的ip选项(不含时间戳和路由记录)(0,1)
+-*/+-*/+-*/IP_TOS d 服务类型和优先权(整数)
+-*/+-*/+-*/IP_TTL d 存活周期TTL(小于256的4的幂整数)
+-*/+-*/+-*/IPV6_CHECKSUM d 
+-*/+-*/+-*/IPV6_DSTOPTS d 
+-*/+-*/+-*/IPV6_HOPLIMIT d
+-*/+-*/+-*/IPV6_HOPOPTS d
+-*/+-*/+-*/IPV6_JOIN_GROUP d
+-*/+-*/+-*/IPV6_LEAVE_GROUP d
+-*/+-*/+-*/IPV6_MULTICAST_HOPS d
+-*/+-*/+-*/IPV6_MULTICAST_IF d
+-*/+-*/+-*/IPV6_MULTICAST_LOOP d
+-*/+-*/+-*/IPV6_NEXTHOP d
+-*/+-*/+-*/IPV6_PKTINFO d
+-*/+-*/+-*/IPV6_RECVDSTOPTS d
+-*/+-*/+-*/IPV6_RECVHOPLIMIT d
+-*/+-*/+-*/IPV6_RECVHOPOPTS d
+-*/+-*/+-*/IPV6_RECVPKTINFO d
+-*/+-*/+-*/IPV6_RECVRTHDR d
+-*/+-*/+-*/IPV6_RECVTCLASS d
+-*/+-*/+-*/IPV6_RTHDR d
+-*/+-*/+-*/IPV6_RTHDRDSTOPTS d
+-*/+-*/+-*/IPV6_RTHDR_TYPE_0 d
+-*/+-*/+-*/IPV6_TCLASS d
+-*/+-*/+-*/IPV6_UNICAST_HOPS d
+-*/+-*/+-*/IPV6_V6ONLY d
+-*/+-*/+-*/TCP_CORK d 
+-*/+-*/+-*/TCP_DEFER_ACCEPT d 
+-*/+-*/+-*/TCP_INFO d 
+-*/+-*/+-*/TCP_KEEPCNT d 保持连接时无响应消息的最大数量(整数)
只有SO_KEEPALIVE打开时才有效
+-*/+-*/+-*/TCP_KEEPIDLE d 保持连接时最大空闲时间秒数(整数)(默认2小时即7200)
只有SO_KEEPALIVE打开时才有效
+-*/+-*/+-*/TCP_KEEPINTVL d 保持连接时发送探测消息的间隔秒数(整数)
只有SO_KEEPALIVE打开时才有效
+-*/+-*/+-*/TCP_LINGER2 d 
+-*/+-*/+-*/TCP_MAXSEG d 传出数据包的最大片段大小MSS(整数)
+-*/+-*/+-*/TCP_NODELAY d 是否禁用nagle算法(0,1)(默认是不禁用)
通常发送数据尽可能一次发送大量数据而不是多次发送少量数据
如果非要多次发送少量数据可以设置此选项为禁用
+-*/+-*/+-*/TCP_QUICKACK d 是否禁用ACK算法(0,1)(默认是不禁用)
+-*/+-*/+-*/TCP_SYNCNT d 
+-*/+-*/+-*/TCP_WINDOW_CLAMP d TCP窗口大小上限(整数)
+-*/+-*/+-*/RCVALL_OFF d  禁止接收ip数据包
+-*/+-*/+-*/RCVALL_ON d   接收所有ip数据包
+-*/+-*/+-*/MSG_DONTROUTE d   数据只在本地网
+-*/+-*/+-*/MSG_DONTWAIT d 非阻塞模式
+-*/+-*/+-*/MSG_PEEK d 预取数据(不更改接收缓冲)
+-*/+-*/+-*/MSG_TRUNC d    即使报文截断也返回原始报文数据长度
+-*/+-*/+-*/MSG_OOB d 处理带外数据OOB
+-*/+-*/+-*/MSG_WAITALL d 按最大接收数据量接收数据(不足时会等待)
+-*/+-*/+-*/has_ipv6 d 系统支持ipv6时为True
+-*/+-*/+-*/error e 套接字模块错误(errno,mesg)
+-*/+-*/+-*/+-*/timeout e 超时错误'timeout'
+-*/+-*/+-*/+-*/gaierror e 查询地址错误(errno,mesg)
+-*/+-*/+-*/+-*/herror e 地址有关的错误(errno,mesg)
+-*/+-*/+-*/fromfd f 由文件描述符创建socket套接字对象
fromfd(fd, family, type[, proto])
  fd:   文件描述符，一般应指向套接字(通常由其他创建的套接字获得)
  family: 地址簇
      socket.AF_INET   ipv4
      socket.AF_INET6  ipv6
      socket.AF_UNIX   unix域
  type:  
      socket.SOCK_DGRAM   数据报类型(UDP)(一般无需再指定proto)
      socket.SOCK_STREAM  数据流类型(TCP)(一般无需再指定proto)
      socket.SOCK_RAW     原始类型(如指定proto一般使用此类型)(unix需要root权限)
  proto:
      socket.IPPROTO_AH       ipv6验证报头
      socket.IPPROTO_DSTOPTS  ipv6目标选项
      socket.IPPROTO_EGP      外部网关协议
      socket.IPPROTO_ESP      封装安全负载的ipv6
      socket.IPPROTO_FRAGMENT ipv6报头片段
      socket.IPPROTO_GRE      通用路由封装
      socket.IPPROTO_HOPOPTS  ipv6逐跳选项
      socket.IPPROTO_ICMP     ipv4 ICMP
      socket.IPPROTO_ICMPV6   ipv6 ICMP
      socket.IPPROTO_IDP      XNS IDP
      socket.IPPROTO_IGMP     组管理协议
      socket.IPPROTO_IP       ipv4
      socket.IPPROTO_IPIP     ip内部ip
      socket.IPPROTO_IPV6     ipv6报头
      socket.IPPROTO_NONE     ipv6没有下一个报头
      socket.IPPROTO_PIM      多播
      socket.IPPROTO_PUP
      socket.IPPROTO_RAW      原始ip数据包
      socket.IPPROTO_TCP      TCP
      socket.IPPROTO_UDP      UDP
      socket.IPPROTO_ROUTING  ipv6路由报头
+-*/+-*/+-*/socket f 创建套接字socket对象
socket([family[, type[, proto]]])
  family: 地址簇
      socket.AF_INET   ipv4
      socket.AF_INET6  ipv6
      socket.AF_UNIX   unix域
  type:  
      socket.SOCK_DGRAM   数据报类型(UDP)(一般无需再指定proto)
      socket.SOCK_STREAM  数据流类型(TCP)(一般无需再指定proto)
      socket.SOCK_RAW     原始类型(如指定proto一般使用此类型)(unix需要root权限)
  proto:
      socket.IPPROTO_AH       ipv6验证报头
      socket.IPPROTO_DSTOPTS  ipv6目标选项
      socket.IPPROTO_EGP      外部网关协议
      socket.IPPROTO_ESP      封装安全负载的ipv6
      socket.IPPROTO_FRAGMENT ipv6报头片段
      socket.IPPROTO_GRE      通用路由封装
      socket.IPPROTO_HOPOPTS  ipv6逐跳选项
      socket.IPPROTO_ICMP     ipv4 ICMP
      socket.IPPROTO_ICMPV6   ipv6 ICMP
      socket.IPPROTO_IDP      XNS IDP
      socket.IPPROTO_IGMP     组管理协议
      socket.IPPROTO_IP       ipv4
      socket.IPPROTO_IPIP     ip内部ip
      socket.IPPROTO_IPV6     ipv6报头
      socket.IPPROTO_NONE     ipv6没有下一个报头
      socket.IPPROTO_PIM      多播
      socket.IPPROTO_PUP
      socket.IPPROTO_RAW      原始ip数据包
      socket.IPPROTO_TCP      TCP
      socket.IPPROTO_UDP      UDP
      socket.IPPROTO_ROUTING  ipv6路由报头
+-*/+-*/+-*/+-*/type d 套接字类型(只读)
type
      socket.SOCK_DGRAM   数据报类型(UDP)(一般无需再指定proto)
      socket.SOCK_STREAM  数据流类型(TCP)(一般无需再指定proto)
      socket.SOCK_RAW     原始类型(如指定proto一般使用此类型)
+-*/+-*/+-*/+-*/family d 套接字的地址簇(只读)
family
      socket.AF_INET   ipv4
      socket.AF_INET6  ipv6
      socket.AF_UNIX   unix域
+-*/+-*/+-*/+-*/proto d 套接字的协议(只读)
+-*/+-*/+-*/+-*/getsockname m 返回套接字对应的本地地址和端口(通常只用于ipv4、6)
getsockname()
    返回(ip地址字符串,port端口整数)二元组
+-*/+-*/+-*/+-*/getpeername m 返回套接字对应的对端地址和端口(通常只用于ipv4、6)
getpeername()
    返回(ip地址字符串,port端口整数)二元组
+-*/+-*/+-*/+-*/gettimeout m 获取超时时长的设置值
gettimeout()
  None表示阻塞模式,0表示非阻塞模式,其他表示超时时长秒数
+-*/+-*/+-*/+-*/settimeout m 设置套接字操作的超时时长秒数浮点数
settimeout(value)
  value:  None表示阻塞模式,0或其它数字表示非阻塞模式
  如设有超时时长，超时时会产生socket.timeout错误
+-*/+-*/+-*/+-*/accept m 等待并接受一个请求连接
accept()
  套接字在调用此操作前应先bind和listen
  返回(新建连接的套接字socket对象,(对端ip地址字符串,对端端口号))二元组
+-*/+-*/+-*/+-*/connect m 连接远程(未成功则报错)
connect(address)
  address:  通常为(host,port),如果是其他地址簇可能有所不同,连接本机host可用'localhost'
  如果使用unix域协议,address为文件名
+-*/+-*/+-*/+-*/shutdown m 关闭连接
shutdown(how)
  how:  
      socket.SHUT_RD   关闭读(无法再接收数据)
      socket.SHUT_WR   关闭写(无法再发送数据)
      socket.SHUT_RDWR 关闭读写(不再发送接收数据)
  关闭的同时也会清空相应的缓冲
+-*/+-*/+-*/+-*/close m 关闭套接字 
close()
  关闭套接字以后再作其他操作bind,send等等都会失败
  如果底层套接字文件描述符没有被其它引用，关闭套接字同时也会关闭连接
  如果文件描述符的计数器不为0，关闭套接字并不会关闭连接
+-*/+-*/+-*/+-*/getsockopt m 获取有关选项的信息
getsockopt(level, optname[, buflen])
  level:
       socket.SOL_SOCKET    套接字有关的选项
       socket.IPPROTO_IP    ipv4有关的选项
       socket.IPPROTO_IPV6  ipv6有关的选项
       socket.SOL_TCP       tcp有关的选项
  optname:
       socket.SO_* socket.IP_* socket.IPV6_* socket.TCP_*
  buflen:
       非整数选项时，获取选项内容(字节字符串)的长度，通常用struct.unpack解数据
+-*/+-*/+-*/+-*/connect_ex m 连接远程(超时不会报错)
connect_ex(address)
  address:  通常为(host,port),如果是其他地址簇可能有所不同,连接本机host可用'localhost'
  如成功连接则返回0，未成功则返回错误编号
+-*/+-*/+-*/+-*/makefile m 创建文件对象来操作网络数据
makefile(mode='r', buffering=None, *, encoding=None, errors=None, newline=None)
  mode: r读 w写 
  encoding: 如'utf-8'这样的编码名称
  errors: 'strict'  如有错误，引发UnicodeError
          'ignore'  忽略无效字符
          'replace' 将无效字符替换为一个字符(Unicode里的U+FFFD或标准字符'?')
          'backslashreplace' 将无效字符替换为python转义字符，如'\u1234'
          'xmlcharrefreplace' 将无效字符替换为XML转义字符，如'&#4660;'
  newline: None,' ','\n','\r','\r\n' 控制换行模式
  套接字对象不能设置超时(即不能为非阻塞模式)
  关闭此操作产生的文件对象并不会关闭套接字
+-*/+-*/+-*/+-*/recv_into m 接收数据并放入缓冲，返回实际接收的数据量
recv_into(buffer[, nbytes[, flags]])
  buffer:   通常为ctype,array等的缓冲对象
  nbytes:   最大接收数据量,如为0或未给出则以缓冲的可用空间为最大数据量
  flags:     默认为0，可由以下选项按位生成
        socket.MSG_TRUNC      即使报文截断也返回原始报文数据长度
        socket.MSG_PEEK       预取数据(不更改接收缓冲)
        socket.MSG_OOB        处理带外数据OOB
        socket.MSG_WAITALL    按最大接收数据量接收数据(不足时会等待)
+-*/+-*/+-*/+-*/listen m 开始监听传入连接
listen(backlog)
  backlog:  等待连接队列的最大数量(通常为5)(最小为1)
  通常要先bind,对于端口固定的服务端来说往往在bind前还要
  setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+-*/+-*/+-*/+-*/fileno m 返回套接字文件描述符(通常用于select)
+-*/+-*/+-*/+-*/ioctl m 设置套接字模式(windows)
ioctl(control, option)
  control:    socket.SIO_RCVALL
  option:
        socket.RCVALL_OFF   禁止接收ip数据包
        socket.RCVALL_ON    接收所有ip数据包
+-*/+-*/+-*/+-*/detach m 关闭套接字socket对象(不操作底层描述符),返回套接字文件描述符
+-*/+-*/+-*/+-*/recv m 接收数据，返回字节字符串
recv(bufsize[, flags])
  bufsize:   最大接收数据量(最好是2的指数)
  flags:     默认为0，可由以下选项按位生成
        socket.MSG_TRUNC      即使报文截断也返回原始报文数据长度
        socket.MSG_PEEK       预取数据(不更改接收缓冲)
        socket.MSG_OOB        处理带外数据OOB
        socket.MSG_WAITALL    按最大接收数据量接收数据(不足时会等待)
+-*/+-*/+-*/+-*/setblocking m 设置阻塞模式或非阻塞模式
setblocking(flag)
  flag:  True则为阻塞模式，False为非阻塞模式
  setblocking(True)等同于settimeout(None)
  setblocking(False)等同于settimeout(0.0)
+-*/+-*/+-*/+-*/setsockopt m 设置有关选项 
setsockopt(level, optname, value)
  level:
       socket.SOL_SOCKET    套接字有关的选项
       socket.IPPROTO_IP    ipv4有关的选项
       socket.IPPROTO_IPV6  ipv6有关的选项
       socket.SOL_TCP       tcp有关的选项
  optname:
       socket.SO_* socket.IP_* socket.IPV6_* socket.TCP_*
  value:
       大多数选项为整数，
       非整数的选项此值应为打包好的字节字符串，通常用struct.pack打包
+-*/+-*/+-*/+-*/bind m 将套接字绑定到某端口上
bind(address)
  address:  (hostname,port)
            hostname可以是''表示任意地址
            port端口号(unix下有时1024以下端口是需要权限的)
  通常需要setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  如果使用unix域协议,address为文件名
+-*/+-*/+-*/+-*/recvfrom m 接收数据,返回(字节字符串,对端地址)二元组(通常用于UDP)
recvfrom(bufsize[, flags])
  bufsize:   最大接收数据量(最好是2的指数)
  flags:     默认为0，可由以下选项按位生成
        socket.MSG_TRUNC      即使报文截断也返回原始报文数据长度
        socket.MSG_PEEK       预取数据(不更改接收缓冲)
        socket.MSG_OOB        处理带外数据OOB
        socket.MSG_WAITALL    按最大接收数据量接收数据(不足时会等待)
  返回的对端地址通常是(对端ip地址字符串,对端port端口整数))二元组形式
  接受多播要设置IP_ADD_MEMBERSHIP才能接受
+-*/+-*/+-*/+-*/recvfrom_into m 接收数据并放入缓冲，返回(实际接收量,对端地址)二元组
recvfrom_into(buffer[, nbytes[, flags]])
  buffer:   通常为ctype,array等的缓冲对象
  nbytes:   最大接收数据量,如为0或未给出则以缓冲的可用空间为最大数据量
  flags:     默认为0，可由以下选项按位生成
        socket.MSG_TRUNC      即使报文截断也返回原始报文数据长度
        socket.MSG_PEEK       预取数据(不更改接收缓冲)
        socket.MSG_OOB        处理带外数据OOB
        socket.MSG_WAITALL    按最大接收数据量接收数据(不足时会等待)
  返回的对端地址通常是(对端ip地址字符串,对端port端口整数))二元组形式
+-*/+-*/+-*/+-*/send m 发送数据,返回实际发送量
send(bytes[, flags])
  bytes:   字节字符串数据
  flags:   默认为0，可由以下选项按位生成
        socket.MSG_DONTROUTE   数据只在本地网
        socket.MSG_DONTWAIT    非阻塞模式
        socket.MSG_OOB         处理带外数据OOB
+-*/+-*/+-*/+-*/sendto m 发送数据到某地址,返回实际发送量(主要用于UDP)
sendto(bytes[, flags], address)
  bytes:   字节字符串数据
  flags:   默认为0，可由以下选项按位生成
        socket.MSG_DONTROUTE   数据只在本地网
        socket.MSG_DONTWAIT    非阻塞模式
        socket.MSG_OOB         处理带外数据OOB
  address:  通常为(host,port),如果是其他地址簇可能有所不同,
        连接本机host可用'localhost',
        广播地址'broadcast'(需设置SO_BROADCAST,接收方只需bind相应端口即可)
        多播发送通常要先设置IP_MULTICAST_TTL为1才能正确发送
        (接收方要设置IP_ADD_MEMBERSHIP才能接受)
+-*/+-*/+-*/+-*/sendall m 发送全部数据
sendall(bytes[, flags])
  bytes:   字节字符串数据
  flags:   默认为0，可由以下选项按位生成
        socket.MSG_DONTROUTE   数据只在本地网
        socket.MSG_DONTWAIT    非阻塞模式
        socket.MSG_OOB         处理带外数据OOB
+-*/+-*/ssl p ssl支持模块
TODO:
创建SSL客户端连接:
import socket,ssl
s = ssl.wrap_socket(socket.socket(socket.AF_INET,socket.SOCK_STREAM))
s.connect(('gmail.google.com',443))
s.write(b'GET / HTTP/1.0\r\n\r\n')
out = s.read()
创建SSL服务端:
import socket,ssl
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('',12345))
s.listen(5)
while 1:
  client,addr = s.accept()
  ss = ssl.wrap_socket(client, server_side=True, certfile='xx.pem')
  ss.sendall(...)
生成证书xx.pem可使用以下命令
openssl req -new -x509 -days 365 -nodes -out xx.pem -keyout xx.pem
+-*/+-*/+-*/cert_time_to_seconds f 转换证书格式的时间字符串为浮点秒数
cert_time_to_seconds(timestring)
  >>> import ssl
  >>> ssl.cert_time_to_seconds("May  9 00:00:00 2007 GMT")
  1178694000.0
  >>> import time
  >>> time.ctime(ssl.cert_time_to_seconds("May  9 00:00:00 2007 GMT"))
  'Wed May  9 00:00:00 2007'
+-*/+-*/+-*/match_hostname f 
match_hostname(cert, hostname)

Verify that *cert* (in decoded format as returned by
:meth:`SSLSocket.getpeercert`) matches the given *hostname*.  The rules
applied are those for checking the identity of HTTPS servers as outlined
in :rfc:`2818`, except that IP addresses are not currently supported.
In addition to HTTPS, this function should be suitable for checking the
identity of servers in various SSL-based protocols such as FTPS, IMAPS,
POPS and others.

:exc:`CertificateError` is raised on failure. On success, the function
returns nothing::

   >>> cert = {'subject': ((('commonName', 'example.com'),),)}
   >>> ssl.match_hostname(cert, "example.com")
   >>> ssl.match_hostname(cert, "example.org")
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
     File "/home/py3k/Lib/ssl.py", line 130, in match_hostname
   ssl.CertificateError: hostname 'example.org' doesn't match 'example.com'

.. versionadded:: 3.2


+-*/+-*/+-*/DER_cert_to_PEM_cert f 转换DER编码证书为PEM编码
DER_cert_to_PEM_cert(DER_cert_bytes)
+-*/+-*/+-*/get_server_certificate f 从SSL服务器获取证书返回PEM编码字符串
get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None)
  addr:      (host,port)
  ca_certs:  用于验证的授权证书文件名
+-*/+-*/+-*/PEM_cert_to_DER_cert f 转换PEM编码证书为DER编码
PEM_cert_to_DER_cert(PEM_cert_string)
+-*/+-*/+-*/RAND_egd f 
RAND_egd(path)

If you are running an entropy-gathering daemon (EGD) somewhere, and ``path``
is the pathname of a socket connection open to it, this will read 256 bytes
of randomness from the socket, and add it to the SSL pseudo-random number
generator to increase the security of generated secret keys.  This is
typically only necessary on systems without better sources of randomness.

See http://egd.sourceforge.net/ or http://prngd.sourceforge.net/ for sources
of entropy-gathering daemons.


+-*/+-*/+-*/RAND_add f 
RAND_add(bytes, entropy)

Mixes the given ``bytes`` into the SSL pseudo-random number generator.  The
parameter ``entropy`` (a float) is a lower bound on the entropy contained in
string (so you can always use :const:`0.0`).  See :rfc:`1750` for more
information on sources of entropy.


+-*/+-*/+-*/RAND_status f 
RAND_status()

Returns True if the SSL pseudo-random number generator has been seeded with
'enough' randomness, and False otherwise.  You can use :func:`ssl.RAND_egd`
and :func:`ssl.RAND_add` to increase the randomness of the pseudo-random
number generator.


+-*/+-*/+-*/OP_NO_SSLv3 d 
OP_NO_SSLv3

Prevents an SSLv3 connection.  This option is only applicable in
conjunction with :const:`PROTOCOL_SSLv23`.  It prevents the peers from
choosing SSLv3 as the protocol version.

.. versionadded:: 3.2


+-*/+-*/+-*/OP_NO_SSLv2 d 
OP_NO_SSLv2

Prevents an SSLv2 connection.  This option is only applicable in
conjunction with :const:`PROTOCOL_SSLv23`.  It prevents the peers from
choosing SSLv2 as the protocol version.

.. versionadded:: 3.2


+-*/+-*/+-*/CERT_NONE d 忽略证书
+-*/+-*/+-*/CERT_REQUIRED d 需要证书并验证
+-*/+-*/+-*/CERT_OPTIONAL d 不需要证书，但给的话会验证 
+-*/+-*/+-*/OP_NO_TLSv1 d 
OP_NO_TLSv1

Prevents a TLSv1 connection.  This option is only applicable in
conjunction with :const:`PROTOCOL_SSLv23`.  It prevents the peers from
choosing TLSv1 as the protocol version.

.. versionadded:: 3.2


+-*/+-*/+-*/OPENSSL_VERSION d 
OPENSSL_VERSION

The version string of the OpenSSL library loaded by the interpreter::

 >>> ssl.OPENSSL_VERSION
 'OpenSSL 0.9.8k 25 Mar 2009'

.. versionadded:: 3.2


+-*/+-*/+-*/OPENSSL_VERSION_INFO d 
OPENSSL_VERSION_INFO

A tuple of five integers representing version information about the
OpenSSL library::

 >>> ssl.OPENSSL_VERSION_INFO
 (0, 9, 8, 11, 15)

.. versionadded:: 3.2


+-*/+-*/+-*/OPENSSL_VERSION_NUMBER d 
OPENSSL_VERSION_NUMBER

The raw version number of the OpenSSL library, as a single integer::

 >>> ssl.OPENSSL_VERSION_NUMBER
 9470143
 >>> hex(ssl.OPENSSL_VERSION_NUMBER)
 '0x9080bf'

.. versionadded:: 3.2



+-*/+-*/+-*/PROTOCOL_SSLv2 d 
PROTOCOL_SSLv2

Selects SSL version 2 as the channel encryption protocol.

This protocol is not available if OpenSSL is compiled with OPENSSL_NO_SSL2
flag.

.. warning::

   SSL version 2 is insecure.  Its use is highly discouraged.


+-*/+-*/+-*/PROTOCOL_SSLv23 d 
PROTOCOL_SSLv23

Selects SSL version 2 or 3 as the channel encryption protocol.  This is a
setting to use with servers for maximum compatibility with the other end of
an SSL connection, but it may cause the specific ciphers chosen for the
encryption to be of fairly low quality.


+-*/+-*/+-*/PROTOCOL_TLSv1 d 
PROTOCOL_TLSv1

Selects TLS version 1 as the channel encryption protocol.  This is the most
modern version, and probably the best choice for maximum protection, if both
sides can speak it.


+-*/+-*/+-*/PROTOCOL_SSLv3 d 
PROTOCOL_SSLv3

Selects SSL version 3 as the channel encryption protocol.  For clients, this
is the maximally compatible SSL variant.


+-*/+-*/+-*/HAS_SNI d 
HAS_SNI

Whether the OpenSSL library has built-in support for the *Server Name
Indication* extension to the SSLv3 and TLSv1 protocols (as defined in
:rfc:`4366`).  When true, you can use the *server_hostname* argument to
:meth:`SSLContext.wrap_socket`.

.. versionadded:: 3.2


+-*/+-*/+-*/OP_ALL d 
OP_ALL

Enables workarounds for various bugs present in other SSL implementations.
This option is set by default.

.. versionadded:: 3.2


+-*/+-*/+-*/SSLError e 
SSLError

Raised to signal an error from the underlying SSL implementation
(currently provided by the OpenSSL library).  This signifies some
problem in the higher-level encryption and authentication layer that's
superimposed on the underlying network connection.  This error
is a subtype of :exc:`socket.error`, which in turn is a subtype of
:exc:`IOError`.  The error code and message of :exc:`SSLError` instances
are provided by the OpenSSL library.


+-*/+-*/+-*/CertificateError e 
CertificateError

Raised to signal an error with a certificate (such as mismatching
hostname).  Certificate errors detected by OpenSSL, though, raise
an :exc:`SSLError`.



+-*/+-*/+-*/SSLContext c 
SSLContext(protocol)

Create a new SSL context.  You must pass *protocol* which must be one
of the ``PROTOCOL_*`` constants defined in this module.
:data:`PROTOCOL_SSLv23` is recommended for maximum interoperability.



+-*/+-*/+-*/+-*/protocol d 
protocol

The protocol version chosen when constructing the context.  This attribute
is read-only.


+-*/+-*/+-*/+-*/verify_mode d 
verify_mode

Whether to try to verify other peers' certificates and how to behave
if verification fails.  This attribute must be one of
:data:`CERT_NONE`, :data:`CERT_OPTIONAL` or :data:`CERT_REQUIRED`.



+-*/+-*/+-*/+-*/options d 
options

An integer representing the set of SSL options enabled on this context.
The default value is :data:`OP_ALL`, but you can specify other options
such as :data:`OP_NO_SSLv2` by ORing them together.

.. note::
   With versions of OpenSSL older than 0.9.8m, it is only possible
   to set options, not to clear them.  Attempting to clear an option
   (by resetting the corresponding bits) will raise a ``ValueError``.


+-*/+-*/+-*/+-*/load_verify_locations m 
load_verify_locations(cafile=None, capath=None)

Load a set of "certification authority" (CA) certificates used to validate
other peers' certificates when :data:`verify_mode` is other than
:data:`CERT_NONE`.  At least one of *cafile* or *capath* must be specified.

The *cafile* string, if present, is the path to a file of concatenated
CA certificates in PEM format. See the discussion of
:ref:`ssl-certificates` for more information about how to arrange the
certificates in this file.

The *capath* string, if present, is
the path to a directory containing several CA certificates in PEM format,
following an `OpenSSL specific layout
<http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>`_.


+-*/+-*/+-*/+-*/set_ciphers m 
set_ciphers(ciphers)

Set the available ciphers for sockets created with this context.
It should be a string in the `OpenSSL cipher list format
<http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>`_.
If no cipher can be selected (because compile-time options or other
configuration forbids use of all the specified ciphers), an
:class:`SSLError` will be raised.

.. note::
   when connected, the :meth:`SSLSocket.cipher` method of SSL sockets will
   give the currently selected cipher.


+-*/+-*/+-*/+-*/wrap_socket m 
wrap_socket(sock, server_side=False, \
   do_handshake_on_connect=True, suppress_ragged_eofs=True, \
   server_hostname=None)

Wrap an existing Python socket *sock* and return an :class:`SSLSocket`
object.  The SSL socket is tied to the context, its settings and
certificates.  The parameters *server_side*, *do_handshake_on_connect*
and *suppress_ragged_eofs* have the same meaning as in the top-level
:func:`wrap_socket` function.

On client connections, the optional parameter *server_hostname* specifies
the hostname of the service which we are connecting to.  This allows a
single server to host multiple SSL-based services with distinct certificates,
quite similarly to HTTP virtual hosts.  Specifying *server_hostname*
will raise a :exc:`ValueError` if the OpenSSL library doesn't have support
for it (that is, if :data:`HAS_SNI` is :const:`False`).  Specifying
*server_hostname* will also raise a :exc:`ValueError` if *server_side*
is true.


+-*/+-*/+-*/+-*/load_cert_chain m 
load_cert_chain(certfile, keyfile=None)

Load a private key and the corresponding certificate.  The *certfile*
string must be the path to a single file in PEM format containing the
certificate as well as any number of CA certificates needed to establish
the certificate's authenticity.  The *keyfile* string, if present, must
point to a file containing the private key in.  Otherwise the private
key will be taken from *certfile* as well.  See the discussion of
:ref:`ssl-certificates` for more information on how the certificate
is stored in the *certfile*.

An :class:`SSLError` is raised if the private key doesn't
match with the certificate.


+-*/+-*/+-*/+-*/session_stats m 
session_stats()

Get statistics about the SSL sessions created or managed by this context.
A dictionary is returned which maps the names of each `piece of information
<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>`_ to their
numeric values.  For example, here is the total number of hits and misses
in the session cache since the context was created::

   >>> stats = context.session_stats()
   >>> stats['hits'], stats['misses']
   (0, 0)


+-*/+-*/+-*/+-*/set_default_verify_paths m 
set_default_verify_paths()

Load a set of default "certification authority" (CA) certificates from
a filesystem path defined when building the OpenSSL library.  Unfortunately,
there's no easy way to know whether this method succeeds: no error is
returned if no certificates are to be found.  When the OpenSSL library is
provided as part of the operating system, though, it is likely to be
configured properly.


+-*/+-*/+-*/wrap_socket f 包装现有套接字对象创建SSL套接字对象
wrap_socket(sock, keyfile=None, certfile=None, server_side=False, 
    cert_reqs=CERT_NONE, ssl_version={see docs}, ca_certs=None, 
    do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)
  sock:      套接字socket实例(通常应在connect或accept之前包装)
  server_side:  是以服务端(True)还是以客户端(False)操作
  keyfile:   本地密钥文件(PEM格式)
  certfile:  本地证书文件(PEM格式)
  cert_reqs: 对端是否需要证书或验证
      ssl.CERT_NONE      忽略证书
      ssl.CERT_REQUIRED  需要证书并验证
      ssl.CERT_OPTIONAL  不需要证书，但给的话会验证 
  ca_certs:  用于对端验证的授权证书文件
  do_handshake_on_connect:   是否自动对连接执行SSL握手，默认为True
  suppress_ragged_eofs:      read操作如何处理EOF,默认为True,为False则按异常处理
  ssl_version:  ssl版本,默认ssl.PROTOCOL_SSLv3
   客户端/服务端       SSLv2      SSLv3      SSLv23      TLSv1  
    SSLv2               yes        no         yes         no
    SSLv3               yes        yes        yes         no
    SSLv23              yes        no         yes         no
    TLSv1               no         no         yes         yes
+-*/+-*/+-*/+-*/context d 
context

The :class:`SSLContext` object this SSL socket is tied to.  If the SSL
socket was created using the top-level :func:`wrap_socket` function
(rather than :meth:`SSLContext.wrap_socket`), this is a custom context
object created for this SSL socket.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/read m 读取数据,返回字节字符串
read([n])
  n:  最多读取量，默认1024个字节
+-*/+-*/+-*/+-*/write m 写入数据,返回实际写入的字节数
write(data)
  data:  字节字符串
+-*/+-*/+-*/+-*/unwrap m 去除包装关闭SSL返回未加密的原套接字对象
+-*/+-*/+-*/+-*/cipher m 返回(密码名称,SSL协议版本,密码位数)三元组
+-*/+-*/+-*/+-*/do_handshake m 执行SSL握手(通常是自动进行)
+-*/+-*/+-*/+-*/getpeercert m 返回对象的证书
getpeercert(binary_form=False)
  binary_form:   是否以DER编码字节字符串形式返回证书，默认为False返回字典
  无证书返回None,未验证返回空字典(或空字节字符串)
  通常字典会包含'subject'和'notAfter'两项
   {'notAfter': 'Feb 16 16:54:50 2013 GMT',
    'subject': ((('countryName', 'US'),),
                (('stateOrProvinceName', 'Delaware'),),
                (('localityName', 'Wilmington'),),
                (('organizationName', 'Python Software Foundation'),),
                (('organizationalUnitName', 'SSL'),),
                (('commonName', 'somemachine.python.org'),))}
+-*/+-*/asynchat p 异步会话通讯模块
和asyncore一样创建会话对象后通常使用loop来管理通讯
+-*/+-*/+-*/fifo c 创建先进先出队列
fifo(list=None)
  list:   用此列表初始化队列
+-*/+-*/+-*/+-*/push m 存入数据
push(data)
+-*/+-*/+-*/+-*/is_empty m 
is_empty()

Returns ``True`` if and only if the fifo is empty.



+-*/+-*/+-*/+-*/pop m 按先进先出顺序取出一个数据
pop()
  如果队列为空返回(False,None),否则返回(True,数据)
+-*/+-*/+-*/+-*/first m 按先进先出顺序获取一个数据(只查看不取出)
first()
  如队列为空则报错
+-*/+-*/+-*/simple_producer c 简易数据产生器
simple_producer(data,buffer_size)
  包装data字节字符串为数据产生器,每次more出buffer_size大小的数据块
  主要用于async_chat.push_with_producer
+-*/+-*/+-*/async_chat t 异步会话基类
async_chat(sock=None, map=None)
  sock:  可指定管理的套接字对象,未给出需自行create_socket
  map:   可指定加入某个对象集,默认使用全局对象集
         通常在使用多线程时需要使用不同的对象集
  通常async_chat用于会话模式的一对一通讯
  (对于服务器async_chat主要用于accept后的套接字管理,监听等待仍使用dispatcher)
  往往先用set_terminator设定对话是以标识符为边界还是以长度为边界
  用collect_incoming_data定义如何收集数据
  当接受到完整的一次对话后found_terminator方法定义如何处理
+-*/+-*/+-*/+-*/ac_in_buffer_size d 接受缓冲大小(可自定义,默认4096)
+-*/+-*/+-*/+-*/ac_out_buffer_size d 发送缓冲大小(可自定义,默认4096)
+-*/+-*/+-*/+-*/get_terminator m 获取当前对话结束标记
get_terminator()
  返回字符串,则表示对话以此字符串为分隔符表示一次对话结束
  返回整数,则表示以收到term个字节的数据为一次对话
  如果是None,则表示不使用对话机制
+-*/+-*/+-*/+-*/set_terminator m 设定对话的模式
set_terminator(term)
  term:    如果是字符串,则收到此字符串时表示一次对话结束
           如果是整数,则表示收到term个字节的数据为一次对话
           如果是None,则表示不使用对话机制
+-*/+-*/+-*/+-*/discard_buffers m 清空并丢弃输入输出缓冲内的数据
+-*/+-*/+-*/+-*/collect_incoming_data m 收到数据后的操作(须自定义)
collect_incoming_data(data)
  通常以累计方式保存data待收到完整对话时处理
+-*/+-*/+-*/+-*/push_with_producer m 使用数据产生器来生成发送数据
push_with_producer(producer)
  producer:   带more()方法的数据产生器对象
  async_chat会通过调用producer.more()的方式获取要发送的数据
  当more返回''时表示数据结尾
+-*/+-*/+-*/+-*/found_terminator m 收到完整的对话时的操作(须自定义)
found_terminator()
  通常对保存的接受数据作处理,需要时调整状态标志重新设置对话分隔符
+-*/+-*/+-*/+-*/close_when_done m 在发送数据流放置结束标记,数据发完后会自动关闭
+-*/+-*/+-*/+-*/push m 发送数据
push(data)
+-*/+-*/asyncore p 异步数据传输基础模块
通常创建了异步对象以后使用loop来管理通讯
+-*/+-*/+-*/loop f 开始循环调度
loop([timeout[, use_poll[, map[,count]]]])
  timeout:   select或poll的超时时长秒数,默认30
  use_poll:  为True使用poll,默认为False使用select
  map:       循环调度所管理的对象集,默认使用全局对象集
             通常在使用多线程时需要使用不同的对象集
  count:     循环次数,默认无限次(在map为空时退出)
+-*/+-*/+-*/file_wrapper c 包装文件描述符为类套接字对象(unix)
file_wrapper(fileno)
  fileno:   文件描述符
  主要用于file_dispatcher
+-*/+-*/+-*/dispatcher c 可被循环调度管理的异步器基类
dispatcher(sock=None,map=None)
  sock:  可指定管理的套接字对象,未给出需自行create_socket
  map:   可指定加入某个对象集,默认使用全局对象集
         通常在使用多线程时需要使用不同的对象集
  自定义子类时通常要定义handle_*等方法
  如要定义初始化务必调用dispatcher.__init__(self)
+-*/+-*/+-*/+-*/handle_write m 当可发送数据时的操作(自定义)
handle_write()
   def handle_write(self):
       sent = self.send(self.buffer)
       self.buffer = self.buffer[sent:]
+-*/+-*/+-*/+-*/handle_accept m 当有连接请求时的操作(自定义)
handle_accept()
  通常accept后将得到套接字包装到相应的调度器里.
  如other_dispatcher(self.accept()[0])
  python3.2用handle_accepted代替
+-*/+-*/+-*/+-*/set_reuse_addr m 设置套接字可重用
+-*/+-*/+-*/+-*/bind m 绑定到某地址
bind(address)
  address:  (hostname,port)
            hostname可以是''表示任意地址
            port端口号(unix下有时1024以下端口是需要权限的)
  如果使用unix域协议,address为文件名
  如要使套接字可重用,应在绑定前调用set_reuse_addr
+-*/+-*/+-*/+-*/handle_connect m 在成功连接后的操作(自定义)
+-*/+-*/+-*/+-*/readable m 检测是否可接受数据(自定义)
readable()
  默认检测总是返回True,如返回True就自动调用handle_read
+-*/+-*/+-*/+-*/handle_expt m 
handle_expt()

Called when there is out of band (OOB) data for a socket connection.  This
will almost never happen, as OOB is tenuously supported and rarely used.



+-*/+-*/+-*/+-*/handle_read m 当可接收读取数据时的操作(自定义)
handle_read()
  通常调用recv操作接受数据并处理
+-*/+-*/+-*/+-*/create_socket m 创建所使用的套接字
create_socket(family, type)
  family: 地址簇
      socket.AF_INET   ipv4
      socket.AF_INET6  ipv6
      socket.AF_UNIX   unix域
  type:  
      socket.SOCK_DGRAM   数据报类型(UDP)
      socket.SOCK_STREAM  数据流类型(TCP)
+-*/+-*/+-*/+-*/writable m 检测是否可发送数据(自定义)
writable()
  默认检测总是返回True,如返回True就自动调用handle_write
+-*/+-*/+-*/+-*/connect m 连接
connect(address)
  address:  (host,port) host可以是域名或ip字符串，port是端口整数
+-*/+-*/+-*/+-*/accept m 接受一个请求连接
accept()
  之前必须有做bind和listen操作.
  返回None或(新建连接的套接字socket对象,(对端ip地址字符串,对端端口号))二元组
+-*/+-*/+-*/+-*/handle_close m 当套接字关闭时的操作(自定义)
+-*/+-*/+-*/+-*/close m 关闭(同时删除在对象集里的相应项目)
+-*/+-*/+-*/+-*/listen m 监听
listen(backlog)
  backlog:  等待连接队列的最大数量(通常为5)(最小为1)
+-*/+-*/+-*/+-*/recv m 接受数据,返回字节字符串
recv(buffer_size)
  buffer_size:   接受数据的最大长度
+-*/+-*/+-*/+-*/handle_error m 发生错误时的操作(自定义)
handle_error()
  默认为输出显示错误信息
+-*/+-*/+-*/+-*/send m 发送数据,返回实际发送的字节数
send(data)
+-*/+-*/+-*/+-*/handle_accepted m 当接受一个新连接时的操作(自定义)(python3.2)
handle_accepted(sock, addr)
  sock:   新连接的套接字对象
  addr:   (对端ip地址字符串,对端端口号)二元组
  通常将sock包装到相应的调度器里.
+-*/+-*/+-*/+-*/file_dispatcher c 可被调度的文件数据流异步器基类(unix)
file_dispatcher(sock,map=None)
  sock:  可以是文件对象或是file_wrapper包装对象
  map:   可指定加入某个对象集,默认使用全局对象集
         通常在使用多线程时需要使用不同的对象集
  常用于命名管道文件?
+-*/+-*/+-*/+-*/dispatcher_with_send c 带发送缓冲的异步器基类
+-*/+-*/SocketServer p 简易网络服务器模块(python2)
常用使用方法:
  先自定义RequestHandler子类的handle()来处理每一次的数据请求
  然后根据是否使用线程或进程来创建TCPServer,UDPServer,ForkingTCPServer等的子类
  主要定义一下handle_error()和设定一下allow_reuse_address等参数
  最后使用xxxServer(address,xxxHandler)来创建服务器对象
+-*/+-*/+-*/ThreadingMixIn c 多线程服务基类(用于自定义子类继承)
+-*/+-*/+-*/+-*/daemon_threads d 是否生成后台线程(通常自定义)
daemon_threads
  如为True,主线程结束时自动结束产生的这些子线程
+-*/+-*/+-*/ForkingMixIn c 多进程服务基类(用于自定义子类继承)
+-*/+-*/+-*/+-*/max_children d 进程并发的最大数量(通常自定义)
+-*/+-*/+-*/+-*/timeout d 检测僵尸进程的间隔时间(通常自定义)
+-*/+-*/+-*/BaseServer c 服务器基类
+-*/+-*/+-*/+-*/TCPServer c TCP服务器(通常由此类继承)
TCPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
  通常的使用方式:
  server = TCPServer(('0.0.0.0',6000),xxx_handler)
  server.serve_forever()
+-*/+-*/+-*/+-*/+-*/ForkingTCPServer c 多进程TCP服务器(通常由此类继承)
ForkingTCPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/max_children d 进程并发的最大数量(通常自定义)
+-*/+-*/+-*/+-*/+-*/+-*/timeout d 检测僵尸进程的间隔时间(通常自定义)
+-*/+-*/+-*/+-*/+-*/ThreadingTCPServer c 多线程TCP服务器(通常由此类继承)
ThreadingTCPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/daemon_threads d 是否生成后台线程(通常自定义)
daemon_threads
  如为True,主线程结束时自动结束产生的这些子线程
+-*/+-*/+-*/+-*/UDPServer c UDP服务器(通常由此类继承)
UDPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/max_packet_size d 数据报最大长度
+-*/+-*/+-*/+-*/+-*/ForkingUDPServer c 多进程UDP服务器(通常由此类继承)
ForkingUDPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/max_children d 进程并发的最大数量(通常自定义)
+-*/+-*/+-*/+-*/+-*/+-*/timeout d 检测僵尸进程的间隔时间(通常自定义)
+-*/+-*/+-*/+-*/+-*/ThreadingUDPServer c 多线程UDP服务器(通常由此类继承)
ThreadingUDPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/daemon_threads d 是否生成后台线程(通常自定义)
daemon_threads
  如为True,主线程结束时自动结束产生的这些子线程
+-*/+-*/+-*/+-*/RequestHandlerClass d 处理数据所使用的RequestHandler子类
+-*/+-*/+-*/+-*/allow_reuse_address d 是否(新建连接)重用同一服务地址,默认False
allow_reuse_address
  自定义子类时可定义此值
+-*/+-*/+-*/+-*/socket d 服务器所使用的套接字对象
+-*/+-*/+-*/+-*/server_address d 服务端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/+-*/socket_type d 套接字类型socket.SOCK_STREAM或socket.SOCK_DGRAM
+-*/+-*/+-*/+-*/address_family d 服务器协议socket.AF_INET或socket.AF_INET6
address_family
  自定义子类时可定义此值
+-*/+-*/+-*/+-*/timeout d 超时时长秒数,默认为None
timeout
  自定义子类时可定义此值,如使用serve_forever则此参数无效
  handle_request在timeout时间内未获得数据将自动调用handle_timeout
+-*/+-*/+-*/+-*/request_queue_size d 请求队列大小,即listen的参数,默认为5
request_queue_size
  自定义子类时可定义此值
+-*/+-*/+-*/+-*/server_activate m 服务器激活,默认操作为listen
+-*/+-*/+-*/+-*/fileno m 返回服务器套接字描述符(常用于select,poll)
+-*/+-*/+-*/+-*/handle_request m 处理单个请求
handle_request()
  依序调用get_request,verify_request,process_request
  如出错则调用handle_error,如超时则调用handle_timeout
  此方法主要用于不使用serve_forever的时候
+-*/+-*/+-*/+-*/serve_forever m 开始服务
serve_forever(poll_interval=0.5)
  poll_interval:   轮询间隔秒数
  如果不使用这种方式,
  通常将fileno()的值放入轮询,需要的时候调用handle_request来处理请求
+-*/+-*/+-*/+-*/process_request m 处理请求
process_request(request, client_address)
  如有设定多线程或多进程，则依设定调用finish_request
+-*/+-*/+-*/+-*/verify_request m 检验请求,返回True将会继续处理(通常自定义)
verify_request(request, client_address)
  request:
    StreamRequestHandler对应socket对象
    DatagramRequestHandler对应(收到的数据报,socket对象)二元组
  client_address:   客户端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/+-*/handle_timeout m 超时时的操作
handle_timeout()
  对于多进程服务器，默认操作将结束子进程
+-*/+-*/+-*/+-*/get_request m 返回(新建连接的套接字对象,客户端地址)二元组
+-*/+-*/+-*/+-*/finish_request m 创建RequestHandler子类实例调用其handle方法
+-*/+-*/+-*/+-*/shutdown m 停止服务(serve_forever)
+-*/+-*/+-*/+-*/server_bind m 绑定地址
+-*/+-*/+-*/+-*/handle_error m 处理数据时出错应作的操作,默认为显示出错信息
handle_error(request, client_address)
  request:
    StreamRequestHandler对应socket对象
    DatagramRequestHandler对应(收到的数据报,socket对象)二元组
  client_address:   客户端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/RequestHandler c 处理数据请求的基类
对于服务器，每监听到一个新用户就会创建一个handler子类实例，
实例创建完以后执行setup,handle,finish三个步骤,期间使用读rfile写wfile来作通信
+-*/+-*/+-*/+-*/client_address d 客户端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/+-*/server d BaseServer服务器子类实例对象
+-*/+-*/+-*/+-*/rfile d 接受数据的类文件对象
+-*/+-*/+-*/+-*/wfile d 发送数据的类文件对象
+-*/+-*/+-*/+-*/request d 请求的对象
request
  StreamRequestHandler对应socket对象
  DatagramRequestHandler对应(收到的数据报,socket对象)二元组
+-*/+-*/+-*/+-*/setup m 初始化操作
+-*/+-*/+-*/+-*/finish m 结束动作
+-*/+-*/+-*/+-*/handle m 处理过程(通常自定义)
handle()
  对于TCP来说主要读写rfile,wfile来通信，如果阻塞最好使用线程或进程服务器
  对于UDP来说主要根据rfile产生数据写入wfile(结束后finish()才会把数据发给对方)
+-*/+-*/+-*/+-*/StreamRequestHandler c 流模式(TCP)数据处理基类(通常由此继承)
+-*/+-*/+-*/+-*/+-*/connection d 连接的套接字对象
+-*/+-*/+-*/+-*/DatagramRequestHandler c 数据报(UDP)数据处理基类(通常由此继承)
+-*/+-*/+-*/+-*/+-*/socket d 连接的套接字对象
+-*/+-*/+-*/+-*/+-*/packet d 收到的请求数据报
+-*/+-*/socketserver p 简易网络服务器模块(python3)
常用使用方法:
  先自定义RequestHandler子类的handle()来处理每一次的数据请求
  然后根据是否使用线程或进程来创建TCPServer,UDPServer,ForkingTCPServer等的子类
  主要定义一下handle_error()和设定一下allow_reuse_address等参数
  最后使用xxxServer(address,xxxHandler)来创建服务器对象
+-*/+-*/+-*/ThreadingMixIn c 多线程服务基类(用于自定义子类继承)
+-*/+-*/+-*/+-*/daemon_threads d 是否生成后台线程(通常自定义)
daemon_threads
  如为True,主线程结束时自动结束产生的这些子线程
+-*/+-*/+-*/ForkingMixIn c 多进程服务基类(用于自定义子类继承)
+-*/+-*/+-*/+-*/max_children d 进程并发的最大数量(通常自定义)
+-*/+-*/+-*/+-*/timeout d 检测僵尸进程的间隔时间(通常自定义)
+-*/+-*/+-*/BaseServer c 服务器基类
+-*/+-*/+-*/+-*/TCPServer c TCP服务器(通常由此类继承)
TCPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
  通常的使用方式:
  server = TCPServer(('0.0.0.0',6000),xxx_handler)
  server.serve_forever()
+-*/+-*/+-*/+-*/+-*/ForkingTCPServer c 多进程TCP服务器(通常由此类继承)
ForkingTCPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/max_children d 进程并发的最大数量(通常自定义)
+-*/+-*/+-*/+-*/+-*/+-*/timeout d 检测僵尸进程的间隔时间(通常自定义)
+-*/+-*/+-*/+-*/+-*/ThreadingTCPServer c 多线程TCP服务器(通常由此类继承)
ThreadingTCPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/daemon_threads d 是否生成后台线程(通常自定义)
daemon_threads
  如为True,主线程结束时自动结束产生的这些子线程
+-*/+-*/+-*/+-*/UDPServer c UDP服务器(通常由此类继承)
UDPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/max_packet_size d 数据报最大长度
+-*/+-*/+-*/+-*/+-*/ForkingUDPServer c 多进程UDP服务器(通常由此类继承)
ForkingUDPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/max_children d 进程并发的最大数量(通常自定义)
+-*/+-*/+-*/+-*/+-*/+-*/timeout d 检测僵尸进程的间隔时间(通常自定义)
+-*/+-*/+-*/+-*/+-*/ThreadingUDPServer c 多线程UDP服务器(通常由此类继承)
ThreadingUDPServer(address, RequestHandlerClass, bind_and_activate=True)
  address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:    处理请求的RequestHandler子类
+-*/+-*/+-*/+-*/+-*/+-*/daemon_threads d 是否生成后台线程(通常自定义)
daemon_threads
  如为True,主线程结束时自动结束产生的这些子线程
+-*/+-*/+-*/+-*/RequestHandlerClass d 处理数据所使用的RequestHandler子类
+-*/+-*/+-*/+-*/allow_reuse_address d 是否(新建连接)重用同一服务地址,默认False
allow_reuse_address
  自定义子类时可定义此值
+-*/+-*/+-*/+-*/socket d 服务器所使用的套接字对象
+-*/+-*/+-*/+-*/server_address d 服务端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/+-*/socket_type d 套接字类型socket.SOCK_STREAM或socket.SOCK_DGRAM
+-*/+-*/+-*/+-*/address_family d 服务器协议socket.AF_INET或socket.AF_INET6
address_family
  自定义子类时可定义此值
+-*/+-*/+-*/+-*/timeout d 超时时长秒数,默认为None
timeout
  自定义子类时可定义此值,如使用serve_forever则此参数无效
  handle_request在timeout时间内未获得数据将自动调用handle_timeout
+-*/+-*/+-*/+-*/request_queue_size d 请求队列大小,即listen的参数,默认为5
request_queue_size
  自定义子类时可定义此值
+-*/+-*/+-*/+-*/server_activate m 服务器激活,默认操作为listen
+-*/+-*/+-*/+-*/fileno m 返回服务器套接字描述符(常用于select,poll)
+-*/+-*/+-*/+-*/handle_request m 处理单个请求
handle_request()
  依序调用get_request,verify_request,process_request
  如出错则调用handle_error,如超时则调用handle_timeout
  此方法主要用于不使用serve_forever的时候
+-*/+-*/+-*/+-*/serve_forever m 开始服务
serve_forever(poll_interval=0.5)
  poll_interval:   轮询间隔秒数
  如果不使用这种方式,
  通常将fileno()的值放入轮询,需要的时候调用handle_request来处理请求
+-*/+-*/+-*/+-*/process_request m 处理请求
process_request(request, client_address)
  如有设定多线程或多进程，则依设定调用finish_request
+-*/+-*/+-*/+-*/verify_request m 检验请求,返回True将会继续处理(通常自定义)
verify_request(request, client_address)
  request:
    StreamRequestHandler对应socket对象
    DatagramRequestHandler对应(收到的数据报,socket对象)二元组
  client_address:   客户端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/+-*/handle_timeout m 超时时的操作
handle_timeout()
  对于多进程服务器，默认操作将结束子进程
+-*/+-*/+-*/+-*/get_request m 返回(新建连接的套接字对象,客户端地址)二元组
+-*/+-*/+-*/+-*/finish_request m 创建RequestHandler子类实例调用其handle方法
+-*/+-*/+-*/+-*/shutdown m 停止服务(serve_forever)
+-*/+-*/+-*/+-*/server_bind m 绑定地址
+-*/+-*/+-*/+-*/handle_error m 处理数据时出错应作的操作,默认为显示出错信息
handle_error(request, client_address)
  request:
    StreamRequestHandler对应socket对象
    DatagramRequestHandler对应(收到的数据报,socket对象)二元组
  client_address:   客户端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/RequestHandler c 处理数据请求的基类
对于服务器，每监听到一个新用户就会创建一个handler子类实例，
实例创建完以后执行setup,handle,finish三个步骤,期间使用读rfile写wfile来作通信
+-*/+-*/+-*/+-*/client_address d 客户端地址(ip字符串,port整数)二元组
+-*/+-*/+-*/+-*/server d BaseServer服务器子类实例对象
+-*/+-*/+-*/+-*/rfile d 接受数据的类文件对象
+-*/+-*/+-*/+-*/wfile d 发送数据的类文件对象
+-*/+-*/+-*/+-*/request d 请求的对象
request
  StreamRequestHandler对应socket对象
  DatagramRequestHandler对应(收到的数据报,socket对象)二元组
+-*/+-*/+-*/+-*/setup m 初始化操作
+-*/+-*/+-*/+-*/finish m 结束动作
+-*/+-*/+-*/+-*/handle m 处理过程(通常自定义)
handle()
  对于TCP来说主要读写rfile,wfile来通信，如果阻塞最好使用线程或进程服务器
  对于UDP来说主要根据rfile产生数据写入wfile(结束后finish()才会把数据发给对方)
+-*/+-*/+-*/+-*/StreamRequestHandler c 流模式(TCP)数据处理基类(通常由此继承)
+-*/+-*/+-*/+-*/+-*/connection d 连接的套接字对象
+-*/+-*/+-*/+-*/DatagramRequestHandler c 数据报(UDP)数据处理基类(通常由此继承)
+-*/+-*/+-*/+-*/+-*/socket d 连接的套接字对象
+-*/+-*/+-*/+-*/+-*/packet d 收到的请求数据报
+-*/i18n _ 
+-*/+-*/gettext p 多语言转译模块
通常可直接install(mo名称)就可使用_()来翻译了
Tools/i18n/pygettext.py用来抽取py文件里需翻译的字符串生成pot文件
Tools/i18n/msgfmt.py可将pot文件生成mo文件
mo文件的存放位置如果想自由设定,
可直接使用GNUTranslations(open(mo))获取对象再.install即可
python2里最好py里都是utf-8编码,可使用_(u'中文')这样的形式
+-*/+-*/+-*/gettext f 翻译字符串,通常用_()代替
gettext(message)
  message:   python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  python2:返回字节字符串,python3:返回字符串
  如果未找到message的翻译则返回message
+-*/+-*/+-*/ngettext f 翻译带复数形式的字符串
ngettext(singular, plural, n)
  singular:  python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  plural:    python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
  python2:返回字节字符串,python3:返回字符串
+-*/+-*/+-*/lgettext f 翻译字符串,返回字节字符串
lgettext(message)
  message:   python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
+-*/+-*/+-*/lngettext f 翻译带复数形式的字符串,返回字节字符串
lngettext(singular, plural, n)
  singular:  python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  plural:    python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
+-*/+-*/+-*/ugettext f 翻译字符串,返回unicode字符串(python2)
ugettext(message)
  message:   通常为英文,如要使用中文必须为unicode字符串
+-*/+-*/+-*/ungettext f 翻译带复数形式的字符串,返回unicode字符串(python2)
ungettext(singular, plural, n)
  singular:  通常为英文,如要使用中文必须为unicode字符串
  plural:    通常为英文,如要使用中文必须为unicode字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
+-*/+-*/+-*/dgettext f 在指定mo文件里翻译字符串
dgettext(domain, message)
  domain:    mo文件名称基础名(不带.mo后缀)
  message:   python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  python2:返回字节字符串,python3:返回字符串
  如果未找到message的翻译则返回message
+-*/+-*/+-*/ldgettext f 在指定mo文件里翻译字符串,返回字节字符串
ldgettext(domain, message)
  domain:    mo文件名称基础名(不带.mo后缀)
  message:   python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
+-*/+-*/+-*/dngettext f 在指定mo文件里翻译带复数形式的字符串
dngettext(domain, singular, plural, n)
  domain:    mo文件名称基础名(不带.mo后缀)
  singular:  python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  plural:    python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
  python2:返回字节字符串,python3:返回字符串
+-*/+-*/+-*/ldngettext f 在指定mo里翻译带复数形式的字符串,返回字节字符串
ldngettext(domain, singular, plural, n)
  domain:    mo文件名称基础名(不带.mo后缀)
  singular:  python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  plural:    python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
+-*/+-*/+-*/translation f 查找mo文件创建返回转译器对象
translation(domain, localedir=None, languages=None, 
            class_=None, fallback=False, codeset=None)
  domain:    mo文件名称基础名(不带.mo后缀)
  localedir: 存放mo文件的目录(不包括其下的标识语言和环境的目录)
  languages: 所需的语言列表,默认为环境变量里设定的单个语言
  class_:    指定转译器类型,默认使用GNUTranslations
  fallback:  为True则在未找到mo文件时不报错返回NullTranslations对象
             为False则在未找到mo文件时报IOError错误
  codeset:   编码,用于生成字节字符串
+-*/+-*/+-*/install f 查找mo文件安装全局_()转译函数
pyton3:install(domain,localedir=None,codeset=None,names=None)
pyton2:install(domain,localedir=None,codeset=None,unicode=False,names=None)
  domain:    mo文件名称基础名(不带.mo后缀)
  localedir: 存放mo文件的目录(不包括其下的标识语言和环境的目录)
  codeset:   编码,用于生成字节字符串
  unicode:   如为真则用ugettext代替_(),为假则使用gettext代替_()
+-*/+-*/+-*/find f 查找mo文件,未找到返回None
find(domain, localedir=None, languages=None, all=False)
  domain:    mo文件名称基础名(不带.mo后缀)
  localedir: 存放mo文件的目录(不包括其下的标识语言和环境的目录)
             默认的localedir是/usr/share/locale/
  languages: 所需的语言列表,默认为环境变量里设定的单个语言
  all:       如为True则返回找到的mo文件完整路径名列表
             如为False则返回找到的第一个mo文件完整路径名
+-*/+-*/+-*/bind_textdomain_codeset f 设定翻译转换产生字节字符串的编码方式
bind_textdomain_codeset(domain, codeset=None)
  domain:    mo文件名称基础名(不带.mo后缀)
  codeset:   编码方式
+-*/+-*/+-*/bindtextdomain f 设置使用的mo文件名称
bindtextdomain(domain, localedir=None)
  domain:    mo文件名称基础名(不带.mo后缀)
  localedir: 存放mo文件的目录(不包括其下的标识语言和环境的目录)
  在unix下相当于{localedir}/{zh_CN}/LC_MESSAGES/{domain}.mo
  默认的localedir是/usr/share/locale/
+-*/+-*/+-*/textdomain f 更换当前使用的mo文件
TODO:
textdomain(domain=None)
  domain:    mo文件名称基础名(不带.mo后缀)
  如domain未给出则返回当前使用的mo名称,主要用于使用多个不同mo(不是多语言)的设定
+-*/+-*/+-*/NullTranslations c 转译器类
NullTranslations(fp=None)
  fp:   文件对象
+-*/+-*/+-*/+-*/info m 返回mo文件的有关信息字典
info()
  如:
  {'content-transfer-encoding': '8bit',
   'content-type': 'text/plain; charset=UTF-8',
   'language-team': 'zh_CN'}
+-*/+-*/+-*/+-*/add_fallback m 
TODO:
add_fallback(fallback)

Add *fallback* as the fallback object for the current translation object.
A translation object should consult the fallback if it cannot provide a
translation for a given message.



+-*/+-*/+-*/+-*/charset m 返回mo文件的编码方式
+-*/+-*/+-*/+-*/gettext m (子类实现)翻译字符串
gettext(message)
  message:   python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  python2:返回字节字符串,python3:返回字符串
  如果未找到message的翻译则返回message
+-*/+-*/+-*/+-*/ngettext m (子类实现)翻译带复数形式的字符串
ngettext(singular, plural, n)
  singular:  python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  plural:    python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
  python2:返回字节字符串,python3:返回字符串
+-*/+-*/+-*/+-*/lgettext m (子类实现)翻译字符串,返回字节字符串
lgettext(message)
  message:   python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
+-*/+-*/+-*/+-*/lngettext m (子类实现)翻译带复数形式的字符串,返回字节字符串
lngettext(singular, plural, n)
  singular:  python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  plural:    python2:通常为英文,如要使用中文必须为unicode字符串
             python3:不能为字节字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
+-*/+-*/+-*/+-*/ugettext f (子类实现)翻译字符串,返回unicode字符串(python2)
ugettext(message)
  message:   通常为英文,如要使用中文必须为unicode字符串
+-*/+-*/+-*/+-*/ungettext f (子类实现)翻译复形字符串,返回unicode字符串(python2)
ungettext(singular, plural, n)
  singular:  通常为英文,如要使用中文必须为unicode字符串
  plural:    通常为英文,如要使用中文必须为unicode字符串
  n:         整数
  n为1时使用singular对应的翻译,其它使用plural对应的翻译
+-*/+-*/+-*/+-*/output_charset m 返回生成字节字符串的编码方式
+-*/+-*/+-*/+-*/install m 安装全局_()为转译函数
python2:  install(unicode=False,names=None)
  unicode:   如为真则用ugettext代替_(),为假则使用gettext代替_()
python3:  install(names=None)
+-*/+-*/+-*/+-*/_parse m (子类实现)
_parse(fp)

No-op'd in the base class, this method takes file object *fp*, and reads
the data from the file, initializing its message catalog.  If you have an
unsupported message catalog file format, you should override this method
to parse your format.



+-*/+-*/+-*/+-*/set_output_charset m 设置生成字节字符串的编码方式
set_output_charset(charset)
  charset:   编码
+-*/+-*/+-*/+-*/GNUTranslations c GNU规范的转译器
GNUTranslations(fp=None)
  fp:   可为某个打开的mo文件对象
+-*/+-*/locale p 区域设置模块
+-*/+-*/+-*/strxfrm f 按区域设置的字符串比较key函数
strxfrm(string)
  strxfrm(s1) < strxfrm(s2)等价strcoll(s1, s2) < 0
+-*/+-*/+-*/strcoll f 按区域设置的字符串比较函数
strcoll(string1, string2)
  使用LC_COLLATE的设置
+-*/+-*/+-*/currency f 按区域设置的转换数值为货币字符串
currency(val, symbol=True, grouping=False, international=False)
  val:      要转换的数值
  symbol:   是否带货币符号
  grouping: 数字是否分组
  international:  是否使用国际货币符号
+-*/+-*/+-*/atof f 按区域设置解析字符串为浮点数
atof(string)
+-*/+-*/+-*/atoi f 按区域设置解析字符串为整数
atoi(string)
+-*/+-*/+-*/str f 按区域设置的转换浮点数为字符串的函数
str(float)
+-*/+-*/+-*/format f 按区域设置的单个模式格式化函数
format(format, val, grouping=False, monetary=False)
  format:   '%?'形式的单个模式
  val:      要格式化的值
  grouping: 数字是否分组
  monetary: 是否货币格式
+-*/+-*/+-*/format_string f 按区域设置的格式化函数
format_string(format, val, grouping=False)
  format:   %模式字符串
  val:      要格式化的值
  grouping: 数字是否分组
+-*/+-*/+-*/nl_langinfo f 获取区域设置的选项信息
nl_langinfo(option)
  option:
    CODESET     字符编码区域
    CRNCYSTR    货币符号
    YESEXPR     表示yes的正则表达式(通常^[yY])
    RADIXCHAR   小数点对应字符
    THOUSEP     千位字符(三位分隔字符)
    NOEXPR      表示no的正则表达式(通常^[nN])
    DAY_1       星期天的长名称
    DAY_2       星期一的长名称
    DAY_3       星期二的长名称
    DAY_4       星期三的长名称
    DAY_5       星期四的长名称
    DAY_6       星期五的长名称
    DAY_7       星期六的长名称
    ABDAY_1     星期天的短名称
    ABDAY_2     星期一的短名称
    ABDAY_3     星期二的短名称
    ABDAY_4     星期三的短名称
    ABDAY_5     星期四的短名称
    ABDAY_6     星期五的短名称
    ABDAY_7     星期六的短名称
    MON_1       一月的长名称
    MON_2       二月的长名称
    MON_3       三月的长名称
    MON_4       四月的长名称
    MON_5       五月的长名称
    MON_6       六月的长名称
    MON_7       七月的长名称
    MON_8       八月的长名称
    MON_9       九月的长名称
    MON_10      十月的长名称
    MON_11      十一月的长名称
    MON_12      十二月的长名称
    ABMON_1     一月的短名称
    ABMON_2     二月的短名称
    ABMON_3     三月的短名称
    ABMON_4     四月的短名称
    ABMON_5     五月的短名称
    ABMON_6     六月的短名称
    ABMON_7     七月的短名称
    ABMON_8     八月的短名称
    ABMON_9     九月的短名称
    ABMON_10    十月的短名称
    ABMON_11    十一月的短名称
    ABMON_12    十二月的短名称
    ALT_DIGITS 
    ERA 
    ERA_T_FMT 
    ERA_D_FMT 
    ERA_D_T_FMT 
+-*/+-*/+-*/getdefaultlocale f 获取返回(语言,编码)二元组
getdefaultlocale([envvars])
  相关环境变量:LC_ALL,LC_CTYPE,LANG,LANGUAGE
+-*/+-*/+-*/getpreferredencoding f 获取当前用户编码
getpreferredencoding(do_setlocale=True)
+-*/+-*/+-*/localeconv f 返回本地数值和货币的设置字典
+-*/+-*/+-*/normalize f 获取语言名称的完整名称(带编码)
normalize(localename)
  如normalize('zh_cn')返回'zh_CN.gb2312'
  如normalize('en')返回'en_US.ISO8859-1'
+-*/+-*/+-*/getlocale f 返回区域格式的(语言,编码)二元组
getlocale(category=LC_CTYPE)
  category:
    LC_CTYPE      字符串格式
    LC_MONETARY   货币格式
    LC_NUMERIC    十进制数字格式
    LC_MESSAGES   信息格式
    LC_TIME       时间格式
    LC_COLLATE    排序格式
    LC_ALL        所有格式
+-*/+-*/+-*/setlocale f 设置区域格式的语言形式
setlocale(category, locale=None)
  category:
    LC_CTYPE      字符串格式
    LC_MONETARY   货币格式
    LC_NUMERIC    十进制数字格式
    LC_MESSAGES   信息格式
    LC_TIME       时间格式
    LC_COLLATE    排序格式
    LC_ALL        所有格式
  locale:   字符串或(语言,编码)二元组或None
  设置失败将报locale.Error错误
+-*/+-*/+-*/resetlocale f 设置区域格式为默认
resetlocale(category=LC_ALL)
  category:
    LC_CTYPE      字符串处理格式
    LC_MONETARY   货币格式
    LC_NUMERIC    十进制数字格式
    LC_MESSAGES   信息格式
    LC_TIME       时间格式
    LC_COLLATE    排序格式
    LC_ALL        所有格式
+-*/+-*/+-*/CHAR_MAX d 
CHAR_MAX

This is a symbolic constant used for different values returned by
:func:`localeconv`.



+-*/+-*/+-*/D_FMT d 日期格式
D_FMT
  相关函数:strftime
+-*/+-*/+-*/D_T_FMT d 日期时间格式
D_T_FMT
  相关函数:strftime
+-*/+-*/+-*/T_FMT d 时间格式
T_FMT
  相关函数:strftime
+-*/+-*/+-*/T_FMT_AMPM d 带上下午的时间格式
T_FMT_AMPM
  相关函数:strftime
+-*/+-*/+-*/LC_CTYPE d 字符串格式(字符分类规则等)
+-*/+-*/+-*/LC_MONETARY d 货币格式
+-*/+-*/+-*/LC_NUMERIC d 十进制数字格式
LC_NUMERIC
  相关函数:locale的format,atoi,atof,str
+-*/+-*/+-*/LC_MESSAGES d 信息格式
+-*/+-*/+-*/LC_TIME d 时间格式
LC_TIME
  相关函数:time.strftime
+-*/+-*/+-*/LC_COLLATE d 排序格式
LC_COLLATE
  相关函数:locale.strcoll,locale.strxfrm
+-*/+-*/+-*/LC_ALL d 所有格式
+-*/+-*/+-*/DAY_1 d 星期天的长名称
+-*/+-*/+-*/DAY_2 d 星期一的长名称
+-*/+-*/+-*/DAY_3 d 星期二的长名称
+-*/+-*/+-*/DAY_4 d 星期三的长名称
+-*/+-*/+-*/DAY_5 d 星期四的长名称
+-*/+-*/+-*/DAY_6 d 星期五的长名称
+-*/+-*/+-*/DAY_7 d 星期六的长名称
+-*/+-*/+-*/ABDAY_1 d 星期天的短名称
+-*/+-*/+-*/ABDAY_2 d 星期一的短名称
+-*/+-*/+-*/ABDAY_3 d 星期二的短名称
+-*/+-*/+-*/ABDAY_4 d 星期三的短名称
+-*/+-*/+-*/ABDAY_5 d 星期四的短名称
+-*/+-*/+-*/ABDAY_6 d 星期五的短名称
+-*/+-*/+-*/ABDAY_7 d 星期六的短名称
+-*/+-*/+-*/MON_1 d 一月的长名称
+-*/+-*/+-*/MON_2 d 二月的长名称
+-*/+-*/+-*/MON_3 d 三月的长名称
+-*/+-*/+-*/MON_4 d 四月的长名称
+-*/+-*/+-*/MON_5 d 五月的长名称
+-*/+-*/+-*/MON_6 d 六月的长名称
+-*/+-*/+-*/MON_7 d 七月的长名称
+-*/+-*/+-*/MON_8 d 八月的长名称
+-*/+-*/+-*/MON_9 d 九月的长名称
+-*/+-*/+-*/MON_10 d 十月的长名称
+-*/+-*/+-*/MON_11 d 十一月的长名称
+-*/+-*/+-*/MON_12 d 十二月的长名称
+-*/+-*/+-*/ABMON_1 d 一月的短名称
+-*/+-*/+-*/ABMON_2 d 二月的短名称
+-*/+-*/+-*/ABMON_3 d 三月的短名称
+-*/+-*/+-*/ABMON_4 d 四月的短名称
+-*/+-*/+-*/ABMON_5 d 五月的短名称
+-*/+-*/+-*/ABMON_6 d 六月的短名称
+-*/+-*/+-*/ABMON_7 d 七月的短名称
+-*/+-*/+-*/ABMON_8 d 八月的短名称
+-*/+-*/+-*/ABMON_9 d 九月的短名称
+-*/+-*/+-*/ABMON_10 d 十月的短名称
+-*/+-*/+-*/ABMON_11 d 十一月的短名称
+-*/+-*/+-*/ABMON_12 d 十二月的短名称
+-*/+-*/+-*/ERA d 
ERA

Get a string that represents the era used in the current locale.

Most locales do not define this value.  An example of a locale which does
define this value is the Japanese one.  In Japan, the traditional
representation of dates includes the name of the era corresponding to the
then-emperor's reign.

Normally it should not be necessary to use this value directly. Specifying
the ``E`` modifier in their format strings causes the :func:`strftime`
function to use this information.  The format of the returned string is not
specified, and therefore you should not assume knowledge of it on different
systems.


+-*/+-*/+-*/ERA_T_FMT d 
ERA_T_FMT

Get a format string for :func:`strftime` to represent a time in a
locale-specific era-based way.


+-*/+-*/+-*/ERA_D_FMT d 
ERA_D_FMT

Get a format string for :func:`strftime` to represent a date in a
locale-specific era-based way.


+-*/+-*/+-*/ERA_D_T_FMT d 
ERA_D_T_FMT

Get a format string for :func:`strftime` to represent date and time in a
locale-specific era-based way.


+-*/+-*/+-*/CODESET d 字符编码区域
+-*/+-*/+-*/ALT_DIGITS d 
ALT_DIGITS

Get a representation of up to 100 values used to represent the values
0 to 99.



+-*/+-*/+-*/CRNCYSTR d 货币符号
CRNCYSTR
  前缀'-'表示符号在数字前,前缀'+'表示符号在数字后,前缀'.'表示符号代替小数点
+-*/+-*/+-*/YESEXPR d 表示yes的正则表达式(通常^[yY])
+-*/+-*/+-*/RADIXCHAR d 小数点对应字符
+-*/+-*/+-*/THOUSEP d 千位字符(三位分隔字符)
+-*/+-*/+-*/NOEXPR d 表示no的正则表达式(通常^[nN])
+-*/+-*/+-*/Error e setlocale失败错误
+-*/互联网 _
+-*/+-*/html p html解析模块(python3)
+-*/+-*/+-*/escape f 转义字符串内的html特殊字符&<>
escape(s, quote=True)
  quote:  为True时将同时转换'"两种字符,否则只转换&<>
+-*/+-*/+-*/entities p html特殊字符模块(python3)
对应python2的htmlentitydefs模块
html里除了'"&<>需要转换为&name;形式,还有诸如Ô∀≦拉丁文希腊文数学标点符号等等
对于&#xxxx;可能是unicode编码也可能是gbk之类的编码
+-*/+-*/+-*/+-*/codepoint2name d 字符unicode值->转义名称(&name;)的字典
+-*/+-*/+-*/+-*/name2codepoint d 转义名称(&name;)->字符unicode值的字典
+-*/+-*/+-*/+-*/entitydefs d 转义名称(&name;)->字符的字典
+-*/+-*/+-*/parser p 简易html解析模块(python3)
对应python2的HTMLParser模块
+-*/+-*/+-*/+-*/HTMLParseError e html解析异常
+-*/+-*/+-*/+-*/HTMLParser c 简易html解析器(顺序事件模式)基础类
HTMLParser(strict=True)
  strict:    为True将严格按照html格式来解析
             为False则按大多数浏览器方式来解析那些不规范的html
  通常需要自定义子类编写handle_*方法
  然后子类生成实例用feed来解析获取所需要的数据
  往往对于简单形式的html或有针对的提取要求时(只获取特定tag的相关数据)
  可采用此解析器来获取比其他解析器快速的好处
+-*/+-*/+-*/+-*/+-*/reset m 重置解析器
+-*/+-*/+-*/+-*/+-*/feed m 解析数据(可以分次解析)
feed(data)
+-*/+-*/+-*/+-*/+-*/getpos m 返回当前(行号,列号)二元组
+-*/+-*/+-*/+-*/+-*/handle_endtag m 遇到<tag/>时的处理(通常需自定义)
handle_endtag(tag)
+-*/+-*/+-*/+-*/+-*/handle_startendtag m 遇到<tag .. />时的处理(通常需自定义)
handle_startendtag(tag, attrs)
  tag:   标签名称
  attrs: (name,value)二元组组成的列表,name自动转换为小写
+-*/+-*/+-*/+-*/+-*/handle_charref m 遇到&#xxx;时的处理(通常需自定义)
handle_charref(name)
  name:  不包含开头的&#和结尾的;
  对于&#xxxx;可能是unicode编码也可能是gbk之类的编码
  通常这个事件的出现前后都是handle_data事件
+-*/+-*/+-*/+-*/+-*/unknown_decl m 遇到<!非标准..>时的处理(通常需自定义)
unknown_decl(data)
  data:   不包括开头的<!和结尾的>
+-*/+-*/+-*/+-*/+-*/handle_pi m 遇到<?...>时的处理(通常需自定义)
handle_pi(data)
  data:   不包括开头的<?和结尾的>
  对于xhtml的<?..?>来说data结尾将有一个'?'
+-*/+-*/+-*/+-*/+-*/get_starttag_text m 返回上一次的<xx...>的文本内容
get_starttag_text()
  只返回最后一次遇到<tag/>,<tag ../>,<tag ..>的<...>的全文本内容(包括前后<>)
+-*/+-*/+-*/+-*/+-*/handle_entityref m 遇到&name;时的处理(通常需自定义)
handle_entityref(name)
  name:  不包含开头的&和结尾的;
  一般可使用html.entities.entitydefs[name]来获取实际字符
  通常这个事件的出现前后都是handle_data事件
+-*/+-*/+-*/+-*/+-*/handle_decl m 遇到<!DOCTYPE ..>时的处理(通常需自定义)
handle_decl(decl)
  decl:   不包括开头的<!和结尾的>
+-*/+-*/+-*/+-*/+-*/close m 关闭解析器
+-*/+-*/+-*/+-*/+-*/handle_data m 对一般文本的处理(通常需自定义)
handle_data(data)
  通常使用此解析器收集数据都是针对<xx>yyy<xx/>之类的简单形式
  对于嵌套的<x>..<y>..<y/>..<x/>来说使用其他解析器更为方便
  定义handle_data时为了处理特殊字符别忘了定义handle_entityref和handle_charref
+-*/+-*/+-*/+-*/+-*/handle_starttag m 遇到<tag ...>时的处理(通常需自定义)
handle_starttag(tag, attrs)
  tag:   标签名称
  attrs: (name,value)二元组组成的列表,name自动转换为小写
+-*/+-*/+-*/+-*/+-*/handle_comment m 遇到<!--...-->时的处理(通常需自定义)
handle_comment(data)
  data:   不包括开头的<!--和结尾的-->
+-*/+-*/HTMLParser p 简易html解析模块(python2)
对应python3的html.parser模块
+-*/+-*/+-*/HTMLParseError e html解析异常
+-*/+-*/+-*/HTMLParser c 简易html解析器(顺序事件模式)基础类
HTMLParser()
  通常需要自定义子类编写handle_*方法
  然后子类生成实例用feed来解析获取所需要的数据
  往往对于简单形式的html或有针对的提取要求时(只获取特定tag的相关数据)
  可采用此解析器来获取比其他解析器快速的好处
+-*/+-*/+-*/+-*/reset m 重置解析器
+-*/+-*/+-*/+-*/feed m 解析数据(可以分次解析)
feed(data)
+-*/+-*/+-*/+-*/getpos m 返回当前(行号,列号)二元组
+-*/+-*/+-*/+-*/handle_endtag m 遇到<tag/>时的处理(通常需自定义)
handle_endtag(tag)
+-*/+-*/+-*/+-*/handle_startendtag m 遇到<tag .. />时的处理(通常需自定义)
handle_startendtag(tag, attrs)
  tag:   标签名称
  attrs: (name,value)二元组组成的列表,name自动转换为小写
+-*/+-*/+-*/+-*/handle_charref m 遇到&#xxx;时的处理(通常需自定义)
handle_charref(name)
  name:  不包含开头的&#和结尾的;
  通常这个事件的出现前后都是handle_data事件
+-*/+-*/+-*/+-*/unknown_decl m 遇到<!非标准..>时的处理(通常需自定义)
unknown_decl(data)
  data:   不包括开头的<!和结尾的>
+-*/+-*/+-*/+-*/handle_pi m 遇到<?...>时的处理(通常需自定义)
handle_pi(data)
  data:   不包括开头的<?和结尾的>
  对于xhtml的<?..?>来说data结尾将有一个'?'
+-*/+-*/+-*/+-*/get_starttag_text m 返回上一次的<xx...>的文本内容
get_starttag_text()
  只返回最后一次遇到<tag/>,<tag ../>,<tag ..>的<...>的全文本内容(包括前后<>)
+-*/+-*/+-*/+-*/handle_entityref m 遇到&name;时的处理(通常需自定义)
handle_entityref(name)
  name:  不包含开头的&和结尾的;
  一般可使用html.entities.entitydefs[name]来获取实际字符
  通常这个事件的出现前后都是handle_data事件
+-*/+-*/+-*/+-*/handle_decl m 遇到<!DOCTYPE ..>时的处理(通常需自定义)
handle_decl(decl)
  decl:   不包括开头的<!和结尾的>
+-*/+-*/+-*/+-*/close m 关闭解析器
+-*/+-*/+-*/+-*/handle_data m 对一般文本的处理(通常需自定义)
handle_data(data)
  通常使用此解析器收集数据都是针对<xx>yyy<xx/>之类的简单形式
  对于嵌套的<x>..<y>..<y/>..<x/>来说使用其他解析器更为方便
  定义handle_data时为了处理特殊字符别忘了定义handle_entityref和handle_charref
+-*/+-*/+-*/+-*/handle_starttag m 遇到<tag ...>时的处理(通常需自定义)
handle_starttag(tag, attrs)
  tag:   标签名称
  attrs: (name,value)二元组组成的列表,name自动转换为小写
+-*/+-*/+-*/+-*/handle_comment m 遇到<!--...-->时的处理(通常需自定义)
handle_comment(data)
  data:   不包括开头的<!--和结尾的-->
+-*/+-*/htmlentitydefs p html特殊字符模块(python2)
对应python3的html.entities模块
html里除了'"&<>需要转换为&name;形式,还有诸如Ô∀≦拉丁文希腊文数学标点符号等等
+-*/+-*/+-*/codepoint2name d 字符unicode值->转义名称(&name;)的字典
+-*/+-*/+-*/name2codepoint d 转义名称(&name;)->字符unicode值的字典
+-*/+-*/+-*/entitydefs d 转义名称(&name;)->字符的字典
+-*/+-*/email p email邮件数据处理模块
email是ascii文本,出现早于unicode,用ascii存放二进制和各种编码数据是email的特点
通常用mime.multipart.MIMEMultipart创建邮件对象
使用mime.xxx.Xxx创建邮件的各部分,然后attach各部分附件
+-*/+-*/+-*/message_from_file f 从文本文件对象解析生成email消息对象
message_from_file(fp, _class=email.message.Message, strict=None)
+-*/+-*/+-*/message_from_string f 从字符串解析生成email消息对象
message_from_string(s, _class=email.message.Message, strict=None)
+-*/+-*/+-*/message_from_binary_file f 从二进制文件对象解析生成email消息对象
message_from_binary_file(fp, _class=email.message.Message, strict=None)
+-*/+-*/+-*/message_from_bytes f 从字节字符串解析生成email消息对象(python3)
message_from_bytes(s, _class=email.message.Message, strict=None)
+-*/+-*/+-*/charset p Character Sets
+-*/+-*/+-*/+-*/add_alias f 
add_alias(alias, canonical)

Add a character set alias.  *alias* is the alias name, e.g. ``latin-1``.
*canonical* is the character set's canonical name, e.g. ``iso-8859-1``.

The global charset alias registry is kept in the module global dictionary
``ALIASES``.



+-*/+-*/+-*/+-*/add_codec f 
add_codec(charset, codecname)

Add a codec that map characters in the given character set to and from Unicode.

*charset* is the canonical name of a character set. *codecname* is the name of a
Python codec, as appropriate for the second argument to the :class:`str`'s
:func:`decode` method



+-*/+-*/+-*/+-*/add_charset f 
add_charset(charset, header_enc=None, body_enc=None, output_charset=None)

Add character properties to the global registry.

*charset* is the input character set, and must be the canonical name of a
character set.

Optional *header_enc* and *body_enc* is either ``Charset.QP`` for
quoted-printable, ``Charset.BASE64`` for base64 encoding,
``Charset.SHORTEST`` for the shortest of quoted-printable or base64 encoding,
or ``None`` for no encoding.  ``SHORTEST`` is only valid for
*header_enc*. The default is ``None`` for no encoding.

Optional *output_charset* is the character set that the output should be in.
Conversions will proceed from input charset, to Unicode, to the output charset
when the method :meth:`Charset.convert` is called.  The default is to output in
the same character set as the input.

Both *input_charset* and *output_charset* must have Unicode codec entries in the
module's character set-to-codec mapping; use :func:`add_codec` to add codecs the
module does not know about.  See the :mod:`codecs` module's documentation for
more information.

The global character set registry is kept in the module global dictionary
``CHARSETS``.



+-*/+-*/+-*/+-*/Charset c 
Charset(input_charset=DEFAULT_CHARSET)

Map character sets to their email properties.

This class provides information about the requirements imposed on email for a
specific character set.  It also provides convenience routines for converting
between character sets, given the availability of the applicable codecs.  Given
a character set, it will do its best to provide information on how to use that
character set in an email message in an RFC-compliant way.

Certain character sets must be encoded with quoted-printable or base64 when used
in email headers or bodies.  Certain character sets must be converted outright,
and are not allowed in email.

Optional *input_charset* is as described below; it is always coerced to lower
case.  After being alias normalized it is also used as a lookup into the
registry of character sets to find out the header encoding, body encoding, and
output conversion codec to be used for the character set.  For example, if
*input_charset* is ``iso-8859-1``, then headers and bodies will be encoded using
quoted-printable and no output conversion codec is necessary.  If
*input_charset* is ``euc-jp``, then headers will be encoded with base64, bodies
will not be encoded, but output text will be converted from the ``euc-jp``
character set to the ``iso-2022-jp`` character set.

:class:`Charset` instances have the following data attributes:


+-*/+-*/+-*/+-*/+-*/input_codec d 
input_codec

The name of the Python codec used to convert the *input_charset* to
Unicode.  If no conversion codec is necessary, this attribute will be
``None``.



+-*/+-*/+-*/+-*/+-*/body_encoding d 
body_encoding

Same as *header_encoding*, but describes the encoding for the mail
message's body, which indeed may be different than the header encoding.
``Charset.SHORTEST`` is not allowed for *body_encoding*.



+-*/+-*/+-*/+-*/+-*/input_charset d 
input_charset

The initial character set specified.  Common aliases are converted to
their *official* email names (e.g. ``latin_1`` is converted to
``iso-8859-1``).  Defaults to 7-bit ``us-ascii``.



+-*/+-*/+-*/+-*/+-*/header_encoding d 
header_encoding

If the character set must be encoded before it can be used in an email
header, this attribute will be set to ``Charset.QP`` (for
quoted-printable), ``Charset.BASE64`` (for base64 encoding), or
``Charset.SHORTEST`` for the shortest of QP or BASE64 encoding. Otherwise,
it will be ``None``.



+-*/+-*/+-*/+-*/+-*/output_charset d 
output_charset

Some character sets must be converted before they can be used in email
headers or bodies.  If the *input_charset* is one of them, this attribute
will contain the name of the character set output will be converted to.
Otherwise, it will be ``None``.



+-*/+-*/+-*/+-*/+-*/output_codec d 
output_codec

The name of the Python codec used to convert Unicode to the
*output_charset*.  If no conversion codec is necessary, this attribute
will have the same value as the *input_codec*.



+-*/+-*/+-*/+-*/+-*/__ne__ m 
__ne__(other)

This method allows you to compare two :class:`Charset` instances for
inequality.



+-*/+-*/+-*/+-*/+-*/header_encode_lines m 
header_encode_lines(string, maxlengths)

Header-encode a *string* by converting it first to bytes.

This is similar to :meth:`header_encode` except that the string is fit
into maximum line lengths as given by the argument *maxlengths*, which
must be an iterator: each element returned from this iterator will provide
the next maximum line length.



+-*/+-*/+-*/+-*/+-*/header_encode m 
header_encode(string)

Header-encode the string *string*.

The type of encoding (base64 or quoted-printable) will be based on the
*header_encoding* attribute.



+-*/+-*/+-*/+-*/+-*/__str__ m 
__str__()

Returns *input_charset* as a string coerced to lower
case. :meth:`__repr__` is an alias for :meth:`__str__`.



+-*/+-*/+-*/+-*/+-*/get_body_encoding m 
get_body_encoding()

Return the content transfer encoding used for body encoding.

This is either the string ``quoted-printable`` or ``base64`` depending on
the encoding used, or it is a function, in which case you should call the
function with a single argument, the Message object being encoded.  The
function should then set the :mailheader:`Content-Transfer-Encoding`
header itself to whatever is appropriate.

Returns the string ``quoted-printable`` if *body_encoding* is ``QP``,
returns the string ``base64`` if *body_encoding* is ``BASE64``, and
returns the string ``7bit`` otherwise.


+-*/+-*/+-*/+-*/+-*/get_output_charset m 
get_output_charset()

Return the output character set.

This is the *output_charset* attribute if that is not ``None``, otherwise
it is *input_charset*.



+-*/+-*/+-*/+-*/+-*/body_encode m 
body_encode(string)

Body-encode the string *string*.

The type of encoding (base64 or quoted-printable) will be based on the
*body_encoding* attribute.


+-*/+-*/+-*/+-*/+-*/__eq__ m 
__eq__(other)

This method allows you to compare two :class:`Charset` instances for
equality.



+-*/+-*/+-*/encoders p 编码email消息正文的方式模块
+-*/+-*/+-*/+-*/encode_7or8bit f email消息正文格式设为7bit或8bit
encode_7or8bit(msg)
  不会变动正文，只根据其数据自动设置Content-Transfer-Encoding为7bit或8bit
+-*/+-*/+-*/+-*/encode_noop f email消息正文不做任何处理
encode_noop(msg)
+-*/+-*/+-*/+-*/encode_quopri f email消息正文用qp可打印编码
encode_quopri(msg)
  自动设置Content-Transfer-Encoding为quoted-printable
+-*/+-*/+-*/+-*/encode_base64 f email消息正文用base64编码
encode_base64(msg)
  自动设置Content-Transfer-Encoding为base64
+-*/+-*/+-*/errors p email异常模块
+-*/+-*/+-*/+-*/MessageError e email模块包异常基类
+-*/+-*/+-*/+-*/+-*/MultipartConversionError e 非复合消息无法内加其他消息错误
+-*/+-*/+-*/+-*/+-*/MessageParseError e 解析错误
+-*/+-*/+-*/+-*/+-*/+-*/BoundaryError e 分隔符错误
+-*/+-*/+-*/+-*/+-*/+-*/HeaderParseError e 头部解析错误
+-*/+-*/+-*/generator p email消息对象转为传输数据模块
+-*/+-*/+-*/+-*/BytesGenerator c 创建email传输数据生成器
BytesGenerator(outfp, mangle_from_=True, maxheaderlen=78)
  outfp:   支持write的类字节文件对象用以存放数据
  mangle_from_:   默认为True,在除了头行以外的以From开头的行前加'>'
  maxheaderlen:   头部字段行的长度设置，设为0可禁止自动换行分行
+-*/+-*/+-*/+-*/+-*/write m 写入数据
write(s)
  s:   字符串,将以ascii编码方式存放
+-*/+-*/+-*/+-*/+-*/clone m 创建副本
clone(fp)
+-*/+-*/+-*/+-*/+-*/flatten m 生成email消息对象的传输数据
flatten(msg, unixfrom=False, linesep='\n')
  msg:       Message消息对象
  unixfrom:  如为True则包含开头的From行
  linesep:   分行字符串,使用'\r\n'有时可用于http数据
+-*/+-*/+-*/+-*/Generator c 创建email传输数据生成器
Generator(outfp, mangle_from_=True, maxheaderlen=78)
  outfp:   支持write的类文件对象用以存放数据
  mangle_from_:   默认为True,在除了头行以外的以From开头的行前加'>'
  maxheaderlen:   头部字段行的长度设置，设为0可禁止自动换行分行
+-*/+-*/+-*/+-*/+-*/write m 写入数据
write(s)
+-*/+-*/+-*/+-*/+-*/clone m 创建副本
clone(fp)
+-*/+-*/+-*/+-*/+-*/flatten m 生成email消息对象的传输数据
flatten(msg, unixfrom=False, linesep='\n')
  msg:       Message消息对象
  unixfrom:  如为True则包含开头的From行
  linesep:   分行字符串,使用'\r\n'有时可用于http数据
+-*/+-*/+-*/+-*/DecodedGenerator c 
TODO:
DecodedGenerator(outfp[, mangle_from_=True, maxheaderlen=78, fmt=None)

This class, derived from :class:`Generator` walks through all the subparts of a
message.  If the subpart is of main type :mimetype:`text`, then it prints the
decoded payload of the subpart. Optional *_mangle_from_* and *maxheaderlen* are
as with the :class:`Generator` base class.

If the subpart is not of main type :mimetype:`text`, optional *fmt* is a format
string that is used instead of the message payload. *fmt* is expanded with the
following keywords, ``%(keyword)s`` format:

* ``type`` -- Full MIME type of the non-\ :mimetype:`text` part

* ``maintype`` -- Main MIME type of the non-\ :mimetype:`text` part

* ``subtype`` -- Sub-MIME type of the non-\ :mimetype:`text` part

* ``filename`` -- Filename of the non-\ :mimetype:`text` part

* ``description`` -- Description associated with the non-\ :mimetype:`text` part

* ``encoding`` -- Content transfer encoding of the non-\ :mimetype:`text` part

The default value for *fmt* is ``None``, meaning ::

   [Non-text (%(type)s) part of message omitted, filename %(filename)s]


+-*/+-*/+-*/header p 生成非ASCII码email头部的模块
通常纯粹的email地址是ASCII码的,而姓名可能需要编码,同时编码email地址是不通用的。
创建To,From头部的通用方法是
  h = Header()
  h.append('中文简体姓名','gbk')
  h.append('<xx@xx.xx>;','ascii')
  h.append('中文繁体姓名','big5')
  h.append('<xx@xx.xx>','ascii')
  m['To'] = h
创建Subject头部的通用方法是
  m['Subject'] = Header('标题',编码)
+-*/+-*/+-*/+-*/make_header f 
make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' ')

Create a :class:`Header` instance from a sequence of pairs as returned by
:func:`decode_header`.

:func:`decode_header` takes a header value string and returns a sequence of
pairs of the format ``(decoded_string, charset)`` where *charset* is the name of
the character set.

This function takes one of those sequence of pairs and returns a
:class:`Header` instance.  Optional *maxlinelen*, *header_name*, and
*continuation_ws* are as in the :class:`Header` constructor.



+-*/+-*/+-*/+-*/decode_header f 解码email头部字段字符串
decode_header(header)
  header:   头部字段字符串,如'=?iso-8859-1?q?p=F6stal?='
  头部字段有时会有多个不同编码的部分,返回各部分列表,
  其形式为((解码后字符串,编码),...)
+-*/+-*/+-*/+-*/Header c 创建非ASCII码的email头部字段可变字符串
Header(s=None, charset=None, maxlinelen=None, 
       header_name=None, continuation_ws=' ', errors='strict')
  s:        内容字符串
  charset:  内容字符串如何编码
  maxlinelen:   最大长度,默认76
  返回的对象不支持字符串的常用操作
+-*/+-*/+-*/+-*/+-*/encode m 
encode(splitchars=';, \\t', maxlinelen=None, linesep='\\n')

Encode a message header into an RFC-compliant format, possibly wrapping
long lines and encapsulating non-ASCII parts in base64 or quoted-printable
encodings.

Optional *splitchars* is a string containing characters which should be
given extra weight by the splitting algorithm during normal header
wrapping.  This is in very rough support of :RFC:`2822`\'s 'higher level
syntactic breaks':  split points preceded by a splitchar are preferred
during line splitting, with the characters preferred in the order in
which they appear in the string.  Space and tab may be included in the
string to indicate whether preference should be given to one over the
other as a split point when other split chars do not appear in the line
being split.  Splitchars does not affect :RFC:`2047` encoded lines.

*maxlinelen*, if given, overrides the instance's value for the maximum
line length.

*linesep* specifies the characters used to separate the lines of the
folded header.  It defaults to the most useful value for Python
application code (``\n``), but ``\r\n`` can be specified in order
to produce headers with RFC-compliant line separators.

.. versionchanged:: 3.2
   Added the *linesep* argument.



+-*/+-*/+-*/+-*/+-*/__str__ m 
__str__()

Returns an approximation of the :class:`Header` as a string, using an
unlimited line length.  All pieces are converted to unicode using the
specified encoding and joined together appropriately.  Any pieces with a
charset of `unknown-8bit` are decoded as `ASCII` using the `replace`
error handler.

.. versionchanged:: 3.2
   Added handling for the `unknown-8bit` charset.



+-*/+-*/+-*/+-*/+-*/append m 添加字符串
append(s, charset=None, errors='strict')
  s:        内容字符串
  charset:  内容字符串采取何种编码
+-*/+-*/+-*/iterators p Iterate over a  message object tree.
+-*/+-*/+-*/+-*/body_line_iterator f 
body_line_iterator(msg, decode=False)

This iterates over all the payloads in all the subparts of *msg*, returning the
string payloads line-by-line.  It skips over all the subpart headers, and it
skips over any subpart with a payload that isn't a Python string.  This is
somewhat equivalent to reading the flat text representation of the message from
a file using :meth:`readline`, skipping over all the intervening headers.

Optional *decode* is passed through to :meth:`Message.get_payload`.



+-*/+-*/+-*/+-*/_structure f 
_structure(msg, fp=None, level=0, include_default=False)

Prints an indented representation of the content types of the message object
structure.  For example::

   >>> msg = email.message_from_file(somefile)
   >>> _structure(msg)
   multipart/mixed
       text/plain
       text/plain
       multipart/digest
           message/rfc822
               text/plain
           message/rfc822
               text/plain
           message/rfc822
               text/plain
           message/rfc822
               text/plain
           message/rfc822
               text/plain
       text/plain

Optional *fp* is a file-like object to print the output to.  It must be
suitable for Python's :func:`print` function.  *level* is used internally.
*include_default*, if true, prints the default type as well.


+-*/+-*/+-*/+-*/typed_subpart_iterator f 
typed_subpart_iterator(msg, maintype='text', subtype=None)

This iterates over all the subparts of *msg*, returning only those subparts that
match the MIME type specified by *maintype* and *subtype*.

Note that *subtype* is optional; if omitted, then subpart MIME type matching is
done only with the main type.  *maintype* is optional too; it defaults to
:mimetype:`text`.

Thus, by default :func:`typed_subpart_iterator` returns each subpart that has a
MIME type of :mimetype:`text/\*`.


+-*/+-*/+-*/message p email消息基础对象模块
+-*/+-*/+-*/+-*/Message c email消息对象
Message()
  email消息是一个类字典对象，字典主要操作消息头部字段，其键为头部标识(不带':')
  可直接作m[headername]=value,del m[headername],for x in m等操作
  len(m)返回的也是头部字段的数量,也支持get,keys,values,items等操作
  (有时email的头部会有多个同名字段,这可使用items来获取其信息)
  str(m)将返回消息的整个传输所用的数据内容
  email主体消息常用头部有'Subject','To','Cc','Date'
  创建邮件一般不直接使用此对象而是使用email.mime.*(都是Message的子类)
+-*/+-*/+-*/+-*/+-*/epilogue d 尾部(最后一个边界字符串之后的部分)
+-*/+-*/+-*/+-*/+-*/preamble d 前言(报头结尾到第一个边界字符串之间的部分)
+-*/+-*/+-*/+-*/+-*/defects d 包含所有解析时出现的问题信息的列表
+-*/+-*/+-*/+-*/+-*/set_param m 设置头部字段的参数
set_param(param, value, header='Content-Type', requote=True, 
          charset=None, language='')
  param:   参数名称
  value:   参数的值
  header:  字段标识(如果不存在会自动添加,其值为空,
           如果是'Content-Type'并且不存在，会自动添加并赋值为text/plain
  requote: 属性其值是否用引号包起来
  charset:  value的编码
  language: value的语言
  >>> msg.set_param('charset','us-ascii')
  >>> print(msg.as_string()) 
  Content-Type: text/plain; charset="us-ascii"
  >>> msg.set_param('filename', 'Fußballer.ppt',header='Content-Disposition',
                  charset='iso-8859-1')
  >>> print(msg.as_string()) 
  Content-Disposition: filename*="iso-8859-1''Fu%DFballer.ppt"
+-*/+-*/+-*/+-*/+-*/as_string m 将消息转化为RFC-2822兼容的文本字符串(用于传输)
as_string(unixfrom=False, maxheaderlen=0)
  unixfrom:  如为True则包含开头的From行
  结果是由Generator.flatten生成的
+-*/+-*/+-*/+-*/+-*/__str__ m 返回as_string(unixfrom=True)
  >>> mess.set_type('text/plain')
  >>> print mess
  From nobody Mon Nov 11 16:13:11 2002
  MIME-Version: 1.0
  content-type: text/plain

+-*/+-*/+-*/+-*/+-*/walk m 遍历复合邮件的各个附件(迭代生成)
walk()
  >>> for part in msg.walk():
  ...     print(part.get_content_type())
  multipart/report
  text/plain
  message/delivery-status
  text/plain
  text/plain
  message/rfc822
+-*/+-*/+-*/+-*/+-*/add_header m 添加一个头部字段
add_header(_name, _value, **_params)
  _name:    字段标识
  _value:   值
  _params:  属性,可以是字典,也可以直接使用k=v
            v如果包含非ascii编码的字符,应使用(编码,语言,v)三元组形式
  >>> msg.add_header('Content-Disposition','attachment',
                  filename=('iso-8859-1', '', 'Fußballer.ppt'))
  >>> print(msg.as_string()) 
  Content-Disposition: attachment; filename*="iso-8859-1''Fu%DFballer.ppt"
+-*/+-*/+-*/+-*/+-*/get_content_subtype m 返回内容的次要类型
+-*/+-*/+-*/+-*/+-*/get_filename m 返回所含的文件名
get_filename(failobj=None)
  failobj: 未找到时的默认值
  返回'Content-Disposition'头的'filename'参数.不存在返回failobj
+-*/+-*/+-*/+-*/+-*/del_param m 删除某个头部字段的某个参数
del_param(param, header='content-type', requote=True)
  param:   参数名称
  header:  字段标识
  requote: 剩余的属性其值是否用引号包起来
+-*/+-*/+-*/+-*/+-*/get_content_type m 获取内容类型,返回小写的'type/subtype'
+-*/+-*/+-*/+-*/+-*/get_all m 返回同名头部字段的所有值列表
get_all(name, failobj=None)
  name:    字段标识
  failobj: 未找到时的默认值
+-*/+-*/+-*/+-*/+-*/get_params m 获取某头部字段的参数(k,v)列表
get_params(failobj=None, header='content-type', unquote=True)
  failobj: 未找到头部字段时的默认值
  header:  字段标识
  unquote: 返回的参数值是否不带两端的引号
+-*/+-*/+-*/+-*/+-*/attach m 添加附件
attach(payload)
  payload:   消息对象(往往是email.mime里的消息对象实例)
  此操作需保证当前消息未设定正文
+-*/+-*/+-*/+-*/+-*/set_boundary m 手动设置复合消息的分界线(通常不需要)
set_boundary(boundary)
  boundary:  分界线字符串，应保证不出现在消息内容中
  分界线是Content-Type的一个参数，如无Content-Type头部字段将报HeaderParseError
+-*/+-*/+-*/+-*/+-*/set_charset m 设置正文的字符集
set_charset(charset)
  给Content-Type头部字段设置charset属性.(会自动补充MIME-Version头部字段)
  >>> msg.set_charset('us-ascii')
  >>> print(msg.as_string()) 
  Content-Type: text/plain; charset="us-ascii"

+-*/+-*/+-*/+-*/+-*/set_payload m 设置消息内容(清除原有内容)
set_payload(payload, charset=None)
  payload:   消息正文字符串或所要复合的消息列表
+-*/+-*/+-*/+-*/+-*/get_unixfrom m 返回From首行
+-*/+-*/+-*/+-*/+-*/get_charset m 获取正文的字符集
+-*/+-*/+-*/+-*/+-*/set_type m 设置内容类型
set_type(type, header='Content-Type', requote=True)
  type:   mime类型字符串'type/subtype'
  默认会自动补充MIME-Version头部字段
+-*/+-*/+-*/+-*/+-*/set_unixfrom m 设置消息首行(通常为From..)
set_unixfrom(unixfrom)
  unixfrom:   首行字符串
+-*/+-*/+-*/+-*/+-*/get_charsets m 获取字符集参数,返回列表
get_charsets(failobj=None)
  failobj: 未找到字符集时的默认值
  如果是multipart复合消息,会同时收集所含其他消息的字符集
+-*/+-*/+-*/+-*/+-*/get_default_type m 获取默认内容类型(用于无Content-Type的)
get_default_type()
  大多数消息默认类型为text/plain
+-*/+-*/+-*/+-*/+-*/get_content_maintype m 返回内容的主类型
+-*/+-*/+-*/+-*/+-*/is_multipart m 是否是multipart复合消息
is_multipart()
   返回值为True并无法保证'Content-Type'头部是'multipart/*'
+-*/+-*/+-*/+-*/+-*/replace_header m 替换头部字段的值,如不存在则报错
replace_header(_name, _value)
  _name:    字段标识
  _value:   值
  只替换第一个出现的_name字段
+-*/+-*/+-*/+-*/+-*/get_content_charset m 返回内容正文的字符集
get_content_charset(failobj=None)
  failobj:  未设置时返回的值
+-*/+-*/+-*/+-*/+-*/set_default_type m 设置默认内容类型(用于无Content-Type的)
set_default_type(ctype)
  type:   mime类型字符串'type/subtype'
+-*/+-*/+-*/+-*/+-*/get_boundary m 获取复合消息的分界线(不带两侧的双引号)
get_boundary(failobj=None)
  failobj:  没有分界线时返回的值
+-*/+-*/+-*/+-*/+-*/get_payload m 获取消息正文内容
get_payload(i=None, decode=False)
  i:   如果消息是复合消息,i可指定返回第几个子消息对象,
       为None则返回所有子消息对象列表
  decode:  用于非复合消息，为True则对正文作解码
+-*/+-*/+-*/+-*/+-*/get_param m 返回某参数的值
get_param(param, failobj=None, header='content-type', unquote=True)
  param:   参数名称
  failobj: 没有参数名称时返回的值
  header:  字段标识,默认为'Content-Type'
  unquote: 返回的参数值是否不带两端的引号
  返回的值或者是字符串，或者是(字符集,语言,值)三元组
+-*/+-*/+-*/mime p 创建email对象模块
此模块内的类都是email.message.Message的子类
+-*/+-*/+-*/+-*/application p 应用程序文件附件模块
+-*/+-*/+-*/+-*/+-*/MIMEApplication c 创建应用程序文件附件
MIMEApplication(_data, _subtype='octet-stream', 
                _encoder=email.encoders.encode_base64, **_params)
  _data:       二进制数据
  _encoder:    编码方式
  _subtype:    副类型
  _params:     类型附属参数字典,或者直接使用key=value来定义头部字段
  主类型为'application'
  往往需要手动添加附件报头
  >>> msg.add_header('Content-Disposition','attachment',
                  filename=('utf-8', '', '中文文件名.xxx'))
+-*/+-*/+-*/+-*/audio p 多媒体文件附件模块 
+-*/+-*/+-*/+-*/+-*/MIMEAudio c 创建多媒体文件附件
MIMEAudio(_audiodata, _subtype=None, 
          _encoder=email.encoders.encode_base64, **_params)
  _audiodata:  二进制数据
  _encoder:    编码方式
  _subtype:    副类型(如果数据能被sndhdr模块识别,副类型将自动设定mpeg或wav等等
               如果未能识别而且也未给出自定义的参数将会报TypeError)
  _params:     类型附属参数字典,或者直接使用key=value来定义头部字段
  主类型为'audio'
  往往需要手动添加附件报头
  >>> msg.add_header('Content-Disposition','attachment',
                  filename=('utf-8', '', '中文文件名.wav'))
+-*/+-*/+-*/+-*/base p 附件基础模块
+-*/+-*/+-*/+-*/+-*/MIMEBase c mime消息附件对象类型
MIMEBase(_maintype, _subtype, **_params)
  _maintype:   主类型
  _subtype:    副类型
  _params:     类型附属参数字典,或者直接使用key=value来定义头部字段
  创建的mime消息体包含'Content-Type'头部和'MIME-Version'头部
  >>> mess = MIMEBase('text','html',charset='us-ascii')
  >>> print mess
  From nobody Tue Nov 12 03:32:33 2002
  Content-Type: text/html; charset="us-ascii"
  MIME-Version: 1.0
+-*/+-*/+-*/+-*/image p 图像附件模块
+-*/+-*/+-*/+-*/+-*/MIMEImage c 创建图像附件
MIMEImage(_imagedata, _subtype=None, 
          _encoder=email.encoders.encode_base64, **_params)
  _imagedata:  二进制数据
  _encoder:    编码方式
  _subtype:    副类型(如果数据能被imghdr模块识别,副类型将自动设定jpg或png等等
               如果未能识别而且也未给出自定义的参数将会报TypeError)
  _params:     类型附属参数字典,或者直接使用key=value来定义头部字段
  主类型为'image'
  往往需要手动添加附件报头
  >>> msg.add_header('Content-Disposition','attachment',
                  filename=('utf-8', '', '中文文件名.jpg'))
+-*/+-*/+-*/+-*/message p 消息模块
+-*/+-*/+-*/+-*/+-*/MIMEMessage c 创建消息
MIMEMessage(_msg, _subtype='rfc822')
  _msg:        email.message.Message实例(须设有正文)
  _subtype:    副类型
+-*/+-*/+-*/+-*/multipart p 复合邮件模块
+-*/+-*/+-*/+-*/+-*/MIMEMultipart c 创建复合邮件
MIMEMultipart(_subtype='mixed', boundary=None, _subparts=None, **_params)
  _subtype:    副类型
  boundary:    边界分隔符
  _subparts:   附件消息列表
  _params:     类型附属参数字典,或者直接使用key=value来定义头部字段
  通常邮件需要设定'To','From','Subject','Date','Cc','Reply-To'等报头
  m = MIMEMultipart()    #如要含html应使用MIMEMultipart('alternative')
  m['To'] = 'xx@xx.xx'   #或使用email.utils.formataddr生成
  m['From'] = 'xx@xx.xx' #或使用email.utils.formataddr生成
  m['Subject'] = 'xxxx'  #如含有中文应使用email.header.Header生成
  m['Date'] = '...'      #或使用email.utils.formatedate生成
  m.attach(MIMEText('..'))  #添加正文
  f = MIMEApplication(....) #生成附件
  f.add_header('Content-Disposition','attachment',filename='xxxx'))
  m.attach(f)               #添加附件
+-*/+-*/+-*/+-*/nonmultipart p 非复合邮件模块
+-*/+-*/+-*/+-*/+-*/MIMENonMultipart c 创建简单邮件(不能attach)
+-*/+-*/+-*/+-*/text p 正文模块
+-*/+-*/+-*/+-*/+-*/MIMEText c 创建正文
MIMEText(_text, _subtype='plain', _charset='us-ascii')
  _text:      文本字符串
  _subtype:   通常用'plain',如_text内容为html形式,可设为'html'
  _charset:   要如何编码_text
+-*/+-*/+-*/parser p Parse flat text email messages to produce a message object structure.
+-*/+-*/+-*/+-*/FeedParser c 
FeedParser(_factory=email.message.Message)

Create a :class:`FeedParser` instance.  Optional *_factory* is a no-argument
callable that will be called whenever a new message object is needed.  It
defaults to the :class:`email.message.Message` class.


+-*/+-*/+-*/+-*/+-*/feed m 
feed(data)

Feed the :class:`FeedParser` some more data.  *data* should be a string
containing one or more lines.  The lines can be partial and the
:class:`FeedParser` will stitch such partial lines together properly.  The
lines in the string can have any of the common three line endings,
carriage return, newline, or carriage return and newline (they can even be
mixed).


+-*/+-*/+-*/+-*/+-*/close m 
close()

Closing a :class:`FeedParser` completes the parsing of all previously fed
data, and returns the root message object.  It is undefined what happens
if you feed more data to a closed :class:`FeedParser`.




+-*/+-*/+-*/+-*/Parser c 
Parser(_class=email.message.Message, strict=None)

The constructor for the :class:`Parser` class takes an optional argument
*_class*.  This must be a callable factory (such as a function or a class), and
it is used whenever a sub-message object needs to be created.  It defaults to
:class:`~email.message.Message` (see :mod:`email.message`).  The factory will
be called without arguments.

The optional *strict* flag is ignored.

.. deprecated:: 2.4
   Because the :class:`Parser` class is a backward compatible API wrapper
   around the new-in-Python 2.4 :class:`FeedParser`, *all* parsing is
   effectively non-strict.  You should simply stop passing a *strict* flag to
   the :class:`Parser` constructor.

The other public :class:`Parser` methods are:



+-*/+-*/+-*/+-*/+-*/parse m 
parse(fp, headersonly=False)

Read all the data from the file-like object *fp*, parse the resulting
text, and return the root message object.  *fp* must support both the
:meth:`readline` and the :meth:`read` methods on file-like objects.

The text contained in *fp* must be formatted as a block of :rfc:`2822`
style headers and header continuation lines, optionally preceded by a
envelope header.  The header block is terminated either by the end of the
data or by a blank line.  Following the header block is the body of the
message (which may contain MIME-encoded subparts).

Optional *headersonly* is as with the :meth:`parse` method.


+-*/+-*/+-*/+-*/+-*/parsestr m 
parsestr(text, headersonly=False)

Similar to the :meth:`parse` method, except it takes a string object
instead of a file-like object.  Calling this method on a string is exactly
equivalent to wrapping *text* in a :class:`~io.StringIO` instance first and
calling :meth:`parse`.

Optional *headersonly* is a flag specifying whether to stop parsing after
reading the headers or not.  The default is ``False``, meaning it parses
the entire contents of the file.




+-*/+-*/+-*/+-*/BytesParser c 
BytesParser(_class=email.message.Message, strict=None)

This class is exactly parallel to :class:`Parser`, but handles bytes input.
The *_class* and *strict* arguments are interpreted in the same way as for
the :class:`Parser` constructor.  *strict* is supported only to make porting
code easier; it is deprecated.


+-*/+-*/+-*/+-*/+-*/parse m 
parse(fp, headeronly=False)

Read all the data from the binary file-like object *fp*, parse the
resulting bytes, and return the message object.  *fp* must support
both the :meth:`readline` and the :meth:`read` methods on file-like
objects.

The bytes contained in *fp* must be formatted as a block of :rfc:`2822`
style headers and header continuation lines, optionally preceded by a
envelope header.  The header block is terminated either by the end of the
data or by a blank line.  Following the header block is the body of the
message (which may contain MIME-encoded subparts, including subparts
with a :mailheader:`Content-Transfer-Encoding` of ``8bit``.

Optional *headersonly* is a flag specifying whether to stop parsing after
reading the headers or not.  The default is ``False``, meaning it parses
the entire contents of the file.


+-*/+-*/+-*/+-*/+-*/parsebytes m 
parsebytes(bytes, headersonly=False)

Similar to the :meth:`parse` method, except it takes a byte string object
instead of a file-like object.  Calling this method on a byte string is
exactly equivalent to wrapping *text* in a :class:`~io.BytesIO` instance
first and calling :meth:`parse`.

Optional *headersonly* is as with the :meth:`parse` method.


+-*/+-*/+-*/+-*/BytesFeedParser c 
BytesFeedParser(_factory=email.message.Message)

Works exactly like :class:`FeedParser` except that the input to the
:meth:`~FeedParser.feed` method must be bytes and not string.

.. versionadded:: 3.2



+-*/+-*/+-*/utils p email有关工具函数模块
+-*/+-*/+-*/+-*/unquote f 返回不包含两侧<>或"的字符串,同时解码'\'转义
unquote(str)
    >>> print(unquote('<aaa@xx.com>'))
    aaa@xx.com
    >>> print(unquote('"us-ascii"'))
    us-ascii
+-*/+-*/+-*/+-*/parsedate f 解析rfc2822形式的时间字符串为九元组
parsedate(date)
  date:  时间字符串 如'Thu, 01 jan 1970 00:00:01 GMT'
  返回(年,月,日,时,分,秒,无用,无用,无用)
+-*/+-*/+-*/+-*/collapse_rfc2231_value f 
collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')

When a header parameter is encoded in :rfc:`2231` format,
:meth:`Message.get_param` may return a 3-tuple containing the character set,
language, and value.  :func:`collapse_rfc2231_value` turns this into a unicode
string.  Optional *errors* is passed to the *errors* argument of :class:`str`'s
:func:`encode` method; it defaults to ``'replace'``.  Optional
*fallback_charset* specifies the character set to use if the one in the
:rfc:`2231` header is not known by Python; it defaults to ``'us-ascii'``.

For convenience, if the *value* passed to :func:`collapse_rfc2231_value` is not
a tuple, it should be a string and it is returned unquoted.



+-*/+-*/+-*/+-*/getaddresses f 将复合地址列表转换为(name,addr)列表
getaddresses(fieldvalues)
  fieldvalue:  通常由Message.get_all产生
  >>> addrs = ['"Joe" <jdoe@nowhere.lan>','Jane <jroe@other.net>']
  >>> getaddresses(addrs)
  [('Joe', 'jdoe@nowhere.lan'), ('Jane', 'jroe@other.net')]
+-*/+-*/+-*/+-*/parseaddr f 将复合地址字符串解析为(realname,addr)二元组
parseaddr(address)
    >>> parseaddr('na me <xx@xxx.com>')
    ('na me', 'xx@xxx.com')
+-*/+-*/+-*/+-*/quote f 返回一个字符串, 其中的反斜杠和双引号都用'\'转义.
quote(str)
+-*/+-*/+-*/+-*/decode_rfc2231 f 解码rfc2231字符串,返回(编码,语言,字符串)三元组
decode_rfc2231(s)
  s:    字符串，不是字节字符串
  s通常是%字符串,前面不含有编码和语言信息,必要时可手工添加编码(编码'语言')
  >>> decode_rfc2231('x%2By-z%2Aw')
  ('','','x+y-z*w')
  >>> decode_rfc2231("utf-8''" + "%E4%B8%AD%E6%96%87")
  ('utf-8','','中文')
+-*/+-*/+-*/+-*/make_msgid f 生成Message-ID字符串
make_msgid(idstring=None, domain=None)


Returns a string suitable for an :rfc:`2822`\ -compliant
:mailheader:`Message-ID` header.  Optional *idstring* if given, is a string
used to strengthen the uniqueness of the message id.  Optional *domain* if
given provides the portion of the msgid after the '@'.  The default is the
local hostname.  It is not normally necessary to override this default, but
may be useful certain cases, such as a constructing distributed system that
uses a consistent domain name across multiple hosts.

.. versionchanged:: 3.2 domain keyword added



+-*/+-*/+-*/+-*/encode_rfc2231 f 编码字符串为rfc2231形式
encode_rfc2231(s, charset=None, language=None)
  s:    字符串，不是字节字符串
  charset:  编码,如'gbk',默认使用ascii
  language: 语言
  如果没有给出后两项参数，返回的字符串将不含有"编码'语言'"头部
  如有给出返回的字符串将含有"编码'语言'"头部
  >>> encode_rfc2231('x+y-z*w')
  'x%2By-z%2Aw'
  >>> encode_rfc2231('中文','utf-8')
  "utf-8''%E4%B8%AD%E6%96%87'
+-*/+-*/+-*/+-*/parsedate_tz f 解析rfc2822的时间字符串为十元组(带时区差)
parsedate_tz(date)
  date:  时间字符串 如'Thu, 01 jan 1970 20:00:01 +0800'
  返回(年,月,日,时,分,秒,无用,无用,无用,时区差秒数)
+-*/+-*/+-*/+-*/formatdate f 生成rfc2822形式的时间字符串
formatdate(timeval=None, localtime=False, usegmt=False)
  timeval:   浮点数时间，默认使用当前时间
  localtime: 是否生成本地时，默认生成世界时
  usegmt:    是否使用'GMT',默认不使用(通常在http使用此函数时应设为True)
  通常用于邮件的Date头部
+-*/+-*/+-*/+-*/decode_params f 
decode_params(params)

Decode parameters list according to :rfc:`2231`.  *params* is a sequence of
2-tuples containing elements of the form ``(content-type, string-value)``.



+-*/+-*/+-*/+-*/mktime_tz f 由时间十元组生成浮点数时间
mktime_tz(tuple)
  tuple:  parsedate_tz生成的十元组
+-*/+-*/+-*/+-*/formataddr f 将(姓名,地址)变为'姓名 <地址>'字符串
formataddr(pair)
  pair:   须是一对字符串(realname,email_address)
  如果realname为空，则直接返回email_address(不带<>)
  如realname为中文往往要先作email.header.Header(realname,'..')处理
  通常用于邮件里的To或Cc字段
+-*/+-*/cookielib p cookie管理模块(主要用于urllib)(python2)
通常cookie由服务器发送用以标示会话或用户身份
客户端根据服务器所给cookie的一些设定在需要时发送同样名称和内容的cookie
+-*/+-*/+-*/LoadError e cookie记录文件加载错误
+-*/+-*/+-*/CookieJar c cookie记录管理器
CookieJar(policy=None)
  policy:           CookiePolicy匹配检测器实例对象
  主要用于记录由服务器发送的cookie,再根据页面请求设定所需携带的cookie
+-*/+-*/+-*/+-*/set_cookie_if_ok m 
set_cookie_if_ok(cookie, request)

Set a :class:`Cookie` if policy says it's OK to do so.



+-*/+-*/+-*/+-*/set_policy m 设置CookiePolicy匹配检测器实例
set_policy(policy)
+-*/+-*/+-*/+-*/clear m 清除已记录cookie
clear([domain[, path[, name]]])
  domain:   指定域
  path:     指定domain域下的路径
  name:     指定domain域path路径里某cookie的名称
+-*/+-*/+-*/+-*/add_cookie_header m 根据请求对象信息将需要的cookie加入其中
add_cookie_header(request)
主要用于urllib的cookie处理器
+-*/+-*/+-*/+-*/set_cookie m 添加Cookie实例记录
set_cookie(cookie)
  对于有些奇葩的服务器会用js来生成cookie而不是由服务器发送只能手工set_cookie
+-*/+-*/+-*/+-*/extract_cookies m 根据服务器回应扩展管理的cookie记录
extract_cookies(response, request)
主要用于urllib的cookie处理器
+-*/+-*/+-*/+-*/clear_session_cookies m 清除会话cookie(没有时间设定的cookie)
+-*/+-*/+-*/+-*/make_cookies m 获取服务器发送的cookie列表
make_cookies(response, request)

Return sequence of :class:`Cookie` objects extracted from *response* object.

See the documentation for :meth:`extract_cookies` for the interfaces required of
the *response* and *request* arguments.



+-*/+-*/+-*/+-*/FileCookieJar c 可储存的cookie记录管理器
FileCookieJar(filename, delayload=None, policy=None)
  filename:         指定存储的文件
  delayload:        是否延迟加载
  policy:           CookiePolicy匹配检测器实例对象
+-*/+-*/+-*/+-*/+-*/filename d 指向的文件(可更改)
+-*/+-*/+-*/+-*/+-*/load m 从文件加载cookie记录
load(filename=None, ignore_discard=False, ignore_expires=False)
  filename:  可指定文件
  ignore_discard:   是否忽略会话cookie,设为True为不忽略
  ignore_expires:   是否忽略过期cookie,设为True为不忽略
+-*/+-*/+-*/+-*/+-*/save m 保存cookie到文件
save(filename=None, ignore_discard=False, ignore_expires=False)
  filename:  可指定文件
  ignore_discard:   是否忽略会话cookie,设为True为不忽略
  ignore_expires:   是否忽略过期cookie,设为True为不忽略
+-*/+-*/+-*/+-*/+-*/revert m 清楚现有的记录后从文件加载cookie记录
revert(filename=None, ignore_discard=False, ignore_expires=False)
  filename:  可指定文件
  ignore_discard:   是否忽略会话cookie,设为True为不忽略
  ignore_expires:   是否忽略过期cookie,设为True为不忽略
+-*/+-*/+-*/+-*/+-*/MozillaCookieJar c Netscape文本格式的cookie记录器
MozillaCookieJar(filename, delayload=None, policy=None)
  filename:         指定存储的文件
  delayload:        是否延迟加载
  policy:           CookiePolicy匹配检测器实例对象
  以tab分割的cookie记录文本(wget,curl等很多软件以此方式保存)
  不过要读取的话文件第一行必须是'# Netscape HTTP Cookie File'
+-*/+-*/+-*/+-*/+-*/LWPCookieJar c perl文本格式的cookie记录器
LWPCookieJar(filename, delayload=None, policy=None)
  filename:         指定存储的文件
  delayload:        是否延迟加载
  policy:           CookiePolicy匹配检测器实例对象
  以分号分割行头为Set-Cookies:的cookie记录文本(主要由libwww-perl生成)
+-*/+-*/+-*/CookiePolicy c 对应cookie匹配检测器基类
CookiePolicy()
  各个服务器发送的cookie不可能每次请求页面都要发送
  往往需要检测域和路径以及有效期等等挑选适用的cookie的发送
  匹配检测器根据页面请求来判断哪些cookie适合发送
+-*/+-*/+-*/+-*/rfc2965 d 
rfc2965

Implement RFC 2965 protocol.



+-*/+-*/+-*/+-*/hide_cookie2 d 
hide_cookie2

Don't add :mailheader:`Cookie2` header to requests (the presence of this header
indicates to the server that we understand RFC 2965 cookies).


+-*/+-*/+-*/+-*/netscape d 
netscape

Implement Netscape protocol.



+-*/+-*/+-*/+-*/path_return_ok m 路径是否匹配页面请求(可自定义)
path_return_ok(path, request)
  返回True表示request接受此path下的cookie
+-*/+-*/+-*/+-*/domain_return_ok m 域是否匹配页面请求(可自定义)
domain_return_ok(domain, request)
  返回True表示request接受此domain的cookie
+-*/+-*/+-*/+-*/set_ok m cookie是否保存(可自定义)
set_ok(cookie, request)
  返回False则不会记录此request请求返回的服务器cookie
+-*/+-*/+-*/+-*/return_ok m cookie是否随页面请求一起发送(可自定义)
return_ok(cookie, request)
  返回True表示request会包含此cookie
+-*/+-*/+-*/+-*/DefaultCookiePolicy c 创建通常使用的cookie匹配检测器
DefaultCookiePolicy( blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, 
    rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, 
    strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, 
    strict_ns_domain=DefaultCookiePolicy.DomainLiberal, strict_ns_set_initial_dollar=False, 
    strict_ns_set_path=False )
  blocked_domains:     禁止记录cookie的服务器域名列表
  allowed_domains:     只允许记录cookie的服务器域名列表
+-*/+-*/+-*/+-*/+-*/strict_rfc2965_unverifiable d 
strict_rfc2965_unverifiable

Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable
transaction is one resulting from a redirect or a request for an image hosted on
another site).  If this is false, cookies are *never* blocked on the basis of
verifiability



+-*/+-*/+-*/+-*/+-*/strict_ns_domain d 
strict_ns_domain

Flags indicating how strict to be with domain-matching rules for Netscape
cookies.  See below for acceptable values.



+-*/+-*/+-*/+-*/+-*/DomainRFC2965Match d 
DomainRFC2965Match

When setting cookies, require a full RFC 2965 domain-match.


+-*/+-*/+-*/+-*/+-*/rfc2109_as_netscape d 
rfc2109_as_netscape

If true, request that the :class:`CookieJar` instance downgrade RFC 2109 cookies
(ie. cookies received in a :mailheader:`Set-Cookie` header with a version
cookie-attribute of 1) to Netscape cookies by setting the version attribute of
the :class:`Cookie` instance to 0.  The default value is :const:`None`, in which
case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned
off.  Therefore, RFC 2109 cookies are downgraded by default.



+-*/+-*/+-*/+-*/+-*/DomainStrict d 
DomainStrict

Equivalent to ``DomainStrictNoDots|DomainStrictNonDomain``.



+-*/+-*/+-*/+-*/+-*/strict_domain d 
strict_domain

Don't allow sites to set two-component domains with country-code top-level
domains like ``.co.uk``, ``.gov.uk``, ``.co.nz``.etc.  This is far from perfect
and isn't guaranteed to work!



+-*/+-*/+-*/+-*/+-*/DomainStrictNoDots d 
DomainStrictNoDots

When setting cookies, the 'host prefix' must not contain a dot (eg.
``www.foo.bar.com`` can't set a cookie for ``.bar.com``, because ``www.foo``
contains a dot).



+-*/+-*/+-*/+-*/+-*/strict_ns_set_path d 
strict_ns_set_path

Don't allow setting cookies whose path doesn't path-match request URI.


+-*/+-*/+-*/+-*/+-*/strict_ns_unverifiable d 
strict_ns_unverifiable

apply RFC 2965 rules on unverifiable transactions even to Netscape cookies



+-*/+-*/+-*/+-*/+-*/strict_ns_set_initial_dollar d 
strict_ns_set_initial_dollar

Ignore cookies in Set-Cookie: headers that have names starting with ``'$'``.



+-*/+-*/+-*/+-*/+-*/DomainStrictNonDomain d 
DomainStrictNonDomain

Cookies that did not explicitly specify a ``domain`` cookie-attribute can only
be returned to a domain equal to the domain that set the cookie (eg.
``spam.example.com`` won't be returned cookies from ``example.com`` that had no
``domain`` cookie-attribute).



+-*/+-*/+-*/+-*/+-*/DomainLiberal d 
DomainLiberal

Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched
off).



+-*/+-*/+-*/+-*/+-*/allowed_domains m 
allowed_domains()

Return :const:`None`, or the sequence of allowed domains (as a tuple).



+-*/+-*/+-*/+-*/+-*/set_allowed_domains m 
set_allowed_domains(allowed_domains)

Set the sequence of allowed domains, or :const:`None`.



+-*/+-*/+-*/+-*/+-*/is_not_allowed m 
is_not_allowed(domain)

Return whether *domain* is not on the whitelist for setting or receiving
cookies.


+-*/+-*/+-*/+-*/+-*/blocked_domains m 
blocked_domains()

Return the sequence of blocked domains (as a tuple).



+-*/+-*/+-*/+-*/+-*/set_blocked_domains m 
set_blocked_domains(blocked_domains)

Set the sequence of blocked domains.



+-*/+-*/+-*/+-*/+-*/is_blocked m 
is_blocked(domain)

Return whether *domain* is on the blacklist for setting or receiving cookies.



+-*/+-*/+-*/Cookie c 创建cookie对象
Cookie(version, name, value, port, port_specified, domain, domain_specified, 
       domain_initial_dot, path, path_specified, secure, expires, discard, 
       comment, comment_url, rest, rfc2109)
  version:             通常为0 
  name:                cookie名称字符串(不得含";, ")
  value:               cookie值字符串(不得含";, ")
  port:                通常为None 
  port_specified:      通常为False 
  domain:              域
  domain_specified:    通常为True
  domain_initial_dot:  域是否前带'.' 
  path:                路径,通常为'/'
  path_specified:      是否指定路径(path为'/'时此值应为False)
  secure:              是否只用于https 
  expires:             有效期整数,以1970开始的秒数
  discard:             是否是会话cookie(没有给出有效期的此值应为True)
  comment:             注释字符串(通常为None)
  comment_url:         通常为None
  rest:                通常为{}
  rfc2109:             通常为False
+-*/+-*/+-*/+-*/comment d 服务器给出的注释
+-*/+-*/+-*/+-*/secure d 是否用于HTTPS
+-*/+-*/+-*/+-*/domain_initial_dot d 是否是域名('.'开头的domain)
+-*/+-*/+-*/+-*/expires d 过期时间(从1970开始计的秒数)
+-*/+-*/+-*/+-*/value d 此cookie的值字符串
+-*/+-*/+-*/+-*/domain_specified d 是否是主机(不是'.'开头的domain)
+-*/+-*/+-*/+-*/version d 通常为0,符合rfc2965的为1
+-*/+-*/+-*/+-*/port_specified d 
port_specified

True if a port or set of ports was explicitly specified by the server (in the
:mailheader:`Set-Cookie` / :mailheader:`Set-Cookie2` header).



+-*/+-*/+-*/+-*/rfc2109 d 是否是rfc2109规范
+-*/+-*/+-*/+-*/path d 有效路径,通常为'/'
+-*/+-*/+-*/+-*/discard d 是否是会话cookie(未给出时间就是会话cookie)
+-*/+-*/+-*/+-*/port d 
port

String representing a port or a set of ports (eg. '80', or '80,8080'), or
:const:`None`.



+-*/+-*/+-*/+-*/comment_url d 服务器给出的说明连接地址(必须符合URI格式)
+-*/+-*/+-*/+-*/name d 此cookie的名称
+-*/+-*/+-*/+-*/domain d 有效域
+-*/+-*/+-*/+-*/set_nonstandard_attr m 
set_nonstandard_attr(name, value)

Set the value of the named cookie-attribute.


+-*/+-*/+-*/+-*/get_nonstandard_attr m 
get_nonstandard_attr(name, default=None)

If cookie has the named cookie-attribute, return its value. Otherwise, return
*default*.



+-*/+-*/+-*/+-*/is_expired m 检测是否过期
is_expired([now=None])
  now:   time时间秒数,未给出使用当前时间
+-*/+-*/+-*/+-*/has_nonstandard_attr m 
has_nonstandard_attr(name)

Return true if cookie has the named cookie-attribute.



+-*/+-*/httplib p HTTP(S)客户端模块(python2)
+-*/+-*/+-*/HTTP_PORT d 80
+-*/+-*/+-*/HTTPS_PORT d 443
+-*/+-*/+-*/OK d 请求成功(200)
+-*/+-*/+-*/CREATED d 请求已实现,Location里存URI地址(201)
+-*/+-*/+-*/ACCEPTED d 请求已接受(202)
+-*/+-*/+-*/NO_CONTENT d 响应无内容(204)
+-*/+-*/+-*/MULTIPLE_CHOICES d 多选择,Location里存URI地址(300)
+-*/+-*/+-*/MOVED_PERMANENTLY d 永久移动,Location里存URI地址(301)
+-*/+-*/+-*/MOVED_TEMPORARILY d 临时移动,Location里存URI地址(302)
+-*/+-*/+-*/NOT_MODIFIED d 无变化(304)
+-*/+-*/+-*/BAD_REQUEST d 请求错误(400)
+-*/+-*/+-*/UNAUTHORIZED d 身份未验证或验证错误(401)
+-*/+-*/+-*/FORBIDDEN d 禁止访问(403)
+-*/+-*/+-*/NOT_FOUND d 页面未找到(404)
+-*/+-*/+-*/PROXY_AUTHENTICATION_REQUIRED d 代理验证失败(407)
+-*/+-*/+-*/INTERNAL_SERVER_ERROR d 服务器出错(500)
+-*/+-*/+-*/NOT_IMPLEMENTED d 服务器不支持(501)
+-*/+-*/+-*/BAD_GATEWAY d 网关错误(502)
+-*/+-*/+-*/SERVICE_UNAVAILABLE d 服务器无法处理请求(503)
+-*/+-*/+-*/responses d HTTP响应状态值为键,其英文描述为值的字典
+-*/+-*/+-*/HTTPMessage c http传输消息对象
HTTPMessage
http协议传输的数据本质上和email差不多,HTTPMessage继承自email.message.Message
application/x-www-form-urlencoded类型的正文通常由urlencode生成
multipart/form-data类型基本上和email差不多,不过使用Message(或email.mime)生成的话
会自带一个mime-version头部,通常只需del m['MIME-Version']即可
+-*/+-*/+-*/HTTPException e HTTP异常
+-*/+-*/+-*/+-*/ImproperConnectionState e 连接状态异常
+-*/+-*/+-*/+-*/+-*/CannotSendRequest e 无法发送请求
+-*/+-*/+-*/+-*/+-*/CannotSendHeader e 无法发送HTTP报头
+-*/+-*/+-*/+-*/+-*/ResponseNotReady e 无法读取响应 
+-*/+-*/+-*/+-*/UnimplementedFileMode e 文件模式未实现 
+-*/+-*/+-*/+-*/BadStatusLine e 收到错误的状态码
+-*/+-*/+-*/+-*/InvalidURL e 地址错误
+-*/+-*/+-*/+-*/UnknownTransferEncoding e 错误的传输编码 
+-*/+-*/+-*/+-*/NotConnected e 无法连接
+-*/+-*/+-*/+-*/UnknownProtocol e HTTP协议号错误
+-*/+-*/+-*/+-*/IncompleteRead e 收到的数据不完整
+-*/+-*/+-*/HTTPResponse c 服务器响应对象
HTTPResponse(sock, debuglevel=0[, strict], method=None, url=None)
+-*/+-*/+-*/+-*/status d HTTP状态码值
+-*/+-*/+-*/+-*/reason d HTTP错误消息
+-*/+-*/+-*/+-*/version d 服务器使用的HTTP版本
version
   10表示HTTP/1.0   11表示HTTP/1.1   
+-*/+-*/+-*/+-*/closed d 如果为真表示连接已被关闭
+-*/+-*/+-*/+-*/msg d 生成的HTTPMessage对象
+-*/+-*/+-*/+-*/read m 读取响应的内容,返回字节字符串
read([amt])
  amt:    一次读取的字节数
  无需处理chunked分块,不过对于Content-encoding为压缩的仍需自行解压
+-*/+-*/+-*/+-*/getheaders m 获取响应的头部信息，(header,value)为元素的元组
+-*/+-*/+-*/+-*/getheader m 获取响应的某项头部信息
getheader(name, default=None)
  name:    头部字段标识(注意分大小写)
  default: 未找到标识时返回的默认值
对于有些已转码的乱码字符串可使用encode('iso-8859-1')获取原始字节字符串(python3)
'Connection'          保持连接           'keep-alive'
'Content-Encoding'    内容的压缩方式     常用'identity'(不压缩),'gzip','deflate'
'Content-Length'      内容长度           xxx
'Content-Language'    内容使用的语言     'en','zh-cn'
'Content-Disposition' 提示文件下载       'attachment; filename="xxxx"'
'Content-Location'    内容对应的实际页面 '/index.html'
'Content-MD5'         内容的验证码       base64编码的md5验证码
'Content-Range'       返回的内容范围     'bytes xxx-yyy/zzz'
                      xxx起始位置(0开始计) yyy结束位置 zzz总长度
                      往往断点续传的返回状态码为206
'Content-Type'        内容的mime类型     'text/html; charset=utf-8'
'Date'                世界时时间         可由parsedate解析
'ETag'                url对应的id        '"xxxx"'(注意带双引号)
'Expires'             缓冲截止世界时时间 可由parsedate解析
'Last-Modified'       内容上次更改的时间 可由parsedate解析
'Location'            重定向地址         'http://....'(用于状态码3xx)
'Server'              服务器类型         'Apache/2.4.1 (Unix)'
'Set-Cookie'          设置cookie         'xxx=xxx; yyy=yyy; zzz=..'
'Transfer-Encoding'   通常表示数据分段   'chunked'(Content-Length将被忽略)
                      read操作将自动整合所有分段
'WWW-Authenticate'    需要身份验证       'Basic'(通常返回状态码为401)
'Proxy-Authenticate'  代理需要身份验证   'Basic'(通常返回状态码为407)
+-*/+-*/+-*/+-*/fileno m 返回底层套接字文件描述符
+-*/+-*/+-*/HTTPConnection c 创建http客户端
HTTPConnection(host, port=None[, timeout[, source_address]])
  host:    域名或ip地址字符串,后面可以使用':xx'来代替端口号
  port:    默认为80
  timeout: 套接字等待超时的最大时长秒数
  source_address:  (本地地址,本地端口)
  请求网页数据的方式主要有2种
  request一次性准备好所有信息
  putrequest->putheader->putheader..->endheaders->(如果是post)send 分段生成信息
  如果要连续发收务必要设置Connection头部
+-*/+-*/+-*/+-*/putheader m 添加头部字段
putheader(header, argument[, ...])
  header:    头部字段标识(注意分大小写)
  argument:  内容(不能含有'\r'或'\n')
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Range'               断点续传          'bytes=0-9' 'bytes=3-'(三字节之后的)
                      'bytes=-3'(最后三字节) 支持断点续传的往往会返回206
'Cookie'              cookie            'xxx=xx;xxx=xx;'
                      通常由SimpleCookie.output(header='',sep=';',attrs=[])生成
'Accept'              允许的内容类型    常用'*/*','text/html,text/plain'
'Accept-Charset'      允许的字符编码    常用'utf-8'
'Accept-Encoding'     允许的压缩方式    常用'identity'(不压缩),'gzip,deflate'
'Accept-Language'     允许的语言        常用'zh-cn,en'
'Authorization'       基本身份验证      base64编码'user:pwd',前置'Basic '
'Proxy-Authorization' 代理身份验证      base64编码'user:pwd',前置'Basic '
'Connection'          保持连接          'keep-alive'
'Content-Length'      内容长度          xxx(常用于POST方式)
'Content-MD5'         内容的验证码      base64编码的md5验证码(常用于POST方式)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'Date'                世界时时间        由email.utils.formatdate(usegmt=True)生成
'From'                电子邮件地址      'user@xxx.xxx'
'Host'                域名              'xxx.xxx:8000'       
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-Range'            etag匹配断点续传  '"xx..xx"' 这个服务器支持的不是很多
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
'If-Unmodified-Since' 指定时间之后无改变才有效 格式同上
'Pragma'              服务器特定指令    'no-cache'
'Cache-Control'       服务器缓冲控制    'no-cache'
+-*/+-*/+-*/+-*/set_debuglevel m 设置是否输出调试信息
set_debuglevel(level)
  level:  0表示不输出调试信息
+-*/+-*/+-*/+-*/request m 发送请求
request(method, url, body=None, headers={})
  method:   'GET'或'POST'
  url:      网页相对地址，如'/xxx/'
  body:     头部之后的数据，通常用于POST模式，可以是文件对象
            会自动计算长度并在HTTP头部里添加Content-Length项
            如果是字符串，将使用ISO-8859-1(latin1)对其编码
  headers:  头部项目字典,键值需注意大小写
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
                      支持断点续传的往往会返回206
'Authorization'       基本身份验证      base64编码'user:pwd',前置'Basic '
'Proxy-Authorization' 代理身份验证      base64编码'user:pwd',前置'Basic '
'Connection'          保持连接          'keep-alive'
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
'If-Unmodified-Since' 指定时间之后无改变才有效 格式同上
'Cookie'              cookie            'xxx=xx;xxx=xx;'
+-*/+-*/+-*/+-*/send m 发送内容数据(通常用于POST)
send(data)
  data:  数据字节字符串
  通常只能在endheaders操作后执行此操作
  (也可以使用Message生成内容数据,通常会携带头部,此时就不需endheaders)
  对于application/x-www-form-urlencoded类型,通常使用urlencode生成内容
  对于multipart/form-data类型(常用于上传文件),分行使用'\r\n'
  boundary=---xxxx里的'---xxxx'为分隔符,应保证不会出现在要分隔的数据里
  分隔符出现在内容的开头和中间、结尾,结尾分隔符前后要加'--',其它的要前置'--'
  示例:
--分隔符\r\n
Content-Disposition: form-data; name="..." \r\n\r\n(两个用于分隔头和内容)
...form表单里非文件的值内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..."; filename="..." \r\n
Content-Type: .... \r\n
Content-Transfer-Encoding: binary(或base64,通常可省略此行)\r\n\r\n 
...文件内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..一次选择多个文件.." \r\n
Content-Type: multipart/mixed; boundary=新分隔符\r\n\r\n
--新分隔符\r\n
Content-Disposition: file; filename="通常用encode_rfc2231编码" \r\n
Content-Type: .... \r\n\r\n
...文件内容...\r\n
--新分隔符--\r\n
--分隔符--\r\n(结尾的\r\n不能少)
+-*/+-*/+-*/+-*/set_tunnel m 
TODO:
set_tunnel(host, port=None, headers=None)

Set the host and the port for HTTP Connect Tunnelling. Normally used when it
is required to a HTTPS Connection through a proxy server.

The headers argument should be a mapping of extra HTTP headers to to sent
with the CONNECT request.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/getresponse m 从服务器获取响应，返回HTTPResponse实例对象
getresponse()
  如果要连续发送请求，每次请求前必须保证上一次的响应已被完全读取
+-*/+-*/+-*/+-*/connect m 连接服务器(执行其它的某些操作时会自动连接)
+-*/+-*/+-*/+-*/endheaders m 结束头部数据的写入并发送
endheaders()
  http头部以两个'\r\n'结尾
+-*/+-*/+-*/+-*/putrequest m 创建http请求的头部
putrequest(request, selector, skip_host=False, skip_accept_encoding=False)
  request:   'GET'或'POST'
  selector:  网页相对地址，如'/xxx/'
  skip_host: 不自动添加'Host'头部字段，主要用于同地址不同域名
  skip_accept_encoding:  不自动添加'Accept-Encoding'头部，主要用于指定压缩方式
  通常其后会有putheader和endheaders操作
  如果是'POST'方式，其后还需send数据
+-*/+-*/+-*/+-*/close m 关闭连接 
+-*/+-*/+-*/+-*/HTTPSConnection c 创建HTTPS客户端
HTTPSConnection(host, port=None, key_file=None, cert_file=None
                [, strict[, timeout[, source_address]]], *, 
                context=None, check_hostname=None)
  host:      域名或ip地址字符串,后面可以使用':xx'来代替端口号
  port:      默认为80
  context:   ssl.SSLContext对象
  key_file:  PEM格式的私有密钥文件
  cert_file: 证书文件
  timeout:   套接字等待超时的最大时长秒数
  source_address:  (本地地址,本地端口)

   context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
   context.verify_mode = ssl.CERT_REQUIRED
   context.load_verify_locations('/etc/pki/tls/certs/ca-bundle.crt')
   h = client.HTTPSConnection('svn.python.org', 443, context=context)

+-*/+-*/cgi p cgi辅助模块
cig脚本通过环境变量和stdin获取请求数据,输出到stdout的数据将发送到客户端
通常使用form=cgi.FieldStorage()来获取表单数据
通常只需输出set-cookies,content-type等的http报头字段,有些报头由服务器产生
报头间用\r\n(print的话要带'\r')分割,报头结束要用空行,内容结束也要用空行
常见环境变量如下,具体的可由print_environ_usage来获得
    AUTH_TYPE           验证方法
    CONTENT_LENGTH      传入数据的长度(stdin)(常出现在POST)
    CONTENT_TYPE        数据类型
    DOCUMENT_ROOT       文档根目录
    GATEWAY_INTERFACE   cgi版本字符串
    HTTP_ACCEPT         客户端接受的MIME类型
    HTTP_COOKIE         客户端给出的cookie
    HTTP_FROM           客户端电子邮件
    HTTP_REFERER        引用的URL
    HTTP_USER_AGENT     客户端浏览器字符串
    PATH_INFO           路径信息
    PATH_TRANSLATED
    QUERY_STRING        查询字符串
    REMOTE_ADDR         客户端ip
    REMOTE_HOST         客户端主机名
    REMOTE_IDENT
    REMOTE_USER         经过验证的用户名
    REQUEST_METHOD      请求的方法('GET','POST'.)
    SCRIPT_NAME         程序名称
    SERVER_NAME         服务器主机名
    SERVER_POST         服务端口
    SERVER_PROTOCOL     服务协议
    SERVER_SOFTWARE     服务器程序软件名称
+-*/+-*/+-*/print_form f 以HTML格式显示表单数据
print_form(form)
  form:  FieldStorage表单数据对象
+-*/+-*/+-*/print_environ f 以HTML格式显示环境变量表
+-*/+-*/+-*/parse_qs f 解析查询字符串,返回字典
parse_qs(qs, keep_blank_values=False, strict_parsing=False)
  qs:   application/x-www-form-urlencoded类型的字符串'xx=xx&yy=yy'
  keep_blank_values:  是否保留值为空白('xx=&yy=yy'里的xx)的项目
  strict_parsing:     如为True,解析错误时会报ValueError异常
+-*/+-*/+-*/parse_qsl f 解析查询字符串,返回(k,v)对列表(常用于有重复项目名)
parse_qsl(qs, keep_blank_values=False, strict_parsing=False)
  qs:   application/x-www-form-urlencoded类型的字符串'xx=xx&yy=yy'
  keep_blank_values:  是否保留值为空白('xx=&yy=yy'里的xx)的项目
  strict_parsing:     如为True,解析错误时会报ValueError异常
+-*/+-*/+-*/parse f 
parse(fp=None, environ=os.environ, keep_blank_values=False, strict_parsing=False)

Parse a query in the environment or from a file (the file defaults to
``sys.stdin``).  The *keep_blank_values* and *strict_parsing* parameters are
passed to :func:`urllib.parse.parse_qs` unchanged.



+-*/+-*/+-*/parse_multipart f 解析multipart/form-data格式的简单POST数据 
parse_multipart(fp, pdict)
  fp:      内含POST数据的文件对象
  pdict:   通常为Content-Type头部的参数字典(主要要boundary分隔符内容)
  返回{name:value}字典,不过对于嵌套或带文件的POST基本无用
  对于复杂的POST数据cgi脚本通常使用FieldStorage
+-*/+-*/+-*/print_environ_usage f  以HTML格式显示与cgi有关环境变量表
+-*/+-*/+-*/print_directory f 以HTML格式显示当前目录
+-*/+-*/+-*/escape f 转义字符串内的html特殊字符&<>
escape(s, quote=False)
  quote:  为True时将同时转换'"两种字符,否则只转换&<>
+-*/+-*/+-*/test f 测试cgi脚本,以HTML格式输出有关信息
+-*/+-*/+-*/parse_header f 解析HTTP报头字段内的数据
parse_header(string)
  string:   为单个HTTP报头字段':'后的内容
  返回(值,{参数字典})
  >>> parse_header('text/plain; charset="us-ascii"')
  ('text/plain',{'charset':'us-ascii'})
+-*/+-*/+-*/FieldStorage c 表单数据对象
FieldStorage()
  由环境变量和stdin解析POST数据生成类字典对象(和dict不同的是可能有重复键)
  键名对应表单里的字段名称,值类型不定,是字符串或嵌套的另一个FieldStorage实例
+-*/+-*/+-*/+-*/name d 字段名称
+-*/+-*/+-*/+-*/filename d 客户端上传的文件的文件名
+-*/+-*/+-*/+-*/value d 值字符串
+-*/+-*/+-*/+-*/file d 上传文件的文件对象
+-*/+-*/+-*/+-*/type d 内容类型,如'multipart/form-data'
+-*/+-*/+-*/+-*/type_options d content-type头部的参数字典
+-*/+-*/+-*/+-*/disposition d content-disposition头部的值,如'form-data'
+-*/+-*/+-*/+-*/disposition_options d content-disposition头部里的参数字典
+-*/+-*/+-*/+-*/headers d 头部字典
+-*/+-*/+-*/+-*/getlist m 获取同名字段的所有值列表
getlist(name)
+-*/+-*/+-*/+-*/getfirst m 获取同名字段第一个出现的值
getfirst(name, default=None)
+-*/+-*/cgitb p 详细错误信息输出模块
通常用在cgi脚本的开头,当然也可用于一般可执行脚本的开头
+-*/+-*/+-*/handler f 输出显示异常信息并退出
handler(info=None)
  info:   (type, value, traceback),默认为sys.exc_info的返回值
          type异常类型,value异常对象,traceback回朔追踪对象
+-*/+-*/+-*/enable f 允许捕捉异常
enable(display=1, logdir=None, context=5, format="html")
  display:    是否输出显示
  logdir:     日志目录,如设置捕捉到异常时将同时记录到日志文件
  context:    错误信息里包含的源文件上下文行数
  format:     'text'或'html',错误信息的格式
+-*/+-*/ftplib p 简易FTP客户端模块
+-*/+-*/+-*/all_errors d (通常用于except语句)
+-*/+-*/+-*/error_perm e 
error_perm

Exception raised when an error code signifying a permanent error (response
codes in the range 500--599) is received.



+-*/+-*/+-*/error_proto e 
error_proto

Exception raised when a reply is received from the server that does not fit
the response specifications of the File Transfer Protocol, i.e. begin with a
digit in the range 1--5.



+-*/+-*/+-*/error_temp e 
error_temp

Exception raised when an error code signifying a temporary error (response
codes in the range 400--499) is received.



+-*/+-*/+-*/error_reply e 
error_reply

Exception raised when an unexpected reply is received from the server.



+-*/+-*/+-*/FTP c 创建ftp客户端
FTP(host='', user='', passwd='', acct=''[, timeout])
  通常要先.connect再.login(如指定端口则必须如此操作)
  如host给出可不用.connect
  如user,passwd,acct(特殊登录选项)给出可不用.login
  各命令如login,cwd等顺利执行后都返回服务器信息文本,未能顺利执行则会报错
+-*/+-*/+-*/+-*/rename m 更改文件(目录)名
rename(fromname, toname)
+-*/+-*/+-*/+-*/set_debuglevel m 设置明细信息等级
set_debuglevel(level)
  level:   0(默认)不输出明细信息,1输出少量信息,2全显所有详细步骤
+-*/+-*/+-*/+-*/sendcmd m 发送简单命令获取服务器响应
sendcmd(cmd)
  cmd:    如'SIZE'等简单命令
+-*/+-*/+-*/+-*/abort m 中止当前的传输任务
+-*/+-*/+-*/+-*/connect m 连接ftp站点
connect(host='', port=0[, timeout])
  port默认21
+-*/+-*/+-*/+-*/rmd m 删除服务器的某目录
rmd(dirname)
+-*/+-*/+-*/+-*/close m 强行关闭连接
+-*/+-*/+-*/+-*/size m 返回服务器某文件的大小
size(filename)
+-*/+-*/+-*/+-*/quit m 发送QUIT信号并关闭连接
+-*/+-*/+-*/+-*/getwelcome m 获取登录信息
+-*/+-*/+-*/+-*/mkd m 创建新目录
mkd(pathname)
+-*/+-*/+-*/+-*/transfercmd m 执行需要传输数据的命令返回使用的socket对象
transfercmd(cmd, rest=None)
  cmd:      'RETR filename'命令可下载指定文件
            'STOR filename'命令可上传文件
            'MLSD'列出详细目录
  rest:     断点续传的开始位置偏移量(需服务器支持)
  返回ftp数据传输套接字对象
+-*/+-*/+-*/+-*/nlst m 返回当前所在目录里的文件名(字节字符串)列表(包括目录)
+-*/+-*/+-*/+-*/storbinary m 上传数据(通常用于上传文件)
storbinary(cmd, file, blocksize=8192, callback=None, rest=None)
  cmd:      'STOR filename'命令可上传文件
  file:     文件对象
  callback: 每发送一行数据时的回调函数
  rest:     断点续传的开始位置偏移量(需服务器支持)
+-*/+-*/+-*/+-*/cwd m 设置当前所在目录(进入目录)
cwd(pathname)
+-*/+-*/+-*/+-*/voidcmd m  发送简单命令,如失败则报错
voidcmd(cmd)
  cmd:    如'UTF8'等无需返回信息的简单命令
+-*/+-*/+-*/+-*/pwd m 返回当前所在目录
+-*/+-*/+-*/+-*/retrlines m 显示命令返回的文本内容(ASCII模式)
retrlines(cmd, callback=None)
  cmd:      'RETR filename'命令可下载指定文件
            LIST,NLST,MLSD可列出当前目录内容
  callback: 接受数据时的回调函数,通常可设为文件对象的.write函数,参数为字节字符串
+-*/+-*/+-*/+-*/ntransfercmd m 执行需传输数据的命令返回(socket对象,长度)二元组
ntransfercmd(cmd, rest=None)
  cmd:      'RETR filename'命令可下载指定文件
            'STOR filename'命令可上传文件
  rest:     断点续传的开始位置偏移量(需服务器支持)
  返回(ftp数据传输套接字对象,传输数据的长度-大小无法确定时为None)二元组
+-*/+-*/+-*/+-*/storlines m 上传文本(ASCII模式),
storlines(cmd, file, callback=None)
  cmd:      'STOR filename'命令可上传文件
  file:     文件对象
  callback: 每发送一行数据时的回调函数
+-*/+-*/+-*/+-*/set_pasv m 设置passive(被动)模式
set_pasv(boolean)
  boolean:   为True表示使用被动模式(被动模式是连接后的默认模式)
+-*/+-*/+-*/+-*/login m 登录ftp,未成功则报错
login(user='anonymous', passwd='', acct='')
+-*/+-*/+-*/+-*/retrbinary m 下载二进制数据(通常用于下载文件)
retrbinary(cmd, callback, blocksize=8192, rest=None)
  cmd:      'RETR filename'命令可下载指定文件
  callback: 接受数据时的回调函数,通常可设为文件对象的.write函数
  rest:     断点续传的开始位置偏移量(需服务器支持)
+-*/+-*/+-*/+-*/dir m 返回当前目录内容的详细文本
+-*/+-*/+-*/+-*/delete m 在服务器删除某文件
delete(filename)
+-*/+-*/+-*/FTP_TLS c  
FTP_TLS(host='', user='', passwd='', acct='', [keyfile[, certfile[, context[, timeout]]]])

A :class:`FTP` subclass which adds TLS support to FTP as described in
:rfc:`4217`.
Connect as usual to port 21 implicitly securing the FTP control connection
before authenticating. Securing the data connection requires the user to
explicitly ask for it by calling the :meth:`prot_p` method.
*keyfile* and *certfile* are optional -- they can contain a PEM formatted
private key and certificate chain file name for the SSL connection.
*context* parameter is a :class:`ssl.SSLContext` object which allows
bundling SSL configuration options, certificates and private keys into a
single (potentially long-lived) structure.

.. versionadded:: 3.2

Here's a sample session using the :class:`FTP_TLS` class:

>>> from ftplib import FTP_TLS
>>> ftps = FTP_TLS('ftp.python.org')
>>> ftps.login()           # login anonymously before securing control channel
>>> ftps.prot_p()          # switch to secure data connection
>>> ftps.retrlines('LIST') # list directory content securely
total 9
drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .
drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..
drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin
drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc
d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming
drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib
drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub
drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr
-rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg
'226 Transfer complete.'
>>> ftps.quit()
>>>



+-*/+-*/+-*/+-*/ssl_version d 
ssl_version

The SSL version to use (defaults to *TLSv1*).


+-*/+-*/+-*/+-*/prot_p m 
prot_p()

Set up secure data connection.


+-*/+-*/+-*/+-*/prot_c m 
prot_c()

Set up clear text data connection.




+-*/+-*/+-*/+-*/auth m 
auth()

Set up secure control connection by using TLS or SSL, depending on what specified in :meth:`ssl_version` attribute.


+-*/+-*/http p http模块(python3)
+-*/+-*/+-*/client p HTTP(S)客户端模块(python3)
+-*/+-*/+-*/+-*/HTTP_PORT d 80
+-*/+-*/+-*/+-*/HTTPS_PORT d 443
+-*/+-*/+-*/+-*/OK d 请求成功(200)
+-*/+-*/+-*/+-*/CREATED d 请求已实现,Location里存URI地址(201)
+-*/+-*/+-*/+-*/ACCEPTED d 请求已接受(202)
+-*/+-*/+-*/+-*/NO_CONTENT d 响应无内容(204)
+-*/+-*/+-*/+-*/MULTIPLE_CHOICES d 多选择,Location里存URI地址(300)
+-*/+-*/+-*/+-*/MOVED_PERMANENTLY d 永久移动,Location里存URI地址(301)
+-*/+-*/+-*/+-*/MOVED_TEMPORARILY d 临时移动,Location里存URI地址(302)
+-*/+-*/+-*/+-*/NOT_MODIFIED d 无变化(304)
+-*/+-*/+-*/+-*/BAD_REQUEST d 请求错误(400)
+-*/+-*/+-*/+-*/UNAUTHORIZED d 身份未验证或验证错误(401)
+-*/+-*/+-*/+-*/FORBIDDEN d 禁止访问(403)
+-*/+-*/+-*/+-*/NOT_FOUND d 页面未找到(404)
+-*/+-*/+-*/+-*/PROXY_AUTHENTICATION_REQUIRED d 代理验证失败(407)
+-*/+-*/+-*/+-*/INTERNAL_SERVER_ERROR d 服务器出错(500)
+-*/+-*/+-*/+-*/NOT_IMPLEMENTED d 服务器不支持(501)
+-*/+-*/+-*/+-*/BAD_GATEWAY d 网关错误(502)
+-*/+-*/+-*/+-*/SERVICE_UNAVAILABLE d 服务器无法处理请求(503)
+-*/+-*/+-*/+-*/responses d HTTP响应状态值为键,其英文描述为值的字典
+-*/+-*/+-*/+-*/HTTPMessage c http传输消息对象
HTTPMessage
http协议传输的数据本质上和email差不多,HTTPMessage继承自email.message.Message
application/x-www-form-urlencoded类型的正文通常由urlencode生成
multipart/form-data类型基本上和email差不多,不过使用Message(或email.mime)生成的话
会自带一个mime-version头部,通常只需del m['MIME-Version']即可
+-*/+-*/+-*/+-*/HTTPException e HTTP异常
+-*/+-*/+-*/+-*/+-*/ImproperConnectionState e 连接状态异常
+-*/+-*/+-*/+-*/+-*/+-*/CannotSendRequest e 无法发送请求
+-*/+-*/+-*/+-*/+-*/+-*/CannotSendHeader e 无法发送HTTP报头
+-*/+-*/+-*/+-*/+-*/+-*/ResponseNotReady e 无法读取响应 
+-*/+-*/+-*/+-*/+-*/UnimplementedFileMode e 文件模式未实现 
+-*/+-*/+-*/+-*/+-*/BadStatusLine e 收到错误的状态码
+-*/+-*/+-*/+-*/+-*/InvalidURL e 地址错误
+-*/+-*/+-*/+-*/+-*/UnknownTransferEncoding e 错误的传输编码 
+-*/+-*/+-*/+-*/+-*/NotConnected e 无法连接
+-*/+-*/+-*/+-*/+-*/UnknownProtocol e HTTP协议号错误
+-*/+-*/+-*/+-*/+-*/IncompleteRead e 收到的数据不完整
+-*/+-*/+-*/+-*/HTTPResponse c 服务器响应对象
HTTPResponse(sock, debuglevel=0[, strict], method=None, url=None)
+-*/+-*/+-*/+-*/+-*/status d HTTP状态码值
+-*/+-*/+-*/+-*/+-*/reason d HTTP错误消息
+-*/+-*/+-*/+-*/+-*/version d 服务器使用的HTTP版本
version
   10表示HTTP/1.0   11表示HTTP/1.1   
+-*/+-*/+-*/+-*/+-*/closed d 如果为真表示连接已被关闭
+-*/+-*/+-*/+-*/+-*/msg d 生成的HTTPMessage对象
+-*/+-*/+-*/+-*/+-*/read m 读取响应的内容,返回字节字符串
read([amt])
  amt:    一次读取的字节数
  无需处理chunked分块,不过对于Content-encoding为压缩的仍需自行解压
+-*/+-*/+-*/+-*/+-*/getheaders m 获取响应的头部信息，(header,value)为元素的元组
+-*/+-*/+-*/+-*/+-*/getheader m 获取响应的某项头部信息
getheader(name, default=None)
  name:    头部字段标识(注意分大小写)
  default: 未找到标识时返回的默认值
对于有些已转码的乱码字符串可使用encode('iso-8859-1')获取原始字节字符串(python3)
'Connection'          保持连接           'keep-alive'
'Content-Encoding'    内容的压缩方式     常用'identity'(不压缩),'gzip','deflate'
'Content-Length'      内容长度           xxx
'Content-Language'    内容使用的语言     'en','zh-cn'
'Content-Disposition' 提示文件下载       'attachment; filename="xxxx"'
'Content-Location'    内容对应的实际页面 '/index.html'
'Content-MD5'         内容的验证码       base64编码的md5验证码
'Content-Range'       返回的内容范围     'bytes xxx-yyy/zzz'
                      xxx起始位置(0开始计) yyy结束位置 zzz总长度
                      往往断点续传的返回状态码为206
'Content-Type'        内容的mime类型     'text/html; charset=utf-8'
'Date'                世界时时间         可由parsedate解析
'ETag'                url对应的id        '"xxxx"'(注意带双引号)
'Expires'             缓冲截止世界时时间 可由parsedate解析
'Last-Modified'       内容上次更改的时间 可由parsedate解析
'Location'            重定向地址         'http://....'(用于状态码3xx)
'Server'              服务器类型         'Apache/2.4.1 (Unix)'
'Set-Cookie'          设置cookie         'xxx=xxx; yyy=yyy; zzz=..'
'Transfer-Encoding'   通常表示数据分段   'chunked'(Content-Length将被忽略)
                      read操作将自动整合所有分段
'WWW-Authenticate'    需要身份验证       'Basic'(通常返回状态码为401)
'Proxy-Authenticate'  代理需要身份验证   'Basic'(通常返回状态码为407)
+-*/+-*/+-*/+-*/+-*/fileno m 返回底层套接字文件描述符
+-*/+-*/+-*/+-*/HTTPConnection c 创建http客户端
HTTPConnection(host, port=None[, timeout[, source_address]])
  host:    域名或ip地址字符串,后面可以使用':xx'来代替端口号
  port:    默认为80
  timeout: 套接字等待超时的最大时长秒数
  source_address:  (本地地址,本地端口)
  请求网页数据的方式主要有2种
  request一次性准备好所有信息
  putrequest->putheader->putheader..->endheaders->(如果是post)send 分段生成信息
  如果要连续发收务必要设置Connection头部
+-*/+-*/+-*/+-*/+-*/putheader m 添加头部字段
putheader(header, argument[, ...])
  header:    头部字段标识(注意分大小写)
  argument:  内容(不能含有'\r'或'\n')
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Range'               断点续传          'bytes=0-9' 'bytes=3-'(三字节之后的)
                      'bytes=-3'(最后三字节) 支持断点续传的往往会返回206
'Cookie'              cookie            'xxx=xx;xxx=xx;'
                      通常由SimpleCookie.output(header='',sep=';',attrs=[])生成
'Accept'              允许的内容类型    常用'*/*','text/html,text/plain'
'Accept-Charset'      允许的字符编码    常用'utf-8'
'Accept-Encoding'     允许的压缩方式    常用'identity'(不压缩),'gzip,deflate'
'Accept-Language'     允许的语言        常用'zh-cn,en'
'Authorization'       基本身份验证      base64编码'user:pwd',前置'Basic '
'Proxy-Authorization' 代理身份验证      base64编码'user:pwd',前置'Basic '
'Connection'          保持连接          'keep-alive'
'Content-Length'      内容长度          xxx(常用于POST方式)
'Content-MD5'         内容的验证码      base64编码的md5验证码(常用于POST方式)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'Date'                世界时时间        由email.utils.formatdate(usegmt=True)生成
'From'                电子邮件地址      'user@xxx.xxx'
'Host'                域名              'xxx.xxx:8000'       
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-Range'            etag匹配断点续传  '"xx..xx"' 这个服务器支持的不是很多
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
'If-Unmodified-Since' 指定时间之后无改变才有效 格式同上
'Pragma'              服务器特定指令    'no-cache'
'Cache-Control'       服务器缓冲控制    'no-cache'
+-*/+-*/+-*/+-*/+-*/set_debuglevel m 设置是否输出调试信息
set_debuglevel(level)
  level:  0表示不输出调试信息
+-*/+-*/+-*/+-*/+-*/request m 发送请求
request(method, url, body=None, headers={})
  method:   'GET'或'POST'
  url:      网页相对地址，如'/xxx/'
  body:     头部之后的数据，通常用于POST模式，可以是文件对象
            会自动计算长度并在HTTP头部里添加Content-Length项
            如果是字符串，将使用ISO-8859-1(latin1)对其编码
  headers:  头部项目字典,键值需注意大小写
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
                      支持断点续传的往往会返回206
'Authorization'       基本身份验证      base64编码'user:pwd',前置'Basic '
'Proxy-Authorization' 代理身份验证      base64编码'user:pwd',前置'Basic '
'Connection'          保持连接          'keep-alive'
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
'If-Unmodified-Since' 指定时间之后无改变才有效 格式同上
'Cookie'              cookie            'xxx=xx;xxx=xx;'
+-*/+-*/+-*/+-*/+-*/send m 发送内容数据(通常用于POST)
send(data)
  data:  数据字节字符串
  通常只能在endheaders操作后执行此操作
  (也可以使用Message生成内容数据,通常会携带头部,此时就不需endheaders)
  对于application/x-www-form-urlencoded类型,通常使用urlencode生成内容
  对于multipart/form-data类型(常用于上传文件),分行使用'\r\n'
  boundary=---xxxx里的'---xxxx'为分隔符,应保证不会出现在要分隔的数据里
  分隔符出现在内容的开头和中间、结尾,结尾分隔符前后要加'--',其它的要前置'--'
  示例:
--分隔符\r\n
Content-Disposition: form-data; name="..." \r\n\r\n(两个用于分隔头和内容)
...form表单里非文件的值内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..."; filename="..." \r\n
Content-Type: .... \r\n
Content-Transfer-Encoding: binary(或base64,通常可省略此行)\r\n\r\n 
...文件内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..一次选择多个文件.." \r\n
Content-Type: multipart/mixed; boundary=新分隔符\r\n\r\n
--新分隔符\r\n
Content-Disposition: file; filename="通常用encode_rfc2231编码" \r\n
Content-Type: .... \r\n\r\n
...文件内容...\r\n
--新分隔符--\r\n
--分隔符--\r\n(结尾的\r\n不能少)
+-*/+-*/+-*/+-*/+-*/set_tunnel m 
TODO:
set_tunnel(host, port=None, headers=None)

Set the host and the port for HTTP Connect Tunnelling. Normally used when it
is required to a HTTPS Connection through a proxy server.

The headers argument should be a mapping of extra HTTP headers to to sent
with the CONNECT request.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/+-*/getresponse m 从服务器获取响应，返回HTTPResponse实例对象
getresponse()
  如果要连续发送请求，每次请求前必须保证上一次的响应已被完全读取
+-*/+-*/+-*/+-*/+-*/connect m 连接服务器(执行其它的某些操作时会自动连接)
+-*/+-*/+-*/+-*/+-*/endheaders m 结束头部数据的写入并发送
endheaders()
  http头部以两个'\r\n'结尾
+-*/+-*/+-*/+-*/+-*/putrequest m 创建http请求的头部
putrequest(request, selector, skip_host=False, skip_accept_encoding=False)
  request:   'GET'或'POST'
  selector:  网页相对地址，如'/xxx/'
  skip_host: 不自动添加'Host'头部字段，主要用于同地址不同域名
  skip_accept_encoding:  不自动添加'Accept-Encoding'头部，主要用于指定压缩方式
  通常其后会有putheader和endheaders操作
  如果是'POST'方式，其后还需send数据
+-*/+-*/+-*/+-*/+-*/close m 关闭连接 
+-*/+-*/+-*/+-*/+-*/HTTPSConnection c 创建HTTPS客户端
HTTPSConnection(host, port=None, key_file=None, cert_file=None
                [, strict[, timeout[, source_address]]], *, 
                context=None, check_hostname=None)
  host:      域名或ip地址字符串,后面可以使用':xx'来代替端口号
  port:      默认为80
  context:   ssl.SSLContext对象
  key_file:  PEM格式的私有密钥文件
  cert_file: 证书文件
  timeout:   套接字等待超时的最大时长秒数
  source_address:  (本地地址,本地端口)

   context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
   context.verify_mode = ssl.CERT_REQUIRED
   context.load_verify_locations('/etc/pki/tls/certs/ca-bundle.crt')
   h = client.HTTPSConnection('svn.python.org', 443, context=context)

+-*/+-*/+-*/cookiejar p cookie管理模块(主要用于urllib)(python3)
通常cookie由服务器发送用以标示会话或用户身份
客户端根据服务器所给cookie的一些设定在需要时发送同样名称和内容的cookie
+-*/+-*/+-*/+-*/LoadError e cookie记录文件加载错误
+-*/+-*/+-*/+-*/CookieJar c cookie记录管理器
CookieJar(policy=None)
  policy:           CookiePolicy匹配检测器实例对象
  主要用于记录由服务器发送的cookie,再根据页面请求设定所需携带的cookie
+-*/+-*/+-*/+-*/+-*/set_cookie_if_ok m 
set_cookie_if_ok(cookie, request)

Set a :class:`Cookie` if policy says it's OK to do so.



+-*/+-*/+-*/+-*/+-*/set_policy m 设置CookiePolicy匹配检测器实例
set_policy(policy)
+-*/+-*/+-*/+-*/+-*/clear m 清除已记录cookie
clear([domain[, path[, name]]])
  domain:   指定域
  path:     指定domain域下的路径
  name:     指定domain域path路径里某cookie的名称
+-*/+-*/+-*/+-*/+-*/add_cookie_header m 根据请求对象信息将需要的cookie加入其中
add_cookie_header(request)
主要用于urllib的cookie处理器
+-*/+-*/+-*/+-*/+-*/set_cookie m 添加Cookie实例记录
set_cookie(cookie)
+-*/+-*/+-*/+-*/+-*/extract_cookies m 根据服务器回应扩展管理的cookie记录
extract_cookies(response, request)
主要用于urllib的cookie处理器
+-*/+-*/+-*/+-*/+-*/clear_session_cookies m 清除会话cookie(没有时间设定的cookie)
+-*/+-*/+-*/+-*/+-*/make_cookies m 获取服务器发送的cookie列表
make_cookies(response, request)

Return sequence of :class:`Cookie` objects extracted from *response* object.

See the documentation for :meth:`extract_cookies` for the interfaces required of
the *response* and *request* arguments.



+-*/+-*/+-*/+-*/+-*/FileCookieJar c 可储存的cookie记录管理器
FileCookieJar(filename, delayload=None, policy=None)
  filename:         指定存储的文件
  delayload:        是否延迟加载
  policy:           CookiePolicy匹配检测器实例对象
+-*/+-*/+-*/+-*/+-*/+-*/filename d 指向的文件(可更改)
+-*/+-*/+-*/+-*/+-*/+-*/load m 从文件加载cookie记录
load(filename=None, ignore_discard=False, ignore_expires=False)
  filename:  可指定文件
  ignore_discard:   是否忽略会话cookie,设为True为不忽略
  ignore_expires:   是否忽略过期cookie,设为True为不忽略
+-*/+-*/+-*/+-*/+-*/+-*/save m 保存cookie到文件
save(filename=None, ignore_discard=False, ignore_expires=False)
  filename:  可指定文件
  ignore_discard:   是否忽略会话cookie,设为True为不忽略
  ignore_expires:   是否忽略过期cookie,设为True为不忽略
+-*/+-*/+-*/+-*/+-*/+-*/revert m 清楚现有的记录后从文件加载cookie记录
revert(filename=None, ignore_discard=False, ignore_expires=False)
  filename:  可指定文件
  ignore_discard:   是否忽略会话cookie,设为True为不忽略
  ignore_expires:   是否忽略过期cookie,设为True为不忽略
+-*/+-*/+-*/+-*/+-*/+-*/MozillaCookieJar c Netscape文本格式的cookie记录器
MozillaCookieJar(filename, delayload=None, policy=None)
  filename:         指定存储的文件
  delayload:        是否延迟加载
  policy:           CookiePolicy匹配检测器实例对象
  以tab分割的cookie记录文本(wget,curl等很多软件以此方式保存)
  不过要读取的话文件第一行必须是'# Netscape HTTP Cookie File'
+-*/+-*/+-*/+-*/+-*/+-*/LWPCookieJar c perl文本格式的cookie记录器
LWPCookieJar(filename, delayload=None, policy=None)
  filename:         指定存储的文件
  delayload:        是否延迟加载
  policy:           CookiePolicy匹配检测器实例对象
  以分号分割行头为Set-Cookies:的cookie记录文本(主要由libwww-perl生成)
+-*/+-*/+-*/+-*/CookiePolicy c 对应cookie匹配检测器基类
CookiePolicy()
  各个服务器发送的cookie不可能每次请求页面都要发送
  往往需要检测域和路径以及有效期等等挑选适用的cookie的发送
  匹配检测器根据页面请求来判断哪些cookie适合发送
+-*/+-*/+-*/+-*/+-*/rfc2965 d 
rfc2965

Implement RFC 2965 protocol.



+-*/+-*/+-*/+-*/+-*/hide_cookie2 d 
hide_cookie2

Don't add :mailheader:`Cookie2` header to requests (the presence of this header
indicates to the server that we understand RFC 2965 cookies).


+-*/+-*/+-*/+-*/+-*/netscape d 
netscape

Implement Netscape protocol.



+-*/+-*/+-*/+-*/+-*/path_return_ok m 路径是否匹配页面请求(可自定义)
path_return_ok(path, request)
  返回True表示request接受此path下的cookie
+-*/+-*/+-*/+-*/+-*/domain_return_ok m 域是否匹配页面请求(可自定义)
domain_return_ok(domain, request)
  返回True表示request接受此domain的cookie
+-*/+-*/+-*/+-*/+-*/set_ok m cookie是否保存(可自定义)
set_ok(cookie, request)
  返回False则不会记录此request请求返回的服务器cookie
+-*/+-*/+-*/+-*/+-*/return_ok m cookie是否随页面请求一起发送(可自定义)
return_ok(cookie, request)
  返回True表示request会包含此cookie
+-*/+-*/+-*/+-*/+-*/DefaultCookiePolicy c 创建通常使用的cookie匹配检测器
DefaultCookiePolicy( blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, 
    rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, 
    strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, 
    strict_ns_domain=DefaultCookiePolicy.DomainLiberal, strict_ns_set_initial_dollar=False, 
    strict_ns_set_path=False )
  blocked_domains:     禁止记录cookie的服务器域名列表
  allowed_domains:     只允许记录cookie的服务器域名列表
+-*/+-*/+-*/+-*/+-*/+-*/strict_rfc2965_unverifiable d 
strict_rfc2965_unverifiable

Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable
transaction is one resulting from a redirect or a request for an image hosted on
another site).  If this is false, cookies are *never* blocked on the basis of
verifiability



+-*/+-*/+-*/+-*/+-*/+-*/strict_ns_domain d 
strict_ns_domain

Flags indicating how strict to be with domain-matching rules for Netscape
cookies.  See below for acceptable values.



+-*/+-*/+-*/+-*/+-*/+-*/DomainRFC2965Match d 
DomainRFC2965Match

When setting cookies, require a full RFC 2965 domain-match.


+-*/+-*/+-*/+-*/+-*/+-*/rfc2109_as_netscape d 
rfc2109_as_netscape

If true, request that the :class:`CookieJar` instance downgrade RFC 2109 cookies
(ie. cookies received in a :mailheader:`Set-Cookie` header with a version
cookie-attribute of 1) to Netscape cookies by setting the version attribute of
the :class:`Cookie` instance to 0.  The default value is :const:`None`, in which
case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned
off.  Therefore, RFC 2109 cookies are downgraded by default.



+-*/+-*/+-*/+-*/+-*/+-*/DomainStrict d 
DomainStrict

Equivalent to ``DomainStrictNoDots|DomainStrictNonDomain``.



+-*/+-*/+-*/+-*/+-*/+-*/strict_domain d 
strict_domain

Don't allow sites to set two-component domains with country-code top-level
domains like ``.co.uk``, ``.gov.uk``, ``.co.nz``.etc.  This is far from perfect
and isn't guaranteed to work!



+-*/+-*/+-*/+-*/+-*/+-*/DomainStrictNoDots d 
DomainStrictNoDots

When setting cookies, the 'host prefix' must not contain a dot (eg.
``www.foo.bar.com`` can't set a cookie for ``.bar.com``, because ``www.foo``
contains a dot).



+-*/+-*/+-*/+-*/+-*/+-*/strict_ns_set_path d 
strict_ns_set_path

Don't allow setting cookies whose path doesn't path-match request URI.


+-*/+-*/+-*/+-*/+-*/+-*/strict_ns_unverifiable d 
strict_ns_unverifiable

apply RFC 2965 rules on unverifiable transactions even to Netscape cookies



+-*/+-*/+-*/+-*/+-*/+-*/strict_ns_set_initial_dollar d 
strict_ns_set_initial_dollar

Ignore cookies in Set-Cookie: headers that have names starting with ``'$'``.



+-*/+-*/+-*/+-*/+-*/+-*/DomainStrictNonDomain d 
DomainStrictNonDomain

Cookies that did not explicitly specify a ``domain`` cookie-attribute can only
be returned to a domain equal to the domain that set the cookie (eg.
``spam.example.com`` won't be returned cookies from ``example.com`` that had no
``domain`` cookie-attribute).



+-*/+-*/+-*/+-*/+-*/+-*/DomainLiberal d 
DomainLiberal

Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched
off).



+-*/+-*/+-*/+-*/+-*/+-*/allowed_domains m 
allowed_domains()

Return :const:`None`, or the sequence of allowed domains (as a tuple).



+-*/+-*/+-*/+-*/+-*/+-*/set_allowed_domains m 
set_allowed_domains(allowed_domains)

Set the sequence of allowed domains, or :const:`None`.



+-*/+-*/+-*/+-*/+-*/+-*/is_not_allowed m 
is_not_allowed(domain)

Return whether *domain* is not on the whitelist for setting or receiving
cookies.


+-*/+-*/+-*/+-*/+-*/+-*/blocked_domains m 
blocked_domains()

Return the sequence of blocked domains (as a tuple).



+-*/+-*/+-*/+-*/+-*/+-*/set_blocked_domains m 
set_blocked_domains(blocked_domains)

Set the sequence of blocked domains.



+-*/+-*/+-*/+-*/+-*/+-*/is_blocked m 
is_blocked(domain)

Return whether *domain* is on the blacklist for setting or receiving cookies.



+-*/+-*/+-*/+-*/Cookie c 创建cookie对象
Cookie(version, name, value, port, port_specified, domain, domain_specified, 
       domain_initial_dot, path, path_specified, secure, expires, discard, 
       comment, comment_url, rest, rfc2109)
  version:             通常为0 
  name:                cookie名称字符串(不得含";, ")
  value:               cookie值字符串(不得含";, ")
  port:                通常为None 
  port_specified:      通常为False 
  domain:              域
  domain_specified:    通常为True
  domain_initial_dot:  域是否前带'.' 
  path:                路径,通常为'/'
  path_specified:      是否指定路径(path为'/'时此值应为False)
  secure:              是否只用于https 
  expires:             有效期整数,以1970开始的秒数
  discard:             是否是会话cookie(没有给出有效期的此值应为True)
  comment:             注释字符串(通常为None)
  comment_url:         通常为None
  rest:                通常为{}
  rfc2109:             通常为False
+-*/+-*/+-*/+-*/+-*/comment d 服务器给出的注释
+-*/+-*/+-*/+-*/+-*/secure d 是否用于HTTPS
+-*/+-*/+-*/+-*/+-*/domain_initial_dot d 是否是域名('.'开头的domain)
+-*/+-*/+-*/+-*/+-*/expires d 过期时间(从1970开始计的秒数)
+-*/+-*/+-*/+-*/+-*/value d 此cookie的值字符串
+-*/+-*/+-*/+-*/+-*/domain_specified d 是否是主机(不是'.'开头的domain)
+-*/+-*/+-*/+-*/+-*/version d 通常为0,符合rfc2965的为1
+-*/+-*/+-*/+-*/+-*/port_specified d 
port_specified

True if a port or set of ports was explicitly specified by the server (in the
:mailheader:`Set-Cookie` / :mailheader:`Set-Cookie2` header).



+-*/+-*/+-*/+-*/+-*/rfc2109 d 是否是rfc2109规范
+-*/+-*/+-*/+-*/+-*/path d 有效路径,通常为'/'
+-*/+-*/+-*/+-*/+-*/discard d 是否是会话cookie(未给出时间就是会话cookie)
+-*/+-*/+-*/+-*/+-*/port d 
port

String representing a port or a set of ports (eg. '80', or '80,8080'), or
:const:`None`.



+-*/+-*/+-*/+-*/+-*/comment_url d 服务器给出的说明连接地址(必须符合URI格式)
+-*/+-*/+-*/+-*/+-*/name d 此cookie的名称
+-*/+-*/+-*/+-*/+-*/domain d 有效域
+-*/+-*/+-*/+-*/+-*/set_nonstandard_attr m 
set_nonstandard_attr(name, value)

Set the value of the named cookie-attribute.


+-*/+-*/+-*/+-*/+-*/get_nonstandard_attr m 
get_nonstandard_attr(name, default=None)

If cookie has the named cookie-attribute, return its value. Otherwise, return
*default*.



+-*/+-*/+-*/+-*/+-*/is_expired m 检测是否过期
is_expired([now=None])
  now:   time时间秒数,未给出使用当前时间
+-*/+-*/+-*/+-*/+-*/has_nonstandard_attr m 
has_nonstandard_attr(name)

Return true if cookie has the named cookie-attribute.



+-*/+-*/+-*/cookies p cookie基础模块(python3)
通常只要引用SimpleCookie就足够了
客户端使用SimpleCookie(HTTPResponse.getheader('Set-Cookie'))解析获得的cookie
使用{'Cookie':x.output(attrs=[],header='',sep=';')}作header发送cookie
服务端使用以下示例来生成cookie
  (attrs里的属性只能服务端设定,客户端根据attrs来决定发送哪些获取到的cookie)
  a=SimpleCookie()
  a['aa']='xx'
  a['aa']['max-age']=3600
  a['bb']=1
  a['bb']['httponly']=True
+-*/+-*/+-*/+-*/CookieError e cookie异常
+-*/+-*/+-*/+-*/Morsel c 单条cookie的对象
Morsel
  一般不直接使用，通常用于SimpleCookie里
  单条cookie在服务器端创建时往往会有作用域名生存期等属性
  传输给客户端后，客户端会根据属性来确定以后发送的请求所需使用的cookie
  保留属性(可通过m['...']访问)需注意都是小写
  'expires'   过期时间由email.utils.formatdate(usegmt=True)生成
  'path'      指定路径下有效,形式'/xx'
  'comment'   说明
  'domain'    指定域名下有效,形式'.xxx.com',或指定主机'yyy.xxx.com'
  'max-age'   存活秒数整数
  'secure'    HTTPS下有效(True,False)
  'httponly'  不被javascript访问(True,False)
  'version'   1表示rfc2109,2表示rfc2965,一般用0比较通用
+-*/+-*/+-*/+-*/+-*/coded_value d cookie值所对应的传输用字符串
+-*/+-*/+-*/+-*/+-*/value d cookie的值(可以不是字符串)
+-*/+-*/+-*/+-*/+-*/key d cookie的名称键
+-*/+-*/+-*/+-*/+-*/output m 生成传输用的字符串(可包含http头部字段标识)
output(attrs=None, header='Set-Cookie:')
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性
  header:  字符串的前置
+-*/+-*/+-*/+-*/+-*/set m 设置cookie的值
set(key, value, coded_value)
  coded_value:  value经过转码后实际用于传输的值字符串
+-*/+-*/+-*/+-*/+-*/OutputString m 生成传输用的字符串
OutputString(attrs=None)
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性

Return a string representing the Morsel, without any surrounding HTTP or
JavaScript.

The meaning for *attrs* is the same as in :meth:`output`.



+-*/+-*/+-*/+-*/+-*/isReservedKey m 测试名称是否是保留属性
isReservedKey(K)
+-*/+-*/+-*/+-*/+-*/js_output m 生成html内使用的javascript代码
js_output(attrs=None)
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性
+-*/+-*/+-*/+-*/BaseCookie c cookie基础类
BaseCookie([input])
  input:  可以是'xx=xx;yy=yy'形式的cookie内容字符串
          也可以是http头部里的多行'Set-Cookie:'或'Cookie:'内容
          或者是字典
  BaseCookie没有作任何转码,无法防止cookie里出现非法字符
  常用的使用方法是:
  a=BaseCookie()
  a['aa']='xx'
  a['aa']['max-age']=3600
  a['bb']=1
  a['bb']['httponly']=True
  服务端使用的cookie往往需要特殊属性(注意都是小写)
  'expires'   过期时间由email.utils.formatdate(usegmt=True)生成
  'path'      指定路径下有效,形式'/xx'
  'comment'   说明
  'domain'    指定域名下有效,形式'.xxx.com',或指定主机'yyy.xxx.com'
  'max-age'   存活秒数整数
  'secure'    HTTPS下有效(True,False)
  'httponly'  不被javascript访问(True,False)
+-*/+-*/+-*/+-*/+-*/load m 加载cookie
load(rawdata)
  rawdata:  可以是'xx=xx;yy=yy'形式的cookie内容字符串,或者是字典
            也可以是http头部里的多行'Set-Cookie:'或'Cookie:'内容
+-*/+-*/+-*/+-*/+-*/output m 生成传输用的字符串
output(attrs=None, header='Set-Cookie:', sep='\\r\\n')
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性
  header:  字符串的前置
  如果要生成客户端的http头部字符串，
  往往用'Cookie:' + x.output(attrs=[],header='',sep=';')
+-*/+-*/+-*/+-*/+-*/value_encode m 对cookie的值进行编码
value_encode(val)
  val:  往往可以是任意值,即通过c['name']=value设定的值
  返回(real_value,coded_value)
  此方法通常要在自定义Cookie类型里定义，用于编码cookie的值以便传输
+-*/+-*/+-*/+-*/+-*/value_decode m 对cookie的值字符串解码
value_decode(val)
  val:  是传输cookie的值字符串
  返回(real_value,coded_value)
  此方法通常要在自定义Cookie类型里定义，用于解码cookie的值
+-*/+-*/+-*/+-*/+-*/js_output m 生成html内使用的javascript代码
js_output(attrs=None)
  attrs:   默认包含所有有效的属性(max-age,path等等),通常用attrs=[]
+-*/+-*/+-*/+-*/+-*/SimpleCookie c 创建简易cookie对象
SimpleCookie([input])
  input:  可以是'xx=xx;yy=yy'形式的cookie内容字符串
          也可以是http头部里的多行'Set-Cookie:'或'Cookie:'内容
          或者是字典
  SimpleCookie可以自动进行简单的转码,以防cookie里出现非法字符
  常用的使用方法是:
  a=SimpleCookie()
  a['aa']='xx'
  a['aa']['max-age']=3600
  a['bb']=1
  a['bb']['httponly']=True
  服务端使用的cookie往往需要特殊属性(注意都是小写)
  'expires'   过期时间由email.utils.formatdate(usegmt=True)生成
  'path'      指定路径下有效,形式'/xx'
  'comment'   说明
  'domain'    指定域名下有效,形式'.xxx.com',或指定主机'yyy.xxx.com'
  'max-age'   存活秒数整数
  'secure'    HTTPS下有效(True,False)
  'httponly'  不被javascript访问(True,False)
+-*/+-*/+-*/server p HTTP服务器模块(python3)
+-*/+-*/+-*/+-*/HTTPServer c 简易HTTP服务器基类
HTTPServer(server_address, RequestHandlerClass)
  server_address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:   通常为BaseHTTPRequestHandler自定义子类
  通常自定义继承此类和ThreadingMixIn或ForkingMixIn的子类
  使用方法同SocketServer.TCPServer
+-*/+-*/+-*/+-*/BaseHTTPRequestHandler c 处理单次页面请求的基类
BaseHTTPRequestHandler(request, client_address, server)
  根据需要子类自定义do_*方法
  子类可以定义server_version等类变量
+-*/+-*/+-*/+-*/+-*/wfile d 发送回应的数据输出文件对象(使用这个发送数据)
+-*/+-*/+-*/+-*/+-*/request_version d 页面请求的HTTP版本字符串,如'HTTP/1.0'
+-*/+-*/+-*/+-*/+-*/client_address d 客户端地址(host, port)二元组
+-*/+-*/+-*/+-*/+-*/headers d 页面请求的HTTP报头
headers
  由MessageClass生成的报头,通常是email.Message对象(兼容字典操作)
+-*/+-*/+-*/+-*/+-*/command d 页面请求的类型,如'GET'
+-*/+-*/+-*/+-*/+-*/rfile d 页面请求的数据输入文件对象(用于POST)
+-*/+-*/+-*/+-*/+-*/path d 页面请求的路径,如'/index.html'
+-*/+-*/+-*/+-*/+-*/server d 相关的HTTPServer实例
+-*/+-*/+-*/+-*/+-*/sys_version d python版本字符串
+-*/+-*/+-*/+-*/+-*/MessageClass d 生成headers的类
MessageClass
  默认是http.client.HTTPMessage,一般不需要自定义
+-*/+-*/+-*/+-*/+-*/error_content_type d 错误信息的内容类型(可自定义)
error_content_type
  默认为'text/html'
+-*/+-*/+-*/+-*/+-*/protocol_version d http协议版本字符串(可自定义)
protocol_version
  默认为'HTTP/1.0'
  如设为'HTTP/1.1'支持Connection为'keep-alive'的持续连接
  同时返回的页面数据必须都带有Content-Length头部
+-*/+-*/+-*/+-*/+-*/server_version d 服务器系统字符串(自定义)
+-*/+-*/+-*/+-*/+-*/responses d 错误码为键的字典(自定义)
responses
  形式为{code: (message, explain)}
  code错误码,如404,message是短信息,explain是详细信息
+-*/+-*/+-*/+-*/+-*/error_message_format d 错误信息格式字符串(自定义)
error_message_format
  可使用'%(code)d','%(message)s','%(explain)s'格式
  如'<head><title>error</title><body><h1>%(code)d</h1></body>'
+-*/+-*/+-*/+-*/+-*/version_string m 返回版本信息字符串
version_string()
  通常包含server_version和sys_version,用作Server报头的值
+-*/+-*/+-*/+-*/+-*/date_time_string m 返回时间字符串
date_time_string(timestamp=None)
  timestamp:   浮点数时间,未给出则使用当前时间
  主要用于Date报头的值
+-*/+-*/+-*/+-*/+-*/end_headers m HTTP报头发送结束
end_headers()
  之后的内容数据可直接写入wfile
+-*/+-*/+-*/+-*/+-*/send_header m 发送HTTP报头
send_header(keyword, value)
  将报头写入wfile
'Connection'          连接              'close'或'keep-alive'
'Content-Length'      内容长度          (http1.1必须有此报头)
'Content-MD5'         内容的验证码      base64编码的md5验证码
'Content-Type'        内容的mime类型    'image/gif','text/html; charset=utf-8'
'Content-Range'       断点续传          'bytes 50-99/100'位置以0开计,/后是总长度
'Content-Encoding'    内容压缩方式      'gzip'或'deflate'
'Content-Language'    内容使用的语言    如'zh-cn'
'Content-Disposition' 下载文件          'attachment; filename="bud.gif"'
                        文件名有中文可使用encode_rfc2231转换
'Date'                世界时时间        由date_time_string生成(send_response)
'Server'              服务器版本        由version_string生成(send_response)
'WWW-Authenticate'    需要身份验证      'Basic'
'Proxy-Authenticate'  代理需要身份验证  'Basic'
'Expires'             有效期            由email.utils.formatdate(usegmt=True)生成
'Last-Modified'       最后修改时间      由email.utils.formatdate(usegmt=True)生成
'Location'            转移的位置        用于30x,'http://xx.xx/xx.xx','/index.htm'
'Refresh'             多少秒后刷新      如要同时转移可'60; url=http://..'
'Retry-After'         多少秒后再次尝试  用于50x.如'120'
'Cache-Control'       客户端缓冲控制    'max-age=120'120秒内不要再次访问服务器
'ETag'                唯一标示符        '"xxxxx"'(带双引号)
'Allow'               允许的访问方式    用于405,如'GET, HEAD'
'Set-Cookie'          设置cookie        'ID=xxxx; Max-Age=3600'
                      通常用SimpleCookie.output(header='')生成
'Transfer-Encoding'   传输方式          'Chunked'时Content-Length无效
                     分块形式:十六进制长度+\r\n+数据块+\r\n
                     结尾:'0\r\n\r\n'
Transfer-Encoding: Chunked\r\n\r\n
5\r\n
this \r\n
11\r\n
a pen.\r\nend\r\n
0\r\n\r\n
内容是:
this a pen.\r\n
end
+-*/+-*/+-*/+-*/+-*/send_response m 发送回应码
send_response(code, message=None)
  code:    通常为200
  message: 通常无需设定
  向wfile写入如'HTTP/1.1 200 OK'这样的回应标示
  其后会自动写入Server和Date报头
  同时也会输出日志
+-*/+-*/+-*/+-*/+-*/send_response_only m 
send_response_only(code, message=None)

Sends the reponse header only, used for the purposes when ``100
Continue`` response is sent by the server to the client. The headers not
buffered and sent directly the output stream.If the *message* is not
specified, the HTTP message corresponding the response *code*  is sent.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/+-*/send_error m 发送错误回应
send_error(code, message=None)
  code:    http状态码
  message: 通常不需要,会自动由error_message_format生成
  同时也会输出日志
+-*/+-*/+-*/+-*/+-*/address_string m 返回客户端地址(日志格式)
+-*/+-*/+-*/+-*/+-*/log_date_time_string m 返回当前时间(日志格式)
+-*/+-*/+-*/+-*/+-*/log_error m 手动产生错误日志
log_error(...)
+-*/+-*/+-*/+-*/+-*/log_request m 手动产生正常回应日志
log_request(code='-', size='-')
+-*/+-*/+-*/+-*/+-*/log_message m 日志记录(可自定义)
log_message(format, ...)
  默认日志会输出到sys.stderr
+-*/+-*/+-*/+-*/+-*/handle_expect_100 m 
handle_expect_100()

When a HTTP/1.1 compliant server receives a ``Expect: 100-continue``
request header it responds back with a ``100 Continue`` followed by ``200
OK`` headers.
This method can be overridden to raise an error if the server does not
want the client to continue.  For e.g. server can chose to send ``417
Expectation Failed`` as a response header and ``return False``.

.. versionadded:: 3.2
+-*/+-*/+-*/+-*/+-*/do_HEAD m 处理HEAD请求(必须自定义)
do_HEAD()
  分析path和headers确定是否正常，如发现请求有问题可直接send_error.
  通常先send_response返回状态码,再send_header发送报头,用end_headers结束报头.
  处理HEAD请求只需生成报头，无需最后向wfile写入内容数据。
  当然也可以手动向wfile写入状态码报头等数据。
  如要保持http1.1的长连接必须发送connect报头,其值必须是keep-alive
+-*/+-*/+-*/+-*/+-*/do_GET m 处理GET请求(必须自定义)
do_GET()
  分析path和headers确定回应内容，如发现请求有问题可直接send_error.
  通常先send_response返回状态码,再send_header发送报头,用end_headers结束报头
  最后向wfile写入内容数据。
  当然也可以手动向wfile写入状态码报头等数据。
  如要保持http1.1的长连接必须发送connect报头,其值必须是keep-alive
+-*/+-*/+-*/+-*/+-*/do_POST m 处理POST请求(必须自定义)
do_POST()
  分析path和headers并从rfile读取post数据，如发现请求有问题可直接send_error.
  通常先send_response返回状态码,再send_header发送报头,用end_headers结束报头
  最后向wfile写入内容数据。
  当然也可以手动向wfile写入状态码报头等数据。
  如要保持http1.1的长连接必须发送connect报头,其值必须是keep-alive
  对于POST数据通常使用以下方式解析
    ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
    if ctype == 'multipart/form-data':
        postvars = cgi.parse_multipart(self.rfile, pdict)
    elif ctype == 'application/x-www-form-urlencoded':
        length = int(self.headers.getheader('content-length'))
        postvars = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
    else:
        postvars = {}
+-*/+-*/+-*/+-*/+-*/SimpleHTTPRequestHandler c 简易文件浏览页面生成器
SimpleHTTPRequestHandler(request, client_address, server)
  提供浏览目录和下载文件的简易功能(只对运行目录和其下子目录有效)
  支持HEAD和GET请求
+-*/+-*/+-*/+-*/+-*/+-*/extensions_map d 
extensions_map

A dictionary mapping suffixes into MIME types. The default is
signified by an empty string, and is considered to be
``application/octet-stream``. The mapping is used case-insensitively,
and so should contain only lower-cased keys.


+-*/+-*/+-*/+-*/+-*/+-*/server_version d 
server_version

This will be ``"SimpleHTTP/" + __version__``, where ``__version__`` is
defined at the module level.


+-*/+-*/+-*/+-*/+-*/+-*/do_HEAD m 
do_HEAD()

This method serves the ``'HEAD'`` request type: it sends the headers it
would send for the equivalent ``GET`` request. See the :meth:`do_GET`
method for a more complete explanation of the possible headers.


+-*/+-*/+-*/+-*/+-*/+-*/do_GET m 
do_GET()

The request is mapped to a local file by interpreting the request as a
path relative to the current working directory.

If the request was mapped to a directory, the directory is checked for a
file named ``index.html`` or ``index.htm`` (in that order). If found, the
file's contents are returned; otherwise a directory listing is generated
by calling the :meth:`list_directory` method. This method uses
:func:`os.listdir` to scan the directory, and returns a ``404`` error
response if the :func:`listdir` fails.

If the request was mapped to a file, it is opened and the contents are
returned.  Any :exc:`IOError` exception in opening the requested file is
mapped to a ``404``, ``'File not found'`` error. Otherwise, the content
type is guessed by calling the :meth:`guess_type` method, which in turn
uses the *extensions_map* variable.

A ``'Content-type:'`` header with the guessed content type is output,
followed by a ``'Content-Length:'`` header with the file's size and a
``'Last-Modified:'`` header with the file's modification time.

Then follows a blank line signifying the end of the headers, and then the
contents of the file are output. If the file's MIME type starts with
``text/`` the file is opened in text mode; otherwise binary mode is used.

For example usage, see the implementation of the :func:`test` function
invocation in the :mod:`http.server` module.




+-*/+-*/+-*/+-*/+-*/+-*/CGIHTTPRequestHandler c 简易cgi处理器
CGIHTTPRequestHandler(request, client_address, server)
  提供执行cgi文件回应请求的功能
  对于不是cgi目录的提供浏览目录和下载文件的简易功能
  (只对运行目录和其下子目录有效)
  支持HEAD和GET请求,POST请求只能用于cgi目录下的cgi文件
  不支持HTTP重定向
+-*/+-*/+-*/+-*/+-*/+-*/+-*/cgi_directories d 存放cgi文件的目录列表
cgi_directories
  将以nobody身份调用cgi文件
  默认为cgi-bin或htbin
+-*/+-*/+-*/+-*/+-*/+-*/+-*/do_POST m 
do_POST()

This method serves the ``'POST'`` request type, only allowed for CGI
scripts.  Error 501, "Can only POST to CGI scripts", is output when trying
to POST to a non-CGI url.


+-*/+-*/BaseHTTPServer p HTTP服务器模块(python2)
+-*/+-*/+-*/HTTPServer c 简易HTTP服务器基类
HTTPServer(server_address, RequestHandlerClass)
  server_address:    (ip字符串--通常为'0.0.0.0',port整数)二元组
  RequestHandlerClass:   通常为BaseHTTPRequestHandler自定义子类
  通常自定义继承此类和ThreadingMixIn或ForkingMixIn的子类
  使用方法同SocketServer.TCPServer
+-*/+-*/+-*/BaseHTTPRequestHandler c 处理单次页面请求的基类
BaseHTTPRequestHandler(request, client_address, server)
  根据需要子类自定义do_*方法
  子类可以定义server_version等类变量
+-*/+-*/+-*/+-*/wfile d 发送回应的数据输出文件对象(使用这个发送数据)
+-*/+-*/+-*/+-*/request_version d 页面请求的HTTP版本字符串,如'HTTP/1.0'
+-*/+-*/+-*/+-*/client_address d 客户端地址(host, port)二元组
+-*/+-*/+-*/+-*/headers d 页面请求的HTTP报头
headers
  由MessageClass生成的报头,通常是email.Message对象(兼容字典操作)
+-*/+-*/+-*/+-*/command d 页面请求的类型,如'GET'
+-*/+-*/+-*/+-*/rfile d 页面请求的数据输入文件对象(用于POST)
+-*/+-*/+-*/+-*/path d 页面请求的路径,如'/index.html'
+-*/+-*/+-*/+-*/server d 相关的HTTPServer实例
+-*/+-*/+-*/+-*/sys_version d python版本字符串
+-*/+-*/+-*/+-*/MessageClass d 生成headers的类
MessageClass
  默认是http.client.HTTPMessage,一般不需要自定义
+-*/+-*/+-*/+-*/error_content_type d 错误信息的内容类型(可自定义)
error_content_type
  默认为'text/html'
+-*/+-*/+-*/+-*/protocol_version d http协议版本字符串(可自定义)
protocol_version
  默认为'HTTP/1.0'
  如设为'HTTP/1.1'支持Connection为'keep-alive'的持续连接
  同时返回的页面数据必须都带有Content-Length头部
+-*/+-*/+-*/+-*/server_version d 服务器系统字符串(自定义)
+-*/+-*/+-*/+-*/responses d 错误码为键的字典(自定义)
responses
  形式为{code: (message, explain)}
  code错误码,如404,message是短信息,explain是详细信息
+-*/+-*/+-*/+-*/error_message_format d 错误信息格式字符串(自定义)
error_message_format
  可使用'%(code)d','%(message)s','%(explain)s'格式
  如'<head><title>error</title><body><h1>%(code)d</h1></body>'
+-*/+-*/+-*/+-*/version_string m 返回版本信息字符串
version_string()
  通常包含server_version和sys_version,用作Server报头的值
+-*/+-*/+-*/+-*/date_time_string m 返回时间字符串
date_time_string(timestamp=None)
  timestamp:   浮点数时间,未给出则使用当前时间
  主要用于Date报头的值
+-*/+-*/+-*/+-*/end_headers m HTTP报头发送结束
end_headers()
  之后的内容数据可直接写入wfile
+-*/+-*/+-*/+-*/send_header m 发送HTTP报头
send_header(keyword, value)
  将报头写入wfile
'Connection'          连接              'close'或'keep-alive'
'Content-Length'      内容长度          (http1.1必须有此报头)
'Content-MD5'         内容的验证码      base64编码的md5验证码
'Content-Type'        内容的mime类型    'image/gif','text/html; charset=utf-8'
'Content-Range'       断点续传          'bytes 50-99/100'位置以0开计,/后是总长度
'Content-Encoding'    内容压缩方式      'gzip'或'deflate'
'Content-Language'    内容使用的语言    如'zh-cn'
'Content-Disposition' 下载文件          'attachment; filename="bud.gif"'
                        文件名有中文可使用encode_rfc2231转换
'Date'                世界时时间        由date_time_string生成(send_response)
'Server'              服务器版本        由version_string生成(send_response)
'WWW-Authenticate'    需要身份验证      'Basic'
'Proxy-Authenticate'  代理需要身份验证  'Basic'
'Expires'             有效期            由email.utils.formatdate(usegmt=True)生成
'Last-Modified'       最后修改时间      由email.utils.formatdate(usegmt=True)生成
'Location'            转移的位置        用于30x,'http://xx.xx/xx.xx','/index.htm'
'Refresh'             多少秒后刷新      如要同时转移可'60; url=http://..'
'Retry-After'         多少秒后再次尝试  用于50x.如'120'
'Cache-Control'       客户端缓冲控制    'max-age=120'120秒内不要再次访问服务器
'ETag'                唯一标示符        '"xxxxx"'(带双引号)
'Allow'               允许的访问方式    用于405,如'GET, HEAD'
'Set-Cookie'          设置cookie        'ID=xxxx; Max-Age=3600'
                      通常用SimpleCookie.output(header='')生成
'Transfer-Encoding'   传输方式          'Chunked'时Content-Length无效
                     分块形式:十六进制长度+\r\n+数据块+\r\n
                     结尾:'0\r\n\r\n'
Transfer-Encoding: Chunked\r\n\r\n
5\r\n
this \r\n
11\r\n
a pen.\r\nend\r\n
0\r\n\r\n
内容是:
this a pen.\r\n
end
+-*/+-*/+-*/+-*/send_response m 发送回应码
send_response(code, message=None)
  code:    通常为200
  message: 通常无需设定
  向wfile写入如'HTTP/1.1 200 OK'这样的回应标示
  其后会自动写入Server和Date报头
  同时也会输出日志
+-*/+-*/+-*/+-*/send_response_only m 
send_response_only(code, message=None)

Sends the reponse header only, used for the purposes when ``100
Continue`` response is sent by the server to the client. The headers not
buffered and sent directly the output stream.If the *message* is not
specified, the HTTP message corresponding the response *code*  is sent.

.. versionadded:: 3.2


+-*/+-*/+-*/+-*/send_error m 发送错误回应
send_error(code, message=None)
  code:    http状态码
  message: 通常不需要,会自动由error_message_format生成
  同时也会输出日志
+-*/+-*/+-*/+-*/address_string m 返回客户端地址(日志格式)
+-*/+-*/+-*/+-*/log_date_time_string m 返回当前时间(日志格式)
+-*/+-*/+-*/+-*/log_error m 手动产生错误日志
log_error(...)
+-*/+-*/+-*/+-*/log_request m 手动产生正常回应日志
log_request(code='-', size='-')
+-*/+-*/+-*/+-*/log_message m 日志记录(可自定义)
log_message(format, ...)
  默认日志会输出到sys.stderr
+-*/+-*/+-*/+-*/handle_expect_100 m 
handle_expect_100()

When a HTTP/1.1 compliant server receives a ``Expect: 100-continue``
request header it responds back with a ``100 Continue`` followed by ``200
OK`` headers.
This method can be overridden to raise an error if the server does not
want the client to continue.  For e.g. server can chose to send ``417
Expectation Failed`` as a response header and ``return False``.

.. versionadded:: 3.2
+-*/+-*/+-*/+-*/do_HEAD m 处理HEAD请求(必须自定义)
do_HEAD()
  分析path和headers确定是否正常，如发现请求有问题可直接send_error.
  通常先send_response返回状态码,再send_header发送报头,用end_headers结束报头.
  处理HEAD请求只需生成报头，无需最后向wfile写入内容数据。
  当然也可以手动向wfile写入状态码报头等数据。
  如要保持http1.1的长连接必须发送connect报头,其值必须是keep-alive
+-*/+-*/+-*/+-*/do_GET m 处理GET请求(必须自定义)
do_GET()
  分析path和headers确定回应内容，如发现请求有问题可直接send_error.
  通常先send_response返回状态码,再send_header发送报头,用end_headers结束报头
  最后向wfile写入内容数据。
  当然也可以手动向wfile写入状态码报头等数据。
  如要保持http1.1的长连接必须发送connect报头,其值必须是keep-alive
+-*/+-*/+-*/+-*/do_POST m 处理POST请求(必须自定义)
do_POST()
  分析path和headers并从rfile读取post数据，如发现请求有问题可直接send_error.
  通常先send_response返回状态码,再send_header发送报头,用end_headers结束报头
  最后向wfile写入内容数据。
  当然也可以手动向wfile写入状态码报头等数据。
  如要保持http1.1的长连接必须发送connect报头,其值必须是keep-alive
  对于POST数据通常使用以下方式解析
    ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
    if ctype == 'multipart/form-data':
        postvars = cgi.parse_multipart(self.rfile, pdict)
    elif ctype == 'application/x-www-form-urlencoded':
        length = int(self.headers.getheader('content-length'))
        postvars = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
    else:
        postvars = {}
+-*/+-*/SimpleHTTPServer p 简易文件浏览服务器模块(python2)
+-*/+-*/+-*/SimpleHTTPRequestHandler c 简易文件浏览页面生成器
SimpleHTTPRequestHandler(request, client_address, server)
  提供浏览目录和下载文件的简易功能(只对运行目录和其下子目录有效)
  支持HEAD和GET请求
+-*/+-*/+-*/+-*/extensions_map d 
extensions_map

A dictionary mapping suffixes into MIME types. The default is
signified by an empty string, and is considered to be
``application/octet-stream``. The mapping is used case-insensitively,
and so should contain only lower-cased keys.


+-*/+-*/+-*/+-*/server_version d 
server_version

This will be ``"SimpleHTTP/" + __version__``, where ``__version__`` is
defined at the module level.


+-*/+-*/+-*/+-*/do_HEAD m 
do_HEAD()

This method serves the ``'HEAD'`` request type: it sends the headers it
would send for the equivalent ``GET`` request. See the :meth:`do_GET`
method for a more complete explanation of the possible headers.


+-*/+-*/+-*/+-*/do_GET m 
do_GET()

The request is mapped to a local file by interpreting the request as a
path relative to the current working directory.

If the request was mapped to a directory, the directory is checked for a
file named ``index.html`` or ``index.htm`` (in that order). If found, the
file's contents are returned; otherwise a directory listing is generated
by calling the :meth:`list_directory` method. This method uses
:func:`os.listdir` to scan the directory, and returns a ``404`` error
response if the :func:`listdir` fails.

If the request was mapped to a file, it is opened and the contents are
returned.  Any :exc:`IOError` exception in opening the requested file is
mapped to a ``404``, ``'File not found'`` error. Otherwise, the content
type is guessed by calling the :meth:`guess_type` method, which in turn
uses the *extensions_map* variable.

A ``'Content-type:'`` header with the guessed content type is output,
followed by a ``'Content-Length:'`` header with the file's size and a
``'Last-Modified:'`` header with the file's modification time.

Then follows a blank line signifying the end of the headers, and then the
contents of the file are output. If the file's MIME type starts with
``text/`` the file is opened in text mode; otherwise binary mode is used.

For example usage, see the implementation of the :func:`test` function
invocation in the :mod:`http.server` module.




+-*/+-*/+-*/+-*/CGIHTTPRequestHandler c 简易cgi处理器
CGIHTTPRequestHandler(request, client_address, server)
  提供执行cgi文件回应请求的功能
  对于不是cgi目录的提供浏览目录和下载文件的简易功能
  (只对运行目录和其下子目录有效)
  支持HEAD和GET请求,POST请求只能用于cgi目录下的cgi文件
  不支持HTTP重定向
+-*/+-*/+-*/+-*/+-*/cgi_directories d 存放cgi文件的目录列表
cgi_directories
  将以nobody身份调用cgi文件
  默认为cgi-bin或htbin
+-*/+-*/+-*/+-*/+-*/do_POST m 
do_POST()

This method serves the ``'POST'`` request type, only allowed for CGI
scripts.  Error 501, "Can only POST to CGI scripts", is output when trying
to POST to a non-CGI url.


+-*/+-*/Cookie p cookie基础模块(python2)
通常只要引用SimpleCookie就足够了
客户端使用SimpleCookie(HTTPResponse.getheader('Set-Cookie'))解析获得的cookie
使用{'Cookie':x.output(attrs=[],header='',sep=';')}作header发送cookie
服务端使用以下示例来生成cookie
  (attrs里的属性只能服务端设定,客户端根据attrs来决定发送哪些获取到的cookie)
  a=SimpleCookie()
  a['aa']='xx'
  a['aa']['max-age']=3600
  a['bb']=1
  a['bb']['httponly']=True
+-*/+-*/+-*/CookieError e cookie异常
+-*/+-*/+-*/Morsel c 单条cookie的对象
Morsel
  一般不直接使用，通常用于SimpleCookie里
  单条cookie在服务器端创建时往往会有作用域名生存期等属性
  传输给客户端后，客户端会根据属性来确定以后发送的请求所需使用的cookie
  保留属性(可通过m['...']访问)需注意都是小写
  'expires'   过期时间由email.utils.formatdate(usegmt=True)生成
  'path'      指定路径下有效,形式'/xx'
  'comment'   说明
  'domain'    指定域名下有效,形式'.xxx.com',或指定主机'yyy.xxx.com'
  'max-age'   存活秒数整数
  'secure'    HTTPS下有效(True,False)
  'httponly'  不被javascript访问(True,False)
  'version'   1表示rfc2109,2表示rfc2965,一般用0比较通用
+-*/+-*/+-*/+-*/coded_value d cookie值所对应的传输用字符串
+-*/+-*/+-*/+-*/value d cookie的值(可以不是字符串)
+-*/+-*/+-*/+-*/key d cookie的名称键
+-*/+-*/+-*/+-*/output m 生成传输用的字符串(可包含http头部字段标识)
output(attrs=None, header='Set-Cookie:')
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性
  header:  字符串的前置
+-*/+-*/+-*/+-*/set m 设置cookie的值
set(key, value, coded_value)
  coded_value:  value经过转码后实际用于传输的值字符串
+-*/+-*/+-*/+-*/OutputString m 生成传输用的字符串
OutputString(attrs=None)
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性

Return a string representing the Morsel, without any surrounding HTTP or
JavaScript.

The meaning for *attrs* is the same as in :meth:`output`.



+-*/+-*/+-*/+-*/isReservedKey m 测试名称是否是保留属性
isReservedKey(K)
+-*/+-*/+-*/+-*/js_output m 生成html内使用的javascript代码
js_output(attrs=None)
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性
+-*/+-*/+-*/BaseCookie c cookie基础类
BaseCookie([input])
  input:  可以是'xx=xx;yy=yy'形式的cookie内容字符串
          也可以是http头部里的多行'Set-Cookie:'或'Cookie:'内容
          或者是字典
  BaseCookie没有作任何转码,无法防止cookie里出现非法字符
  常用的使用方法是:
  a=BaseCookie()
  a['aa']='xx'
  a['aa']['max-age']=3600
  a['bb']=1
  a['bb']['httponly']=True
  服务端使用的cookie往往需要特殊属性(注意都是小写)
  'expires'   过期时间由email.utils.formatdate(usegmt=True)生成
  'path'      指定路径下有效,形式'/xx'
  'comment'   说明
  'domain'    指定域名下有效,形式'.xxx.com',或指定主机'yyy.xxx.com'
  'max-age'   存活秒数整数
  'secure'    HTTPS下有效(True,False)
  'httponly'  不被javascript访问(True,False)
+-*/+-*/+-*/+-*/load m 加载cookie
load(rawdata)
  rawdata:  可以是'xx=xx;yy=yy'形式的cookie内容字符串,或者是字典
            也可以是http头部里的多行'Set-Cookie:'或'Cookie:'内容
+-*/+-*/+-*/+-*/output m 生成传输用的字符串
output(attrs=None, header='Set-Cookie:', sep='\\r\\n')
  attrs:   默认包含所有有效的属性(max-age,path等等),可指定包含哪些属性
  header:  字符串的前置
  如果要生成客户端的http头部字符串，
  往往用'Cookie:' + x.output(attrs=[],header='',sep=';')
+-*/+-*/+-*/+-*/value_encode m 对cookie的值进行编码
value_encode(val)
  val:  往往可以是任意值,即通过c['name']=value设定的值
  返回(real_value,coded_value)
  此方法通常要在自定义Cookie类型里定义，用于编码cookie的值以便传输
+-*/+-*/+-*/+-*/value_decode m 对cookie的值字符串解码
value_decode(val)
  val:  是传输cookie的值字符串
  返回(real_value,coded_value)
  此方法通常要在自定义Cookie类型里定义，用于解码cookie的值
+-*/+-*/+-*/+-*/js_output m 生成html内使用的javascript代码
js_output(attrs=None)
  attrs:   默认包含所有有效的属性(max-age,path等等),通常用attrs=[]
+-*/+-*/+-*/+-*/SimpleCookie c 创建简易cookie对象
SimpleCookie([input])
  input:  可以是'xx=xx;yy=yy'形式的cookie内容字符串
          也可以是http头部里的多行'Set-Cookie:'或'Cookie:'内容
          或者是字典
  SimpleCookie可以自动进行简单的转码,以防cookie里出现非法字符
  常用的使用方法是:
  a=SimpleCookie()
  a['aa']='xx'
  a['aa']['max-age']=3600
  a['bb']=1
  a['bb']['httponly']=True
  服务端使用的cookie往往需要特殊属性(注意都是小写)
  'expires'   过期时间由email.utils.formatdate(usegmt=True)生成
  'path'      指定路径下有效,形式'/xx'
  'comment'   说明
  'domain'    指定域名下有效,形式'.xxx.com',或指定主机'yyy.xxx.com'
  'max-age'   存活秒数整数
  'secure'    HTTPS下有效(True,False)
  'httponly'  不被javascript访问(True,False)
+-*/+-*/imaplib p IMAP4 protocol client (requires sockets).
IMAP和POP的区别在于IMAP可只下载邮件主题,可管理服务器上的邮件
POP只能下载或删除邮件
+-*/+-*/+-*/ParseFlags f 
ParseFlags(flagstr)

Converts an IMAP4 ``FLAGS`` response to a tuple of individual flags.



+-*/+-*/+-*/Internaldate2tuple f 
Internaldate2tuple(datestr)

Parse an IMAP4 ``INTERNALDATE`` string and return corresponding local
time.  The return value is a :class:`time.struct_time` tuple or
None if the string has wrong format.


+-*/+-*/+-*/Int2AP f 
Int2AP(num)

Converts an integer into a string representation using characters from the set
[``A`` .. ``P``].



+-*/+-*/+-*/Time2Internaldate f 
Time2Internaldate(date_time)

Convert *date_time* to an IMAP4 ``INTERNALDATE`` representation.  The
return value is a string in the form: ``"DD-Mmm-YYYY HH:MM:SS
+HHMM"`` (including double-quotes).  The *date_time* argument can be a
number (int or float) represening seconds since epoch (as returned
by :func:`time.time`), a 9-tuple representing local time (as returned by
:func:`time.localtime`), or a double-quoted string.  In the last case, it
is assumed to already be in the correct format.


+-*/+-*/+-*/IMAP4.abort e 
IMAP4.abort

IMAP4 server errors cause this exception to be raised.  This is a sub-class of
:exc:`IMAP4.error`.  Note that closing the instance and instantiating a new one
will usually allow recovery from this exception.



+-*/+-*/+-*/IMAP4.readonly e 
IMAP4.readonly

This exception is raised when a writable mailbox has its status changed by the
server.  This is a sub-class of :exc:`IMAP4.error`.  Some other client now has
write permission, and the mailbox will need to be re-opened to re-obtain write
permission.



+-*/+-*/+-*/IMAP4.error e 
IMAP4.error

Exception raised on any errors.  The reason for the exception is passed to the
constructor as a string.



+-*/+-*/+-*/IMAP4_SSL c 
IMAP4_SSL(host='', port=IMAP4_SSL_PORT, keyfile=None, certfile=None)

This is a subclass derived from :class:`IMAP4` that connects over an SSL
encrypted socket (to use this class you need a socket module that was compiled
with SSL support).  If *host* is not specified, ``''`` (the local host) is used.
If *port* is omitted, the standard IMAP4-over-SSL port (993) is used.  *keyfile*
and *certfile* are also optional - they can contain a PEM formatted private key
and certificate chain file for the SSL connection.



+-*/+-*/+-*/IMAP4 c 
IMAP4(host='', port=IMAP4_PORT)

This class implements the actual IMAP4 protocol.  The connection is created and
protocol version (IMAP4 or IMAP4rev1) is determined when the instance is
initialized. If *host* is not specified, ``''`` (the local host) is used. If
*port* is omitted, the standard IMAP4 port (143) is used.


+-*/+-*/+-*/+-*/capabilities d 服务器功能字符串列表(大写)
+-*/+-*/+-*/+-*/debug d 调试等级(>3则会输出最详细信息)
+-*/+-*/+-*/+-*/PROTOCOL_VERSION d 
PROTOCOL_VERSION

The most recent supported protocol in the ``CAPABILITY`` response from the
server.



+-*/+-*/+-*/+-*/rename m 
rename(oldmailbox, newmailbox)

Rename mailbox named *oldmailbox* to *newmailbox*.



+-*/+-*/+-*/+-*/status m 
status(mailbox, names)

Request named status conditions for *mailbox*.



+-*/+-*/+-*/+-*/partial m 
partial(message_num, message_part, start, length)

Fetch truncated part of a message. Returned data is a tuple of message part
envelope and data.



+-*/+-*/+-*/+-*/uid m 
uid(command, arg[, ...])

Execute command args with messages identified by UID, rather than message
number.  Returns response appropriate to command.  At least one argument must be
supplied; if none are provided, the server will return an error and an exception
will be raised.



+-*/+-*/+-*/+-*/getacl m 
getacl(mailbox)

Get the ``ACL``\ s for *mailbox*. The method is non-standard, but is supported
by the ``Cyrus`` server.



+-*/+-*/+-*/+-*/starttls m 开启加密传输
starttls(ssl_context=None)
+-*/+-*/+-*/+-*/xatom m 
xatom(name[, ...])

Allow simple extension commands notified by server in ``CAPABILITY`` response.



+-*/+-*/+-*/+-*/readline m  从服务器读取一行
+-*/+-*/+-*/+-*/subscribe m 
subscribe(mailbox)

Subscribe to new mailbox.



+-*/+-*/+-*/+-*/deleteacl m 
deleteacl(mailbox, who)

Delete the ACLs (remove any rights) set for who on mailbox.



+-*/+-*/+-*/+-*/shutdown m 
shutdown()

Close connection established in ``open``.  This method is implicitly
called by :meth:`IMAP4.logout`.  You may override this method.



+-*/+-*/+-*/+-*/close m 
close()

Close currently selected mailbox. Deleted messages are removed from writable
mailbox. This is the recommended command before ``LOGOUT``.



+-*/+-*/+-*/+-*/open m 
open(host, port)

Opens socket to *port* at *host*.  This method is implicitly called by
the :class:`IMAP4` constructor.  The connection objects established by this
method will be used in the ``read``, ``readline``, ``send``, and ``shutdown``
methods.  You may override this method.



+-*/+-*/+-*/+-*/check m 
check()

Checkpoint mailbox on server.



+-*/+-*/+-*/+-*/append m 
append(mailbox, flags, date_time, message)

Append *message* to named mailbox.



+-*/+-*/+-*/+-*/authenticate m 
authenticate(mechanism, authobject)

Authenticate command --- requires response processing.

*mechanism* specifies which authentication mechanism is to be used - it should
appear in the instance variable ``capabilities`` in the form ``AUTH=mechanism``.

*authobject* must be a callable object::

   data = authobject(response)

It will be called to process server continuation responses. It should return
``data`` that will be encoded and sent to server. It should return ``None`` if
the client abort response ``*`` should be sent instead.



+-*/+-*/+-*/+-*/login_cram_md5 m 
login_cram_md5(user, password)

Force use of ``CRAM-MD5`` authentication when identifying the client to protect
the password.  Will only work if the server ``CAPABILITY`` response includes the
phrase ``AUTH=CRAM-MD5``.



+-*/+-*/+-*/+-*/create m 
create(mailbox)

Create new mailbox named *mailbox*.



+-*/+-*/+-*/+-*/namespace m 
namespace()

Returns IMAP namespaces as defined in RFC2342.



+-*/+-*/+-*/+-*/send m 
send(data)

Sends ``data`` to the remote server. You may override this method.



+-*/+-*/+-*/+-*/noop m 保持连接
+-*/+-*/+-*/+-*/getannotation m 
getannotation(mailbox, entry, attribute)

Retrieve the specified ``ANNOTATION``\ s for *mailbox*. The method is
non-standard, but is supported by the ``Cyrus`` server.



+-*/+-*/+-*/+-*/getquota m 
getquota(root)

Get the ``quota`` *root*'s resource usage and limits. This method is part of the
IMAP4 QUOTA extension defined in rfc2087.



+-*/+-*/+-*/+-*/store m 
store(message_set, command, flag_list)

Alters flag dispositions for messages in mailbox.  *command* is specified by
section 6.4.6 of :rfc:`2060` as being one of "FLAGS", "+FLAGS", or "-FLAGS",
optionally with a suffix of ".SILENT".

For example, to set the delete flag on all messages::

   typ, data = M.search(None, 'ALL')
   for num in data[0].split():
      M.store(num, '+FLAGS', '\\Deleted')
   M.expunge()



+-*/+-*/+-*/+-*/select m 
select(mailbox='INBOX', readonly=False)

Select a mailbox. Returned data is the count of messages in *mailbox*
(``EXISTS`` response).  The default *mailbox* is ``'INBOX'``.  If the *readonly*
flag is set, modifications to the mailbox are not allowed.



+-*/+-*/+-*/+-*/getquotaroot m 
getquotaroot(mailbox)

Get the list of ``quota`` ``roots`` for the named *mailbox*. This method is part
of the IMAP4 QUOTA extension defined in rfc2087.



+-*/+-*/+-*/+-*/myrights m 
myrights(mailbox)

Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).



+-*/+-*/+-*/+-*/setquota m 
setquota(root, limits)

Set the ``quota`` *root*'s resource *limits*. This method is part of the IMAP4
QUOTA extension defined in rfc2087.



+-*/+-*/+-*/+-*/read m 
read(size)

Reads *size* bytes from the remote server. You may override this method.



+-*/+-*/+-*/+-*/sort m 
sort(sort_criteria, charset, search_criterion[, ...])

The ``sort`` command is a variant of ``search`` with sorting semantics for the
results.  Returned data contains a space separated list of matching message
numbers.

Sort has two arguments before the *search_criterion* argument(s); a
parenthesized list of *sort_criteria*, and the searching *charset*.  Note that
unlike ``search``, the searching *charset* argument is mandatory.  There is also
a ``uid sort`` command which corresponds to ``sort`` the way that ``uid search``
corresponds to ``search``.  The ``sort`` command first searches the mailbox for
messages that match the given searching criteria using the charset argument for
the interpretation of strings in the searching criteria.  It then returns the
numbers of matching messages.

This is an ``IMAP4rev1`` extension command.



+-*/+-*/+-*/+-*/proxyauth m 
proxyauth(user)

Assume authentication as *user*. Allows an authorised administrator to proxy
into any user's mailbox.



+-*/+-*/+-*/+-*/logout m 
logout()

Shutdown connection to server. Returns server ``BYE`` response.



+-*/+-*/+-*/+-*/lsub m 
lsub(directory='""', pattern='*')

List subscribed mailbox names in directory matching pattern. *directory*
defaults to the top level directory and *pattern* defaults to match any mailbox.
Returned data are tuples of message part envelope and data.



+-*/+-*/+-*/+-*/setannotation m 
setannotation(mailbox, entry, attribute[, ...])

Set ``ANNOTATION``\ s for *mailbox*. The method is non-standard, but is
supported by the ``Cyrus`` server.



+-*/+-*/+-*/+-*/copy m 
copy(message_set, new_mailbox)

Copy *message_set* messages onto end of *new_mailbox*.



+-*/+-*/+-*/+-*/response m 
response(code)

Return data for response *code* if received, or ``None``. Returns the given
code, instead of the usual type.



+-*/+-*/+-*/+-*/recent m 
recent()

Prompt server for an update. Returned data is ``None`` if no new messages, else
value of ``RECENT`` response.



+-*/+-*/+-*/+-*/search m 
search(charset, criterion[, ...])

Search mailbox for matching messages.  *charset* may be ``None``, in which case
no ``CHARSET`` will be specified in the request to the server.  The IMAP
protocol requires that at least one criterion be specified; an exception will be
raised when the server returns an error.

Example::

   # M is a connected IMAP4 instance...
   typ, msgnums = M.search(None, 'FROM', '"LDJ"')

   # or:
   typ, msgnums = M.search(None, '(FROM "LDJ")')



+-*/+-*/+-*/+-*/socket m 
socket()

Returns socket instance used to connect to server.



+-*/+-*/+-*/+-*/thread m 
thread(threading_algorithm, charset, search_criterion[, ...])

The ``thread`` command is a variant of ``search`` with threading semantics for
the results.  Returned data contains a space separated list of thread members.

Thread members consist of zero or more messages numbers, delimited by spaces,
indicating successive parent and child.

Thread has two arguments before the *search_criterion* argument(s); a
*threading_algorithm*, and the searching *charset*.  Note that unlike
``search``, the searching *charset* argument is mandatory.  There is also a
``uid thread`` command which corresponds to ``thread`` the way that ``uid
search`` corresponds to ``search``.  The ``thread`` command first searches the
mailbox for messages that match the given searching criteria using the charset
argument for the interpretation of strings in the searching criteria. It then
returns the matching messages threaded according to the specified threading
algorithm.

This is an ``IMAP4rev1`` extension command.



+-*/+-*/+-*/+-*/expunge m 
expunge()

Permanently remove deleted items from selected mailbox. Generates an ``EXPUNGE``
response for each deleted message. Returned data contains a list of ``EXPUNGE``
message numbers in order received.



+-*/+-*/+-*/+-*/setacl m 
setacl(mailbox, who, what)

Set an ``ACL`` for *mailbox*. The method is non-standard, but is supported by
the ``Cyrus`` server.



+-*/+-*/+-*/+-*/list m 
list([directory[, pattern]])

List mailbox names in *directory* matching *pattern*.  *directory* defaults to
the top-level mail folder, and *pattern* defaults to match anything.  Returned
data contains a list of ``LIST`` responses.



+-*/+-*/+-*/+-*/unsubscribe m 
unsubscribe(mailbox)

Unsubscribe from old mailbox.



+-*/+-*/+-*/+-*/login m (明文)登录
login(user, password)
+-*/+-*/+-*/+-*/fetch m 
fetch(message_set, message_parts)

Fetch (parts of) messages.  *message_parts* should be a string of message part
names enclosed within parentheses, eg: ``"(UID BODY[TEXT])"``.  Returned data
are tuples of message part envelope and data.



+-*/+-*/+-*/+-*/delete m 
delete(mailbox)

Delete old mailbox named *mailbox*.



+-*/+-*/+-*/IMAP4_stream c 
IMAP4_stream(command)

This is a subclass derived from :class:`IMAP4` that connects to the
``stdin/stdout`` file descriptors created by passing *command* to
``subprocess.Popen()``.



+-*/+-*/poplib p POP3收邮件模块
IMAP和POP的区别在于IMAP可只下载邮件主题,可管理服务器上的邮件
POP只能下载或删除邮件
通常的使用pop3收邮件的方式如下
  p = POP3(host)
  p.user(name)
  p.pass_(pwd)
  ids = [int(x.split(' ')[0]) for x in p.list()[1]]
  for x in ids:
    mail = '\n'.join(p.retr(x)[1])
+-*/+-*/+-*/error_proto e pop3错误
+-*/+-*/+-*/POP3 c 创建pop3连接(默认端口110)
POP3(host, port=POP3_PORT[, timeout])
+-*/+-*/+-*/+-*/quit m 退出
+-*/+-*/+-*/+-*/getwelcome m 获取服务器欢迎文本(字节字符串)
+-*/+-*/+-*/+-*/rpop m 
rpop(user)

Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.



+-*/+-*/+-*/+-*/dele m 删除单个邮件
dele(which)
  which:   邮件编号
  不少服务器不会马上删除而是会等到quit后再删除
+-*/+-*/+-*/+-*/set_debuglevel m  设置明细信息等级
set_debuglevel(level)
  level:  0不输出调试信息,1,2输出更详细的信息
+-*/+-*/+-*/+-*/top m 
top(which, howmuch)

Retrieves the message header plus *howmuch* lines of the message after the
header of message number *which*. Result is in form ``(response, ['line', ...],
octets)``.

The POP3 TOP command this method uses, unlike the RETR command, doesn't set the
message's seen flag; unfortunately, TOP is poorly specified in the RFCs and is
frequently broken in off-brand servers. Test this method by hand against the
POP3 servers you will use before trusting it.



+-*/+-*/+-*/+-*/list m 获取邮件列表
list()
  返回元组,其第一项为服务器消息文本,第三项为此命令收到的字节数
  其第二项为字节字符串列表,每个的形式为'aaa bbb',aaa是邮件编号,bbb是邮件大小
+-*/+-*/+-*/+-*/stat m 获取邮箱状态,返回(邮件数量,总字节大小)
+-*/+-*/+-*/+-*/rset m 
rset()

Remove any deletion marks for the mailbox.



+-*/+-*/+-*/+-*/retr m 获取单个邮件
retr(which)
  which:   邮件编号
  返回元组,其第一项为服务器消息文本,第三项为此命令收到的字节数
  其第二项为邮件内容是(字节字符串)行列表,每行不带结尾的'\n'
+-*/+-*/+-*/+-*/pass_ m 登录密码(往往同时服务器加锁,禁止邮箱收发)
pass_(password)
+-*/+-*/+-*/+-*/noop m 保持连接
+-*/+-*/+-*/+-*/user m 登录用户名
user(username)
+-*/+-*/+-*/+-*/apop m 加密的登录方式(服务器不一定支持)
apop(user, secret)
  user:  用户名
  secret:  密码
+-*/+-*/+-*/+-*/uidl m 
uidl(which=None)

Return message digest (unique id) list. If *which* is specified, result contains
the unique id for that message in the form ``'response mesgnum uid``, otherwise
result is list ``(response, ['mesgnum uid', ...], octets)``.


+-*/+-*/+-*/+-*/POP3_SSL c 创建带ssl的pop3连接(默认端口995)
POP3_SSL(host, port=POP3_SSL_PORT, keyfile=None, certfile=None, timeout=None, context=None)
+-*/+-*/smtplib p 简易SMTP(发送邮件)客户端模块
+-*/+-*/+-*/SMTPException e SMTP异常基类
+-*/+-*/+-*/+-*/SMTPRecipientsRefused e 
SMTPRecipientsRefused

All recipient addresses refused.  The errors for each recipient are accessible
through the attribute :attr:`recipients`, which is a dictionary of exactly the
same sort as :meth:`SMTP.sendmail` returns.



+-*/+-*/+-*/+-*/SMTPServerDisconnected e 
SMTPServerDisconnected

This exception is raised when the server unexpectedly disconnects, or when an
attempt is made to use the :class:`SMTP` instance before connecting it to a
server.



+-*/+-*/+-*/+-*/SMTPResponseException e smtp服务器返回异常代码
SMTPResponseException
  SMTP服务器返回代码2xx或3xx表示命令执行正常,返回4XX或5XX表示出错
+-*/+-*/+-*/+-*/+-*/smtp_code d 服务器返回的代码
+-*/+-*/+-*/+-*/+-*/smtp_error d 服务器返回的文本信息
+-*/+-*/+-*/+-*/+-*/SMTPConnectError e 
SMTPConnectError

Error occurred during establishment of a connection  with the server.



+-*/+-*/+-*/+-*/+-*/SMTPAuthenticationError e 
SMTPAuthenticationError

SMTP authentication went wrong.  Most probably the server didn't accept the
username/password combination provided.



+-*/+-*/+-*/+-*/+-*/SMTPDataError e 
SMTPDataError

The SMTP server refused to accept the message data.



+-*/+-*/+-*/+-*/+-*/SMTPHeloError e 
SMTPHeloError

The server refused our ``HELO`` message.



+-*/+-*/+-*/+-*/+-*/SMTPSenderRefused e 
SMTPSenderRefused

Sender address refused.  In addition to the attributes set by on all
:exc:`SMTPResponseException` exceptions, this sets 'sender' to the string that
the SMTP server refused.



+-*/+-*/+-*/LMTP c 
LMTP(host='', port=LMTP_PORT, local_hostname=None)

The LMTP protocol, which is very similar to ESMTP, is heavily based on the
standard SMTP client. It's common to use Unix sockets for LMTP, so our :meth:`connect`
method must support that as well as a regular host:port server. To specify a
Unix socket, you must use an absolute path for *host*, starting with a '/'.

Authentication is supported, using the regular SMTP mechanism. When using a Unix
socket, LMTP generally don't support or require any authentication, but your
mileage might vary.



+-*/+-*/+-*/SMTP c 创建smtp客户端
SMTP(host='', port=0, local_hostname=None[, timeout])
  常用发邮件方式:
  1.  可匿名服务器
      .helo() -> .sendmail()
  2.  须认证服务器
      .login() -> .sendmail()
  3.  邮件加密传输服务器
      .login() -> .starttls() -> .sendmail()
  4.  ssl服务器
      使用SMTP_SSL
+-*/+-*/+-*/+-*/ehlo m 发送EHLO命令(用于获取服务器功能信息)
ehlo(name='')
  name:   本机域名
+-*/+-*/+-*/+-*/quit m 发送QUIT命令并关闭连接
+-*/+-*/+-*/+-*/sendmail m 发送邮件
sendmail(from_addr, to_addrs, msg, mail_options=[], rcpt_options=[])
  from_addr:    发送人邮件地址(往往要和登录所用的用户邮件地址相同才能发送)
  to_addrs:     接收人邮件地址列表
  msg:          通常使用message.as_string()来生成
                (邮件消息对象里的From,To头部有时可以和from_addr,to_addrs不相同)
  详细步骤相当于
  .docmd('MAIL FROM: <%s>' % from_addr)
  .docmd('RCPT TO: <%s>' % to_addrs[0])
  .docmd('RCPT TO: <%s>' % to_addrs[1]) ....
  .docmd('DATA')
  .send(msg)
  .docmd('.')
+-*/+-*/+-*/+-*/verify m 检测用户地址是否存在(大多服务器不能用)
verify(address)
+-*/+-*/+-*/+-*/starttls m 开启安全邮件功能
starttls(keyfile=None, certfile=None)
  有些服务器必须开启此功能才能发邮件
+-*/+-*/+-*/+-*/set_debuglevel m 设置是否输出详细信息
set_debuglevel(level)
+-*/+-*/+-*/+-*/ehlo_or_helo_if_needed m 
ehlo_or_helo_if_needed()

This method call :meth:`ehlo` and or :meth:`helo` if there has been no
previous ``EHLO`` or ``HELO`` command this session.  It tries ESMTP ``EHLO``
first.

:exc:`SMTPHeloError`
  The server didn't reply properly to the ``HELO`` greeting.


+-*/+-*/+-*/+-*/has_extn m 检测服务器是否支持某功能
has_extn(name)
  name:  不分大小写,如'starttls'(需加密),'auth'(需登录),'size'(最大邮件长度)
  相关功能的详细参数可查询.esmtp_features
+-*/+-*/+-*/+-*/esmtp_features d 服务器功能字典(键名为小写)
+-*/+-*/+-*/+-*/send_message m 
send_message(msg, from_addr=None, to_addrs=None, \
                           mail_options=[], rcpt_options=[])

This is a convenience method for calling :meth:`sendmail` with the message
represented by an :class:`email.message.Message` object.  The arguments have
the same meaning as for :meth:`sendmail`, except that *msg* is a ``Message``
object.

If *from_addr* is ``None`` or *to_addrs* is ``None``, ``send_message`` fills
those arguments with addresses extracted from the headers of *msg* as
specified in :rfc:`2822`\: *from_addr* is set to the :mailheader:`Sender`
field if it is present, and otherwise to the :mailheader:`From` field.
*to_adresses* combines the values (if any) of the :mailheader:`To`,
:mailheader:`Cc`, and :mailheader:`Bcc` fields from *msg*.  If exactly one
set of :mailheader:`Resent-*` headers appear in the message, the regular
headers are ignored and the :mailheader:`Resent-*` headers are used instead.
If the message contains more than one set of :mailheader:`Resent-*` headers,
a :exc:`ValueError` is raised, since there is no way to unambiguously detect
the most recent set of :mailheader:`Resent-` headers.

``send_message`` serializes *msg* using
:class:`~email.generator.BytesGenerator` with ``\r\n`` as the *linesep*, and
calls :meth:`sendmail` to transmit the resulting message.  Regardless of the
values of *from_addr* and *to_addrs*, ``send_message`` does not transmit any
:mailheader:`Bcc` or :mailheader:`Resent-Bcc` headers that may appear
in *msg*.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/connect m 连接服务器
connect(host='localhost', port=0)
  port默认25
+-*/+-*/+-*/+-*/docmd m 发送smtp命令
docmd(cmd, args='')
  cmd:
    HELO 向服务器标识用户身份
    HELP 查询服务器支持什么命令
    MAIL FROM: 指定发送者地址
    RCPT TO: 指明的接收者地址
    DATA 在单个或多个RCPT命令后,表示所有接收人已标识,并初始化数据传输
    .    数据传输完毕
    VRFY 用于验证指定的用户是否存在；由于安全方面的原因,服务器常禁止此命令
    EXPN 验证给定的邮箱列表是否存在,扩充邮箱列表,也常被禁用
    NOOP 无操作,服务器应响应OK
    QUIT 结束会话
    RSET 重置会话,当前传输被取消
+-*/+-*/+-*/+-*/helo m 发送HELO命令(主要用于可匿名邮件服务器)
helo(name='')
  name:   本机域名
+-*/+-*/+-*/+-*/login m 登录,失败则报错
login(user, password)
+-*/+-*/+-*/+-*/SMTP_SSL c 创建ssl连接的smtp客户端(通常端口为465)
SMTP_SSL(host='', port=0, local_hostname=None, 
        keyfile=None, certfile=None[, timeout])
+-*/+-*/telnetlib p Telnet client class.
+-*/+-*/+-*/Telnet c 
Telnet(host=None, port=0[, timeout])

:class:`Telnet` represents a connection to a Telnet server. The instance is
initially not connected by default; the :meth:`open` method must be used to
establish a connection.  Alternatively, the host name and optional port
number can be passed to the constructor, to, in which case the connection to
the server will be established before the constructor returns.  The optional
*timeout* parameter specifies a timeout in seconds for blocking operations
like the connection attempt (if not specified, the global default timeout
setting will be used).

Do not reopen an already connected instance.

This class has many :meth:`read_\*` methods.  Note that some of them  raise
:exc:`EOFError` when the end of the connection is read, because they can return
an empty string for other reasons.  See the individual descriptions below.



+-*/+-*/+-*/+-*/read_all m 
read_all()

Read all data until EOF as bytes; block until connection closed.



+-*/+-*/+-*/+-*/get_socket m 
get_socket()

Return the socket object used internally.



+-*/+-*/+-*/+-*/read_until m 
read_until(expected, timeout=None)

Read until a given byte string, *expected*, is encountered or until *timeout*
seconds have passed.

When no match is found, return whatever is available instead, possibly empty
bytes.  Raise :exc:`EOFError` if the connection is closed and no cooked data
is available.



+-*/+-*/+-*/+-*/read_eager m 
read_eager()

Read readily available data.

Raise :exc:`EOFError` if connection closed and no cooked data available.
Return ``b''`` if no cooked data available otherwise. Do not block unless in
the midst of an IAC sequence.



+-*/+-*/+-*/+-*/interact m 
interact()

Interaction function, emulates a very dumb Telnet client.



+-*/+-*/+-*/+-*/mt_interact m 
mt_interact()

Multithreaded version of :meth:`interact`.



+-*/+-*/+-*/+-*/set_debuglevel m 
set_debuglevel(debuglevel)

Set the debug level.  The higher the value of *debuglevel*, the more debug
output you get (on ``sys.stdout``).



+-*/+-*/+-*/+-*/read_very_lazy m 
read_very_lazy()

Return any data available in the cooked queue (very lazy).

Raise :exc:`EOFError` if connection closed and no data available. Return
``b''`` if no cooked data available otherwise.  This method never blocks.



+-*/+-*/+-*/+-*/read_some m 
read_some()

Read at least one byte of cooked data unless EOF is hit. Return ``b''`` if
EOF is hit.  Block if no data is immediately available.



+-*/+-*/+-*/+-*/read_sb_data m 
read_sb_data()

Return the data collected between a SB/SE pair (suboption begin/end). The
callback should access these data when it was invoked with a ``SE`` command.
This method never blocks.



+-*/+-*/+-*/+-*/write m 
write(buffer)

Write a byte string to the socket, doubling any IAC characters. This can
block if the connection is blocked.  May raise :exc:`socket.error` if the
connection is closed.



+-*/+-*/+-*/+-*/read_lazy m 
read_lazy()

Process and return data already in the queues (lazy).

Raise :exc:`EOFError` if connection closed and no data available. Return
``b''`` if no cooked data available otherwise.  Do not block unless in the
midst of an IAC sequence.



+-*/+-*/+-*/+-*/read_very_eager m 
read_very_eager()

Read everything that can be without blocking in I/O (eager).

Raise :exc:`EOFError` if connection closed and no cooked data available.
Return ``b''`` if no cooked data available otherwise. Do not block unless in
the midst of an IAC sequence.



+-*/+-*/+-*/+-*/expect m 
expect(list, timeout=None)

Read until one from a list of a regular expressions matches.

The first argument is a list of regular expressions, either compiled
(:class:`re.RegexObject` instances) or uncompiled (byte strings). The
optional second argument is a timeout, in seconds; the default is to block
indefinitely.

Return a tuple of three items: the index in the list of the first regular
expression that matches; the match object returned; and the bytes read up
till and including the match.

If end of file is found and no bytes were read, raise :exc:`EOFError`.
Otherwise, when nothing matches, return ``(-1, None, data)`` where *data* is
the bytes received so far (may be empty bytes if a timeout happened).

If a regular expression ends with a greedy match (such as ``.*``) or if more
than one expression can match the same input, the results are
non-deterministic, and may depend on the I/O timing.



+-*/+-*/+-*/+-*/msg m 
msg(msg, *args)

Print a debug message when the debug level is ``>`` 0. If extra arguments are
present, they are substituted in the message using the standard string
formatting operator.



+-*/+-*/+-*/+-*/close m 
close()

Close the connection.



+-*/+-*/+-*/+-*/set_option_negotiation_callback m 
set_option_negotiation_callback(callback)

Each time a telnet option is read on the input flow, this *callback* (if set) is
called with the following parameters : callback(telnet socket, command
(DO/DONT/WILL/WONT), option).  No other action is done afterwards by telnetlib.



+-*/+-*/+-*/+-*/open m 
open(host, port=0[, timeout])

Connect to a host. The optional second argument is the port number, which
defaults to the standard Telnet port (23). The optional *timeout* parameter
specifies a timeout in seconds for blocking operations like the connection
attempt (if not specified, the global default timeout setting will be used).

Do not try to reopen an already connected instance.



+-*/+-*/+-*/+-*/fileno m 
fileno()

Return the file descriptor of the socket object used internally.



+-*/+-*/urllib.py2 p 简易获取网络资源模块(python2)
+-*/+-*/+-*/ContentTooShortError e 数据不完整错误(用于urlretrieve)
+-*/+-*/+-*/urlretrieve f 获取网络资源存成文件
urlretrieve(url, filename=None, reporthook=None, data=None)
  url:           url地址
  filename:      保存数据的文件名(未给出将自动生成)
  data:          通常为http的POST数据
  reporthook:    回调函数,func(count,size,total)
                 count已下载次数,size每次下载的大小,total需要下载的总大小
  返回(保存数据的文件名,HTTPMessage对象)二元组,如不是http网址,第二项为None
  和urlopen不同的是这个是由FancyURLopener来管理的
  支持的处理不多但速度较快，还支持缓冲避免重复下载
  可使用urlcleanup来清除缓存
+-*/+-*/+-*/URLopener c 创建获取网络资源的简易接收器
URLopener(proxies=None, **x509)
  proxies:   为代理服务字典,键名为协议名称,键值为网址
  key_file:  PEM格式的私有密钥文件(用于https)
  cert_file: 证书文件(用于https)
  仅支持http,ftp,file的简单获取,如服务器返回错误码将抛出IOError异常
+-*/+-*/+-*/+-*/open m 打开网址
open(fullurl, data=None)
  fullurl:   url地址
  data:      通常为http的POST数据
  返回带geturl和info方法的文件对象
+-*/+-*/+-*/+-*/retrieve m 获取网络资源存成文件
retrieve(url, filename=None, reporthook=None, data=None)
  url:           url地址
  filename:      保存数据的文件名(未给出将自动生成)
  data:          通常为http的POST数据
  reporthook:    回调函数,func(count,size,total)
                 count已下载次数,size每次下载的大小,total需要下载的总大小
  返回(保存数据的文件名,HTTPMessage对象)二元组,如不是http网址,第二项为None
+-*/+-*/+-*/+-*/FancyURLopener c 
FancyURLopener(...)
支持301, 302, 303, 307自动重定位和401，407的简单身份验证.
+-*/+-*/+-*/+-*/+-*/prompt_user_passwd m 在终端提示用户输入用户名和密码(可自定义)
prompt_user_passwd(host, realm)
  host:    网址
  realm:   关联名称
  应返回(用户名,密码)二元组
+-*/+-*/+-*/pathname2url f 将本地路径转换为url
pathname2url(path)
  path:   文件或目录路径(应使用字节字符串)
  对于':'或中文等字符会编码为%形式
+-*/+-*/+-*/urlcleanup f 清除缓存(用于urlretrieve)
+-*/+-*/+-*/url2pathname f 将url形式的路径转换为本地路径
url2pathname(path)
  path:   url形式的路径(通常%格式)
+-*/+-*/+-*/quote_plus f URI编码(空格编码为+)
quote_plus(string, safe='')
  string:  通常应使用utf8编码的字符串
  safe:    不转码的字符，默认'/'，不管此参数如何设[_.-a-zA-Z0-9]都不会被转码
  string里的'+'仍然会被编码为'%2B',' '不管safe如何设都会编码为'+'
+-*/+-*/+-*/unquote f URI解码(百分号解码)
unquote(string)
  string:  %xx形式的字符串
  解码出的结果可根据需要用utf-8再次解码为unicode
+-*/+-*/+-*/quote f URI编码(百分号编码)(常用于编码表单里项的值)
quote(string, safe='/')
  string:  通常应使用utf8编码的字符串
  safe:    不转码的字符，默认'/'，不管此参数如何设[_.-a-zA-Z0-9]都不会被转码
  javascript里的encodeURIComponent相当于quote(safe="!~*'()")
  javascript里的encodeURI相当于quote(safe="!~*'();/?:@&=+$,#")
+-*/+-*/+-*/unquote_plus f URI解码(解码'+'为空格)
unquote_plus(string)
  string:  %xx形式的字符串
  解码出的结果可根据需要用utf-8再次解码为unicode
+-*/+-*/+-*/urlencode f 将表单字典转换为URI编码的查询字符串
urlencode(query, doseq=False)
  query:   字典或(key,value)的序列，key,value都将以quote_plus方式编码
           key,value类型为字节字符串时将不使用encoding进行转码
           key,value类型不是字符串时将使用str进行转换
  doseq:   如value为序列(同一项有多个值)应设为True
  返回的是'xx=xx&xx=xx'形式的字符串
  解码的话可以使用parse_qs或parse_qsl
+-*/+-*/urllib2 p 获取网络资源模块(python2)
与httplib模块不同的是urlopen通常不支持一次连接对话多次
+-*/+-*/+-*/URLError e 处理错误(用于urlopen相关的处理器)
+-*/+-*/+-*/+-*/reason d 原因字符串
+-*/+-*/+-*/+-*/HTTPError e HTTP回应非2xx异常
+-*/+-*/+-*/+-*/+-*/code d 回应码
+-*/+-*/+-*/build_opener f 创建常用网络资源客户端
build_opener([handler, ...])
  handler:  添加的处理器BaseHandler子类的实例对象
  默认装有http重定向,ftp,file等常用处理器
  ProxyHandler,UnknownHandler,HTTPHandler,HTTPDefaultErrorHandler,
  HTTPRedirectHandler,FTPHandler,FileHandler,HTTPErrorProcessor.
+-*/+-*/+-*/urlopen f 打开网址获取资源
urlopen(url, data=None[, timeout], *, cafile=None, capath=None)
  url:    网址字符串或Request对象
  data:   通常为http的POST数据
  timeout:   超时秒数(只用于http,https,ftp)
  返回的对象类似文件对象，
  支持迭代操作(可使用for x in urlopen(..)),可分段读取陆续收到的数据
  通常支持http重定向,ftp,file等常用处理(默认为build_opener)
  可使用install_opener来设定可处理的行为
+-*/+-*/+-*/+-*/geturl m 返回网址
+-*/+-*/+-*/+-*/info m 返回回应的HTTPMessage对象
+-*/+-*/+-*/getproxies f 由系统获取代理设定
getproxies()
  返回字典,键名如'http'或'ftp',键值为uri地址
+-*/+-*/+-*/install_opener f 设置urlopen所使用的客户端
install_opener(opener)
  opener:   OpenerDirector实例,通常由build_opener创建
+-*/+-*/+-*/ProxyHandler c 代理服务处理器
ProxyHandler(proxies=None)
  proxies:   为字典,键名为'http'或'ftp',键值为uri地址
             要禁止使用代理可将proxies设为{}

  proxy_support = ProxyHandler({"http" : "http://ahad-haam:3128"})
+-*/+-*/+-*/BaseHandler c 处理器基类
BaseHandler()
  处理器可以根据需求改变url请求的内容或改变结果的内容
  对于http协议可以根据返回码编写特定的http_error_nnn
+-*/+-*/+-*/+-*/parent d 所在的OpenerDirector管理对象
+-*/+-*/+-*/+-*/protocol_request m 协议请求的处理(自定义)
protocol_request(req)
  req:   Request对象
  如http_request,应返回处理过的Request对象
+-*/+-*/+-*/+-*/http_error_default m http错误的默认处理方式
http_error_default(req, fp, code, msg, hdrs)
  由HTTPDefaultErrorHandler实现
+-*/+-*/+-*/+-*/unknown_open m 未知协议的处理
unknown_open(req)
+-*/+-*/+-*/+-*/add_parent m 指定所在的OpenerDirector管理对象
add_parent(director)
  通常由OpenerDirector管理对象调用
+-*/+-*/+-*/+-*/protocol_response m 对结果的处理(自定义)
protocol_response(req, response)
  req:       Request对象
  response:  带info和geturl方法的类文件对象
  如HTTPErrorProcessor实现了http_response,将处理转向http_error_nnn
  应返回带info和geturl方法的类文件对象,或抛出URLError
+-*/+-*/+-*/+-*/protocol_open m 获取内容的处理(自定义)
protocol_open(req)
  req:   Request对象
  如ftp_open,应返回带info和geturl方法的类文件对象,或抛出URLError
+-*/+-*/+-*/+-*/protocol_error m 出错时的处理(自定义)
protocol_error(*args)
  如ftp_error
+-*/+-*/+-*/+-*/http_error_nnn m http指定返回码的处理方式(自定义)
http_error_nnn(req, fp, code, msg, hdrs)
  HTTPRedirectHandler实现了301,302,303,307
  身份验证处理器实现了401,407
  应返回带info和geturl方法的类文件对象,或抛出URLError
+-*/+-*/+-*/+-*/close m 移除管理对象
+-*/+-*/+-*/+-*/default_open m 默认处理方式(自定义)
default_open(req)
  在按协议打开之前的处理,可返回带info和geturl方法的类文件对象类文件对象
  或抛出URLError,如有返回对象则不再作协议打开处理
+-*/+-*/+-*/HTTPRedirectHandler c HTTP自动重定位处理器
HTTPRedirectHandler()
处理301,302,303,307错误,自动重新获取转向网页
+-*/+-*/+-*/AbstractBasicAuthHandler c 简易验证器基类
AbstractBasicAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
+-*/+-*/+-*/HTTPHandler c HTTP处理器
+-*/+-*/+-*/FileHandler c 本地文件处理器
可处理file://xxxx的url(只能是文件不能是目录)
+-*/+-*/+-*/HTTPPasswordMgr c HTTP密码管理器
HTTPPasswordMgr()
主要用于HTTPBasicAuthHandler,HTTPDigestAuthHandler
ProxyDigestAuthHandler,ProxyBasicAuthHandler
+-*/+-*/+-*/+-*/find_user_password m 根据地址查找相应的身份验证信息
find_user_password(realm, authuri)
  通常由用户验证处理器如HTTPBasicAuthHandler等调用
  返回(None,None)表示未找到
+-*/+-*/+-*/+-*/add_password m 添加身份验证信息
add_password(realm, uri, user, passwd)
  realm:   验证关联名称(不使用的话最好使用HTTPPasswordMgrWithDefaultRealm)
  uri:     可以是单个uri地址也可以是多个uri地址的列表
  user,passwd:  用户名和密码

authinfo.add_password(realm='PDQ Application',
                      uri='https://mahler:8092/site-updates.py',
                      user='klem',
                      passwd='geheim$parole')
+-*/+-*/+-*/+-*/HTTPPasswordMgrWithDefaultRealm c 
HTTPPasswordMgrWithDefaultRealm()
  使用add_password时realm参数为None即为添加默认身份验证,只考虑uri是否相符
+-*/+-*/+-*/HTTPDefaultErrorHandler c HTTP错误默认处理器
HTTPDefaultErrorHandler()
  对于未处理的HTTP返回码(如404等)按抛出HTTPError异常处理
+-*/+-*/+-*/HTTPSHandler c HTTPS处理器
HTTPSHandler(debuglevel=0, context=None, check_hostname=None)
  context:   ssl.SSLContext对象
+-*/+-*/+-*/FTPHandler c FTP处理器
可处理ftp://user:pass@host/path/filename的url
对于目录返回目录列表内容,对于文件返回文件内容
+-*/+-*/+-*/+-*/CacheFTPHandler c 带缓冲的FTP处理器
+-*/+-*/+-*/+-*/+-*/setTimeout m 设置缓冲的存活时长
setTimeout(t)
  t:    秒数(默认60)
+-*/+-*/+-*/+-*/+-*/setMaxConns m 设置缓冲的数目
setMaxConns(m)
  m:    默认16
+-*/+-*/+-*/HTTPErrorProcessor c HTTP返回非2xx时的错误分配处理器
处理HTTP必装的处理器,是很多其他HTTP辅助处理器不可缺少的部分
+-*/+-*/+-*/ProxyDigestAuthHandler c 代理服务的数字身份验证处理器
ProxyDigestAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理407错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/AbstractDigestAuthHandler c 数字验证器基类
AbstractDigestAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
+-*/+-*/+-*/Request c 创建请求对象用于urlopen
Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False)
  url:     URL地址字符串
  data:    数据字节字符串，如给出HTTP的请求方式将从'GET'变为'POST'
  headers: 头部项目字典,键值需注意大小写
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Cookie'              cookie            'xxx=xx;xxx=xx;'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
+-*/+-*/+-*/+-*/type d 协议,通常为'http'
+-*/+-*/+-*/+-*/selector d 路径(url里服务器地址后面的部分)
+-*/+-*/+-*/+-*/host d 主机字符串(有时可能含:端口号)
+-*/+-*/+-*/+-*/unverifiable d 
TODO:
unverifiable

boolean, indicates whether the request is unverifiable as defined
by RFC 2965.


+-*/+-*/+-*/+-*/origin_req_host d 
origin_req_host

The original host for the request, without port.


+-*/+-*/+-*/+-*/data d 需传送的数据内容(POST)
+-*/+-*/+-*/+-*/full_url d 完整的url字符串
+-*/+-*/+-*/+-*/set_proxy m 
set_proxy(host, type)

Prepare the request by connecting to a proxy server. The *host* and *type* will
replace those of the instance, and the instance's selector will be the original
URL given in the constructor.



+-*/+-*/+-*/+-*/add_unredirected_header m 添加http(重定向时无效的)头部字段
add_unredirected_header(key, val)
  key:    头部字段标识(注意分大小写)(如已有重复的将替换)
  val:    内容(不能含有'\r'或'\n')
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Cookie'              cookie            'xxx=xx;xxx=xx;'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
+-*/+-*/+-*/+-*/is_unverifiable m 
is_unverifiable()

Return whether the request is unverifiable, as defined by RFC 2965. See the
documentation for the :class:`Request` constructor.



+-*/+-*/+-*/+-*/get_data m 返回POST需传送的内容数据字节字符串
+-*/+-*/+-*/+-*/add_data m 变更需传送的数据内容(POST)
add_data(data)
  data:    数据字节字符串，HTTP的请求方式变为'POST'
  对于application/x-www-form-urlencoded类型,通常使用urlencode生成内容
  对于multipart/form-data类型(常用于上传文件),分行使用'\r\n'
  boundary=---xxxx里的'---xxxx'为分隔符,应保证不会出现在要分隔的数据里
  分隔符出现在内容的开头和中间、结尾,结尾分隔符前后要加'--',其它的要前置'--'
  示例:
--分隔符\r\n
Content-Disposition: form-data; name="..." \r\n\r\n(两个用于分隔头和内容)
...form表单里非文件的值内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..."; filename="..." \r\n
Content-Type: .... \r\n
Content-Transfer-Encoding: binary(或base64,通常可省略此行)\r\n\r\n 
...文件内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..一次选择多个文件.." \r\n
Content-Type: multipart/mixed; boundary=新分隔符\r\n\r\n
--新分隔符\r\n
Content-Disposition: file; filename="通常用encode_rfc2231编码" \r\n
Content-Type: .... \r\n\r\n
...文件内容...\r\n
--新分隔符--\r\n
--分隔符--\r\n(结尾的\r\n不能少)
+-*/+-*/+-*/+-*/get_full_url m 返回完整的url字符串
+-*/+-*/+-*/+-*/add_header m 添加http头部字段(重定向时也有效)
add_header(key, val)
  key:    头部字段标识(注意分大小写)(如已有重复的将替换)
  val:    内容(不能含有'\r'或'\n')
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Cookie'              cookie            'xxx=xx;xxx=xx;'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
+-*/+-*/+-*/+-*/get_type m 返回协议字符串,通常为'http'
+-*/+-*/+-*/+-*/get_selector m  返回路径(url里服务器地址后面的部分)
+-*/+-*/+-*/+-*/get_host m 返回主机字符串(有时可能含:端口号)
+-*/+-*/+-*/+-*/has_header m 检查是否包含某个http头部字段 
has_header(header)
  header:    头部字段标识(注意分大小写)
  重定向有效无效的都检查，如有则返回True
+-*/+-*/+-*/+-*/get_origin_req_host m 
get_origin_req_host()

Return the request-host of the origin transaction, as defined by :rfc:`2965`.
See the documentation for the :class:`Request` constructor.



+-*/+-*/+-*/+-*/get_method m 返回请求模式('GET'或'POST')(只用于HTTP)
+-*/+-*/+-*/+-*/has_data m 是否有内容数据
+-*/+-*/+-*/OpenerDirector c 创建网络资源客户端
OpenerDirector()
  类似浏览器，通过安装不同插件来实现获取网络资源的客户端
+-*/+-*/+-*/+-*/add_handler m 添加处理器
add_handler(handler)
  handler:   BaseHandler子类生成的实例
+-*/+-*/+-*/+-*/open m 打开网址
open(url, data=None[, timeout])
  url:    网址字符串或Request对象
  data:   通常为http的POST数据
  timeout:   超时秒数(只用于http,https,ftp)
  返回带geturl和info方法的文件对象
+-*/+-*/+-*/HTTPBasicAuthHandler c HTTP简易身份验证处理器
HTTPBasicAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理401错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/HTTPCookieProcessor c cookie处理器
HTTPCookieProcessor(cookiejar=None)
  cookiejar:   可指定CookieJar对象,通常如需要保存可使用MozillaCookieJar
  在每次页面请求等操作时自动记录或发送cookie
+-*/+-*/+-*/+-*/cookiejar d 存放cookie记录的CookieJar对象
+-*/+-*/+-*/UnknownHandler c 未知协议处理器
UnknownHandler()
  默认对于未识别的协议抛出URLError
+-*/+-*/+-*/ProxyBasicAuthHandler c 代理服务的简易身份验证处理器
ProxyBasicAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理407错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/HTTPDigestAuthHandler c HTTP数字身份验证处理器
HTTPDigestAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理401错误,自动加入身份验证重新获取网页
+-*/+-*/robotparser p robots.txt分析模块(python2)
+-*/+-*/+-*/RobotFileParser c 创建robots.txt文件分析器
RobotFileParser(url='')
  url:     robots.txt的url地址
+-*/+-*/+-*/+-*/can_fetch m 检测网页是否允许被抓取
can_fetch(useragent, url)
  useragent:   网页爬虫名称,通常使用'*'(baidu为'Baiduspider',google为'Goolebot')
  url:         网址
  通常要在read或parse之后才能作此检测
+-*/+-*/+-*/+-*/read m 获取robots内容并分析
+-*/+-*/+-*/+-*/modified m 设置最后获取时间为当前时间
+-*/+-*/+-*/+-*/parse m 分析robots行文本列表
parse(lines)
  lines:    行文本列表
+-*/+-*/+-*/+-*/set_url m 设置要分析的robots文件地址
set_url(url)
  url:     robots.txt的url地址
+-*/+-*/+-*/+-*/mtime m 返回最后获取时间浮点秒数
+-*/+-*/urlparse p 对url地址的操作模块(python2)
+-*/+-*/+-*/urljoin f 组合url原地址和相对页面路径为新的url地址
urljoin(base, url, allow_fragments=True)
  base:   原url地址
  url:    相对地址(通常为页面路径)
   >>> urljoin('http://www/a/Python.html', 'FAQ.html')
   'http://www/a/FAQ.html'
   >>> urljoin('http://www/a/Python.html', '/FAQ.html')
   'http://www/FAQ.html'
   >>> urljoin('http://www/a/b/Python.html', '../FAQ.html')
   'http://www/a/FAQ.html'
+-*/+-*/+-*/urlunsplit f 将五元组组合为URL地址字符串
urlunsplit(parts)
  parts:  (协议,地址,路径,查询,片段)五个元素的序列
+-*/+-*/+-*/urldefrag f 将URL地址分成(标准URL地址,片段)
urldefrag(url)
  url:   url地址scheme://netloc/path?query#frag
  返回(scheme://netloc/path?query,frag)对象
+-*/+-*/+-*/+-*/url d 不含片段的url地址,默认''(只读)
+-*/+-*/+-*/+-*/fragment d 信息片段(常用于页内定位),默认''(只读)
+-*/+-*/+-*/urlsplit f 解析URL地址(统一资源定位符)(路径和参数不分开)
urlsplit(urlstring, scheme='', allow_fragments=True)
  urlstring:   url地址scheme://netloc/pathandparms?query#frag
               netloc有时可细分为user:pass@hostname:port
  scheme:      可指定协议如'http','ftp'
  allow_fragments: 是否支持最后的#标识，默认支持
  返回(协议,地址,路径,查询,片段)对象
  urlstring并不要求是完整的url
>>> urlsplit('//www/html')
SplitResult(scheme='',netloc='www',path='/html',query='',fragment='')
>>> urlparse('www/html')
SplitResult(scheme='',netloc='',path='www/html',query='',fragment='')
+-*/+-*/+-*/+-*/scheme d 协议,如'http',默认''(只读)
+-*/+-*/+-*/+-*/netloc d 网络地址,默认''(只读)
+-*/+-*/+-*/+-*/path d 路径,如'/index.html',默认''(只读)
+-*/+-*/+-*/+-*/query d 查询,默认''(通常可由urlencode产生)(只读)
+-*/+-*/+-*/+-*/fragment d 信息片段(常用于页内定位),默认''(只读)
+-*/+-*/+-*/+-*/username d 用户名,默认None(只读)
+-*/+-*/+-*/+-*/password d 密码,默认None(只读)
+-*/+-*/+-*/+-*/hostname d 主机名(小写),默认None(只读)
+-*/+-*/+-*/+-*/port d 端口号(整数),默认None(只读)
+-*/+-*/+-*/+-*/geturl m 返回URL地址字符串(会丢弃空片段空查询)
geturl()
   >>> url = 'HTTP://www.Python.org/doc/#'
   >>> r1 = urlsplit(url)
   >>> r1.geturl()
   'http://www.Python.org/doc/'
+-*/+-*/+-*/parse_qs f 解析查询字符串,返回字典
parse_qs(qs, keep_blank_values=False, strict_parsing=False) 
  qs:   application/x-www-form-urlencoded类型的字符串'xx=xx&yy=yy'
  keep_blank_values:  是否保留值为空白('xx=&yy=yy'里的xx)的项目
  strict_parsing:     如为True,解析错误时会报ValueError异常
+-*/+-*/+-*/parse_qsl f 解析查询字符串,返回(k,v)对列表(常用于有重复项目名)
parse_qsl(qs, keep_blank_values=False, strict_parsing=False) 
  qs:   application/x-www-form-urlencoded类型的字符串'xx=xx&yy=yy'
  keep_blank_values:  是否保留值为空白('xx=&yy=yy'里的xx)的项目
  strict_parsing:     如为True,解析错误时会报ValueError异常
+-*/+-*/+-*/urlparse f 解析URL地址(统一资源定位符)(路径和参数分开)
urlparse(urlstring, scheme='', allow_fragments=True)
  urlstring:   url地址scheme://netloc/path;parms?query#frag
               netloc有时可细分为user:pass@hostname:port
  scheme:      可指定协议如'http','ftp'
  allow_fragments: 是否支持最后的#标识，默认支持
  返回(协议,地址,路径,参数,查询,片段)对象
  urlstring并不要求是完整的url
>>> urlparse('//www/html')
ParseResult(scheme='',netloc='www',path='/html',params='',query='',fragment='')
>>> urlparse('www/html')
ParseResult(scheme='',netloc='',path='www/html',params='',query='',fragment='')
+-*/+-*/+-*/+-*/scheme d 协议,如'http',默认''(只读)
+-*/+-*/+-*/+-*/netloc d 网络地址,默认''(只读)
+-*/+-*/+-*/+-*/path d 路径,如'/index.html',默认''(只读)
+-*/+-*/+-*/+-*/params d 特殊参数,默认''(只读)
+-*/+-*/+-*/+-*/query d 查询,默认''(通常可由urlencode产生)(只读)
+-*/+-*/+-*/+-*/fragment d 信息片段(常用于页内定位),默认''(只读)
+-*/+-*/+-*/+-*/username d 用户名,默认None(只读)
+-*/+-*/+-*/+-*/password d 密码,默认None(只读)
+-*/+-*/+-*/+-*/hostname d 主机名(小写),默认None(只读)
+-*/+-*/+-*/+-*/port d 端口号(整数),默认None(只读)
+-*/+-*/+-*/+-*/geturl m 返回URL地址字符串(会丢弃空片段空查询空参数)
geturl()
   >>> url = 'HTTP://www.Python.org/doc/#'
   >>> r1 = urlparse(url)
   >>> r1.geturl()
   'http://www.Python.org/doc/'
+-*/+-*/+-*/urlunparse f 将六元组组合为URL地址字符串
urlunparse(parts)
  parts:  (协议,地址,路径,参数,查询,片段)六个元素的序列
+-*/+-*/urllib p (python3)
+-*/+-*/+-*/error p urllib异常模块(python3)
+-*/+-*/+-*/+-*/URLError e 处理错误(用于urlopen相关的处理器)
+-*/+-*/+-*/+-*/+-*/reason d 原因字符串
+-*/+-*/+-*/+-*/+-*/HTTPError e HTTP回应非2xx异常
+-*/+-*/+-*/+-*/+-*/+-*/code d 回应码
+-*/+-*/+-*/+-*/ContentTooShortError e 数据不完整错误(用于urlretrieve)
+-*/+-*/+-*/parse p 对url地址的操作模块(python3)
+-*/+-*/+-*/+-*/urljoin f 组合url原地址和相对页面路径为新的url地址
urljoin(base, url, allow_fragments=True)
  base:   原url地址
  url:    相对地址(通常为页面路径)
   >>> urljoin('http://www/a/Python.html', 'FAQ.html')
   'http://www/a/FAQ.html'
   >>> urljoin('http://www/a/Python.html', '/FAQ.html')
   'http://www/FAQ.html'
   >>> urljoin('http://www/a/b/Python.html', '../FAQ.html')
   'http://www/a/FAQ.html'
+-*/+-*/+-*/+-*/urlunsplit f 将五元组组合为URL地址字符串
urlunsplit(parts)
  parts:  (协议,地址,路径,查询,片段)五个元素的序列
+-*/+-*/+-*/+-*/urldefrag f 将URL地址分成(标准URL地址,片段)
urldefrag(url)
  url:   url地址scheme://netloc/path?query#frag
  返回(scheme://netloc/path?query,frag)对象
+-*/+-*/+-*/+-*/+-*/url d 不含片段的url地址,默认''(只读)
+-*/+-*/+-*/+-*/+-*/fragment d 信息片段(常用于页内定位),默认''(只读)
+-*/+-*/+-*/+-*/urlsplit f 解析URL地址(统一资源定位符)(路径和参数不分开)
urlsplit(urlstring, scheme='', allow_fragments=True)
  urlstring:   url地址scheme://netloc/pathandparms?query#frag
               netloc有时可细分为user:pass@hostname:port
  scheme:      可指定协议如'http','ftp'
  allow_fragments: 是否支持最后的#标识，默认支持
  返回(协议,地址,路径,查询,片段)对象
  urlstring并不要求是完整的url
>>> urlsplit('//www/html')
SplitResult(scheme='',netloc='www',path='/html',query='',fragment='')
>>> urlparse('www/html')
SplitResult(scheme='',netloc='',path='www/html',query='',fragment='')
+-*/+-*/+-*/+-*/+-*/scheme d 协议,如'http',默认''(只读)
+-*/+-*/+-*/+-*/+-*/netloc d 网络地址,默认''(只读)
+-*/+-*/+-*/+-*/+-*/path d 路径,如'/index.html',默认''(只读)
+-*/+-*/+-*/+-*/+-*/query d 查询,默认''(通常可由urlencode产生)(只读)
+-*/+-*/+-*/+-*/+-*/fragment d 信息片段(常用于页内定位),默认''(只读)
+-*/+-*/+-*/+-*/+-*/username d 用户名,默认None(只读)
+-*/+-*/+-*/+-*/+-*/password d 密码,默认None(只读)
+-*/+-*/+-*/+-*/+-*/hostname d 主机名(小写),默认None(只读)
+-*/+-*/+-*/+-*/+-*/port d 端口号(整数),默认None(只读)
+-*/+-*/+-*/+-*/+-*/geturl m 返回URL地址字符串(会丢弃空片段空查询)
geturl()
   >>> url = 'HTTP://www.Python.org/doc/#'
   >>> r1 = urlsplit(url)
   >>> r1.geturl()
   'http://www.Python.org/doc/'
+-*/+-*/+-*/+-*/parse_qs f 解析查询字符串,返回字典
parse_qs(qs, keep_blank_values=False, strict_parsing=False, 
         encoding='utf-8', errors='replace')
  qs:   application/x-www-form-urlencoded类型的字符串'xx=xx&yy=yy'
  keep_blank_values:  是否保留值为空白('xx=&yy=yy'里的xx)的项目
  strict_parsing:     如为True,解析错误时会报ValueError异常
  encoding:           默认'utf-8',%xx的转换按encoding解码
  errors:             默认'replace'将无效字符替换为U+FFFD
               'strict'如有错误引发UnicodeError, 'ignore'忽略无效字符
+-*/+-*/+-*/+-*/parse_qsl f 解析查询字符串,返回(k,v)对列表(常用于有重复项目名)
parse_qsl(qs, keep_blank_values=False, strict_parsing=False, 
          encoding='utf-8', errors='replace')
  qs:   application/x-www-form-urlencoded类型的字符串'xx=xx&yy=yy'
  keep_blank_values:  是否保留值为空白('xx=&yy=yy'里的xx)的项目
  strict_parsing:     如为True,解析错误时会报ValueError异常
  encoding:           默认'utf-8',%xx的转换按encoding解码
  errors:             默认'replace'将无效字符替换为U+FFFD
               'strict'如有错误引发UnicodeError, 'ignore'忽略无效字符
+-*/+-*/+-*/+-*/urlparse f 解析URL地址(统一资源定位符)(路径和参数分开)
urlparse(urlstring, scheme='', allow_fragments=True)
  urlstring:   url地址scheme://netloc/path;parms?query#frag
               netloc有时可细分为user:pass@hostname:port
  scheme:      可指定协议如'http','ftp'
  allow_fragments: 是否支持最后的#标识，默认支持
  返回(协议,地址,路径,参数,查询,片段)对象
  urlstring并不要求是完整的url
>>> urlparse('//www/html')
ParseResult(scheme='',netloc='www',path='/html',params='',query='',fragment='')
>>> urlparse('www/html')
ParseResult(scheme='',netloc='',path='www/html',params='',query='',fragment='')
+-*/+-*/+-*/+-*/+-*/scheme d 协议,如'http',默认''(只读)
+-*/+-*/+-*/+-*/+-*/netloc d 网络地址,默认''(只读)
+-*/+-*/+-*/+-*/+-*/path d 路径,如'/index.html',默认''(只读)
+-*/+-*/+-*/+-*/+-*/params d 特殊参数,默认''(只读)
+-*/+-*/+-*/+-*/+-*/query d 查询,默认''(通常可由urlencode产生)(只读)
+-*/+-*/+-*/+-*/+-*/fragment d 信息片段(常用于页内定位),默认''(只读)
+-*/+-*/+-*/+-*/+-*/username d 用户名,默认None(只读)
+-*/+-*/+-*/+-*/+-*/password d 密码,默认None(只读)
+-*/+-*/+-*/+-*/+-*/hostname d 主机名(小写),默认None(只读)
+-*/+-*/+-*/+-*/+-*/port d 端口号(整数),默认None(只读)
+-*/+-*/+-*/+-*/+-*/geturl m 返回URL地址字符串(会丢弃空片段空查询空参数)
geturl()
   >>> url = 'HTTP://www.Python.org/doc/#'
   >>> r1 = urlparse(url)
   >>> r1.geturl()
   'http://www.Python.org/doc/'
+-*/+-*/+-*/+-*/urlunparse f 将六元组组合为URL地址字符串
urlunparse(parts)
  parts:  (协议,地址,路径,参数,查询,片段)六个元素的序列
+-*/+-*/+-*/+-*/quote_plus f URI编码(空格编码为+)
quote_plus(string, safe='', encoding=None, errors=None)
  string:  是字节字符串时无法使用encoding参数
  safe:    不转码的字符，默认'/'，不管此参数如何设[_.-a-zA-Z0-9]都不会被转码
  encoding:默认'utf-8',%xx的值依此生成,不规范网站有时会使用gbk的%值
  errors:  默认'strict'如有错误，引发UnicodeError,可设'ignore'忽略无效字符
  string里的'+'仍然会被编码为'%2B',' '不管safe如何设都会编码为'+'
  返回的是字符串，而不是字节字符串
+-*/+-*/+-*/+-*/unquote f URI解码(百分号解码)
unquote(string, encoding='utf-8', errors='replace')
  string:    不能是字节字符串
  encoding:  默认'utf-8',%xx的转换按encoding解码
  errors:    默认'replace'将无效字符替换为U+FFFD
             'strict'如有错误，引发UnicodeError, 'ignore'忽略无效字符
+-*/+-*/+-*/+-*/quote_from_bytes f URI编码字节字符串
quote_from_bytes(bytes, safe='/')
  bytes:   字节字符串
  safe:    不转码的字符，默认'/'，不管此参数如何设[_.-a-zA-Z0-9]都不会被转码
  返回的是字符串，而不是字节字符串
+-*/+-*/+-*/+-*/quote f URI编码(百分号编码)(常用于编码表单里项的值)
quote(string, safe='/', encoding=None, errors=None)
  string:  是字节字符串时无法使用encoding参数
  safe:    不转码的字符，默认'/'，不管此参数如何设[_.-a-zA-Z0-9]都不会被转码
  encoding:默认'utf-8',%xx的值依此生成,不规范网站有时会使用gbk的%值
  errors:  默认'strict'如有错误，引发UnicodeError,可设'ignore'忽略无效字符
  javascript里的encodeURIComponent相当于quote(safe="!~*'()")
  javascript里的encodeURI相当于quote(safe="!~*'();/?:@&=+$,#")
  返回的是字符串，而不是字节字符串
+-*/+-*/+-*/+-*/unquote_plus f URI解码(解码'+'为空格)
unquote_plus(string, encoding='utf-8', errors='replace')
  string:    不能是字节字符串
  encoding:  默认'utf-8',%xx的转换按encoding解码
  errors:    默认'replace'将无效字符替换为U+FFFD
             'strict'如有错误，引发UnicodeError, 'ignore'忽略无效字符
+-*/+-*/+-*/+-*/unquote_to_bytes f URI解码(返回字节字符串)
unquote_to_bytes(string)
  string:    如果不是字节字符串，里面不是ASCII的字符将以utf-8方式编码
+-*/+-*/+-*/+-*/urlencode f 将表单字典转换为URI编码的查询字符串
urlencode(query, doseq=False, safe='', encoding=None, errors=None)
  query:   字典或(key,value)的序列，key,value都将以quote_plus方式编码
           key,value类型为字节字符串时将不使用encoding进行转码
           key,value类型不是字符串时将使用str进行转换
  doseq:   如value为序列(同一项有多个值)应设为True
  encoding:默认'utf-8',%xx的值依此生成,不规范网站有时会使用gbk的%值
  errors:  默认'strict'如有错误，引发UnicodeError,可设'ignore'忽略无效字符
  返回的是'xx=xx&xx=xx'形式的字符串，而不是字节字符串
  解码的话可以使用parse_qs或parse_qsl
+-*/+-*/+-*/request p 获取网络资源模块(python3)
与http.client模块不同的是urlopen通常不支持一次连接对话多次
+-*/+-*/+-*/+-*/build_opener f 创建常用网络资源客户端
build_opener([handler, ...])
  handler:  添加的处理器BaseHandler子类的实例对象
  默认装有http重定向,ftp,file等常用处理器
  ProxyHandler,UnknownHandler,HTTPHandler,HTTPDefaultErrorHandler,
  HTTPRedirectHandler,FTPHandler,FileHandler,HTTPErrorProcessor.
+-*/+-*/+-*/+-*/urlopen f 打开网址获取资源
urlopen(url, data=None[, timeout], *, cafile=None, capath=None)
  url:    网址字符串或Request对象
  data:   通常为http的POST数据
  timeout:   超时秒数(只用于http,https,ftp)
  返回的对象类似文件对象，
  支持迭代操作(可使用for x in urlopen(..)),可分段读取陆续收到的数据
  通常支持http重定向,ftp,file等常用处理(默认为build_opener)
  可使用install_opener来设定可处理的行为
+-*/+-*/+-*/+-*/+-*/geturl m 返回网址
+-*/+-*/+-*/+-*/+-*/info m 返回回应的HTTPMessage对象
+-*/+-*/+-*/+-*/getproxies f 由系统获取代理设定
getproxies()
  返回字典,键名如'http'或'ftp',键值为uri地址
+-*/+-*/+-*/+-*/urlretrieve f 获取网络资源存成文件
urlretrieve(url, filename=None, reporthook=None, data=None)
  url:           url地址
  filename:      保存数据的文件名(未给出将自动生成)
  data:          通常为http的POST数据
  reporthook:    回调函数,func(count,size,total)
                 count已下载次数,size每次下载的大小,total需要下载的总大小
  返回(保存数据的文件名,HTTPMessage对象)二元组,如不是http网址,第二项为None
  和urlopen不同的是这个是由FancyURLopener来管理的
  支持的处理不多但速度较快，还支持缓冲避免重复下载
  可使用urlcleanup来清除缓存
+-*/+-*/+-*/+-*/pathname2url f 将本地路径转换为url
pathname2url(path)
  path:   文件或目录路径(应使用字节字符串)
  对于':'或中文等字符会编码为%形式
+-*/+-*/+-*/+-*/urlcleanup f 清除缓存(用于urlretrieve)
+-*/+-*/+-*/+-*/install_opener f 设置urlopen所使用的客户端
install_opener(opener)
  opener:   OpenerDirector实例,通常由build_opener创建
+-*/+-*/+-*/+-*/url2pathname f 将url形式的路径转换为本地路径
url2pathname(path)
  path:   url形式的路径(通常%格式)
+-*/+-*/+-*/+-*/URLopener c 创建获取网络资源的简易接收器
URLopener(proxies=None, **x509)
  proxies:   为代理服务字典,键名为协议名称,键值为网址
  key_file:  PEM格式的私有密钥文件(用于https)
  cert_file: 证书文件(用于https)
  仅支持http,ftp,file的简单获取,如服务器返回错误码将抛出IOError异常
+-*/+-*/+-*/+-*/+-*/open m 打开网址
open(fullurl, data=None)
  fullurl:   url地址
  data:      通常为http的POST数据
  返回带geturl和info方法的文件对象
+-*/+-*/+-*/+-*/+-*/retrieve m 获取网络资源存成文件
retrieve(url, filename=None, reporthook=None, data=None)
  url:           url地址
  filename:      保存数据的文件名(未给出将自动生成)
  data:          通常为http的POST数据
  reporthook:    回调函数,func(count,size,total)
                 count已下载次数,size每次下载的大小,total需要下载的总大小
  返回(保存数据的文件名,HTTPMessage对象)二元组,如不是http网址,第二项为None
+-*/+-*/+-*/+-*/+-*/FancyURLopener c 
FancyURLopener(...)
支持301, 302, 303, 307自动重定位和401，407的简单身份验证.
+-*/+-*/+-*/+-*/+-*/+-*/prompt_user_passwd m 在终端提示用户输入用户名和密码(可自定义)
prompt_user_passwd(host, realm)
  host:    网址
  realm:   关联名称
  应返回(用户名,密码)二元组
+-*/+-*/+-*/+-*/ProxyHandler c 代理服务处理器
ProxyHandler(proxies=None)
  proxies:   为字典,键名为'http'或'ftp',键值为uri地址
             要禁止使用代理可将proxies设为{}

  proxy_support = ProxyHandler({"http" : "http://ahad-haam:3128"})
+-*/+-*/+-*/+-*/BaseHandler c 处理器基类
BaseHandler()
  处理器可以根据需求改变url请求的内容或改变结果的内容
  对于http协议可以根据返回码编写特定的http_error_nnn
+-*/+-*/+-*/+-*/+-*/parent d 所在的OpenerDirector管理对象
+-*/+-*/+-*/+-*/+-*/protocol_request m 协议请求的处理(自定义)
protocol_request(req)
  req:   Request对象
  如http_request,应返回处理过的Request对象
+-*/+-*/+-*/+-*/+-*/http_error_default m http错误的默认处理方式
http_error_default(req, fp, code, msg, hdrs)
  由HTTPDefaultErrorHandler实现
+-*/+-*/+-*/+-*/+-*/unknown_open m 未知协议的处理
unknown_open(req)
+-*/+-*/+-*/+-*/+-*/add_parent m 指定所在的OpenerDirector管理对象
add_parent(director)
  通常由OpenerDirector管理对象调用
+-*/+-*/+-*/+-*/+-*/protocol_response m 对结果的处理(自定义)
protocol_response(req, response)
  req:       Request对象
  response:  带info和geturl方法的类文件对象
  如HTTPErrorProcessor实现了http_response,将处理转向http_error_nnn
  应返回带info和geturl方法的类文件对象,或抛出URLError
+-*/+-*/+-*/+-*/+-*/protocol_open m 获取内容的处理(自定义)
protocol_open(req)
  req:   Request对象
  如ftp_open,应返回带info和geturl方法的类文件对象,或抛出URLError
+-*/+-*/+-*/+-*/+-*/protocol_error m 出错时的处理(自定义)
protocol_error(*args)
  如ftp_error
+-*/+-*/+-*/+-*/+-*/http_error_nnn m http指定返回码的处理方式(自定义)
http_error_nnn(req, fp, code, msg, hdrs)
  HTTPRedirectHandler实现了301,302,303,307
  身份验证处理器实现了401,407
  应返回带info和geturl方法的类文件对象,或抛出URLError
+-*/+-*/+-*/+-*/+-*/close m 移除管理对象
+-*/+-*/+-*/+-*/+-*/default_open m 默认处理方式(自定义)
default_open(req)
  在按协议打开之前的处理,可返回带info和geturl方法的类文件对象类文件对象
  或抛出URLError,如有返回对象则不再作协议打开处理
+-*/+-*/+-*/+-*/HTTPRedirectHandler c HTTP自动重定位处理器
HTTPRedirectHandler()
处理301,302,303,307错误,自动重新获取转向网页
+-*/+-*/+-*/+-*/AbstractBasicAuthHandler c 简易验证器基类
AbstractBasicAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
+-*/+-*/+-*/+-*/HTTPHandler c HTTP处理器
+-*/+-*/+-*/+-*/FileHandler c 本地文件处理器
可处理file://xxxx的url(只能是文件不能是目录)
+-*/+-*/+-*/+-*/HTTPPasswordMgr c HTTP密码管理器
HTTPPasswordMgr()
主要用于HTTPBasicAuthHandler,HTTPDigestAuthHandler
ProxyDigestAuthHandler,ProxyBasicAuthHandler
+-*/+-*/+-*/+-*/+-*/find_user_password m 根据地址查找相应的身份验证信息
find_user_password(realm, authuri)
  通常由用户验证处理器如HTTPBasicAuthHandler等调用
  返回(None,None)表示未找到
+-*/+-*/+-*/+-*/+-*/add_password m 添加身份验证信息
add_password(realm, uri, user, passwd)
  realm:   验证关联名称(不使用的话最好使用HTTPPasswordMgrWithDefaultRealm)
  uri:     可以是单个uri地址也可以是多个uri地址的列表
  user,passwd:  用户名和密码

authinfo.add_password(realm='PDQ Application',
                      uri='https://mahler:8092/site-updates.py',
                      user='klem',
                      passwd='geheim$parole')
+-*/+-*/+-*/+-*/+-*/HTTPPasswordMgrWithDefaultRealm c 
HTTPPasswordMgrWithDefaultRealm()
  使用add_password时realm参数为None即为添加默认身份验证,只考虑uri是否相符
+-*/+-*/+-*/+-*/HTTPDefaultErrorHandler c HTTP错误默认处理器
HTTPDefaultErrorHandler()
  对于未处理的HTTP返回码(如404等)按抛出HTTPError异常处理
+-*/+-*/+-*/+-*/HTTPSHandler c HTTPS处理器
HTTPSHandler(debuglevel=0, context=None, check_hostname=None)
  context:   ssl.SSLContext对象
+-*/+-*/+-*/+-*/FTPHandler c FTP处理器
可处理ftp://user:pass@host/path/filename的url
对于目录返回目录列表内容,对于文件返回文件内容
+-*/+-*/+-*/+-*/+-*/CacheFTPHandler c 带缓冲的FTP处理器
+-*/+-*/+-*/+-*/+-*/+-*/setTimeout m 设置缓冲的存活时长
setTimeout(t)
  t:    秒数(默认60)
+-*/+-*/+-*/+-*/+-*/+-*/setMaxConns m 设置缓冲的数目
setMaxConns(m)
  m:    默认16
+-*/+-*/+-*/+-*/HTTPErrorProcessor c HTTP返回非2xx时的错误分配处理器
处理HTTP必装的处理器,是很多其他HTTP辅助处理器不可缺少的部分
+-*/+-*/+-*/+-*/ProxyDigestAuthHandler c 代理服务的数字身份验证处理器
ProxyDigestAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理407错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/+-*/AbstractDigestAuthHandler c 数字验证器基类
AbstractDigestAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
+-*/+-*/+-*/+-*/Request c 创建请求对象用于urlopen
Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False)
  url:     URL地址字符串
  data:    数据字节字符串，如给出HTTP的请求方式将从'GET'变为'POST'
  headers: 头部项目字典,键值需注意大小写
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Cookie'              cookie            'xxx=xx;xxx=xx;'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
+-*/+-*/+-*/+-*/+-*/type d 协议,通常为'http'
+-*/+-*/+-*/+-*/+-*/selector d 路径(url里服务器地址后面的部分)
+-*/+-*/+-*/+-*/+-*/host d 主机字符串(有时可能含:端口号)
+-*/+-*/+-*/+-*/+-*/unverifiable d 
TODO:
unverifiable

boolean, indicates whether the request is unverifiable as defined
by RFC 2965.


+-*/+-*/+-*/+-*/+-*/origin_req_host d 
origin_req_host

The original host for the request, without port.


+-*/+-*/+-*/+-*/+-*/data d 需传送的数据内容(POST)
+-*/+-*/+-*/+-*/+-*/full_url d 完整的url字符串
+-*/+-*/+-*/+-*/+-*/set_proxy m 
set_proxy(host, type)

Prepare the request by connecting to a proxy server. The *host* and *type* will
replace those of the instance, and the instance's selector will be the original
URL given in the constructor.



+-*/+-*/+-*/+-*/+-*/add_unredirected_header m 添加http(重定向时无效的)头部字段
add_unredirected_header(key, val)
  key:    头部字段标识(注意分大小写)(如已有重复的将替换)
  val:    内容(不能含有'\r'或'\n')
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Cookie'              cookie            'xxx=xx;xxx=xx;'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
+-*/+-*/+-*/+-*/+-*/is_unverifiable m 
is_unverifiable()

Return whether the request is unverifiable, as defined by RFC 2965. See the
documentation for the :class:`Request` constructor.



+-*/+-*/+-*/+-*/+-*/get_data m 返回POST需传送的内容数据字节字符串
+-*/+-*/+-*/+-*/+-*/add_data m 变更需传送的数据内容(POST)
add_data(data)
  data:    数据字节字符串，HTTP的请求方式变为'POST'
  对于application/x-www-form-urlencoded类型,通常使用urlencode生成内容
  对于multipart/form-data类型(常用于上传文件),分行使用'\r\n'
  boundary=---xxxx里的'---xxxx'为分隔符,应保证不会出现在要分隔的数据里
  分隔符出现在内容的开头和中间、结尾,结尾分隔符前后要加'--',其它的要前置'--'
  示例:
--分隔符\r\n
Content-Disposition: form-data; name="..." \r\n\r\n(两个用于分隔头和内容)
...form表单里非文件的值内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..."; filename="..." \r\n
Content-Type: .... \r\n
Content-Transfer-Encoding: binary(或base64,通常可省略此行)\r\n\r\n 
...文件内容...\r\n
--分隔符\r\n
Content-Disposition: form-data; name="..一次选择多个文件.." \r\n
Content-Type: multipart/mixed; boundary=新分隔符\r\n\r\n
--新分隔符\r\n
Content-Disposition: file; filename="通常用encode_rfc2231编码" \r\n
Content-Type: .... \r\n\r\n
...文件内容...\r\n
--新分隔符--\r\n
--分隔符--\r\n(结尾的\r\n不能少)
+-*/+-*/+-*/+-*/+-*/get_full_url m 返回完整的url字符串
+-*/+-*/+-*/+-*/+-*/add_header m 添加http头部字段(重定向时也有效)
add_header(key, val)
  key:    头部字段标识(注意分大小写)(如已有重复的将替换)
  val:    内容(不能含有'\r'或'\n')
'User-Agent'          浏览器类型        'Mozilla/5.0 (Linux; X11)'
'Referer'             引用网址          'http://.....'
'Cookie'              cookie            'xxx=xx;xxx=xx;'
'Range'               断点续传          'bytes=3-9' 'bytes=3-'(三字节之后的)
'Content-Type'        内容的mime类型    'application/x-www-form-urlencoded'
                      'multipart/form-data; boundary=-----xxxxx'(常用于POST方式)
'If-Match'            etag须匹配        '"xx..xx"' 这里主要用于断点续传
'If-None-Match'       etag不匹配有效    匹配时返回304 '"xxx..xxx"'(注意带双引号)
'If-Modified-Since'   指定时间之后      无改变返回304
                      有改变才有效      由email.utils.formatdate(usegmt=True)生成
+-*/+-*/+-*/+-*/+-*/get_type m 返回协议字符串,通常为'http'
+-*/+-*/+-*/+-*/+-*/get_selector m  返回路径(url里服务器地址后面的部分)
+-*/+-*/+-*/+-*/+-*/get_host m 返回主机字符串(有时可能含:端口号)
+-*/+-*/+-*/+-*/+-*/has_header m 检查是否包含某个http头部字段 
has_header(header)
  header:    头部字段标识(注意分大小写)
  重定向有效无效的都检查，如有则返回True
+-*/+-*/+-*/+-*/+-*/get_origin_req_host m 
get_origin_req_host()

Return the request-host of the origin transaction, as defined by :rfc:`2965`.
See the documentation for the :class:`Request` constructor.



+-*/+-*/+-*/+-*/+-*/get_method m 返回请求模式('GET'或'POST')(只用于HTTP)
+-*/+-*/+-*/+-*/+-*/has_data m 是否有内容数据
+-*/+-*/+-*/+-*/OpenerDirector c 创建网络资源客户端
OpenerDirector()
  类似浏览器，通过安装不同插件来实现获取网络资源的客户端
+-*/+-*/+-*/+-*/+-*/add_handler m 添加处理器
add_handler(handler)
  handler:   BaseHandler子类生成的实例
+-*/+-*/+-*/+-*/+-*/open m 打开网址
open(url, data=None[, timeout])
  url:    网址字符串或Request对象
  data:   通常为http的POST数据
  timeout:   超时秒数(只用于http,https,ftp)
  返回带geturl和info方法的文件对象
+-*/+-*/+-*/+-*/HTTPBasicAuthHandler c HTTP简易身份验证处理器
HTTPBasicAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理401错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/+-*/HTTPCookieProcessor c cookie处理器
HTTPCookieProcessor(cookiejar=None)
  cookiejar:   可指定CookieJar对象,通常如需要保存可使用MozillaCookieJar
  在每次页面请求等操作时自动记录或发送cookie
+-*/+-*/+-*/+-*/+-*/cookiejar d 存放cookie记录的CookieJar对象
+-*/+-*/+-*/+-*/UnknownHandler c 未知协议处理器
UnknownHandler()
  默认对于未识别的协议抛出URLError
+-*/+-*/+-*/+-*/ProxyBasicAuthHandler c 代理服务的简易身份验证处理器
ProxyBasicAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理407错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/+-*/HTTPDigestAuthHandler c HTTP数字身份验证处理器
HTTPDigestAuthHandler(password_mgr=None)
  password_mgr:   默认为HTTPPasswordMgr
  通常创建对象后用add_password来添加可能会用到的用户身份验证信息
  主要用于处理401错误,自动加入身份验证重新获取网页
+-*/+-*/+-*/robotparser p robots.txt分析模块(python3)
+-*/+-*/+-*/+-*/RobotFileParser c 创建robots.txt文件分析器
RobotFileParser(url='')
  url:     robots.txt的url地址
+-*/+-*/+-*/+-*/+-*/can_fetch m 检测网页是否允许被抓取
can_fetch(useragent, url)
  useragent:   网页爬虫名称,通常使用'*'(baidu为'Baiduspider',google为'Goolebot')
  url:         网址
  通常要在read或parse之后才能作此检测
+-*/+-*/+-*/+-*/+-*/read m 获取robots内容并分析
+-*/+-*/+-*/+-*/+-*/modified m 设置最后获取时间为当前时间
+-*/+-*/+-*/+-*/+-*/parse m 分析robots行文本列表
parse(lines)
  lines:    行文本列表
+-*/+-*/+-*/+-*/+-*/set_url m 设置要分析的robots文件地址
set_url(url)
  url:     robots.txt的url地址
+-*/+-*/+-*/+-*/+-*/mtime m 返回最后获取时间浮点秒数
+-*/+-*/uuid p 128位全局唯一标识符UUID模块
+-*/+-*/+-*/uuid4 f 由随机数生成UUID对象
+-*/+-*/+-*/uuid5 f 由名称sha1值生成的UUID对象
uuid5(namespace, name)
  namespace:   NAMESPACE_DNS,NAMESPACE_OID,NAMESPACE_URL
  name:        对应的应使用域名,OID对象标识,网址字符串
  域名,OID,网址都是全球唯一的,同名生成的uuid都相同,不同名生成的都不相同
+-*/+-*/+-*/uuid1 f 由网络地址当前时间生成UUID对象
uuid1(node=None, clock_seq=None)
  node:       48位整数,未给出则使用网卡地址代替
  clock_seq:  14位整数,未给出则使用随机数
+-*/+-*/+-*/uuid3 f 由名称md5值生成的UUID对象
uuid3(namespace, name)
  namespace:   NAMESPACE_DNS,NAMESPACE_OID,NAMESPACE_URL
  name:        对应的应使用域名,OID对象标识,网址字符串
  域名,OID,网址都是全球唯一的,同名生成的uuid都相同,不同名生成的都不相同
+-*/+-*/+-*/getnode f 返回硬件网卡地址48位整数(多个网卡返回任意一个)
+-*/+-*/+-*/RESERVED_FUTURE d 'Reserved for future definition'
+-*/+-*/+-*/RESERVED_MICROSOFT d 'Reserved for Microsoft compatibility'
+-*/+-*/+-*/RESERVED_NCS d 'Reserved for NCS compatibility'
+-*/+-*/+-*/NAMESPACE_DNS d 域名名称空间
+-*/+-*/+-*/RFC_4122 d 'Specifies in RFC 4122'
+-*/+-*/+-*/NAMESPACE_OID d OID(ISO注册对象标识)名称空间
诸如name.name.name.name.name形式的对象标识
+-*/+-*/+-*/NAMESPACE_URL d 网址名称空间
+-*/+-*/+-*/NAMESPACE_X500 d 
NAMESPACE_X500

When this namespace is specified, the *name* string is an X.500 DN in DER or a
text output format.


+-*/+-*/+-*/UUID c 128位(16字节)全局唯一标识符UUID对象
UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None)
  hex:   由十六进制字符串表示的uuid
         UUID('{12345678-1234-5678-1234-567812345678}')
         UUID('12345678123456781234567812345678')
         UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
  bytes:     16字节字符串(大端序)
(bytes =  '\x12\x34\x56\x78\x12\x34\x56\x78\x12\x34\x56\x78\x12\x34\x56\x78')
  bytes_le:  16字节字符串(小端序)(只有12345678-1234-5678前三段会分字节序)
(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56\x12\x34\x56\x78\x12\x34\x56\x78')
  fields:    (4时间低段,2时间中段,2时间高段,1随机高段,1随机低段,6网卡地址)六元组
         UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
  int:       128位整数
         UUID(int=0x12345678123456781234567812345678)
+-*/+-*/+-*/+-*/hex d 32字符的十六进制字符串
+-*/+-*/+-*/+-*/int d 128位整数值
+-*/+-*/+-*/+-*/time_low d 最前4字节的时间低段
+-*/+-*/+-*/+-*/time_mid d 2字节的时间中段(5分段的第二段)
+-*/+-*/+-*/+-*/time_hi_version d 2字节的时间高段(5分段的第三段)
+-*/+-*/+-*/+-*/clock_seq d 2字节的随机数(5分段的第四段)
+-*/+-*/+-*/+-*/node d 最后6字节的网卡地址
+-*/+-*/+-*/+-*/time d 最前60位的时间戳
+-*/+-*/+-*/+-*/urn d 
urn

The UUID as a URN as specified in RFC 4122.



+-*/+-*/+-*/+-*/bytes d 16字节字符串(大端序)(只有五分段的前三段会分字节序)
+-*/+-*/+-*/+-*/bytes_le d 16字节字符串(小端序)(只有五分段的前三段会分字节序)
+-*/+-*/+-*/+-*/version d 
version

The UUID version number (1 through 5, meaningful only when the variant is
:const:`RFC_4122`).


+-*/+-*/+-*/+-*/variant d 
variant
RESERVED_NCS,RFC_4122,RESERVED_MICROSOFT,RESERVED_FUTURE四值之一
+-*/+-*/webbrowser p 浏览器模块
+-*/+-*/+-*/open_new f 创建一个新的浏览器窗口并打开某个网页
open_new(url)
  url:    网址(如果是本地目录会启动文件浏览器)
+-*/+-*/+-*/open f 用浏览器打开地址,如果成功返回True
open(url, new=0, autoraise=True)
  url:    网址(如果是本地目录会启动文件浏览器)
  new:    0使用已开启的浏览器窗口,1使用新窗口,2使用新tab
  autoraise:  将打开的窗口激活到最前面
+-*/+-*/+-*/open_new_tab f 在已启动的浏览器里用新的标签页形式打开地址
open_new_tab(url)
  url:    网址(如果是本地目录会启动文件浏览器)
+-*/+-*/+-*/Error e 浏览器操作异常
+-*/+-*/wsgiref p WSGI模块
wsgi是一个web服务接口规范，其核心只是一个简单的函数调用
app(env,start_response)
env类似cgi所使用的环境变量,不过这里的env是python的dict字典,
除了cgi常用的环境变量,还有'wsgi.*'等键名,
app应用可通过env参数获取页面请求的数据以及其它的一些设置信息
start_response(status,headers)是一个函数,app应用通过这个函数来生成回应的HTTP报头
status是如'200 OK','404 Not Found'的回应码字符串
headers是列表,其元素为(name,value),如('Content-type','text/html')
app本身可以是一个函数,其返回的字节字符串列表即为HTTP回应的内容
也可以是一个可迭代生成字节数据流的迭代对象。

对于符合wsgi规范的服务模块,通过生成env和start_response参数来调用app应用
对于符合wsgi规范的中间件可以同样的形式来修改env或start_response和app返回的结果
对于符合wsgi规范的应用通常可使用下面的方式来获取表单数据
fields = cgi.FieldStorage(env['wsgi.input'],environ=env)
+-*/+-*/+-*/handlers p WSGI server/gateway base classes.
+-*/+-*/+-*/+-*/read_environ f 
read_environ()

Transcode CGI variables from ``os.environ`` to PEP 3333 "bytes in unicode"
strings, returning a new dictionary.  This function is used by
:class:`CGIHandler` and :class:`IISCGIHandler` in place of directly using
``os.environ``, which is not necessarily WSGI-compliant on all platforms
and web servers using Python 3 -- specifically, ones where the OS's
actual environment is Unicode (i.e. Windows), or ones where the environment
is bytes, but the system encoding used by Python to decode it is anything
other than ISO-8859-1 (e.g. Unix systems using UTF-8).

If you are implementing a CGI-based handler of your own, you probably want
to use this routine instead of just copying values out of ``os.environ``
directly.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/BaseCGIHandler c 
BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)

Similar to :class:`CGIHandler`, but instead of using the :mod:`sys` and
:mod:`os` modules, the CGI environment and I/O streams are specified explicitly.
The *multithread* and *multiprocess* values are used to set the
``wsgi.multithread`` and ``wsgi.multiprocess`` flags for any applications run by
the handler instance.

This class is a subclass of :class:`SimpleHandler` intended for use with
software other than HTTP "origin servers".  If you are writing a gateway
protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a
``Status:`` header to send an HTTP status, you probably want to subclass this
instead of :class:`SimpleHandler`.



+-*/+-*/+-*/+-*/IISCGIHandler c 
IISCGIHandler()

A specialized alternative to :class:`CGIHandler`, for use when deploying on
Microsoft's IIS web server, without having set the config allowPathInfo
option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).

By default, IIS gives a ``PATH_INFO`` that duplicates the ``SCRIPT_NAME`` at
the front, causing problems for WSGI applications that wish to implement
routing. This handler strips any such duplicated path.

IIS can be configured to pass the correct ``PATH_INFO``, but this causes
another bug where ``PATH_TRANSLATED`` is wrong. Luckily this variable is
rarely used and is not guaranteed by WSGI. On IIS<7, though, the
setting can only be made on a vhost level, affecting all other script
mappings, many of which break when exposed to the ``PATH_TRANSLATED`` bug.
For this reason IIS<7 is almost never deployed with the fix. (Even IIS7
rarely uses it because there is still no UI for it.)

There is no way for CGI code to tell whether the option was set, so a
separate handler class is provided.  It is used in the same way as
:class:`CGIHandler`, i.e., by calling ``IISCGIHandler().run(app)``, where
``app`` is the WSGI application object you wish to invoke.

.. versionadded:: 3.2



+-*/+-*/+-*/+-*/BaseHandler c 
BaseHandler()

This is an abstract base class for running WSGI applications.  Each instance
will handle a single HTTP request, although in principle you could create a
subclass that was reusable for multiple requests.

:class:`BaseHandler` instances have only one method intended for external use:



+-*/+-*/+-*/+-*/+-*/BaseHandler.wsgi_run_once d 
BaseHandler.wsgi_run_once

The value to be used for the ``wsgi.run_once`` environment variable.  It
defaults to false in :class:`BaseHandler`, but :class:`CGIHandler` sets it to
true by default.



+-*/+-*/+-*/+-*/+-*/BaseHandler.os_environ d 
BaseHandler.os_environ

The default environment variables to be included in every request's WSGI
environment.  By default, this is a copy of ``os.environ`` at the time that
:mod:`wsgiref.handlers` was imported, but subclasses can either create their own
at the class or instance level.  Note that the dictionary should be considered
read-only, since the default value is shared between multiple classes and
instances.



+-*/+-*/+-*/+-*/+-*/BaseHandler.error_headers d 
BaseHandler.error_headers

The HTTP headers used for error responses.  This should be a list of WSGI
response headers (``(name, value)`` tuples), as described in :pep:`3333`.  The
default list just sets the content type to ``text/plain``.



+-*/+-*/+-*/+-*/+-*/BaseHandler.origin_server d 
BaseHandler.origin_server

This attribute should be set to a true value if the handler's :meth:`_write` and
:meth:`_flush` are being used to communicate directly to the client, rather than
via a CGI-like gateway protocol that wants the HTTP status in a special
``Status:`` header.

This attribute's default value is true in :class:`BaseHandler`, but false in
:class:`BaseCGIHandler` and :class:`CGIHandler`.



+-*/+-*/+-*/+-*/+-*/BaseHandler.server_software d 
BaseHandler.server_software

If the :attr:`origin_server` attribute is set, this attribute's value is used to
set the default ``SERVER_SOFTWARE`` WSGI environment variable, and also to set a
default ``Server:`` header in HTTP responses.  It is ignored for handlers (such
as :class:`BaseCGIHandler` and :class:`CGIHandler`) that are not HTTP origin
servers.



+-*/+-*/+-*/+-*/+-*/BaseHandler.wsgi_multithread d 
BaseHandler.wsgi_multithread

The value to be used for the ``wsgi.multithread`` environment variable.  It
defaults to true in :class:`BaseHandler`, but may have a different default (or
be set by the constructor) in the other subclasses.



+-*/+-*/+-*/+-*/+-*/BaseHandler.http_version d 
BaseHandler.http_version

If :attr:`origin_server` is true, this string attribute is used to set the HTTP
version of the response set to the client.  It defaults to ``"1.0"``.




+-*/+-*/+-*/+-*/+-*/BaseHandler.wsgi_file_wrapper d 
BaseHandler.wsgi_file_wrapper

A ``wsgi.file_wrapper`` factory, or ``None``.  The default value of this
attribute is the :class:`wsgiref.util.FileWrapper` class.



+-*/+-*/+-*/+-*/+-*/BaseHandler.error_status d 
BaseHandler.error_status

The HTTP status used for error responses.  This should be a status string as
defined in :pep:`3333`; it defaults to a 500 code and message.



+-*/+-*/+-*/+-*/+-*/BaseHandler.traceback_limit d 
BaseHandler.traceback_limit

The maximum number of frames to include in tracebacks output by the default
:meth:`log_exception` method.  If ``None``, all frames are included.



+-*/+-*/+-*/+-*/+-*/BaseHandler.error_body d 
BaseHandler.error_body

The error response body.  This should be an HTTP response body bytestring. It
defaults to the plain text, "A server error occurred.  Please contact the
administrator."


+-*/+-*/+-*/+-*/+-*/BaseHandler.wsgi_multiprocess d 
BaseHandler.wsgi_multiprocess

The value to be used for the ``wsgi.multiprocess`` environment variable.  It
defaults to true in :class:`BaseHandler`, but may have a different default (or
be set by the constructor) in the other subclasses.



+-*/+-*/+-*/+-*/+-*/BaseHandler.get_scheme m 
BaseHandler.get_scheme()

Return the URL scheme being used for the current request.  The default
implementation uses the :func:`guess_scheme` function from :mod:`wsgiref.util`
to guess whether the scheme should be "http" or "https", based on the current
request's :attr:`environ` variables.



+-*/+-*/+-*/+-*/+-*/BaseHandler.setup_environ m 
BaseHandler.setup_environ()

Set the :attr:`environ` attribute to a fully-populated WSGI environment.  The
default implementation uses all of the above methods and attributes, plus the
:meth:`get_stdin`, :meth:`get_stderr`, and :meth:`add_cgi_vars` methods and the
:attr:`wsgi_file_wrapper` attribute.  It also inserts a ``SERVER_SOFTWARE`` key
if not present, as long as the :attr:`origin_server` attribute is a true value
and the :attr:`server_software` attribute is set.


+-*/+-*/+-*/+-*/+-*/BaseHandler._flush m 
BaseHandler._flush()

Force buffered data to be transmitted to the client.  It's okay if this method
is a no-op (i.e., if :meth:`_write` actually sends the data).



+-*/+-*/+-*/+-*/+-*/BaseHandler.log_exception m 
BaseHandler.log_exception(exc_info)

Log the *exc_info* tuple in the server log.  *exc_info* is a ``(type, value,
traceback)`` tuple.  The default implementation simply writes the traceback to
the request's ``wsgi.errors`` stream and flushes it.  Subclasses can override
this method to change the format or retarget the output, mail the traceback to
an administrator, or whatever other action may be deemed suitable.



+-*/+-*/+-*/+-*/+-*/BaseHandler.get_stderr m 
BaseHandler.get_stderr()

Return an output stream object suitable for use as the ``wsgi.errors`` of the
request currently being processed.



+-*/+-*/+-*/+-*/+-*/BaseHandler.error_output m 
BaseHandler.error_output(environ, start_response)

This method is a WSGI application to generate an error page for the user.  It is
only invoked if an error occurs before headers are sent to the client.

This method can access the current error information using ``sys.exc_info()``,
and should pass that information to *start_response* when calling it (as
described in the "Error Handling" section of :pep:`3333`).

The default implementation just uses the :attr:`error_status`,
:attr:`error_headers`, and :attr:`error_body` attributes to generate an output
page.  Subclasses can override this to produce more dynamic error output.

Note, however, that it's not recommended from a security perspective to spit out
diagnostics to any old user; ideally, you should have to do something special to
enable diagnostic output, which is why the default implementation doesn't
include any.



+-*/+-*/+-*/+-*/+-*/BaseHandler.add_cgi_vars m 
BaseHandler.add_cgi_vars()

Insert CGI variables for the current request into the :attr:`environ` attribute.


+-*/+-*/+-*/+-*/+-*/BaseHandler.sendfile m 
BaseHandler.sendfile()

Override to implement platform-specific file transmission.  This method is
called only if the application's return value is an instance of the class
specified by the :attr:`wsgi_file_wrapper` attribute.  It should return a true
value if it was able to successfully transmit the file, so that the default
transmission code will not be executed. The default implementation of this
method just returns a false value.


+-*/+-*/+-*/+-*/+-*/BaseHandler.run m 
BaseHandler.run(app)

Run the specified WSGI application, *app*.


+-*/+-*/+-*/+-*/+-*/BaseHandler.get_stdin m 
BaseHandler.get_stdin()

Return an input stream object suitable for use as the ``wsgi.input`` of the
request currently being processed.



+-*/+-*/+-*/+-*/+-*/BaseHandler._write m 
BaseHandler._write(data)

Buffer the bytes *data* for transmission to the client.  It's okay if this
method actually transmits the data; :class:`BaseHandler` just separates write
and flush operations for greater efficiency when the underlying system actually
has such a distinction.



+-*/+-*/+-*/+-*/SimpleHandler c 
SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)

Similar to :class:`BaseCGIHandler`, but designed for use with HTTP origin
servers.  If you are writing an HTTP server implementation, you will probably
want to subclass this instead of :class:`BaseCGIHandler`

This class is a subclass of :class:`BaseHandler`.  It overrides the
:meth:`__init__`, :meth:`get_stdin`, :meth:`get_stderr`, :meth:`add_cgi_vars`,
:meth:`_write`, and :meth:`_flush` methods to support explicitly setting the
environment and streams via the constructor.  The supplied environment and
streams are stored in the :attr:`stdin`, :attr:`stdout`, :attr:`stderr`, and
:attr:`environ` attributes.



+-*/+-*/+-*/+-*/CGIHandler c 
CGIHandler()

CGI-based invocation via ``sys.stdin``, ``sys.stdout``, ``sys.stderr`` and
``os.environ``.  This is useful when you have a WSGI application and want to run
it as a CGI script.  Simply invoke ``CGIHandler().run(app)``, where ``app`` is
the WSGI application object you wish to invoke.

This class is a subclass of :class:`BaseCGIHandler` that sets ``wsgi.run_once``
to true, ``wsgi.multithread`` to false, and ``wsgi.multiprocess`` to true, and
always uses :mod:`sys` and :mod:`os` to obtain the necessary CGI streams and
environment.



+-*/+-*/+-*/headers p WSGI response header tools.
+-*/+-*/+-*/+-*/Headers c 
Headers(headers)

Create a mapping-like object wrapping *headers*, which must be a list of header
name/value tuples as described in :pep:`3333`.

:class:`Headers` objects support typical mapping operations including
:meth:`__getitem__`, :meth:`get`, :meth:`__setitem__`, :meth:`setdefault`,
:meth:`__delitem__` and :meth:`__contains__`.  For each of
these methods, the key is the header name (treated case-insensitively), and the
value is the first value associated with that header name.  Setting a header
deletes any existing values for that header, then adds a new value at the end of
the wrapped header list.  Headers' existing order is generally maintained, with
new headers added to the end of the wrapped list.

Unlike a dictionary, :class:`Headers` objects do not raise an error when you try
to get or delete a key that isn't in the wrapped header list. Getting a
nonexistent header just returns ``None``, and deleting a nonexistent header does
nothing.

:class:`Headers` objects also support :meth:`keys`, :meth:`values`, and
:meth:`items` methods.  The lists returned by :meth:`keys` and :meth:`items` can
include the same key more than once if there is a multi-valued header.  The
``len()`` of a :class:`Headers` object is the same as the length of its
:meth:`items`, which is the same as the length of the wrapped header list.  In
fact, the :meth:`items` method just returns a copy of the wrapped header list.

Calling ``bytes()`` on a :class:`Headers` object returns a formatted bytestring
suitable for transmission as HTTP response headers.  Each header is placed on a
line with its value, separated by a colon and a space. Each line is terminated
by a carriage return and line feed, and the bytestring is terminated with a
blank line.

In addition to their mapping interface and formatting features, :class:`Headers`
objects also have the following methods for querying and adding multi-valued
headers, and for adding headers with MIME parameters:



+-*/+-*/+-*/+-*/+-*/Headers.get_all m 
Headers.get_all(name)

Return a list of all the values for the named header.

The returned list will be sorted in the order they appeared in the original
header list or were added to this instance, and may contain duplicates.  Any
fields deleted and re-inserted are always appended to the header list.  If no
fields exist with the given name, returns an empty list.



+-*/+-*/+-*/+-*/+-*/Headers.add_header m 
Headers.add_header(name, value, **_params)

Add a (possibly multi-valued) header, with optional MIME parameters specified
via keyword arguments.

*name* is the header field to add.  Keyword arguments can be used to set MIME
parameters for the header field.  Each parameter must be a string or ``None``.
Underscores in parameter names are converted to dashes, since dashes are illegal
in Python identifiers, but many MIME parameter names include dashes.  If the
parameter value is a string, it is added to the header value parameters in the
form ``name="value"``. If it is ``None``, only the parameter name is added.
(This is used for MIME parameters without a value.)  Example usage::

   h.add_header('content-disposition', 'attachment', filename='bud.gif')

The above will add a header that looks like this::

   Content-Disposition: attachment; filename="bud.gif"




+-*/+-*/+-*/simple_server p 简易wsgi服务器模块
+-*/+-*/+-*/+-*/demo_app f wsgi应用范例
demo_app(environ, start_response)
  一个简单产生'Hello world!'页面的wsgi应用函数，可用于测试wsgi服务组件是否正常
+-*/+-*/+-*/+-*/make_server f 创建运行wsgi应用的http服务器
make_server(host, port, app, server_class=WSGIServer, 
            handler_class=WSGIRequestHandler)
  host:    ip地址,通常用''
  port:    端口整数
  app:     符合wsgi应用规范的函数(即app(environ, start_response))
  主要用于测试app,如
   from wsgiref.simple_server import make_server, demo_app
   httpd = make_server('', 8000, demo_app)
   print("Serving HTTP on port 8000...")
   # http服务一直运行可以处理多次页面请求
   httpd.serve_forever()
   # 以下方法用于只处理一次页面请求
   httpd.handle_request()
+-*/+-*/+-*/util p WSGI environment utilities.
+-*/+-*/+-*/+-*/setup_testing_defaults f 
setup_testing_defaults(environ)

Update *environ* with trivial defaults for testing purposes.

This routine adds various parameters required for WSGI, including ``HTTP_HOST``,
``SERVER_NAME``, ``SERVER_PORT``, ``REQUEST_METHOD``, ``SCRIPT_NAME``,
``PATH_INFO``, and all of the :pep:`3333`\ -defined ``wsgi.*`` variables.  It
only supplies default values, and does not replace any existing settings for
these variables.

This routine is intended to make it easier for unit tests of WSGI servers and
applications to set up dummy environments.  It should NOT be used by actual WSGI
servers or applications, since the data is fake!

Example usage::

   from wsgiref.util import setup_testing_defaults
   from wsgiref.simple_server import make_server

   # A relatively simple WSGI application. It's going to print out the
   # environment dictionary after being updated by setup_testing_defaults
   def simple_app(environ, start_response):
       setup_testing_defaults(environ)

       status = '200 OK'
       headers = [('Content-type', 'text/plain; charset=utf-8')]

       start_response(status, headers)

       ret = [("%s: %s\n" % (key, value)).encode("utf-8")
              for key, value in environ.items()]
       return ret

   httpd = make_server('', 8000, simple_app)
   print("Serving on port 8000...")
   httpd.serve_forever()



+-*/+-*/+-*/+-*/application_uri f 
application_uri(environ)

Similar to :func:`request_uri`, except that the ``PATH_INFO`` and
``QUERY_STRING`` variables are ignored.  The result is the base URI of the
application object addressed by the request.



+-*/+-*/+-*/+-*/guess_scheme f 
guess_scheme(environ)

Return a guess for whether ``wsgi.url_scheme`` should be "http" or "https", by
checking for a ``HTTPS`` environment variable in the *environ* dictionary.  The
return value is a string.

This function is useful when creating a gateway that wraps CGI or a CGI-like
protocol such as FastCGI.  Typically, servers providing such protocols will
include a ``HTTPS`` variable with a value of "1" "yes", or "on" when a request
is received via SSL.  So, this function returns "https" if such a value is
found, and "http" otherwise.



+-*/+-*/+-*/+-*/is_hop_by_hop f 
is_hop_by_hop(header_name)

Return true if 'header_name' is an HTTP/1.1 "Hop-by-Hop" header, as defined by
:rfc:`2616`.



+-*/+-*/+-*/+-*/shift_path_info f 
shift_path_info(environ)

Shift a single name from ``PATH_INFO`` to ``SCRIPT_NAME`` and return the name.
The *environ* dictionary is *modified* in-place; use a copy if you need to keep
the original ``PATH_INFO`` or ``SCRIPT_NAME`` intact.

If there are no remaining path segments in ``PATH_INFO``, ``None`` is returned.

Typically, this routine is used to process each portion of a request URI path,
for example to treat the path as a series of dictionary keys. This routine
modifies the passed-in environment to make it suitable for invoking another WSGI
application that is located at the target URI. For example, if there is a WSGI
application at ``/foo``, and the request URI path is ``/foo/bar/baz``, and the
WSGI application at ``/foo`` calls :func:`shift_path_info`, it will receive the
string "bar", and the environment will be updated to be suitable for passing to
a WSGI application at ``/foo/bar``.  That is, ``SCRIPT_NAME`` will change from
``/foo`` to ``/foo/bar``, and ``PATH_INFO`` will change from ``/bar/baz`` to
``/baz``.

When ``PATH_INFO`` is just a "/", this routine returns an empty string and
appends a trailing slash to ``SCRIPT_NAME``, even though empty path segments are
normally ignored, and ``SCRIPT_NAME`` doesn't normally end in a slash.  This is
intentional behavior, to ensure that an application can tell the difference
between URIs ending in ``/x`` from ones ending in ``/x/`` when using this
routine to do object traversal.



+-*/+-*/+-*/+-*/request_uri f 
request_uri(environ, include_query=True)

Return the full request URI, optionally including the query string, using the
algorithm found in the "URL Reconstruction" section of :pep:`3333`.  If
*include_query* is false, the query string is not included in the resulting URI.



+-*/+-*/+-*/+-*/FileWrapper c 
FileWrapper(filelike, blksize=8192)

A wrapper to convert a file-like object to an :term:`iterator`.  The resulting objects
support both :meth:`__getitem__` and :meth:`__iter__` iteration styles, for
compatibility with Python 2.1 and Jython. As the object is iterated over, the
optional *blksize* parameter will be repeatedly passed to the *filelike*
object's :meth:`read` method to obtain bytestrings to yield.  When :meth:`read`
returns an empty bytestring, iteration is ended and is not resumable.

If *filelike* has a :meth:`close` method, the returned object will also have a
:meth:`close` method, and it will invoke the *filelike* object's :meth:`close`
method when called.

Example usage::

   from io import StringIO
   from wsgiref.util import FileWrapper

   # We're using a StringIO-buffer for as the file-like object
   filelike = StringIO("This is an example file-like object"*10)
   wrapper = FileWrapper(filelike, blksize=5)

   for chunk in wrapper:
       print(chunk)




+-*/+-*/+-*/validate p WSGI应用检验模块
+-*/+-*/+-*/+-*/validator f wsgi应用检验包裹器
validator(application)
  类似中间件,包裹一个应用生成可检查错误抛出AssertionError的应用
   from wsgiref.validate import validator
   from wsgiref.simple_server import make_server

   def simple_app(environ, start_response):
       status = '200 OK' # HTTP Status
       headers = [('Content-type', 'text/plain')] # HTTP Headers
       start_response(status, headers)

       # 这里应该是[b"Hello World"]
       return b"Hello World"

   validator_app = validator(simple_app)
   httpd = make_server('', 8000, validator_app)
   print("Listening on port 8000....")
   httpd.serve_forever()
